KIDS Distribution saved on Apr 07, 2015@20:48:57
CAREWEB DISTRIBUTION (RPMS) 1.0
**KIDS**:CAREWEB DISTRIBUTION (RPMS) 1.0^RG UTILITIES 3.0^NETSERV CONNECTION MANAGER 1.0^NETSERV WEB SERVER 1.0^NETSERV RPC BROKER 1.0^NETSERV OAUTH2 SERVICE 1.0^SERIALIZATION FRAMEWORK 1.0^CAREWEB FRAMEWORK 1.0^CAREWEB CONTEXT 1.0^CAREWEB RPMS ENHANCEMENTS 1.0^

**INSTALL NAME**
CAREWEB DISTRIBUTION (RPMS) 1.0
"BLD",8495,0)
CAREWEB DISTRIBUTION (RPMS) 1.0^^1^3150407^n
"BLD",8495,6.3)
174
"BLD",8495,10,0)
^9.63^600^9
"BLD",8495,10,100,0)
RG UTILITIES 3.0^1
"BLD",8495,10,200,0)
NETSERV CONNECTION MANAGER 1.0^1
"BLD",8495,10,210,0)
NETSERV WEB SERVER 1.0^1
"BLD",8495,10,220,0)
NETSERV RPC BROKER 1.0^1
"BLD",8495,10,230,0)
NETSERV OAUTH2 SERVICE 1.0^1
"BLD",8495,10,300,0)
SERIALIZATION FRAMEWORK 1.0^1
"BLD",8495,10,400,0)
CAREWEB FRAMEWORK 1.0^1
"BLD",8495,10,500,0)
CAREWEB CONTEXT 1.0^1
"BLD",8495,10,600,0)
CAREWEB RPMS ENHANCEMENTS 1.0^1
"BLD",8495,10,"B","CAREWEB CONTEXT 1.0",500)

"BLD",8495,10,"B","CAREWEB FRAMEWORK 1.0",400)

"BLD",8495,10,"B","CAREWEB RPMS ENHANCEMENTS 1.0",600)

"BLD",8495,10,"B","NETSERV CONNECTION MANAGER 1.0",200)

"BLD",8495,10,"B","NETSERV OAUTH2 SERVICE 1.0",230)

"BLD",8495,10,"B","NETSERV RPC BROKER 1.0",220)

"BLD",8495,10,"B","NETSERV WEB SERVER 1.0",210)

"BLD",8495,10,"B","RG UTILITIES 3.0",100)

"BLD",8495,10,"B","SERIALIZATION FRAMEWORK 1.0",300)

"BLD",8495,"INIT")
SETLOGIN^RGCWFUTL
"BLD",8495,"KRN",0)
^9.67PA^8994^20
"BLD",8495,"KRN",.4,0)
.4
"BLD",8495,"KRN",.401,0)
.401
"BLD",8495,"KRN",.402,0)
.402
"BLD",8495,"KRN",.403,0)
.403
"BLD",8495,"KRN",.5,0)
.5
"BLD",8495,"KRN",.84,0)
.84
"BLD",8495,"KRN",3.6,0)
3.6
"BLD",8495,"KRN",3.8,0)
3.8
"BLD",8495,"KRN",9.2,0)
9.2
"BLD",8495,"KRN",9.8,0)
9.8
"BLD",8495,"KRN",19,0)
19
"BLD",8495,"KRN",19.1,0)
19.1
"BLD",8495,"KRN",101,0)
101
"BLD",8495,"KRN",409.61,0)
409.61
"BLD",8495,"KRN",771,0)
771
"BLD",8495,"KRN",779.2,0)
779.2
"BLD",8495,"KRN",870,0)
870
"BLD",8495,"KRN",8989.51,0)
8989.51
"BLD",8495,"KRN",8989.52,0)
8989.52
"BLD",8495,"KRN",8994,0)
8994
"BLD",8495,"KRN","B",.4,.4)

"BLD",8495,"KRN","B",.401,.401)

"BLD",8495,"KRN","B",.402,.402)

"BLD",8495,"KRN","B",.403,.403)

"BLD",8495,"KRN","B",.5,.5)

"BLD",8495,"KRN","B",.84,.84)

"BLD",8495,"KRN","B",3.6,3.6)

"BLD",8495,"KRN","B",3.8,3.8)

"BLD",8495,"KRN","B",9.2,9.2)

"BLD",8495,"KRN","B",9.8,9.8)

"BLD",8495,"KRN","B",19,19)

"BLD",8495,"KRN","B",19.1,19.1)

"BLD",8495,"KRN","B",101,101)

"BLD",8495,"KRN","B",409.61,409.61)

"BLD",8495,"KRN","B",771,771)

"BLD",8495,"KRN","B",779.2,779.2)

"BLD",8495,"KRN","B",870,870)

"BLD",8495,"KRN","B",8989.51,8989.51)

"BLD",8495,"KRN","B",8989.52,8989.52)

"BLD",8495,"KRN","B",8994,8994)

"INIT")
SETLOGIN^RGCWFUTL
"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","RGCWFUTL")
0^^B7711238
"RTN","RGCWFUTL",1,0)
RGCWFUTL ;RI/CBMI/DKM CareWeb Management Utilites;01-Apr-2015 14:05;DKM
"RTN","RGCWFUTL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 174
"RTN","RGCWFUTL",3,0)
 ; Initiate shutdown sequence for applications
"RTN","RGCWFUTL",4,0)
SHUTDOWN N DELAY,MSG
"RTN","RGCWFUTL",5,0)
 W !,"Initiate CareWeb Shutdown Sequence",!!
"RTN","RGCWFUTL",6,0)
 D SHOWSESS()
"RTN","RGCWFUTL",7,0)
 W:$$GETLOGIN'="" "Note: shutdown has already been initiated.",!!
"RTN","RGCWFUTL",8,0)
 F  D  Q:$D(DELAY)
"RTN","RGCWFUTL",9,0)
 .R !,"# of seconds till shutdown (30 minimum): ",DELAY:DTIME,!
"RTN","RGCWFUTL",10,0)
 .E  S DELAY=U
"RTN","RGCWFUTL",11,0)
 .S DELAY=$TR(DELAY," ")
"RTN","RGCWFUTL",12,0)
 .Q:DELAY[U
"RTN","RGCWFUTL",13,0)
 .I DELAY["?" D  Q
"RTN","RGCWFUTL",14,0)
 ..K DELAY
"RTN","RGCWFUTL",15,0)
 ..W "Enter number of seconds before shutdown.",!
"RTN","RGCWFUTL",16,0)
 ..W "To specify time in minutes, follow number with letter M.",!
"RTN","RGCWFUTL",17,0)
 .S:DELAY?1.N1(1"M",1"m") DELAY=DELAY*60
"RTN","RGCWFUTL",18,0)
 .S DELAY=DELAY\1
"RTN","RGCWFUTL",19,0)
 .K:DELAY<30 DELAY
"RTN","RGCWFUTL",20,0)
 Q:DELAY[U
"RTN","RGCWFUTL",21,0)
 Q:'$$ASK^RGUT("Do you really want to shut down CareWeb in "_DELAY_" seconds")
"RTN","RGCWFUTL",22,0)
 D SDINIT(.MSG,DELAY,1)
"RTN","RGCWFUTL",23,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",24,0)
 Q
"RTN","RGCWFUTL",25,0)
 ; Abort a shutdown sequence in progress
"RTN","RGCWFUTL",26,0)
ABORTSD N MSG
"RTN","RGCWFUTL",27,0)
 W !,"Abort CareWeb Shutdown and Enable Logins",!!
"RTN","RGCWFUTL",28,0)
 D SHOWSESS()
"RTN","RGCWFUTL",29,0)
 W:$$GETLOGIN="" "Note: a shutdown does not appear to be in progress.",!!
"RTN","RGCWFUTL",30,0)
 Q:'$$ASK^RGUT("Do you really want to abort any shutdowns in progress and enable logins")
"RTN","RGCWFUTL",31,0)
 D SDABORT(.MSG,1)
"RTN","RGCWFUTL",32,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",33,0)
 Q
"RTN","RGCWFUTL",34,0)
 ; RPC: Initiate shutdown
"RTN","RGCWFUTL",35,0)
SDINIT(DATA,DELAY,LOCK,USR) ;
"RTN","RGCWFUTL",36,0)
 S DELAY=DELAY\1
"RTN","RGCWFUTL",37,0)
 I DELAY<30 S DATA="Invalid value for shutdown delay." Q
"RTN","RGCWFUTL",38,0)
 D:$G(LOCK) SETLOGIN("Application is currently offline.  Please try later.")
"RTN","RGCWFUTL",39,0)
 D BRDCAST^RGNETBEV("DESKTOP.SHUTDOWN.START",DELAY*1000,.USR)
"RTN","RGCWFUTL",40,0)
 S DATA="Shutdown sequence initiated.  "_$$SDMSG
"RTN","RGCWFUTL",41,0)
 Q
"RTN","RGCWFUTL",42,0)
 ; RPC: Abort shutdown
"RTN","RGCWFUTL",43,0)
SDABORT(DATA,UNLOCK,USR) ;
"RTN","RGCWFUTL",44,0)
 D BRDCAST^RGNETBEV("DESKTOP.SHUTDOWN.ABORT","Application shutdown has been aborted.  You may continue.",.USR)
"RTN","RGCWFUTL",45,0)
 D:$G(UNLOCK) SETLOGIN()
"RTN","RGCWFUTL",46,0)
 S DATA="Shutdown sequence aborted.  "_$$SDMSG
"RTN","RGCWFUTL",47,0)
 Q
"RTN","RGCWFUTL",48,0)
 ; Login status message
"RTN","RGCWFUTL",49,0)
SDMSG() Q "Logins are "_$S($L($$GETLOGIN):"disabled.",1:"enabled.")
"RTN","RGCWFUTL",50,0)
 ; Get inhibit login message
"RTN","RGCWFUTL",51,0)
GETLOGIN() ;
"RTN","RGCWFUTL",52,0)
 Q $$OPTMSG^RGNETBUT("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",53,0)
 ; Set inhibit login message
"RTN","RGCWFUTL",54,0)
SETLOGIN(MSG) ;
"RTN","RGCWFUTL",55,0)
 D OPTMSG^RGNETBUT("RGCWF CAREWEB FRAMEWORK",$G(MSG))
"RTN","RGCWFUTL",56,0)
 Q
"RTN","RGCWFUTL",57,0)
 ; RPC: Get/set inhibit login message
"RTN","RGCWFUTL",58,0)
MSGLOGIN(DATA,MSG) ;
"RTN","RGCWFUTL",59,0)
 I '$D(MSG) S DATA=$$GETLOGIN
"RTN","RGCWFUTL",60,0)
 E  D SETLOGIN(MSG)
"RTN","RGCWFUTL",61,0)
 Q
"RTN","RGCWFUTL",62,0)
 ; Show active CareWeb sessions
"RTN","RGCWFUTL",63,0)
SHOWSESS() ;
"RTN","RGCWFUTL",64,0)
 N X
"RTN","RGCWFUTL",65,0)
 S X=$$SHOWSESS^RGNETBUT("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",66,0)
 Q:$Q X
"RTN","RGCWFUTL",67,0)
 Q
"VER")
8.0^22.0
**INSTALL NAME**
RG UTILITIES 3.0
"BLD",8503,0)
RG UTILITIES 3.0^RG UTILITIES^0^3150407^n
"BLD",8503,1,0)
^^3^3^3150202^^^
"BLD",8503,1,1,0)
This is the set of routines common to all modules occupying the RG namespace.  
"BLD",8503,1,2,0)
They perform generic functions.  
"BLD",8503,1,3,0)
 
"BLD",8503,4,0)
^9.64PA^^
"BLD",8503,6.3)
362
"BLD",8503,"ABNS",0)
^9.66A^1^1
"BLD",8503,"ABNS",1,0)
RG
"BLD",8503,"ABNS",1,1,0)
^9.661A^^
"BLD",8503,"ABNS","B","RG",1)

"BLD",8503,"ABPKG")
n^n
"BLD",8503,"INI")
PRE^RGUTINIT
"BLD",8503,"INIT")
POST^RGUTINIT
"BLD",8503,"KRN",0)
^9.67PA^771^18
"BLD",8503,"KRN",.4,0)
.4
"BLD",8503,"KRN",.4,"NM",0)
^9.68A^^
"BLD",8503,"KRN",.401,0)
.401
"BLD",8503,"KRN",.402,0)
.402
"BLD",8503,"KRN",.403,0)
.403
"BLD",8503,"KRN",.5,0)
.5
"BLD",8503,"KRN",.84,0)
.84
"BLD",8503,"KRN",3.6,0)
3.6
"BLD",8503,"KRN",3.8,0)
3.8
"BLD",8503,"KRN",9.2,0)
9.2
"BLD",8503,"KRN",9.8,0)
9.8
"BLD",8503,"KRN",9.8,"NM",0)
^9.68A^89^55
"BLD",8503,"KRN",9.8,"NM",18,0)
RGUT^^0^B43581627
"BLD",8503,"KRN",9.8,"NM",27,0)
RGUTSTX^^0^B17505727
"BLD",8503,"KRN",9.8,"NM",28,0)
RGUTSTX0^^0^B18234821
"BLD",8503,"KRN",9.8,"NM",29,0)
RGUTSTX1^^0^B20280544
"BLD",8503,"KRN",9.8,"NM",33,0)
RGUTALR^^0^B1374002
"BLD",8503,"KRN",9.8,"NM",34,0)
RGUTBIG^^0^B14812955
"BLD",8503,"KRN",9.8,"NM",35,0)
RGUTDAT^^0^B12924137
"BLD",8503,"KRN",9.8,"NM",36,0)
RGUTDIC^^0^B28066955
"BLD",8503,"KRN",9.8,"NM",37,0)
RGUTDT^^0^B4547736
"BLD",8503,"KRN",9.8,"NM",38,0)
RGUTEDT^^0^B45219659
"BLD",8503,"KRN",9.8,"NM",44,0)
RGUTIMP^^0^B10992396
"BLD",8503,"KRN",9.8,"NM",45,0)
RGUTIN^^1^
"BLD",8503,"KRN",9.8,"NM",46,0)
RGUTIN0^^0^B1098740
"BLD",8503,"KRN",9.8,"NM",47,0)
RGUTIN16^^0^B4411769
"BLD",8503,"KRN",9.8,"NM",48,0)
RGUTIN18^^0^B4789827
"BLD",8503,"KRN",9.8,"NM",49,0)
RGUTIN8^^0^B4269472
"BLD",8503,"KRN",9.8,"NM",50,0)
RGUTLK2^^0^B49012377
"BLD",8503,"KRN",9.8,"NM",51,0)
RGUTLKP^^0^B26828890
"BLD",8503,"KRN",9.8,"NM",52,0)
RGUTMTL^^0^B13569820
"BLD",8503,"KRN",9.8,"NM",53,0)
RGUTOS^^0^B7578051
"BLD",8503,"KRN",9.8,"NM",54,0)
RGUTOS1^^0^B9896056
"BLD",8503,"KRN",9.8,"NM",56,0)
RGUTRPC^^0^B16275171
"BLD",8503,"KRN",9.8,"NM",57,0)
RGUTTSK^^0^B998610
"BLD",8503,"KRN",9.8,"NM",58,0)
RGUTUSR^^0^B3790974
"BLD",8503,"KRN",9.8,"NM",59,0)
RGUTUU^^0^B1813543
"BLD",8503,"KRN",9.8,"NM",60,0)
RGUTINIT^^0^B6940463
"BLD",8503,"KRN",9.8,"NM",61,0)
RGUTHFS^^0^B5078426
"BLD",8503,"KRN",9.8,"NM",62,0)
RGUTDDR^^0^B59421017
"BLD",8503,"KRN",9.8,"NM",63,0)
RGUTRPRT^^0^B2852241
"BLD",8503,"KRN",9.8,"NM",64,0)
RGUTREG^^0^B709436
"BLD",8503,"KRN",9.8,"NM",65,0)
RGUTBC28^^0^B10811663
"BLD",8503,"KRN",9.8,"NM",66,0)
RGUTBC39^^0^B7717700
"BLD",8503,"KRN",9.8,"NM",67,0)
RGUTBCDA^^0^B8230455
"BLD",8503,"KRN",9.8,"NM",68,0)
RGUTIN8U^^1^
"BLD",8503,"KRN",9.8,"NM",69,0)
RGUTIN68^^0^B4748681
"BLD",8503,"KRN",9.8,"NM",70,0)
RGUTIN58^^0^B5722564
"BLD",8503,"KRN",9.8,"NM",71,0)
RGUT1^^0^B805876
"BLD",8503,"KRN",9.8,"NM",72,0)
RGUTNTEG^^0^B4457644
"BLD",8503,"KRN",9.8,"NM",73,0)
RGXY^^1^
"BLD",8503,"KRN",9.8,"NM",74,0)
RGZOSF^^1^
"BLD",8503,"KRN",9.8,"NM",75,0)
RGCVTDT^^1^
"BLD",8503,"KRN",9.8,"NM",76,0)
RGCVTUU^^1^
"BLD",8503,"KRN",9.8,"NM",77,0)
RGINIT^^1^
"BLD",8503,"KRN",9.8,"NM",78,0)
RGMSCALR^^1^
"BLD",8503,"KRN",9.8,"NM",79,0)
RGMSCDAT^^1^
"BLD",8503,"KRN",9.8,"NM",80,0)
RGMSCDIC^^1^
"BLD",8503,"KRN",9.8,"NM",81,0)
RGMSCEDT^^1^
"BLD",8503,"KRN",9.8,"NM",82,0)
RGMSCIMP^^1^
"BLD",8503,"KRN",9.8,"NM",83,0)
RGMSCLKP^^1^
"BLD",8503,"KRN",9.8,"NM",84,0)
RGMSCMTL^^1^
"BLD",8503,"KRN",9.8,"NM",85,0)
RGMSCTSK^^1^
"BLD",8503,"KRN",9.8,"NM",86,0)
RGMSCUSR^^1^
"BLD",8503,"KRN",9.8,"NM",87,0)
RGUTDATF^^0^B6379104
"BLD",8503,"KRN",9.8,"NM",88,0)
RGUTIN19^^0^B4603804
"BLD",8503,"KRN",9.8,"NM",89,0)
RGUTRTN^^0^B1253575
"BLD",8503,"KRN",9.8,"NM","B","RGCVTDT",75)

"BLD",8503,"KRN",9.8,"NM","B","RGCVTUU",76)

"BLD",8503,"KRN",9.8,"NM","B","RGINIT",77)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCALR",78)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCDAT",79)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCDIC",80)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCEDT",81)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCIMP",82)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCLKP",83)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCMTL",84)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCTSK",85)

"BLD",8503,"KRN",9.8,"NM","B","RGMSCUSR",86)

"BLD",8503,"KRN",9.8,"NM","B","RGUT",18)

"BLD",8503,"KRN",9.8,"NM","B","RGUT1",71)

"BLD",8503,"KRN",9.8,"NM","B","RGUTALR",33)

"BLD",8503,"KRN",9.8,"NM","B","RGUTBC28",65)

"BLD",8503,"KRN",9.8,"NM","B","RGUTBC39",66)

"BLD",8503,"KRN",9.8,"NM","B","RGUTBCDA",67)

"BLD",8503,"KRN",9.8,"NM","B","RGUTBIG",34)

"BLD",8503,"KRN",9.8,"NM","B","RGUTDAT",35)

"BLD",8503,"KRN",9.8,"NM","B","RGUTDATF",87)

"BLD",8503,"KRN",9.8,"NM","B","RGUTDDR",62)

"BLD",8503,"KRN",9.8,"NM","B","RGUTDIC",36)

"BLD",8503,"KRN",9.8,"NM","B","RGUTDT",37)

"BLD",8503,"KRN",9.8,"NM","B","RGUTEDT",38)

"BLD",8503,"KRN",9.8,"NM","B","RGUTHFS",61)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIMP",44)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN",45)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN0",46)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN16",47)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN18",48)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN19",88)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN58",70)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN68",69)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN8",49)

"BLD",8503,"KRN",9.8,"NM","B","RGUTIN8U",68)

"BLD",8503,"KRN",9.8,"NM","B","RGUTINIT",60)

"BLD",8503,"KRN",9.8,"NM","B","RGUTLK2",50)

"BLD",8503,"KRN",9.8,"NM","B","RGUTLKP",51)

"BLD",8503,"KRN",9.8,"NM","B","RGUTMTL",52)

"BLD",8503,"KRN",9.8,"NM","B","RGUTNTEG",72)

"BLD",8503,"KRN",9.8,"NM","B","RGUTOS",53)

"BLD",8503,"KRN",9.8,"NM","B","RGUTOS1",54)

"BLD",8503,"KRN",9.8,"NM","B","RGUTREG",64)

"BLD",8503,"KRN",9.8,"NM","B","RGUTRPC",56)

"BLD",8503,"KRN",9.8,"NM","B","RGUTRPRT",63)

"BLD",8503,"KRN",9.8,"NM","B","RGUTRTN",89)

"BLD",8503,"KRN",9.8,"NM","B","RGUTSTX",27)

"BLD",8503,"KRN",9.8,"NM","B","RGUTSTX0",28)

"BLD",8503,"KRN",9.8,"NM","B","RGUTSTX1",29)

"BLD",8503,"KRN",9.8,"NM","B","RGUTTSK",57)

"BLD",8503,"KRN",9.8,"NM","B","RGUTUSR",58)

"BLD",8503,"KRN",9.8,"NM","B","RGUTUU",59)

"BLD",8503,"KRN",9.8,"NM","B","RGXY",73)

"BLD",8503,"KRN",9.8,"NM","B","RGZOSF",74)

"BLD",8503,"KRN",19,0)
19
"BLD",8503,"KRN",19,"NM",0)
^9.68A^^0
"BLD",8503,"KRN",19.1,0)
19.1
"BLD",8503,"KRN",101,0)
101
"BLD",8503,"KRN",409.61,0)
409.61
"BLD",8503,"KRN",771,0)
771
"BLD",8503,"KRN",869.2,0)
869.2
"BLD",8503,"KRN",870,0)
870
"BLD",8503,"KRN",8994,0)
8994
"BLD",8503,"KRN",8994,"NM",0)
^9.68A^11^11
"BLD",8503,"KRN",8994,"NM",1,0)
RGUTRPC DIC^^0
"BLD",8503,"KRN",8994,"NM",2,0)
RGUTRPC FILENT^^0
"BLD",8503,"KRN",8994,"NM",3,0)
RGUTRPC FILNXT^^0
"BLD",8503,"KRN",8994,"NM",4,0)
RGUTRPC MSYNTAX^^0
"BLD",8503,"KRN",8994,"NM",5,0)
RGUTDDR GETDD^^0
"BLD",8503,"KRN",8994,"NM",6,0)
RGUTDDR LOCK^^0
"BLD",8503,"KRN",8994,"NM",7,0)
RGUTDDR MOVETO^^0
"BLD",8503,"KRN",8994,"NM",8,0)
RGUTRPC FILGET^^0
"BLD",8503,"KRN",8994,"NM",9,0)
RGUTDDR CVTPTR^^0
"BLD",8503,"KRN",8994,"NM",10,0)
RGUTRPC STRTODAT^^0
"BLD",8503,"KRN",8994,"NM",11,0)
RGUTDDR FIND^^0
"BLD",8503,"KRN",8994,"NM","B","RGUTDDR CVTPTR",9)

"BLD",8503,"KRN",8994,"NM","B","RGUTDDR FIND",11)

"BLD",8503,"KRN",8994,"NM","B","RGUTDDR GETDD",5)

"BLD",8503,"KRN",8994,"NM","B","RGUTDDR LOCK",6)

"BLD",8503,"KRN",8994,"NM","B","RGUTDDR MOVETO",7)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC DIC",1)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC FILENT",2)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC FILGET",8)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC FILNXT",3)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC MSYNTAX",4)

"BLD",8503,"KRN",8994,"NM","B","RGUTRPC STRTODAT",10)

"BLD",8503,"KRN","B",.4,.4)

"BLD",8503,"KRN","B",.401,.401)

"BLD",8503,"KRN","B",.402,.402)

"BLD",8503,"KRN","B",.403,.403)

"BLD",8503,"KRN","B",.5,.5)

"BLD",8503,"KRN","B",.84,.84)

"BLD",8503,"KRN","B",3.6,3.6)

"BLD",8503,"KRN","B",3.8,3.8)

"BLD",8503,"KRN","B",9.2,9.2)

"BLD",8503,"KRN","B",9.8,9.8)

"BLD",8503,"KRN","B",19,19)

"BLD",8503,"KRN","B",19.1,19.1)

"BLD",8503,"KRN","B",101,101)

"BLD",8503,"KRN","B",409.61,409.61)

"BLD",8503,"KRN","B",771,771)

"BLD",8503,"KRN","B",869.2,869.2)

"BLD",8503,"KRN","B",870,870)

"BLD",8503,"KRN","B",8994,8994)

"BLD",8503,"QUES",0)
^9.62^^
"BLD",8503,"REQB",0)
^9.611^^
"INI")
PRE^RGUTINIT
"INIT")
POST^RGUTINIT
"KRN",8994,2708,-1)
0^1
"KRN",8994,2708,0)
RGUTRPC DIC^DIC^RGUTRPC^2
"KRN",8994,2708,1,0)
^^1^1^3050820.204817
"KRN",8994,2708,1,1,0)
Encapsulates RGUTDIC call for broker.
"KRN",8994,2708,2,0)
^8994.02A^3^3
"KRN",8994,2708,2,1,0)
BOOKMARK^1^255^1^1
"KRN",8994,2708,2,2,0)
COMMAND^1^255^1^2
"KRN",8994,2708,2,3,0)
ARG^1^255^0^3
"KRN",8994,2708,2,"B","ARG",3)

"KRN",8994,2708,2,"B","BOOKMARK",1)

"KRN",8994,2708,2,"B","COMMAND",2)

"KRN",8994,2708,2,"PARAMSEQ",1,1)

"KRN",8994,2708,2,"PARAMSEQ",2,2)

"KRN",8994,2708,2,"PARAMSEQ",3,3)

"KRN",8994,2709,-1)
0^2
"KRN",8994,2709,0)
RGUTRPC FILENT^FILENT^RGUTRPC^4^^^^1
"KRN",8994,2709,1,0)
^8994.01^1^1^3000107^^^^
"KRN",8994,2709,1,1,0)
Returns list of entries in a file.
"KRN",8994,2709,2,0)
^8994.02A^1^1
"KRN",8994,2709,2,1,0)
FILE NUMBER^1^250^1^1
"KRN",8994,2709,2,"B","FILE NUMBER",1)

"KRN",8994,2709,2,"PARAMSEQ",1,1)

"KRN",8994,2710,-1)
0^4
"KRN",8994,2710,0)
RGUTRPC MSYNTAX^MSYNTAX^RGUTRPC^1
"KRN",8994,2710,1,0)
^8994.01^1^1^2970922.224252
"KRN",8994,2710,1,1,0)
Performs syntax check on line of M code.
"KRN",8994,2710,2,0)
^8994.02A^2^2
"KRN",8994,2710,2,1,0)
CODE^1^255^1^1
"KRN",8994,2710,2,2,0)
OPTION^1^255^0^2
"KRN",8994,2710,2,"B","CODE",1)

"KRN",8994,2710,2,"B","OPTION",2)

"KRN",8994,2710,2,"PARAMSEQ",1,1)

"KRN",8994,2710,2,"PARAMSEQ",2,2)

"KRN",8994,2711,-1)
0^3
"KRN",8994,2711,0)
RGUTRPC FILNXT^FILNXT^RGUTRPC^1
"KRN",8994,2711,2,0)
^8994.02A^2^2
"KRN",8994,2711,2,1,0)
FILE NUMBER^1^100^1^1
"KRN",8994,2711,2,2,0)
IEN^1^100^1^2
"KRN",8994,2711,2,"B","FILE NUMBER",1)

"KRN",8994,2711,2,"B","IEN",2)

"KRN",8994,2711,2,"PARAMSEQ",1,1)

"KRN",8994,2711,2,"PARAMSEQ",2,2)

"KRN",8994,2712,-1)
0^5
"KRN",8994,2712,0)
RGUTDDR GETDD^GETDD^RGUTDDR^4^^^^1
"KRN",8994,2713,-1)
0^6
"KRN",8994,2713,0)
RGUTDDR LOCK^LOCK^RGUTDDR^1
"KRN",8994,2714,-1)
0^7
"KRN",8994,2714,0)
RGUTDDR MOVETO^MOVETO^RGUTDDR^1
"KRN",8994,2715,-1)
0^8
"KRN",8994,2715,0)
RGUTRPC FILGET^FILGET^RGUTRPC^4^^^^1
"KRN",8994,2716,-1)
0^9
"KRN",8994,2716,0)
RGUTDDR CVTPTR^CVTPTR^RGUTDDR^1
"KRN",8994,2717,-1)
0^10
"KRN",8994,2717,0)
RGUTRPC STRTODAT^STRTODAT^RGUTRPC^1
"KRN",8994,2717,1,0)
^^1^1^3040313.081942
"KRN",8994,2717,1,1,0)
Converts a date in external format to internal FileMan date format.
"KRN",8994,2718,-1)
0^11
"KRN",8994,2718,0)
RGUTDDR FIND^FIND^RGUTDDR^4^^^^1
"MBREQ")
1
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",172,-1)
1^1
"PKG",172,0)
RG UTILITIES^RGUT^RUN TIME LIBRARY
"PKG",172,20,0)
^9.402P^^
"PKG",172,22,0)
^9.49I^1^1
"PKG",172,22,1,0)
3.0^3150407^3150202^1
"PKG",172,22,1,1,0)
^^3^3^3150407
"PKG",172,22,1,1,1,0)
This is the set of routines common to all modules occupying the RG namespace.  
"PKG",172,22,1,1,2,0)
They perform generic functions.  
"PKG",172,22,1,1,3,0)
 
"PKG",172,"DEV")
DOUG MARTIN
"PKG",172,"VERSION")
3.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
55
"RTN","RGCVTDT")
1^75
"RTN","RGCVTUU")
1^76
"RTN","RGINIT")
1^77
"RTN","RGMSCALR")
1^78
"RTN","RGMSCDAT")
1^79
"RTN","RGMSCDIC")
1^80
"RTN","RGMSCEDT")
1^81
"RTN","RGMSCIMP")
1^82
"RTN","RGMSCLKP")
1^83
"RTN","RGMSCMTL")
1^84
"RTN","RGMSCTSK")
1^85
"RTN","RGMSCUSR")
1^86
"RTN","RGUT")
0^18^B43581627
"RTN","RGUT",1,0)
RGUT ;RI/CBMI/DKM - General purpose utilities;01-Apr-2015 08:46;DKM
"RTN","RGUT",2,0)
 ;;3.0;RG UTILITIES;**1**;Mar 20, 2007;Build 362
"RTN","RGUT",3,0)
 ;;
"RTN","RGUT",4,0)
 ;=================================================================
"RTN","RGUT",5,0)
 ; Replaces delimited arguments in string, returning result
"RTN","RGUT",6,0)
MSG(%RGTXT,%RGDLM,%RGRPL) ;EP
"RTN","RGUT",7,0)
 N %RGZ1,%RGZ2
"RTN","RGUT",8,0)
 I $$NEWERR^%ZTER N $ET S $ET=""
"RTN","RGUT",9,0)
 S:$G(%RGDLM)="" %RGDLM="%"
"RTN","RGUT",10,0)
 S %RGZ2="",@$$TRAP^RGUTOS("M1^RGUT")
"RTN","RGUT",11,0)
 S:$G(%RGRPL,1) %RGTXT=$TR(%RGTXT,"~","^")
"RTN","RGUT",12,0)
 F  Q:%RGTXT=""  D
"RTN","RGUT",13,0)
 .S %RGZ2=%RGZ2_$P(%RGTXT,%RGDLM),%RGZ1=$P(%RGTXT,%RGDLM,2),%RGTXT=$P(%RGTXT,%RGDLM,3,999)
"RTN","RGUT",14,0)
 .I %RGZ1="" S:%RGTXT'="" %RGZ2=%RGZ2_%RGDLM
"RTN","RGUT",15,0)
 .E  X "S %RGZ2=%RGZ2_("_%RGZ1_")"
"RTN","RGUT",16,0)
M1 Q %RGZ2
"RTN","RGUT",17,0)
 ; Retrieve dialog text
"RTN","RGUT",18,0)
 ;  NUM = Dialog number
"RTN","RGUT",19,0)
 ; .DLG = Array to receive text
"RTN","RGUT",20,0)
 ;  Pn  = Optional parameters (up to 3)
"RTN","RGUT",21,0)
GETDLG(NUM,DLG,P1,P2,P3) ;
"RTN","RGUT",22,0)
 N PAR
"RTN","RGUT",23,0)
 K DLG
"RTN","RGUT",24,0)
 S PAR(1)=$G(P1),PAR(2)=$G(P2),PAR(3)=$G(P3)
"RTN","RGUT",25,0)
 D BLD^DIALOG(NUM,.PAR,,"DLG")
"RTN","RGUT",26,0)
 Q:$Q $G(DLG(1))
"RTN","RGUT",27,0)
 Q
"RTN","RGUT",28,0)
 ; Case-insensitive string comparison
"RTN","RGUT",29,0)
 ; Returns 0: X=Y, 1: X>Y, -1: X<Y
"RTN","RGUT",30,0)
STRICMP(X,Y) ;EP
"RTN","RGUT",31,0)
 S X=$$UP^XLFSTR(X),Y=$$UP^XLFSTR(Y)
"RTN","RGUT",32,0)
 Q $S(X=Y:0,X]]Y:1,1:-1)
"RTN","RGUT",33,0)
 ; Output an underline X bytes long
"RTN","RGUT",34,0)
UND(X) ;EP
"RTN","RGUT",35,0)
 Q $$REPEAT^XLFSTR("-",$G(X,$G(IOM,80)))
"RTN","RGUT",36,0)
 ; Truncate a string if > Y bytes long
"RTN","RGUT",37,0)
TRUNC(X,Y) ;EP
"RTN","RGUT",38,0)
 Q $S($L(X)'>Y:X,1:$E(X,1,Y-3)_"...")
"RTN","RGUT",39,0)
 ; Formatting for singular/plural
"RTN","RGUT",40,0)
SNGPLR(RGNUM,RGSNG,RGPLR) ;EP
"RTN","RGUT",41,0)
 N RGZ
"RTN","RGUT",42,0)
 S RGZ=RGSNG?.E1L.E,RGPLR=$G(RGPLR,RGSNG_$S(RGZ:"s",1:"S"))
"RTN","RGUT",43,0)
 Q $S('RGNUM:$S(RGZ:"no ",1:"NO ")_RGPLR,RGNUM=1:"1 "_RGSNG,1:RGNUM_" "_RGPLR)
"RTN","RGUT",44,0)
 ; Convert code to external form from set of codes
"RTN","RGUT",45,0)
SET(RGCODE,RGSET) ;EP
"RTN","RGUT",46,0)
 N RGZ,RGZ1
"RTN","RGUT",47,0)
 F RGZ=1:1:$L(RGSET,";") D  Q:RGZ1'=""
"RTN","RGUT",48,0)
 .S RGZ1=$P(RGSET,";",RGZ),RGZ1=$S($P(RGZ1,":")=RGCODE:$P(RGZ1,":",2),1:"")
"RTN","RGUT",49,0)
 Q RGZ1
"RTN","RGUT",50,0)
 ; Replace each occurrence of RGOLD in RGSTR with RGNEW
"RTN","RGUT",51,0)
SUBST(RGSTR,RGOLD,RGNEW) ;EP
"RTN","RGUT",52,0)
 N RGP,RGL1,RGL2
"RTN","RGUT",53,0)
 S RGNEW=$G(RGNEW),RGP=0,RGL1=$L(RGOLD),RGL2=$L(RGNEW)
"RTN","RGUT",54,0)
 F  S RGP=$F(RGSTR,RGOLD,RGP) Q:'RGP  D
"RTN","RGUT",55,0)
 .S RGSTR=$E(RGSTR,1,RGP-RGL1-1)_RGNEW_$E(RGSTR,RGP,9999)
"RTN","RGUT",56,0)
 .S RGP=RGP-RGL1+RGL2
"RTN","RGUT",57,0)
 Q RGSTR
"RTN","RGUT",58,0)
 ; Trim leading (Y=-1)/trailing (Y=1)/leading & trailing (Y=0) spaces
"RTN","RGUT",59,0)
TRIM(X,Y) ;EP
"RTN","RGUT",60,0)
 N RGZ1,RGZ2
"RTN","RGUT",61,0)
 S Y=+$G(Y),RGZ1=1,RGZ2=$L(X)
"RTN","RGUT",62,0)
 I Y'>0 F RGZ1=1:1 Q:$A(X,RGZ1)'=32
"RTN","RGUT",63,0)
 I Y'<0 F RGZ2=RGZ2:-1 Q:$A(X,RGZ2)'=32
"RTN","RGUT",64,0)
 Q $E(X,RGZ1,RGZ2)
"RTN","RGUT",65,0)
 ; Format a number with commas
"RTN","RGUT",66,0)
FMTNUM(RGNUM) ;EP
"RTN","RGUT",67,0)
 N RGZ,RGZ1,RGZ2,RGZ3
"RTN","RGUT",68,0)
 S:RGNUM<0 RGNUM=-RGNUM,RGZ2="-"
"RTN","RGUT",69,0)
 S RGZ3=RGNUM#1,RGNUM=RGNUM\1
"RTN","RGUT",70,0)
 F RGZ=$L(RGNUM):-3:1 S RGZ1=$E(RGNUM,RGZ-2,RGZ)_$S($D(RGZ1):","_RGZ1,1:"")
"RTN","RGUT",71,0)
 Q $G(RGZ2)_$G(RGZ1)_$S(RGZ3:RGZ3,1:"")
"RTN","RGUT",72,0)
 ; Return true if the result is numeric
"RTN","RGUT",73,0)
ISNUM(X) Q:X=+X 1
"RTN","RGUT",74,0)
 Q $L(X)&(X'=".")&(X?0.N0.1"."0.N)
"RTN","RGUT",75,0)
 ; Convert X to base Y padded to length L
"RTN","RGUT",76,0)
BASE(X,Y,L) ;EP
"RTN","RGUT",77,0)
 Q:(Y<2)!(Y>62) ""
"RTN","RGUT",78,0)
 N RGZ,RGZ1
"RTN","RGUT",79,0)
 S RGZ1="",X=$S(X<0:-X,1:X)
"RTN","RGUT",80,0)
 F  S RGZ=X#Y,X=X\Y,RGZ1=$C($S(RGZ<10:RGZ+48,RGZ<36:RGZ+55,1:RGZ+61))_RGZ1 Q:'X
"RTN","RGUT",81,0)
 Q $S('$G(L):RGZ1,1:$$REPEAT^XLFSTR(0,L-$L(RGZ1))_$E(RGZ1,1,L))
"RTN","RGUT",82,0)
 ; Convert a string to its SOUNDEX equivalent
"RTN","RGUT",83,0)
SOUNDEX(RGVALUE) ;EP
"RTN","RGUT",84,0)
 N RGCODE,RGSOUND,RGPREV,RGCHAR,RGPOS,RGTRANS
"RTN","RGUT",85,0)
 S RGCODE="01230129022455012623019202"
"RTN","RGUT",86,0)
 S RGSOUND=$C($A(RGVALUE)-(RGVALUE?1L.E*32))
"RTN","RGUT",87,0)
 S RGPREV=$E(RGCODE,$A(RGVALUE)-64)
"RTN","RGUT",88,0)
 F RGPOS=2:1 S RGCHAR=$E(RGVALUE,RGPOS) Q:","[RGCHAR  D  Q:$L(RGSOUND)=4
"RTN","RGUT",89,0)
 .Q:RGCHAR'?1A
"RTN","RGUT",90,0)
 .S RGTRANS=$E(RGCODE,$A(RGCHAR)-$S(RGCHAR?1U:64,1:96))
"RTN","RGUT",91,0)
 .Q:RGTRANS=RGPREV!(RGTRANS=9)
"RTN","RGUT",92,0)
 .S RGPREV=RGTRANS
"RTN","RGUT",93,0)
 .S:RGTRANS'=0 RGSOUND=RGSOUND_RGTRANS
"RTN","RGUT",94,0)
 Q $E(RGSOUND_"000",1,4)
"RTN","RGUT",95,0)
 ; Display formatted title
"RTN","RGUT",96,0)
TITLE(RGTTL,RGVER,RGFN) ;EP
"RTN","RGUT",97,0)
 I '$D(IOM) N IOM,IOF S IOM=80,IOF="#"
"RTN","RGUT",98,0)
 S RGVER=$G(RGVER,"1.0")
"RTN","RGUT",99,0)
 S:RGVER RGVER="Version "_RGVER
"RTN","RGUT",100,0)
 U $G(IO,$I)
"RTN","RGUT",101,0)
 W @IOF,$S(IO=IO(0):$C(27,91,55,109),1:""),*13,$$ENTRY^RGUTDT(+$H_","),?(IOM-$L(RGTTL)\2),RGTTL,?(IOM-$L(RGVER)),RGVER,!,$S(IO=IO(0):$C(27,91,109),1:$$UND),!
"RTN","RGUT",102,0)
 W:$D(RGFN) ?(IOM-$L(RGFN)\2),RGFN,!
"RTN","RGUT",103,0)
 Q
"RTN","RGUT",104,0)
 ; Display required header for menus
"RTN","RGUT",105,0)
MNUHDR(PKG,VER) ;EP
"RTN","RGUT",106,0)
 Q:$D(ZTQUEUED)
"RTN","RGUT",107,0)
 Q:$E($G(IOST),1,2)'="C-"
"RTN","RGUT",108,0)
 N X,%ZIS,IORVON,IORVOFF,MNU
"RTN","RGUT",109,0)
 S MNU=$P($G(XQY0),U,2),MNU(0)=$P($G(XQY0),U),VER=$G(VER)
"RTN","RGUT",110,0)
 S X=$$GETPKG($S($L($G(PKG)):PKG,1:MNU(0)))
"RTN","RGUT",111,0)
 I $L(X) D
"RTN","RGUT",112,0)
 .S PKG=$P(X,U,2),X=$P(X,U,3)
"RTN","RGUT",113,0)
 .I $L(X),'$L(VER) S VER=$$VERSION^XPDUTL(X)
"RTN","RGUT",114,0)
 S:VER VER="Version "_VER
"RTN","RGUT",115,0)
 S X="IORVON;IORVOFF"
"RTN","RGUT",116,0)
 D ENDR^%ZISS
"RTN","RGUT",117,0)
 U IO
"RTN","RGUT",118,0)
 W @IOF,IORVON,$$GET1^DIQ(4,DUZ(2),.01),?(IOM-$L(PKG)\2),PKG,?(IOM-$L(VER)),VER,!,IORVOFF,!?(IOM-$L(MNU)\2),MNU,!
"RTN","RGUT",119,0)
 Q
"RTN","RGUT",120,0)
 ; Execute menu action, preserving menu headers
"RTN","RGUT",121,0)
MNUEXEC(EXEC,PAUSE) ;EP
"RTN","RGUT",122,0)
 D MNUHDR()
"RTN","RGUT",123,0)
 X EXEC
"RTN","RGUT",124,0)
 R:$G(PAUSE)&'$D(ZTQUEUED) !,"Press ENTER or RETURN to continue...",PAUSE:$G(DTIME,300),!
"RTN","RGUT",125,0)
 Q
"RTN","RGUT",126,0)
 ; Action for editing parameters from menu
"RTN","RGUT",127,0)
MNUPARAM(PARAM) ;EP
"RTN","RGUT",128,0)
 D MNUEXEC("D EDITPAR^XPAREDIT($G(PARAM,$P(XQY0,U)))")
"RTN","RGUT",129,0)
 Q
"RTN","RGUT",130,0)
 ; Action for editing parameter template from menu
"RTN","RGUT",131,0)
MNUTEMPL(TMPL) ;EP
"RTN","RGUT",132,0)
 D MNUEXEC("D TEDH^XPAREDIT($G(TMPL,$P(XQY0,U)),""BA"")")
"RTN","RGUT",133,0)
 Q
"RTN","RGUT",134,0)
 ; Return package reference from namespace
"RTN","RGUT",135,0)
 ; Returns ien^pkg name^pkg namespace
"RTN","RGUT",136,0)
GETPKG(NAME) ;EP
"RTN","RGUT",137,0)
 N PKG,IEN
"RTN","RGUT",138,0)
 S PKG=NAME
"RTN","RGUT",139,0)
 F  S PKG=$O(^DIC(9.4,"C",PKG),-1) Q:$E(NAME,1,$L(PKG))=PKG
"RTN","RGUT",140,0)
 S IEN=$S($L(PKG):+$O(^DIC(9.4,"C",PKG,0)),1:0)
"RTN","RGUT",141,0)
 Q $S(IEN:IEN_U_$P(^DIC(9.4,IEN,0),U)_U_PKG,1:"")
"RTN","RGUT",142,0)
 ; Create a unique 8.3 filename
"RTN","RGUT",143,0)
UFN(Y) ;EP
"RTN","RGUT",144,0)
 N X
"RTN","RGUT",145,0)
 S Y=$E($G(Y),1,3),X=$$BASE($R(100)_$J_$TR($H,","),36,$S($L(Y):8,1:11))_Y
"RTN","RGUT",146,0)
 Q $E(X,1,8)_"."_$E(X,9,11)
"RTN","RGUT",147,0)
 ; Return formatted SSN
"RTN","RGUT",148,0)
SSN(X) ;EP
"RTN","RGUT",149,0)
 Q $S(X="":X,1:$E(X,1,3)_"-"_$E(X,4,5)_"-"_$E(X,6,12))
"RTN","RGUT",150,0)
 ; Performs security check on patient access
"RTN","RGUT",151,0)
DGSEC(Y) ;EP
"RTN","RGUT",152,0)
 N DIC
"RTN","RGUT",153,0)
 S DIC(0)="E"
"RTN","RGUT",154,0)
 D ^DGSEC
"RTN","RGUT",155,0)
 Q $S(Y<1:0,1:Y)
"RTN","RGUT",156,0)
 ; Displays spinning icon to indicate progress
"RTN","RGUT",157,0)
WORKING(RGST,RGP,RGS) ;EP
"RTN","RGUT",158,0)
 Q:'$D(IO(0))!$D(ZTQUEUED) 0
"RTN","RGUT",159,0)
 N RGZ
"RTN","RGUT",160,0)
 S RGZ(0)=$I,RGS=$G(RGS,"|/-\"),RGST=+$G(RGST)
"RTN","RGUT",161,0)
 S RGST=$S(RGST<0:0,1:RGST#$L(RGS)+1)
"RTN","RGUT",162,0)
 U IO(0)
"RTN","RGUT",163,0)
 W:'$G(RGP) *8,*$S(RGST:$A(RGS,RGST),1:32)
"RTN","RGUT",164,0)
 R *RGZ:0
"RTN","RGUT",165,0)
 U RGZ(0)
"RTN","RGUT",166,0)
 Q RGZ=94
"RTN","RGUT",167,0)
 ; Ask for Y/N response
"RTN","RGUT",168,0)
ASK(RGP,RGD,RGZ) ;EP
"RTN","RGUT",169,0)
 S RGD=$G(RGD,"N")
"RTN","RGUT",170,0)
 S RGZ=$$GETCH(RGP_"? ","YN",,,,RGD)
"RTN","RGUT",171,0)
 S:RGZ="" RGZ=$E(RGD)
"RTN","RGUT",172,0)
 W !
"RTN","RGUT",173,0)
 Q $S(RGZ[U:"",1:RGZ="Y")
"RTN","RGUT",174,0)
 ; Pause for user response
"RTN","RGUT",175,0)
PAUSE(RGP,RGX,RGY) ;EP
"RTN","RGUT",176,0)
 Q $$GETCH($G(RGP,"Press RETURN or ENTER to continue..."),U,.RGX,.RGY)
"RTN","RGUT",177,0)
 ; Single character read
"RTN","RGUT",178,0)
GETCH(RGP,RGV,RGX,RGY,RGT,RGD) ;EP
"RTN","RGUT",179,0)
 N RGZ,RGC
"RTN","RGUT",180,0)
 W:$D(RGX)!$D(RGY) $$XY($G(RGX,$X),$G(RGY,$Y))
"RTN","RGUT",181,0)
 W $G(RGP),$E($G(RGD)_" "),*8
"RTN","RGUT",182,0)
 S RGT=$G(RGT,$G(DTIME,999999)),RGD=$G(RGD,U),RGC=""
"RTN","RGUT",183,0)
 S:$D(RGV) RGV=$$UP^XLFSTR(RGV)_U
"RTN","RGUT",184,0)
 F  D  Q:'$L(RGZ)
"RTN","RGUT",185,0)
 .R RGZ#1:RGT
"RTN","RGUT",186,0)
 .E  S RGC=RGD Q
"RTN","RGUT",187,0)
 .W *8
"RTN","RGUT",188,0)
 .Q:'$L(RGZ)
"RTN","RGUT",189,0)
 .S RGZ=$$UP^XLFSTR(RGZ)
"RTN","RGUT",190,0)
 .I $D(RGV) D
"RTN","RGUT",191,0)
 ..I RGV[RGZ S RGC=RGZ
"RTN","RGUT",192,0)
 ..E  W *7,*32,*8 S RGC=""
"RTN","RGUT",193,0)
 .E  S RGC=RGZ
"RTN","RGUT",194,0)
 W !
"RTN","RGUT",195,0)
 Q RGC
"RTN","RGUT",196,0)
 ; Position cursor
"RTN","RGUT",197,0)
XY(DX,DY) ;EP
"RTN","RGUT",198,0)
 D:$G(IOXY)="" HOME^%ZIS
"RTN","RGUT",199,0)
 S DX=$S(+$G(DX)>0:+DX,1:0),DY=$S(+$G(DY)>0:+DY,1:0),$X=0
"RTN","RGUT",200,0)
 X IOXY
"RTN","RGUT",201,0)
 S $X=DX,$Y=DY
"RTN","RGUT",202,0)
 Q ""
"RTN","RGUT",203,0)
 ; Parameterized calls to date routines
"RTN","RGUT",204,0)
DT(RGD,RGX) ;EP
"RTN","RGUT",205,0)
 N %D,%P,%C,%H,%I,%X,%Y,RGZ
"RTN","RGUT",206,0)
 D DT^DILF($G(RGX),RGD,.RGZ)
"RTN","RGUT",207,0)
 W:$D(RGZ(0)) RGZ(0),!
"RTN","RGUT",208,0)
 Q $G(RGZ,-1)
"RTN","RGUT",209,0)
DTC(X1,X2) ;EP
"RTN","RGUT",210,0)
 N X3
"RTN","RGUT",211,0)
 S X2=$$DTF(X1)+X2,X1=X1\1,X3=X2\1,X2=X2-X3
"RTN","RGUT",212,0)
 S:X2<0 X3=X3-1,X2=X2+1
"RTN","RGUT",213,0)
 Q $$FMADD^XLFDT(X1,X3)+$J($$DTT(X2),0,6)
"RTN","RGUT",214,0)
DTD(X1,X2) ;EP
"RTN","RGUT",215,0)
 Q $$FMDIFF^XLFDT(X1\1,X2\1)+($$DTF(X1)-$$DTF(X2))
"RTN","RGUT",216,0)
DTF(X) S X=X#1*100
"RTN","RGUT",217,0)
 Q X\1*3600+(X*100#100\1*60)+(X*10000#100)/86400
"RTN","RGUT",218,0)
DTT(X) S X=X*86400
"RTN","RGUT",219,0)
 Q X\3600*100+(X#3600/3600*60)/10000
"RTN","RGUT",220,0)
 ; Generates a random UUID using $H as a seed.
"RTN","RGUT",221,0)
UUID() N R,I,N,S
"RTN","RGUT",222,0)
 S (R,N)="",S=+$TR($H,",")
"RTN","RGUT",223,0)
 F  S N=N_$R(S) Q:$L(N)>64
"RTN","RGUT",224,0)
 F I=1:2:64 S R=R_$E("0123456789abcdef",$E(N,I,I+1)#16+1)
"RTN","RGUT",225,0)
 Q $E(R,1,8)_"-"_$E(R,9,12)_"-4"_$E(R,14,16)_"-"_$E("89ab",$E(N,17)#4+1)_$E(R,18,20)_"-"_$E(R,21,32)
"RTN","RGUT1")
0^71^B805876
"RTN","RGUT1",1,0)
RGUT1 ;RG/IND/PLS - General Purpose Utilites - Con't ;03-Mar-2015 14:24;DKM
"RTN","RGUT1",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUT1",3,0)
 ;;
"RTN","RGUT1",4,0)
 ;=================================================================
"RTN","RGUT1",5,0)
 ; Parameterized call to ScreenMan interface
"RTN","RGUT1",6,0)
DDS(DDSFILE,DR,DA,DDSPARM,DDSCHANG,RGERR) ;
"RTN","RGUT1",7,0)
 S RGERR=0
"RTN","RGUT1",8,0)
 D:'$D(IOST(0)) HOME^%ZIS
"RTN","RGUT1",9,0)
 D ENS^%ZISS
"RTN","RGUT1",10,0)
 D ^DDS
"RTN","RGUT1",11,0)
 S:$D(DTOUT) RGERR=1
"RTN","RGUT1",12,0)
 I $D(DIMSG)!($D(DIERR)) D
"RTN","RGUT1",13,0)
 .S RGERR=1
"RTN","RGUT1",14,0)
 .;D SHOWDLG(23)
"RTN","RGUT1",15,0)
 .W !,?5,"The Screen Manager could not edit this record."
"RTN","RGUT1",16,0)
 .H 5
"RTN","RGUT1",17,0)
 Q
"RTN","RGUT1",18,0)
 ; Prompt for single date date
"RTN","RGUT1",19,0)
 ; PMT = Prompt
"RTN","RGUT1",20,0)
 ; DFL = Default value (optional)
"RTN","RGUT1",21,0)
 ; MIN = Minimum value (optional)
"RTN","RGUT1",22,0)
 ; OPT = Additional options (optional)
"RTN","RGUT1",23,0)
ASKDATE(PMT,DFL,MIN,OPT) ;
"RTN","RGUT1",24,0)
 N %DT,Y
"RTN","RGUT1",25,0)
 S %DT="APEX"_$G(OPT)
"RTN","RGUT1",26,0)
 S %DT("A")=PMT
"RTN","RGUT1",27,0)
 S:$G(MIN) %DT(0)=MIN
"RTN","RGUT1",28,0)
 I $G(DFL) D
"RTN","RGUT1",29,0)
 .S Y=DFL
"RTN","RGUT1",30,0)
 .D DD^%DT
"RTN","RGUT1",31,0)
 .S %DT("B")=Y
"RTN","RGUT1",32,0)
 D ^%DT
"RTN","RGUT1",33,0)
 S:Y<0 POP=1
"RTN","RGUT1",34,0)
 Q Y
"RTN","RGUTALR")
0^33^B1374002
"RTN","RGUTALR",1,0)
RGUTALR ;RI/CBMI/DKM - Send alert to user(s) via kernel or mail;03-Mar-2015 14:24;DKM
"RTN","RGUTALR",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTALR",3,0)
 ;;
"RTN","RGUTALR",4,0)
 ;=================================================================
"RTN","RGUTALR",5,0)
 ; Send an alert.
"RTN","RGUTALR",6,0)
 ;   XQAMSG = Message to send
"RTN","RGUTALR",7,0)
 ;   RGUTSR  = A semicolon-delimited list of users to receive alert.
"RTN","RGUTALR",8,0)
 ;=================================================================
"RTN","RGUTALR",9,0)
ALERT(XQAMSG,RGUTSR) ;
"RTN","RGUTALR",10,0)
 N XQA,XQAOPT,XQAFLG,XQAROU,XQADATA,XQAID
"RTN","RGUTALR",11,0)
 S @$$TRAP^RGUTOS("EXIT^RGUTALR"),RGUTSR=$G(RGUTSR,"*"),XQAMSG=$TR(XQAMSG,U,"~")
"RTN","RGUTALR",12,0)
 D ENTRY^RGUTUSR(RGUTSR,.XQA),SETUP^XQALERT:$D(XQA)
"RTN","RGUTALR",13,0)
EXIT Q
"RTN","RGUTALR",14,0)
 ;=================================================================
"RTN","RGUTALR",15,0)
 ; Send a mail message
"RTN","RGUTALR",16,0)
 ;   RGMSG  = Message to send (single node or array)
"RTN","RGUTALR",17,0)
 ;   XMY    = A semicolon-delimited list (or array) of users
"RTN","RGUTALR",18,0)
 ;   XMSUB  = Subject line (optional)
"RTN","RGUTALR",19,0)
 ;   XMDUZ  = DUZ of sender (optional)
"RTN","RGUTALR",20,0)
 ;=================================================================
"RTN","RGUTALR",21,0)
MAIL(RGMSG,XMY,XMSUB,XMDUZ) ;
"RTN","RGUTALR",22,0)
 N XMTEXT
"RTN","RGUTALR",23,0)
 S:$D(RGMSG)=1 RGMSG(1)=RGMSG
"RTN","RGUTALR",24,0)
 S XMTEXT="RGMSG(",@$$TRAP^RGUTOS("EXIT^RGUTALR"),XMY=$G(XMY)
"RTN","RGUTALR",25,0)
 S:$G(XMSUB)="" XMSUB=RGMSG
"RTN","RGUTALR",26,0)
 S:$G(XMDUZ)="" XMDUZ=$G(DUZ)
"RTN","RGUTALR",27,0)
 F  Q:'$L(XMY)  S X=$P(XMY,";"),XMY=$P(XMY,";",2,999) S:$L(X) XMY(X)=""
"RTN","RGUTALR",28,0)
 D ^XMD:$D(XMY)>9
"RTN","RGUTALR",29,0)
 Q
"RTN","RGUTBC28")
0^65^B10811663
"RTN","RGUTBC28",1,0)
RGUTBC28 ;RI/CBMI/DKM/PLS - Convert 128 barcode to HPCL-compatible form ;03-Mar-2015 14:24;DKM
"RTN","RGUTBC28",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTBC28",3,0)
 ;;
"RTN","RGUTBC28",4,0)
 ;=================================================================
"RTN","RGUTBC28",5,0)
 ; Inputs:
"RTN","RGUTBC28",6,0)
 ;     TX = Text to encode.
"RTN","RGUTBC28",7,0)
 ; Outputs:
"RTN","RGUTBC28",8,0)
 ;     Returns encoded text.
"RTN","RGUTBC28",9,0)
 ; Purpose:
"RTN","RGUTBC28",10,0)
 ;     Performs bar code 128 encoding on a text string.
"RTN","RGUTBC28",11,0)
 ;=================================================================
"RTN","RGUTBC28",12,0)
EN(TX) Q:TX="" ""
"RTN","RGUTBC28",13,0)
 N CD,TP,TP1,EN,Z1,Z2
"RTN","RGUTBC28",14,0)
 S TP=0,TP=$$TP(TX),CD=TP,EN=$C(TP+8)
"RTN","RGUTBC28",15,0)
 F  Q:TX=""  D
"RTN","RGUTBC28",16,0)
 .S TP1=$$TP(TX)
"RTN","RGUTBC28",17,0)
 .I TP1'=TP D CD(6-TP1) S TP=TP1
"RTN","RGUTBC28",18,0)
 .S Z1=$E(TX,1,TP=2+1),TX=$E(TX,TP=2+2,255),Z2=$A(Z1)
"RTN","RGUTBC28",19,0)
 .I TP=2 D CD($S(Z1>95:Z1-95,Z1:Z1+32,1:31))
"RTN","RGUTBC28",20,0)
 .E  D CD($S(Z2<32:Z2+96,Z2=32:31,1:Z2))
"RTN","RGUTBC28",21,0)
 S CD=CD#103,CD=$S('CD:31,CD>95:CD-95,1:CD+32)
"RTN","RGUTBC28",22,0)
 Q EN_$C(CD,11)
"RTN","RGUTBC28",23,0)
TP(X) Q $S(X?2N.E:2,$A(X)<32:0,$A(X)>95:1,TP=2:0,1:TP)
"RTN","RGUTBC28",24,0)
CD(X) S CD=$S(X=31:0,X<11:X+95,1:X-32)*$L(EN)+$G(CD),EN=EN_$C(X)
"RTN","RGUTBC28",25,0)
 Q
"RTN","RGUTBC28",26,0)
 ;=================================================================
"RTN","RGUTBC28",27,0)
 ; Inputs:
"RTN","RGUTBC28",28,0)
 ;   TXT = Data string to print in bar code
"RTN","RGUTBC28",29,0)
 ;   ORN = Orientation of bar code
"RTN","RGUTBC28",30,0)
 ;         0 = portrait (default)
"RTN","RGUTBC28",31,0)
 ;         1 = landscape
"RTN","RGUTBC28",32,0)
 ;   HGT = Height of bar code in dots (1/300 inch)
"RTN","RGUTBC28",33,0)
 ;   HOR = Horizontal position on page in dots
"RTN","RGUTBC28",34,0)
 ;   VER = Vertical position on page in dots
"RTN","RGUTBC28",35,0)
 ;   WID = Width of bar in dots (3=default)
"RTN","RGUTBC28",36,0)
 ; Purpose:
"RTN","RGUTBC28",37,0)
 ;   Accepts a barcode 128 string and writes an HPCL-compatible
"RTN","RGUTBC28",38,0)
 ;   string that will display the barcode on an HP laser printer.
"RTN","RGUTBC28",39,0)
 ;   A barcode font cartridge is not required.  The print position
"RTN","RGUTBC28",40,0)
 ;   on entry is restored on exit.
"RTN","RGUTBC28",41,0)
 ;=================================================================
"RTN","RGUTBC28",42,0)
BC(TXT,ORN,HGT,HOR,VER,WID) ;
"RTN","RGUTBC28",43,0)
 N Z,Z1,Z2,Z3,Z4,Z5,C,P,X
"RTN","RGUTBC28",44,0)
 S X=0 X ^%ZOSF("RM")
"RTN","RGUTBC28",45,0)
 S TXT=$$EN(TXT),C=$C(27)_"*c",P=$C(27)_"*p+",WID=$G(WID,3.5),HGT=$G(HGT,60),ORN=''$G(ORN)+1
"RTN","RGUTBC28",46,0)
 W $C(27),"&f0S"                                                       ;Push cursor position
"RTN","RGUTBC28",47,0)
 W:$D(HOR) $C(27)_"*p"_+HOR_"X"
"RTN","RGUTBC28",48,0)
 W:$D(VER) $C(27)_"*p"_+VER_"Y"
"RTN","RGUTBC28",49,0)
 W C_HGT_$E("BA",ORN)
"RTN","RGUTBC28",50,0)
 F Z=1:1:$L(TXT) D
"RTN","RGUTBC28",51,0)
 .S Z1=$P($T(@$A(TXT,Z)),";;",2),Z4=11,Z5=0
"RTN","RGUTBC28",52,0)
 .F Z2=1:1:$L(Z1) D
"RTN","RGUTBC28",53,0)
 ..S Z3=+$E(Z1,Z2),Z4=Z4-Z3,Z3=Z3*WID
"RTN","RGUTBC28",54,0)
 ..Q:'Z3
"RTN","RGUTBC28",55,0)
 ..I Z2#2 W C_Z3_$E("ab",ORN)_"0P" S Z5=Z3
"RTN","RGUTBC28",56,0)
 ..E  W P_(Z3+Z5)_$E("XY",ORN) S Z5=0
"RTN","RGUTBC28",57,0)
 .S Z4=Z4*WID+Z5
"RTN","RGUTBC28",58,0)
 .W:Z4>0 P_Z4_$E("XY",ORN)
"RTN","RGUTBC28",59,0)
 W $C(27),"&f1S"                                                       ;Pop cursor position
"RTN","RGUTBC28",60,0)
 Q ""
"RTN","RGUTBC28",61,0)
1 ;;11431
"RTN","RGUTBC28",62,0)
2 ;;41111
"RTN","RGUTBC28",63,0)
3 ;;41131
"RTN","RGUTBC28",64,0)
4 ;;11314
"RTN","RGUTBC28",65,0)
5 ;;11413
"RTN","RGUTBC28",66,0)
6 ;;31114
"RTN","RGUTBC28",67,0)
7 ;;41113
"RTN","RGUTBC28",68,0)
8 ;;21141
"RTN","RGUTBC28",69,0)
9 ;;21121
"RTN","RGUTBC28",70,0)
10 ;;21123
"RTN","RGUTBC28",71,0)
11 ;;2331112
"RTN","RGUTBC28",72,0)
31 ;;21222
"RTN","RGUTBC28",73,0)
33 ;;22212
"RTN","RGUTBC28",74,0)
34 ;;22222
"RTN","RGUTBC28",75,0)
35 ;;12122
"RTN","RGUTBC28",76,0)
36 ;;12132
"RTN","RGUTBC28",77,0)
37 ;;13122
"RTN","RGUTBC28",78,0)
38 ;;12221
"RTN","RGUTBC28",79,0)
39 ;;12231
"RTN","RGUTBC28",80,0)
40 ;;13221
"RTN","RGUTBC28",81,0)
41 ;;22121
"RTN","RGUTBC28",82,0)
42 ;;22131
"RTN","RGUTBC28",83,0)
43 ;;23121
"RTN","RGUTBC28",84,0)
44 ;;11223
"RTN","RGUTBC28",85,0)
45 ;;12213
"RTN","RGUTBC28",86,0)
46 ;;12223
"RTN","RGUTBC28",87,0)
47 ;;11322
"RTN","RGUTBC28",88,0)
48 ;;12312
"RTN","RGUTBC28",89,0)
49 ;;12322
"RTN","RGUTBC28",90,0)
50 ;;22321
"RTN","RGUTBC28",91,0)
51 ;;22113
"RTN","RGUTBC28",92,0)
52 ;;22123
"RTN","RGUTBC28",93,0)
53 ;;21321
"RTN","RGUTBC28",94,0)
54 ;;22311
"RTN","RGUTBC28",95,0)
55 ;;31213
"RTN","RGUTBC28",96,0)
56 ;;31122
"RTN","RGUTBC28",97,0)
57 ;;32112
"RTN","RGUTBC28",98,0)
58 ;;32122
"RTN","RGUTBC28",99,0)
59 ;;31221
"RTN","RGUTBC28",100,0)
60 ;;32211
"RTN","RGUTBC28",101,0)
61 ;;32221
"RTN","RGUTBC28",102,0)
62 ;;21212
"RTN","RGUTBC28",103,0)
63 ;;21232
"RTN","RGUTBC28",104,0)
64 ;;23212
"RTN","RGUTBC28",105,0)
65 ;;11132
"RTN","RGUTBC28",106,0)
66 ;;13112
"RTN","RGUTBC28",107,0)
67 ;;13132
"RTN","RGUTBC28",108,0)
68 ;;11231
"RTN","RGUTBC28",109,0)
69 ;;13211
"RTN","RGUTBC28",110,0)
70 ;;13231
"RTN","RGUTBC28",111,0)
71 ;;21131
"RTN","RGUTBC28",112,0)
72 ;;23111
"RTN","RGUTBC28",113,0)
73 ;;23131
"RTN","RGUTBC28",114,0)
74 ;;11213
"RTN","RGUTBC28",115,0)
75 ;;11233
"RTN","RGUTBC28",116,0)
76 ;;13213
"RTN","RGUTBC28",117,0)
77 ;;11312
"RTN","RGUTBC28",118,0)
78 ;;11332
"RTN","RGUTBC28",119,0)
79 ;;13312
"RTN","RGUTBC28",120,0)
80 ;;31312
"RTN","RGUTBC28",121,0)
81 ;;21133
"RTN","RGUTBC28",122,0)
82 ;;23113
"RTN","RGUTBC28",123,0)
83 ;;21311
"RTN","RGUTBC28",124,0)
84 ;;21331
"RTN","RGUTBC28",125,0)
85 ;;21313
"RTN","RGUTBC28",126,0)
86 ;;31112
"RTN","RGUTBC28",127,0)
87 ;;31132
"RTN","RGUTBC28",128,0)
88 ;;33112
"RTN","RGUTBC28",129,0)
89 ;;31211
"RTN","RGUTBC28",130,0)
90 ;;31231
"RTN","RGUTBC28",131,0)
91 ;;33211
"RTN","RGUTBC28",132,0)
92 ;;31411
"RTN","RGUTBC28",133,0)
93 ;;22141
"RTN","RGUTBC28",134,0)
94 ;;43111
"RTN","RGUTBC28",135,0)
95 ;;11122
"RTN","RGUTBC28",136,0)
96 ;;11142
"RTN","RGUTBC28",137,0)
97 ;;12112
"RTN","RGUTBC28",138,0)
98 ;;12142
"RTN","RGUTBC28",139,0)
99 ;;14112
"RTN","RGUTBC28",140,0)
100 ;;14122
"RTN","RGUTBC28",141,0)
101 ;;11221
"RTN","RGUTBC28",142,0)
102 ;;11241
"RTN","RGUTBC28",143,0)
103 ;;12211
"RTN","RGUTBC28",144,0)
104 ;;12241
"RTN","RGUTBC28",145,0)
105 ;;14211
"RTN","RGUTBC28",146,0)
106 ;;14221
"RTN","RGUTBC28",147,0)
107 ;;24121
"RTN","RGUTBC28",148,0)
108 ;;22111
"RTN","RGUTBC28",149,0)
109 ;;41311
"RTN","RGUTBC28",150,0)
110 ;;24111
"RTN","RGUTBC28",151,0)
111 ;;13411
"RTN","RGUTBC28",152,0)
112 ;;11124
"RTN","RGUTBC28",153,0)
113 ;;12114
"RTN","RGUTBC28",154,0)
114 ;;12124
"RTN","RGUTBC28",155,0)
115 ;;11421
"RTN","RGUTBC28",156,0)
116 ;;12411
"RTN","RGUTBC28",157,0)
117 ;;12421
"RTN","RGUTBC28",158,0)
118 ;;41121
"RTN","RGUTBC28",159,0)
119 ;;42111
"RTN","RGUTBC28",160,0)
120 ;;42121
"RTN","RGUTBC28",161,0)
121 ;;21214
"RTN","RGUTBC28",162,0)
122 ;;21412
"RTN","RGUTBC28",163,0)
123 ;;41212
"RTN","RGUTBC28",164,0)
124 ;;11114
"RTN","RGUTBC28",165,0)
125 ;;11134
"RTN","RGUTBC28",166,0)
126 ;;13114
"RTN","RGUTBC28",167,0)
127 ;;11411
"RTN","RGUTBC39")
0^66^B7717700
"RTN","RGUTBC39",1,0)
RGUTBC39 ;RG/IND/PLS - Converts barcode 39 to HPCL-compatible format ;03-Mar-2015 14:24;DKM
"RTN","RGUTBC39",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTBC39",3,0)
 ;;
"RTN","RGUTBC39",4,0)
 ;=================================================================
"RTN","RGUTBC39",5,0)
 ; Inputs:
"RTN","RGUTBC39",6,0)
 ;   TXT = Data string to print in bar code
"RTN","RGUTBC39",7,0)
 ;   ORN = Orientation of bar code/Check Digit
"RTN","RGUTBC39",8,0)
 ;         0 = portrait/no check digit(default)
"RTN","RGUTBC39",9,0)
 ;         1 = landscape/no check digit
"RTN","RGUTBC39",10,0)
 ;         2 = portrait/check digit
"RTN","RGUTBC39",11,0)
 ;         3 = landscape/check digit
"RTN","RGUTBC39",12,0)
 ;   HGT = Height of bar code in dots (1/300 inch)
"RTN","RGUTBC39",13,0)
 ;   HOR = Horizontal position on page in dots
"RTN","RGUTBC39",14,0)
 ;   VER = Vertical position on page in dots
"RTN","RGUTBC39",15,0)
 ;   WID = Width of bar in dots (3=default)
"RTN","RGUTBC39",16,0)
 ; Purpose:
"RTN","RGUTBC39",17,0)
 ;   Accepts a barcode 39 string and writes an HPCL-compatible
"RTN","RGUTBC39",18,0)
 ;   string that will display the barcode on an HP laser printer.
"RTN","RGUTBC39",19,0)
 ;   A barcode font cartridge is not required.  The print position
"RTN","RGUTBC39",20,0)
 ;   on entry is restored upon exit.
"RTN","RGUTBC39",21,0)
 ;=================================================================
"RTN","RGUTBC39",22,0)
BC(TXT,ORN,HGT,HOR,VER,WID) ;
"RTN","RGUTBC39",23,0)
 N DD,CHK,CH,ZDD,C,P,Z1,Z2,Z3,Z4,Z5,X
"RTN","RGUTBC39",24,0)
 S X=0 X ^%ZOSF("RM")
"RTN","RGUTBC39",25,0)
 S CHK=$S($G(ORN)>1:1,1:0),ORN=$S($G(ORN)#2:1,1:0)
"RTN","RGUTBC39",26,0)
 S TXT=$TR(TXT,"*",""),CH="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+Z"
"RTN","RGUTBC39",27,0)
 S DD="" F ZDD=1:1:$L(TXT) S DD=DD_$S(CH[$E(TXT,ZDD):$E(TXT,ZDD),1:"") ;STRIP UNPRINTABLE CHARACTERS
"RTN","RGUTBC39",28,0)
 S TXT=DD I +$G(CHK) S TXT=$$CHK(TXT)                             ;ADD CHECKSUM CHARACTER
"RTN","RGUTBC39",29,0)
 S TXT="*"_TXT_"*"                                                     ;ADD START AND STOP CODES
"RTN","RGUTBC39",30,0)
 S C=$C(27)_"*c",P=$C(27)_"*p+",WID=$G(WID,3),HGT=$G(HGT,60),ORN=''$G(ORN)+1
"RTN","RGUTBC39",31,0)
 W $C(27),"&f0S"                                                       ;Push cursor position
"RTN","RGUTBC39",32,0)
 W:$D(HOR) $C(27)_"*p"_+HOR_"X"
"RTN","RGUTBC39",33,0)
 W:$D(VER) $C(27)_"*p"_+VER_"Y"
"RTN","RGUTBC39",34,0)
 W C_HGT_$E("BA",ORN)
"RTN","RGUTBC39",35,0)
 F Z=1:1:$L(TXT) D
"RTN","RGUTBC39",36,0)
 .S Z1=$S($E(TXT,Z)="*":$P($T(99),";",4),1:$P($T(@($F(CH,$E(TXT,Z))-2)),";",4)),Z4=15,Z5=0
"RTN","RGUTBC39",37,0)
 .F Z2=1:1:$L(Z1) D
"RTN","RGUTBC39",38,0)
 ..S Z3=+$E(Z1,Z2),Z4=Z4-Z3,Z3=Z3*WID
"RTN","RGUTBC39",39,0)
 ..Q:'Z3
"RTN","RGUTBC39",40,0)
 ..I Z2#2 W C_Z3_$E("ab",ORN)_"0P" S Z5=Z3
"RTN","RGUTBC39",41,0)
 ..E  W P_(Z3+Z5)_$E("XY",ORN) S Z5=0
"RTN","RGUTBC39",42,0)
 .S Z4=Z4*WID+Z5
"RTN","RGUTBC39",43,0)
 .W P_(Z5+WID)_$E("XY",ORN)
"RTN","RGUTBC39",44,0)
 W $C(27),"&f1S"                                                       ;Pop cursor position
"RTN","RGUTBC39",45,0)
 Q ""
"RTN","RGUTBC39",46,0)
CHK(X) ;CALCULATE CHECK DIGIT AND RETURN STRING TO PRINT
"RTN","RGUTBC39",47,0)
 Q:X="" ""
"RTN","RGUTBC39",48,0)
 N CHK,Y
"RTN","RGUTBC39",49,0)
 S CHK=0,Y=X
"RTN","RGUTBC39",50,0)
 F  Q:X=""  S CHK=$F(CH,$E(X))-2+CHK,X=$E(X,2,255)
"RTN","RGUTBC39",51,0)
 S CHK=$E(CH,CHK#43+1)
"RTN","RGUTBC39",52,0)
 Q Y_CHK
"RTN","RGUTBC39",53,0)
0 ;;0;111331311
"RTN","RGUTBC39",54,0)
1 ;;1;311311113
"RTN","RGUTBC39",55,0)
2 ;;2;113311113
"RTN","RGUTBC39",56,0)
3 ;;3;313311111
"RTN","RGUTBC39",57,0)
4 ;;4;111331113
"RTN","RGUTBC39",58,0)
5 ;;5;311331111
"RTN","RGUTBC39",59,0)
6 ;;6;113331111
"RTN","RGUTBC39",60,0)
7 ;;7;111311313
"RTN","RGUTBC39",61,0)
8 ;;8;311311311
"RTN","RGUTBC39",62,0)
9 ;;9;113311311
"RTN","RGUTBC39",63,0)
10 ;;A;311113113
"RTN","RGUTBC39",64,0)
11 ;;B;113113113
"RTN","RGUTBC39",65,0)
12 ;;C;313113111
"RTN","RGUTBC39",66,0)
13 ;;D;111133113
"RTN","RGUTBC39",67,0)
14 ;;E;311133111
"RTN","RGUTBC39",68,0)
15 ;;F;113133111
"RTN","RGUTBC39",69,0)
16 ;;G;111113313
"RTN","RGUTBC39",70,0)
17 ;;H;311113311
"RTN","RGUTBC39",71,0)
18 ;;I;113113311
"RTN","RGUTBC39",72,0)
19 ;;J;111133311
"RTN","RGUTBC39",73,0)
20 ;;K;311111133
"RTN","RGUTBC39",74,0)
21 ;;L;113111133
"RTN","RGUTBC39",75,0)
22 ;;M;313111131
"RTN","RGUTBC39",76,0)
23 ;;N;111131133
"RTN","RGUTBC39",77,0)
24 ;;O;311131131
"RTN","RGUTBC39",78,0)
25 ;;P;113131131
"RTN","RGUTBC39",79,0)
26 ;;Q;111111333
"RTN","RGUTBC39",80,0)
27 ;;R;311111331
"RTN","RGUTBC39",81,0)
28 ;;S;113111331
"RTN","RGUTBC39",82,0)
29 ;;T;111131331
"RTN","RGUTBC39",83,0)
30 ;;U;331111113
"RTN","RGUTBC39",84,0)
31 ;;V;133111113
"RTN","RGUTBC39",85,0)
32 ;;W;333111111
"RTN","RGUTBC39",86,0)
33 ;;X;131131113
"RTN","RGUTBC39",87,0)
34 ;;Y;331131111
"RTN","RGUTBC39",88,0)
35 ;;Z;133131111
"RTN","RGUTBC39",89,0)
36 ;;-;131111313
"RTN","RGUTBC39",90,0)
37 ;;.;331111311
"RTN","RGUTBC39",91,0)
38 ;; ;133111311
"RTN","RGUTBC39",92,0)
39 ;;$;131313111
"RTN","RGUTBC39",93,0)
40 ;;/;131311131
"RTN","RGUTBC39",94,0)
41 ;;+;131113131
"RTN","RGUTBC39",95,0)
42 ;;%;111313131
"RTN","RGUTBC39",96,0)
99 ;;*;131131311
"RTN","RGUTBCDA")
0^67^B8230455
"RTN","RGUTBCDA",1,0)
RGUTBCDA ;RG/IND/PLS - Converts barcode CODABAR to HPCL-compatible format ;03-Mar-2015 14:24;DKM
"RTN","RGUTBCDA",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTBCDA",3,0)
 ;;
"RTN","RGUTBCDA",4,0)
 ;=================================================================
"RTN","RGUTBCDA",5,0)
 ; Inputs:
"RTN","RGUTBCDA",6,0)
 ;   TXT = Data string to print in bar code
"RTN","RGUTBCDA",7,0)
 ;   ORN = Orientation of bar code/Check digit
"RTN","RGUTBCDA",8,0)
 ;         0 = portrait/no check digit(default)
"RTN","RGUTBCDA",9,0)
 ;         1 = landscape/no check digit
"RTN","RGUTBCDA",10,0)
 ;         2 = portrait/check digit
"RTN","RGUTBCDA",11,0)
 ;         3 = landscape/check digit
"RTN","RGUTBCDA",12,0)
 ;   HGT = Height of bar code in dots (1/300 inch)
"RTN","RGUTBCDA",13,0)
 ;   HOR = Horizontal position on page in dots
"RTN","RGUTBCDA",14,0)
 ;   VER = Vertical position on page in dots
"RTN","RGUTBCDA",15,0)
 ;   WID = Width of bar in dots (3=default)
"RTN","RGUTBCDA",16,0)
 ;   SSC = Start/Stop characters (a/a = default)
"RTN","RGUTBCDA",17,0)
 ; Purpose:
"RTN","RGUTBCDA",18,0)
 ;   Accepts a barcode CODABAR string and writes an HPCL-compatible
"RTN","RGUTBCDA",19,0)
 ;   string that will display the barcode on an HP laser printer.
"RTN","RGUTBCDA",20,0)
 ;   A barcode font cartridge is not required.  The print position
"RTN","RGUTBCDA",21,0)
 ;   on entry is restored upon exit.
"RTN","RGUTBCDA",22,0)
 ;=================================================================
"RTN","RGUTBCDA",23,0)
BC(TXT,ORN,HGT,HOR,VER,WID,SSC) ;
"RTN","RGUTBCDA",24,0)
 N DD,CHK,CH,ZDD,C,P,Z,Z1,Z2,Z3,Z4,Z5,X
"RTN","RGUTBCDA",25,0)
 S X=0 X ^%ZOSF("RM")
"RTN","RGUTBCDA",26,0)
 S CHK=$S($G(ORN)>1:1,1:0),ORN=$S($G(ORN)#2:1,1:0)
"RTN","RGUTBCDA",27,0)
 S CH="0123456789-$:/.+"
"RTN","RGUTBCDA",28,0)
 S DD="" F ZDD=1:1:$L(TXT) S DD=DD_$S(CH[$E(TXT,ZDD):$E(TXT,ZDD),1:"") ;STRIP UNPRINTABLE CHARACTERS
"RTN","RGUTBCDA",29,0)
 S TXT=DD,TXT="a"_TXT_"a"                                            ;ADD START AND STOP CODES
"RTN","RGUTBCDA",30,0)
 I +$G(CHK) S TXT=$$CHK(TXT)
"RTN","RGUTBCDA",31,0)
 S C=$C(27)_"*c",P=$C(27)_"*p+",WID=$G(WID,3),HGT=$G(HGT,60),ORN=''$G(ORN)+1
"RTN","RGUTBCDA",32,0)
 W $C(27),"&f0S"                                                       ;Push cursor position
"RTN","RGUTBCDA",33,0)
 W:$D(HOR) $C(27)_"*p"_+HOR_"X"
"RTN","RGUTBCDA",34,0)
 W:$D(VER) $C(27)_"*p"_+VER_"Y"
"RTN","RGUTBCDA",35,0)
 W C_HGT_$E("BA",ORN)
"RTN","RGUTBCDA",36,0)
 F Z=1:1:$L(TXT) D
"RTN","RGUTBCDA",37,0)
 .S Z1=$S("AaTt"[$E(TXT,Z):$P($T(16),";",4),"BbNn"[$E(TXT,Z):$P($T(17),";",4),"Cc*"[$E(TXT,Z):$P($T(18),";",4),"DdEe"[$E(TXT,Z):$P($T(19),";",4),1:$P($T(@($F(CH,$E(TXT,Z))-2)),";",4)),Z4=13,Z5=0
"RTN","RGUTBCDA",38,0)
 .F Z2=1:1:$L(Z1) D
"RTN","RGUTBCDA",39,0)
 ..S Z3=+$E(Z1,Z2),Z4=Z4-Z3,Z3=Z3*WID
"RTN","RGUTBCDA",40,0)
 ..Q:'Z3
"RTN","RGUTBCDA",41,0)
 ..I Z2#2 W C_Z3_$E("ab",ORN)_"0P" S Z5=Z3
"RTN","RGUTBCDA",42,0)
 ..E  W P_(Z3+Z5)_$E("XY",ORN) S Z5=0
"RTN","RGUTBCDA",43,0)
 .S Z4=Z4*WID+Z5
"RTN","RGUTBCDA",44,0)
 .W P_(Z5+WID)_$E("XY",ORN)
"RTN","RGUTBCDA",45,0)
 W $C(27),"&f1S"                                                       ;Pop cursor position
"RTN","RGUTBCDA",46,0)
 Q ""
"RTN","RGUTBCDA",47,0)
CHK(X) ;CALCULATE CHECK DIGIT AND RETURN STRING TO PRINT
"RTN","RGUTBCDA",48,0)
 Q:X="" ""
"RTN","RGUTBCDA",49,0)
 N Z1,Y,CHK,XX
"RTN","RGUTBCDA",50,0)
 S CHK=0,Y=X
"RTN","RGUTBCDA",51,0)
 S XX=$E(X,1)_$E(X,$L(X))                                             ;STRIP OFF S/S CODES AND CALCULATE CHECKSUM
"RTN","RGUTBCDA",52,0)
 F Z1=1:1:$L(XX) S CHK=CHK+$S("AaTt"[$E(XX,Z1):16,"BbNn"[$E(XX,Z1):17,"Cc*"[$E(XX,Z1):18,"DdEe"[$E(XX,Z1):19,1:0)
"RTN","RGUTBCDA",53,0)
 ;ADD TO CHECKSUM THE VALUES OF THE DATA
"RTN","RGUTBCDA",54,0)
 S X=$E(X,2,$L(X)-1) F  Q:X=""  S CHK=$F(CH,$E(X))-2+CHK,X=$E(X,2,255)
"RTN","RGUTBCDA",55,0)
 S CHK=$E(CH,$S('CHK#16:1,1:16-CHK#16+1))
"RTN","RGUTBCDA",56,0)
 Q $E(Y,1,$L(Y)-1)_CHK_$E(Y,$L(Y))
"RTN","RGUTBCDA",57,0)
0 ;;0;1111133
"RTN","RGUTBCDA",58,0)
1 ;;1;1111331
"RTN","RGUTBCDA",59,0)
2 ;;2;1113113
"RTN","RGUTBCDA",60,0)
3 ;;3;3311111
"RTN","RGUTBCDA",61,0)
4 ;;4;1131131
"RTN","RGUTBCDA",62,0)
5 ;;5;3111131
"RTN","RGUTBCDA",63,0)
6 ;;6;1311113
"RTN","RGUTBCDA",64,0)
7 ;;7;1311311
"RTN","RGUTBCDA",65,0)
8 ;;8;1331111
"RTN","RGUTBCDA",66,0)
9 ;;9;3113111
"RTN","RGUTBCDA",67,0)
10 ;;-;1113311
"RTN","RGUTBCDA",68,0)
11 ;;$;1133111
"RTN","RGUTBCDA",69,0)
12 ;;:;3111313
"RTN","RGUTBCDA",70,0)
13 ;;/;3131113
"RTN","RGUTBCDA",71,0)
14 ;;.;3131311
"RTN","RGUTBCDA",72,0)
15 ;;+;1131313
"RTN","RGUTBCDA",73,0)
16 ;;AaTt;1133131
"RTN","RGUTBCDA",74,0)
17 ;;BbNn;1313113
"RTN","RGUTBCDA",75,0)
18 ;;Cc*;1113133
"RTN","RGUTBCDA",76,0)
19 ;;DdEe;1113331
"RTN","RGUTBIG")
0^34^B14812955
"RTN","RGUTBIG",1,0)
RGUTBIG ;RG/IND/PLS - Print a banner in large letters;03-Mar-2015 14:24;DKM
"RTN","RGUTBIG",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTBIG",3,0)
 ;;
"RTN","RGUTBIG",4,0)
 ;=================================================================
"RTN","RGUTBIG",5,0)
 ; Prints RGBIG to the current output device in large letters.
"RTN","RGUTBIG",6,0)
 ; Inputs:
"RTN","RGUTBIG",7,0)
 ;   RGBIG = Big letter string
"RTN","RGUTBIG",8,0)
 ;   RGRPT = # times to repeat (default=2)
"RTN","RGUTBIG",9,0)
 ;   RGTXT = Full text string (optional)
"RTN","RGUTBIG",10,0)
 ;=================================================================
"RTN","RGUTBIG",11,0)
ENTRY(RGBIG,RGRPT,RGTXT) ;
"RTN","RGUTBIG",12,0)
 N RGLT,RGFS,RGZ,RGZ1,RGLEN,RGPF,RGLN
"RTN","RGUTBIG",13,0)
 S RGFS="ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789,-/.!#'$()*+?\=^&%"
"RTN","RGUTBIG",14,0)
 S:$D(RGTXT) RGTXT=$$REPEAT^XLFSTR("*"_RGTXT,$G(IOM,80)\($L(RGTXT)+1))
"RTN","RGUTBIG",15,0)
 S RGLEN=$L(RGBIG),RGRPT=$G(RGRPT,2)
"RTN","RGUTBIG",16,0)
 W !
"RTN","RGUTBIG",17,0)
 F RGLT=1:1:RGRPT D
"RTN","RGUTBIG",18,0)
 .W !
"RTN","RGUTBIG",19,0)
 .F RGZ=1:8:65 D
"RTN","RGUTBIG",20,0)
 ..W !
"RTN","RGUTBIG",21,0)
 ..F RGZ1=1:1:RGLEN D
"RTN","RGUTBIG",22,0)
 ...S RGLN=$F(RGFS,$E(RGBIG,RGZ1))-1
"RTN","RGUTBIG",23,0)
 ...S RGPF=$P($T(TBL+RGLN),";;",2,99)
"RTN","RGUTBIG",24,0)
 ...W $E(RGPF,RGZ,RGZ+7)
"RTN","RGUTBIG",25,0)
 ...W:RGZ1<RGLEN ?(RGZ1*12)
"RTN","RGUTBIG",26,0)
 .W !!,$G(RGTXT)
"RTN","RGUTBIG",27,0)
 Q
"RTN","RGUTBIG",28,0)
TBL ;; Table of character "raster images"
"RTN","RGUTBIG",29,0)
 ;; AAAAAA AA    AAAA    AAAAAAAAAAAAAAAAAAAA    AAAA    AAAA    AA
"RTN","RGUTBIG",30,0)
 ;;BBBBBBB BB    BBBB    BBBBBBBBB BBBBBBB BB    BBBB    BBBBBBBBB
"RTN","RGUTBIG",31,0)
 ;;CCCCCCCCCC      CC      CC      CC      CC      CC      CCCCCCCC
"RTN","RGUTBIG",32,0)
 ;;DDDDDD  DD   DD DD    DDDD    DDDD    DDDD    DDDD   DD DDDDDD
"RTN","RGUTBIG",33,0)
 ;;EEEEEEEEEE      EE      EEEEEE  EEEEEE  EE      EE      EEEEEEEE
"RTN","RGUTBIG",34,0)
 ;;FFFFFFFFFF      FF      FFFFFF  FFFFFF  FF      FF      FF
"RTN","RGUTBIG",35,0)
 ;;GGGGGGGGGG      GG      GG  GGGGGG  GGGGGG    GGGG    GGGGGGGGGG
"RTN","RGUTBIG",36,0)
 ;;HH    HHHH    HHHH     HHHHHHHHHHHHHHHHHHH    HHHH    HHHH    HH
"RTN","RGUTBIG",37,0)
 ;;IIIIIIII   II      II      II      II      II      II   IIIIIIII
"RTN","RGUTBIG",38,0)
 ;;JJJJJJJJ    JJ      JJ      JJ      JJ      JJ  JJ  JJ  JJJJJJ
"RTN","RGUTBIG",39,0)
 ;;KK    KKKK   KK KK  KK  KKKK    KKKK    KK  KK  KK   KK KK    KK
"RTN","RGUTBIG",40,0)
 ;;LL      LL      LL      LL      LL      LL      LL      LLLLLLLL
"RTN","RGUTBIG",41,0)
 ;;MM    MMMMM  MMMM MMMM MMM MM MMMM    MMMM    MMMM    MMMM    MM
"RTN","RGUTBIG",42,0)
 ;;N     NNNN    NNNNN   NNNN N  NNNN  N NNNN   NNNNN    NNNN     N
"RTN","RGUTBIG",43,0)
 ;; OOOOOO OO    OOOO    OOOO    OOOO    OOOO    OOOO    OO OOOOOO
"RTN","RGUTBIG",44,0)
 ;;PPPPPPP PP    PPPP    PPPPPPPPP PP      PP      PP      PP
"RTN","RGUTBIG",45,0)
 ;; QQQQQQ QQ    QQQQ    QQQQ    QQQQ  Q QQQQ   Q Q QQQQQQ        Q
"RTN","RGUTBIG",46,0)
 ;;RRRRRRR RR    RRRR    RRRRRRRRR RR RR   RR  RR  RR   RR RR    RR
"RTN","RGUTBIG",47,0)
 ;;SSSSSSSSSS      SS      SSSSSSSSSSSSSSSS      SS      SSSSSSSSSS
"RTN","RGUTBIG",48,0)
 ;;TTTTTTTT   TT      TT      TT      TT      TT      TT      TT
"RTN","RGUTBIG",49,0)
 ;;UU    UUUU    UUUU    UUUU    UUUU    UUUU    UUUUUUUUUU UUUUUU
"RTN","RGUTBIG",50,0)
 ;;VV    VVVV    VVVV    VVVV    VV VV  VV  VV  VV   VVVV     VV
"RTN","RGUTBIG",51,0)
 ;;WW    WWWW    WWWW    WWWW    WWWW    WWWW WW WWWWW  WWWWW    WW
"RTN","RGUTBIG",52,0)
 ;;XX    XXXX    XX XX  XX   XXXX     XX     XXXX   XX  XX XX    XX
"RTN","RGUTBIG",53,0)
 ;;YY    YY YY  YY   Y  Y     YY      YY      YY      YY      YY
"RTN","RGUTBIG",54,0)
 ;;ZZZZZZZZZZZZZZZZ     ZZ     ZZ    ZZ      ZZ    ZZZZZZZZZZZZZZZZ
"RTN","RGUTBIG",55,0)
 ;;
"RTN","RGUTBIG",56,0)
 ;;  0000 0 00  00 00   00000  0 0000 0  00000   00 00  00 0 0000
"RTN","RGUTBIG",57,0)
 ;;   11     111    1111      11      11      11      11   1111111
"RTN","RGUTBIG",58,0)
 ;;  2222   22  22 22    22      22    22    22     22     2222222
"RTN","RGUTBIG",59,0)
 ;;3333333      33     33   33333       33       33     33 33333
"RTN","RGUTBIG",60,0)
 ;;      44     444   44 44 44   44 4444444      44      44      44
"RTN","RGUTBIG",61,0)
 ;;5555555555      55      5555555       55      55     55 555555
"RTN","RGUTBIG",62,0)
 ;;   666   66  66 66      66      66 6666 666   66 66   66  6666
"RTN","RGUTBIG",63,0)
 ;;77777777      77     77    77      77     77     77      77
"RTN","RGUTBIG",64,0)
 ;;  8888   88  88 88  88   8888   88  88  88    88 88  88   8888
"RTN","RGUTBIG",65,0)
 ;;  99999 99    9999    99 9999999      99      99     99   9999
"RTN","RGUTBIG",66,0)
 ;;                                         ''        '      '
"RTN","RGUTBIG",67,0)
 ;;                        ----------------
"RTN","RGUTBIG",68,0)
 ;;              //     //     //    //      //      //
"RTN","RGUTBIG",69,0)
 ;;                                         ....    ....    ....
"RTN","RGUTBIG",70,0)
 ;;    !!     !!      !!      !!     !!               ....    ....
"RTN","RGUTBIG",71,0)
 ;;  #  #  ########  #  #  ########  #  #
"RTN","RGUTBIG",72,0)
 ;;
"RTN","RGUTBIG",73,0)
 ;;   $$   $$$$$$$$$$ $$   $$$$$$$$   $$ $$$$$$$$$$   $$
"RTN","RGUTBIG",74,0)
 ;;   ((     ((     ((     ((      ((       ((       ((
"RTN","RGUTBIG",75,0)
 ;;   ))      ))        ))       ))      ))     ))     ))    ))
"RTN","RGUTBIG",76,0)
 ;;*  **  * * ** *   ****  ********  ****   * ** * *  **  *
"RTN","RGUTBIG",77,0)
 ;;           ++      ++   ++++++++++++++++   ++      ++
"RTN","RGUTBIG",78,0)
 ;;  ???   ??   ??      ??     ??     ??      ??     ....    ....
"RTN","RGUTBIG",79,0)
 ;;         \\       \\       \\       \\       \\       \\
"RTN","RGUTBIG",80,0)
 ;;        ================       =================
"RTN","RGUTBIG",81,0)
 ;;    ^      ^^^    ^^ ^^  ^^   ^^
"RTN","RGUTBIG",82,0)
 ;; &&&    &   &   &   &    &&&  &  &&& && &   &&  &   &&   &&&   &
"RTN","RGUTBIG",83,0)
 ;;  %    % % %  %   %  %      %      %      %  %   %  % % %     %
"RTN","RGUTDAT")
0^35^B12924137
"RTN","RGUTDAT",1,0)
RGUTDAT ;RI/CBMI/DKM - Date range input;03-Mar-2015 14:24;DKM
"RTN","RGUTDAT",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTDAT",3,0)
 ;;
"RTN","RGUTDAT",4,0)
 ;=================================================================
"RTN","RGUTDAT",5,0)
 ; Prompt for date range (normal format)
"RTN","RGUTDAT",6,0)
NORMAL D D1("P1"),D2("P2"):RGDAT1
"RTN","RGUTDAT",7,0)
 Q
"RTN","RGUTDAT",8,0)
 ; Prompt for date range (inverse format)
"RTN","RGUTDAT",9,0)
INVRSE D D1("PI1"),D2("PI2"):RGDAT1
"RTN","RGUTDAT",10,0)
 Q
"RTN","RGUTDAT",11,0)
 ; Prompt for starting date
"RTN","RGUTDAT",12,0)
D1(RGOPT) ;
"RTN","RGUTDAT",13,0)
 S RGDAT1=$$ENTRY("Start date: ",.RGOPT,"",0,$Y)
"RTN","RGUTDAT",14,0)
 Q
"RTN","RGUTDAT",15,0)
 ; Prompt for ending date
"RTN","RGUTDAT",16,0)
D2(RGOPT) ;
"RTN","RGUTDAT",17,0)
 S RGDAT2=$$ENTRY("End date  : ",.RGOPT,"",0,$Y+1)
"RTN","RGUTDAT",18,0)
 Q
"RTN","RGUTDAT",19,0)
 ; Prompt for a date
"RTN","RGUTDAT",20,0)
ENTRY(%RGP,%RGOPT,%RGDAT,%RGX,%RGY,%RGTRP,%RGHLP) ;
"RTN","RGUTDAT",21,0)
 N %RGD,%RGI,%RGDT,%RGZ,%RGDISV
"RTN","RGUTDAT",22,0)
 S %RGX=$G(%RGX,$X),%RGY=$G(%RGY,$Y),DUZ=+$G(DUZ),DTIME=$G(DTIME,999999),%RGOPT=$$UP^XLFSTR($G(%RGOPT)),%RGDISV=""
"RTN","RGUTDAT",23,0)
 S %RGTRP=$G(%RGTRP),%RGDAT=$G(%RGDAT)
"RTN","RGUTDAT",24,0)
 S:$G(%RGHLP)="" %RGHLP="HELP^RGUTDAT"
"RTN","RGUTDAT",25,0)
 S:$G(%RGP)="" %RGP="Enter date: "
"RTN","RGUTDAT",26,0)
 F %RGZ=0:1:9 I %RGOPT[%RGZ S %RGDISV="RGDAT"_%RGZ Q
"RTN","RGUTDAT",27,0)
DAT1 S %RGDT="",@$$TRAP^RGUTOS("DAT1^RGUTDAT")
"RTN","RGUTDAT",28,0)
 F %RGZ="P","T","F","X" S:%RGOPT[%RGZ %RGDT=%RGDT_%RGZ
"RTN","RGUTDAT",29,0)
 F  D  Q:$D(%RGI)
"RTN","RGUTDAT",30,0)
 .W $$XY^RGUT(%RGX,%RGY)_%RGP,*27,"[J"
"RTN","RGUTDAT",31,0)
 .S $X=%RGX+$L(%RGP)
"RTN","RGUTDAT",32,0)
 .I %RGOPT["E" S %RGI=$$ENTRY^RGUTEDT(%RGDAT,79-$X,$X,$Y,"","R")
"RTN","RGUTDAT",33,0)
 .E  I %RGDAT'="" S %RGI=%RGDAT,%RGDAT=""
"RTN","RGUTDAT",34,0)
 .E  R %RGI:DTIME
"RTN","RGUTDAT",35,0)
 .I $E(%RGI)="?" D  Q
"RTN","RGUTDAT",36,0)
 ..W !
"RTN","RGUTDAT",37,0)
 ..I %RGI["??" D HELP
"RTN","RGUTDAT",38,0)
 ..E  D @%RGHLP
"RTN","RGUTDAT",39,0)
 ..D PAUSE()
"RTN","RGUTDAT",40,0)
 ..K %RGI
"RTN","RGUTDAT",41,0)
 .I %RGI=" " S %RGI=$S(%RGDISV="":"",1:$G(^DISV(DUZ,%RGDISV))) K:%RGI="" RGZ1
"RTN","RGUTDAT",42,0)
 .W $$XY^RGUT(%RGX+$L(%RGP),%RGY),*27,"[K"
"RTN","RGUTDAT",43,0)
 I %RGI="",%RGTRP'="" S %RGI=$G(@%RGTRP@(" "))
"RTN","RGUTDAT",44,0)
 S %RGI=$$UP^XLFSTR(%RGI),%RGD=""
"RTN","RGUTDAT",45,0)
 Q:"^^"[%RGI -$L(%RGI)
"RTN","RGUTDAT",46,0)
 I %RGTRP'="" D  I %RGD'="" S %RGOPT=$TR(%RGOPT,"I") G DAT2
"RTN","RGUTDAT",47,0)
 .I $D(@%RGTRP@(%RGI)) S %RGD=@%RGTRP@(%RGI)
"RTN","RGUTDAT",48,0)
 .E  D
"RTN","RGUTDAT",49,0)
 ..N X
"RTN","RGUTDAT",50,0)
 ..S X=%RGI,%RGZ=""
"RTN","RGUTDAT",51,0)
 ..F  S %RGZ=$O(@%RGTRP@("?",%RGZ)) Q:%RGZ=""  I %RGI?@%RGZ D  Q
"RTN","RGUTDAT",52,0)
 ...S %RGD=$$MSG^RGUT($G(@%RGTRP@("?",%RGZ)))
"RTN","RGUTDAT",53,0)
 S %RGI=$$DT^RGUT(%RGI,%RGDT)
"RTN","RGUTDAT",54,0)
 G:%RGI=-1 DAT1
"RTN","RGUTDAT",55,0)
 I %RGOPT["+",%RGI<$S(%RGI=%RGI\1:$$DT^XLFDT,1:$$NOW^XLFDT) D  G DAT1
"RTN","RGUTDAT",56,0)
 .D PAUSE("Must be on or after current date.")
"RTN","RGUTDAT",57,0)
 I %RGOPT["-",%RGI>$S(%RGI=%RGI\1:$$DT^XLFDT,1:$$NOW^XLFDT) D  G DAT1
"RTN","RGUTDAT",58,0)
 .D PAUSE("Must be on or before current date.")
"RTN","RGUTDAT",59,0)
 S %RGD=$$ENTRY^RGUTDT(%RGI)
"RTN","RGUTDAT",60,0)
DAT2 W %RGD
"RTN","RGUTDAT",61,0)
 S:%RGDISV'="" ^DISV(DUZ,%RGDISV)=%RGI
"RTN","RGUTDAT",62,0)
 Q $S(%RGOPT["I":9999999-%RGI,1:%RGI)
"RTN","RGUTDAT",63,0)
HELP W ?2,"Enter a valid ",$S(%RGOPT["+":"future ",%RGOPT["-":"past ",1:""),"date using one of the following formats:",!!
"RTN","RGUTDAT",64,0)
 W ?5,"Format",?20,"Example",?35,"Explanation",?60,"Comments",!
"RTN","RGUTDAT",65,0)
 W ?5,"------",?20,"-------",?35,"-----------",?60,"--------",!
"RTN","RGUTDAT",66,0)
 W ?5,"mm/dd/yy",?20,"6/20/93",?35,"June 20, 1993",?60,"If you omit the",!
"RTN","RGUTDAT",67,0)
 W ?5,"dd-mmm-yy",?20,"27-JUL-58",?35,"July 27, 1958",?60,"year, the "_$S(%RGOPT["P":"most",%RGOPT["F":"closest",1:"current"),!
"RTN","RGUTDAT",68,0)
 W ?5,"mmddyy",?20,"070457",?35,"July 4, 1957",?60,$S(%RGOPT["P":"recent past date",%RGOPT["F":"future date",1:"calendar year"),!
"RTN","RGUTDAT",69,0)
 W ?5,"mmm dd yyyy",?20,"JAN 5, 1984",?35,"January 5, 1984",?60,"is assumed.",!
"RTN","RGUTDAT",70,0)
 W ?5,"T-n",?20,"T-5",?35,"Today's date - 5 days.",!!
"RTN","RGUTDAT",71,0)
 Q
"RTN","RGUTDAT",72,0)
PAUSE(%RGZ) ;
"RTN","RGUTDAT",73,0)
 W $$XY^RGUT(0,22),$G(%RGZ)
"RTN","RGUTDAT",74,0)
 I $$PAUSE^RGUT
"RTN","RGUTDAT",75,0)
 Q
"RTN","RGUTDATF")
0^87^B6379104
"RTN","RGUTDATF",1,0)
RGUTDATF ;RI/CBMI/DKM - Date Formatter;03-Mar-2015 14:24;DKM
"RTN","RGUTDATF",2,0)
 ;;3.0;RG UTILITIES;;Feb 20, 2015;Build 362
"RTN","RGUTDATF",3,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 1
"RTN","RGUTDATF",4,0)
 ; DATE = FM date/time
"RTN","RGUTDATF",5,0)
 ; FMT = Date format (follows Java spec)
"RTN","RGUTDATF",6,0)
FMTDATE(DATE,FMT) ;
"RTN","RGUTDATF",7,0)
 N X,C,I,E,Y,D,L
"RTN","RGUTDATF",8,0)
 S D=DATE+17000000*1000000000,(C,E,X)="",L=0
"RTN","RGUTDATF",9,0)
 F I=1:1:$L(FMT) D
"RTN","RGUTDATF",10,0)
 .S C=$E(FMT,I)
"RTN","RGUTDATF",11,0)
 .I C="'" D
"RTN","RGUTDATF",12,0)
 ..I $E(FMT,I+1)=C S I=I+1
"RTN","RGUTDATF",13,0)
 ..E  S L='L,C=""
"RTN","RGUTDATF",14,0)
 .I 'L,$L(C),"GyYMwWDdFEuaHkKhmsSzZX"[C D
"RTN","RGUTDATF",15,0)
 ..I $E(E)=C S E=E_C Q
"RTN","RGUTDATF",16,0)
 ..D FLUSH
"RTN","RGUTDATF",17,0)
 ..S E=C
"RTN","RGUTDATF",18,0)
 .E  D FLUSH(C)
"RTN","RGUTDATF",19,0)
 D FLUSH
"RTN","RGUTDATF",20,0)
 Q X
"RTN","RGUTDATF",21,0)
FLUSH(C) S:$L(E) X=X_$$FMT(E),E=""
"RTN","RGUTDATF",22,0)
 S:$D(C) X=X_C
"RTN","RGUTDATF",23,0)
 Q
"RTN","RGUTDATF",24,0)
PAD(V,L) N X
"RTN","RGUTDATF",25,0)
 S V=+V,P=L-$L(V)
"RTN","RGUTDATF",26,0)
 S:P>0 X="",$P(X,0,P+1)=V
"RTN","RGUTDATF",27,0)
 Q $G(X,V)
"RTN","RGUTDATF",28,0)
FMT(E) N L
"RTN","RGUTDATF",29,0)
 S L=$L(E)
"RTN","RGUTDATF",30,0)
 Q $$@("FMT"_$E(E))
"RTN","RGUTDATF",31,0)
 ; Era designator
"RTN","RGUTDATF",32,0)
FMTG() Q "AD"
"RTN","RGUTDATF",33,0)
 ; Year
"RTN","RGUTDATF",34,0)
FMTy() Q $$PAD($E(D,$S(L=2:3,1:1),4),L)
"RTN","RGUTDATF",35,0)
 ; Week year
"RTN","RGUTDATF",36,0)
FMTY() Q $$FMTy
"RTN","RGUTDATF",37,0)
 ; Month in year
"RTN","RGUTDATF",38,0)
FMTM() N M
"RTN","RGUTDATF",39,0)
 S M=+$E(D,5,6)
"RTN","RGUTDATF",40,0)
 Q:L<3 $$PAD(M,L)
"RTN","RGUTDATF",41,0)
 S M=$P("January^February^March^April^May^June^July^August^September^October^November^December",U,M)
"RTN","RGUTDATF",42,0)
 Q $S(L=3:$E(M,1,L),1:M)
"RTN","RGUTDATF",43,0)
 ; Week in year
"RTN","RGUTDATF",44,0)
FMTw() Q $$PAD($$FMTD-1\7+1,L)
"RTN","RGUTDATF",45,0)
 ; Week in month
"RTN","RGUTDATF",46,0)
FMTW() Q $$PAD($E(D,7,8)-1\7+1,L)
"RTN","RGUTDATF",47,0)
 ; Day in year
"RTN","RGUTDATF",48,0)
FMTD() Q $$PAD($$FMDIFF^XLFDT(DATE,DATE\10000*10000+101)+1,L)
"RTN","RGUTDATF",49,0)
 ; Day in month
"RTN","RGUTDATF",50,0)
FMTd() Q $$PAD($E(D,7,8),L)
"RTN","RGUTDATF",51,0)
 ; Day of week in month
"RTN","RGUTDATF",52,0)
FMTF() Q ""
"RTN","RGUTDATF",53,0)
 ; Day name in week
"RTN","RGUTDATF",54,0)
FMTE() N W
"RTN","RGUTDATF",55,0)
 S W=$$DOW^XLFDT(DATE)
"RTN","RGUTDATF",56,0)
 Q $S(L<4:$E(W,1,3),1:W)
"RTN","RGUTDATF",57,0)
 ; Day number of week (1=Monday...7=Sunday)
"RTN","RGUTDATF",58,0)
FMTu() N N
"RTN","RGUTDATF",59,0)
 S N=$$DOW^XLFDT(DATE,1)
"RTN","RGUTDATF",60,0)
 Q $$PAD($S(N=0:7,1:N),L)
"RTN","RGUTDATF",61,0)
 ; AM/PM marker
"RTN","RGUTDATF",62,0)
FMTa() Q $S($E(DATE,9,10)<12:"AM",1:"PM")
"RTN","RGUTDATF",63,0)
 ; Hour in day (0-23)
"RTN","RGUTDATF",64,0)
FMTH() Q $$PAD($E(D,9,10),L)
"RTN","RGUTDATF",65,0)
 ; Hour in day (1-24)
"RTN","RGUTDATF",66,0)
FMTk() Q $$PAD($E(D,9,10),L)
"RTN","RGUTDATF",67,0)
 ; Hour in AM/PM (0-11)
"RTN","RGUTDATF",68,0)
FMTK() N H
"RTN","RGUTDATF",69,0)
 S H=+$E(D,9,10)
"RTN","RGUTDATF",70,0)
 Q $$PAD($S(H=12:0,H=24:0,H>12:H-12,1:H),L)
"RTN","RGUTDATF",71,0)
 ; Hour in AM/PM (1-12)
"RTN","RGUTDATF",72,0)
FMTh() N H
"RTN","RGUTDATF",73,0)
 S H=+$E(D,9,10)
"RTN","RGUTDATF",74,0)
 Q $$PAD($S(H>12:H-12,1:H),L)
"RTN","RGUTDATF",75,0)
 ; Minute in hour
"RTN","RGUTDATF",76,0)
FMTm() Q $$PAD($E(D,11,12),L)
"RTN","RGUTDATF",77,0)
 ; Second in minute
"RTN","RGUTDATF",78,0)
FMTs() Q $$PAD($E(D,13,14),L)
"RTN","RGUTDATF",79,0)
 ; Millisecond
"RTN","RGUTDATF",80,0)
FMTS() Q $$PAD($E(D,15,17),L)
"RTN","RGUTDATF",81,0)
 ; Time zone (general)
"RTN","RGUTDATF",82,0)
FMTz() N TZ
"RTN","RGUTDATF",83,0)
 S TZ=$G(^XMB("TIMEZONE"))
"RTN","RGUTDATF",84,0)
 I $L(TZ),L>3 D
"RTN","RGUTDATF",85,0)
 .S TZ=$O(^XMB(4.4,"B",TZ,0)),TZ=$P($G(^XMB(4.4,+TZ,0)),U,2)
"RTN","RGUTDATF",86,0)
 .S:$L(TZ) TZ=$$TITLE^XLFSTR(TZ_" TIME")
"RTN","RGUTDATF",87,0)
 Q TZ
"RTN","RGUTDATF",88,0)
 ; Time zone (RFC 822)
"RTN","RGUTDATF",89,0)
FMTZ() Q $$TZ^XLFDT
"RTN","RGUTDATF",90,0)
 ; Time zone (ISO 8601)
"RTN","RGUTDATF",91,0)
FMTX() N TZ
"RTN","RGUTDATF",92,0)
 S TZ=$$TZ^XLFDT
"RTN","RGUTDATF",93,0)
 Q $S(L=1:$E(TZ,1,3),L=2:$E(TZ,1,5),1:$E(TZ,1,3)_":"_$E(TZ,4,5))
"RTN","RGUTDDR")
0^62^B59421017
"RTN","RGUTDDR",1,0)
RGUTDDR ;RI/CBMI/DKM - FileMan RPC Extensions ;03-Mar-2015 14:24;DKM
"RTN","RGUTDDR",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTDDR",3,0)
 ;;
"RTN","RGUTDDR",4,0)
 ;=================================================================
"RTN","RGUTDDR",5,0)
 ; RPC: Retrieve DD information about a file.
"RTN","RGUTDDR",6,0)
 ; FNUM = File # or name
"RTN","RGUTDDR",7,0)
 ; FLDS = Semi-colon delimited field list (optional)
"RTN","RGUTDDR",8,0)
 ; IENS = IENS (for subfile entries)
"RTN","RGUTDDR",9,0)
 ; FLGS = Control flags:
"RTN","RGUTDDR",10,0)
 ;   D = Fix duplicate field names
"RTN","RGUTDDR",11,0)
 ;   M = Retrieve multiples
"RTN","RGUTDDR",12,0)
 ; Return data:
"RTN","RGUTDDR",13,0)
 ;  DATA(0)   = -1^Error text or
"RTN","RGUTDDR",14,0)
 ;            = File #^File name^Rec count^Field count^Readonly^Parent File
"RTN","RGUTDDR",15,0)
 ;  DATA(n)   = Field #^Field name^Datatype^Size^Required^Readonly^Help lines^Xref^Calculated
"RTN","RGUTDDR",16,0)
 ;  DATA(n,0) = Supplemental data (set mappings)
"RTN","RGUTDDR",17,0)
 ;  DATA(n,1) = Prompt Text
"RTN","RGUTDDR",18,0)
 ;  DATA(n,2) = Help Text
"RTN","RGUTDDR",19,0)
GETDD(DATA,FNUM,FLDS,IENS,FLGS) ;
"RTN","RGUTDDR",20,0)
 N X,Y,Z,CNT,N0,FLD,PF,MULT,DUPS
"RTN","RGUTDDR",21,0)
 S DATA=$NA(^TMP("RGUTDDR",$J))
"RTN","RGUTDDR",22,0)
 K @DATA
"RTN","RGUTDDR",23,0)
 S FNUM=$G(FNUM),FLDS=$G(FLDS),FLGS=$G(FLGS),MULT=FLGS["M",DUPS=FLGS["D"
"RTN","RGUTDDR",24,0)
 I $L(FNUM),FNUM'=+FNUM D
"RTN","RGUTDDR",25,0)
 .S FNUM=$O(^DIC("B",FNUM,0))
"RTN","RGUTDDR",26,0)
 .I FNUM,$O(^(FNUM)) S FNUM=""
"RTN","RGUTDDR",27,0)
 S X=$$ROOT^DILFD(FNUM,$G(IENS),1),PF=$G(^DD(+FNUM,0,"UP"))
"RTN","RGUTDDR",28,0)
 S:$L(X) X=$G(@X@(0))
"RTN","RGUTDDR",29,0)
 S:PF $P(X,U)=$P($G(^DD(+FNUM,0)),U)
"RTN","RGUTDDR",30,0)
 I '$L(X) D SETERR("Table not found") Q
"RTN","RGUTDDR",31,0)
 S N0=FNUM_U_$P(X,U)_U_$P(X,U,4),CNT=0
"RTN","RGUTDDR",32,0)
 F X=1:1:$L(FLDS,";") D  Q:'X
"RTN","RGUTDDR",33,0)
 .S FLD=$P(FLDS,";",X)
"RTN","RGUTDDR",34,0)
 .Q:'$L(FLD)
"RTN","RGUTDDR",35,0)
 .S:FLD="*" FLD="0-9999999999999999"
"RTN","RGUTDDR",36,0)
 .I $TR(FLD,".")?1.N1"-"1.N D
"RTN","RGUTDDR",37,0)
 ..S Z=+$P(FLD,"-"),Y=+$P(FLD,"-",2)
"RTN","RGUTDDR",38,0)
 ..S:Z<0 Z=0
"RTN","RGUTDDR",39,0)
 ..I Z=0 S:'$$GETFL(0,0) X=0
"RTN","RGUTDDR",40,0)
 ..I Z>0,$D(^DD(FNUM,Z,0)) S:'$$GETFL(Z,MULT) X=0
"RTN","RGUTDDR",41,0)
 ..F  Q:'X  S Z=$O(^DD(FNUM,Z)) Q:'Z  Q:Z>Y  S:'$$GETFL(Z,MULT) X=0
"RTN","RGUTDDR",42,0)
 .E  I '$$GETFL(FLD,1) S X=0
"RTN","RGUTDDR",43,0)
 S:X @DATA@(0)=N0_U_CNT_U_($P($G(^DD(FNUM,0,"DI")),U,2)["Y")_U_PF
"RTN","RGUTDDR",44,0)
 Q
"RTN","RGUTDDR",45,0)
 ; Setup type info for field
"RTN","RGUTDDR",46,0)
 ;  FLDX = Field # or name
"RTN","RGUTDDR",47,0)
 ;  MULT = Allow multiples
"RTN","RGUTDDR",48,0)
 ; Note: Datatype (TP) maps to TFMFieldType enum:
"RTN","RGUTDDR",49,0)
 ;   0 = unknown, 1 = free text, 2 = numeric, 3 = boolean,
"RTN","RGUTDDR",50,0)
 ;   4 = date/time, 5 = wp, 6 = pointer, 7 = set, 8 = subfile
"RTN","RGUTDDR",51,0)
GETFL(FLDX,MULT) ;
"RTN","RGUTDDR",52,0)
 N X,Z,LN,TP,HC,DD,FLD,MLT,NAM
"RTN","RGUTDDR",53,0)
 S FLD=$$FLDNUM(FNUM,FLDX),MLT=0
"RTN","RGUTDDR",54,0)
 S DD=$S('$L(FLD):"",FLD:$G(^DD(FNUM,FLD,0)),1:"#^RICJ8,5"),X=$P(DD,U,2)
"RTN","RGUTDDR",55,0)
 I '$L(DD) D SETERR("Field not found: "_FLDX) Q 0
"RTN","RGUTDDR",56,0)
 I X,$P($G(^DD(X,.01,0)),U,2)'["W" S MLT=1
"RTN","RGUTDDR",57,0)
 I 'MULT,MLT Q 1
"RTN","RGUTDDR",58,0)
 S (LN,TP,HC,Z)=0,DX="",NAM=$P(DD,U),CNT=CNT+1
"RTN","RGUTDDR",59,0)
 I DUPS,$O(^(+$O(^DD(FNUM,"B",NAM,0)))) S NAM=NAM_"("_FLD_")"
"RTN","RGUTDDR",60,0)
 I MLT S TP=8,DX=+X
"RTN","RGUTDDR",61,0)
 E  I X["B" S TP=3
"RTN","RGUTDDR",62,0)
 E  I X["D" S TP=4,DX=$P($P($P(DD,U,5),"%DT=",2),"""",2)
"RTN","RGUTDDR",63,0)
 E  I X["F"!(X["K") S TP=1,LN=+$P($P(DD,U,5),"$L(X)>",2) S:'LN LN=30
"RTN","RGUTDDR",64,0)
 E  I X["J" S TP=2,DX=$P(X,"J",2) S:DX'["," LN=DX,DX="",TP=1
"RTN","RGUTDDR",65,0)
 E  I X["P"!(X["p") S TP=6,DX=+$P($TR(X,"p","P"),"P",2),LN=$$GETLN(DX)
"RTN","RGUTDDR",66,0)
 E  I X["S" S TP=7,DX=$P(DD,U,3)
"RTN","RGUTDDR",67,0)
 E  I X=+X S TP=5
"RTN","RGUTDDR",68,0)
 I 'FLD S HC=1,@DATA@(CNT,2,HC)="Internal record number."
"RTN","RGUTDDR",69,0)
 E  F  S Z=$O(^DD(FNUM,FLD,21,Z)) Q:'Z  S HC=HC+1,@DATA@(CNT,2,HC)=^(Z,0)
"RTN","RGUTDDR",70,0)
 S @DATA@(CNT)=FLD_U_NAM_U_TP_U_LN_U_(X["R")_U_(X["I")_U_HC_U_$$XREF(FNUM,FLD)_U_(X["C")
"RTN","RGUTDDR",71,0)
 S @DATA@(CNT,0)=DX,@DATA@(CNT,1)=$G(^DD(FNUM,FLD,3))
"RTN","RGUTDDR",72,0)
 Q 1
"RTN","RGUTDDR",73,0)
 ; Get length of .01 for file
"RTN","RGUTDDR",74,0)
GETLN(FNUM) ;
"RTN","RGUTDDR",75,0)
 N DD,X
"RTN","RGUTDDR",76,0)
 S DD=$G(^DD(FNUM,.01,0)),X=$P(DD,U,2)
"RTN","RGUTDDR",77,0)
 S X=+$S(X["P":$$GETLN(+$E(X,2,99)),X["F":$P($P(DD,U,5),"$L(X)>",2),1:0)
"RTN","RGUTDDR",78,0)
 Q $S(X:X,1:30)
"RTN","RGUTDDR",79,0)
SETERR(ERR) ;
"RTN","RGUTDDR",80,0)
 K @DATA
"RTN","RGUTDDR",81,0)
 S @DATA@(0)="-1^"_ERR
"RTN","RGUTDDR",82,0)
 Q
"RTN","RGUTDDR",83,0)
 ; RPC: RGUTDDR MOVETO
"RTN","RGUTDDR",84,0)
 ; Move to specified record (returns IEN only)
"RTN","RGUTDDR",85,0)
 ; FNUM: File #
"RTN","RGUTDDR",86,0)
 ; IEN : Current IEN
"RTN","RGUTDDR",87,0)
 ; DIR : 0 = current; 1 = next; 2 = prior
"RTN","RGUTDDR",88,0)
 ; IENS: Subfile IENS
"RTN","RGUTDDR",89,0)
 ; SCRN: Screens (optional)
"RTN","RGUTDDR",90,0)
 ; INDX: Index (optional)
"RTN","RGUTDDR",91,0)
 ; Returns IEN or <error code>^<error text>
"RTN","RGUTDDR",92,0)
MOVETO(DATA,FNUM,IEN,DIR,IENS,SCRN,INDX) ;
"RTN","RGUTDDR",93,0)
 N GBL,IDX,IDF,OK
"RTN","RGUTDDR",94,0)
 S GBL=$$ROOT^DILFD(FNUM,$G(IENS),1),DIR=+$G(DIR),INDX=$G(INDX)
"RTN","RGUTDDR",95,0)
 S DIR=$S(DIR=1:1,DIR=2:-1,1:0)
"RTN","RGUTDDR",96,0)
 S:$L($G(SCRN)) SCRN(-1)=SCRN
"RTN","RGUTDDR",97,0)
 I '$L(GBL) S DATA="-4^Table not found" Q
"RTN","RGUTDDR",98,0)
 I $L(INDX) D  Q:$G(DATA)
"RTN","RGUTDDR",99,0)
 .I '$O(^DD(FNUM,0,"IX",INDX,"")) S DATA="-5^Index "_INDX_" not found" Q
"RTN","RGUTDDR",100,0)
 .S IDF=$$XREFFLD(FNUM,INDX)
"RTN","RGUTDDR",101,0)
 .I 'IDF S DATA="-6^Index "_INDX_" is not a standard index" Q
"RTN","RGUTDDR",102,0)
 .S IDX=$S(IEN=-1:"",IEN=-2:$C(255),1:$E($$FLDVAL(FNUM,IDF,IEN,GBL),1,30))
"RTN","RGUTDDR",103,0)
 E  S IEN=$S(IEN=-1:0,IEN=-2:$O(@GBL@($C(1)),-1)+1,1:+IEN)
"RTN","RGUTDDR",104,0)
 F  D  Q:OK!'IEN
"RTN","RGUTDDR",105,0)
 .S IEN=+$$NXTIEN
"RTN","RGUTDDR",106,0)
 .;S OK=IEN&(IEN\1=IEN)&$D(@GBL@(IEN,0)),SCRN=""
"RTN","RGUTDDR",107,0)
 .S OK=IEN&$D(@GBL@(IEN,0)),SCRN=""
"RTN","RGUTDDR",108,0)
 .F  Q:'OK  S SCRN=$O(SCRN(SCRN)) Q:'$L(SCRN)  D
"RTN","RGUTDDR",109,0)
 ..N Y
"RTN","RGUTDDR",110,0)
 ..S Y=IEN
"RTN","RGUTDDR",111,0)
 ..I $D(@GBL@(Y,0))
"RTN","RGUTDDR",112,0)
 ..X SCRN(SCRN)
"RTN","RGUTDDR",113,0)
 ..S OK=$T
"RTN","RGUTDDR",114,0)
 .I 'OK,'DIR S IEN=0
"RTN","RGUTDDR",115,0)
 S DATA=$S(OK:IEN,'DIR:"-3^Record not found",DIR=1:"-2^End of file",1:"-1^Beginning of file")
"RTN","RGUTDDR",116,0)
 Q
"RTN","RGUTDDR",117,0)
 ; Return next IEN
"RTN","RGUTDDR",118,0)
NXTIEN() Q:'DIR IEN
"RTN","RGUTDDR",119,0)
 Q:'$L(INDX) $O(@GBL@(IEN),DIR)
"RTN","RGUTDDR",120,0)
 N OK
"RTN","RGUTDDR",121,0)
 F  D  Q:OK!'$L(IDX)
"RTN","RGUTDDR",122,0)
 .S:IEN'>0 IDX=$O(@GBL@(INDX,IDX),DIR),IEN=""
"RTN","RGUTDDR",123,0)
 .S IEN=$S($L(IDX):$O(@GBL@(INDX,IDX,IEN),DIR),1:0)
"RTN","RGUTDDR",124,0)
 .;S OK=$S('IEN:0,1:$E($$FLDVAL(FNUM,IDF,IEN,GBL),1,30)=IDX)
"RTN","RGUTDDR",125,0)
 .S OK=$S('IEN:0,1:$D(@GBL@(IEN,0)))
"RTN","RGUTDDR",126,0)
 Q IEN
"RTN","RGUTDDR",127,0)
 ; Return field value (internal)
"RTN","RGUTDDR",128,0)
 ;  FIL  = File or subfile #
"RTN","RGUTDDR",129,0)
 ;  FLD  = Field #
"RTN","RGUTDDR",130,0)
 ;  IEN  = Record #
"RTN","RGUTDDR",131,0)
 ;  ROOT = Global root of file or subfile, or IENS of subfile
"RTN","RGUTDDR",132,0)
FLDVAL(FIL,FLD,IEN,ROOT) ;
"RTN","RGUTDDR",133,0)
 I FLD=0!(FLD="#") Q IEN
"RTN","RGUTDDR",134,0)
 N PC,ND,DD
"RTN","RGUTDDR",135,0)
 S:FLD'=+FLD FLD=+$O(^DD(FIL,"B",FLD,0))
"RTN","RGUTDDR",136,0)
 S DD=$G(^DD(FIL,FLD,0))
"RTN","RGUTDDR",137,0)
 Q:$P(DD,U,2)["C" $$GET1^DIQ(FIL,IEN_","_$P(ROOT,",",2,999),FLD,"I")
"RTN","RGUTDDR",138,0)
 S ND=$P(DD,U,4),PC=$P(ND,";",2),ND=$P(ND,";")
"RTN","RGUTDDR",139,0)
 S:$E(ROOT)'=U ROOT=$$ROOT^DILFD(FIL,ROOT,1)
"RTN","RGUTDDR",140,0)
 Q $S('$L(ND):"",1:$P($G(@ROOT@(IEN,ND)),U,PC))
"RTN","RGUTDDR",141,0)
 ; RPC: Lock/unlock a record
"RTN","RGUTDDR",142,0)
 ;   FNUM = File #
"RTN","RGUTDDR",143,0)
 ;   IENS = Record # (IENS format)
"RTN","RGUTDDR",144,0)
 ;   WAIT = If >=0, seconds to wait for lock.
"RTN","RGUTDDR",145,0)
 ;          If missing or null, perform unlock operation.
"RTN","RGUTDDR",146,0)
 ;   DATA = Returns 0 if successful, -n^Error Text if not.
"RTN","RGUTDDR",147,0)
LOCK(DATA,FNUM,IENS,WAIT) ;
"RTN","RGUTDDR",148,0)
 N X,IEN,OK,$ET
"RTN","RGUTDDR",149,0)
 S @$$TRAP^RGUTOS("LOCKERR^RGUTDDR")
"RTN","RGUTDDR",150,0)
 S $ET="",X=$$ROOT^DILFD(FNUM,IENS,1),DATA=0,IEN=+IENS
"RTN","RGUTDDR",151,0)
 I '$L(X) S DATA="-1^Table not found"  Q
"RTN","RGUTDDR",152,0)
 K:$G(WAIT)="" WAIT
"RTN","RGUTDDR",153,0)
 D LOCK^RGNBRPC(.OK,$NA(@X@(IEN)),.WAIT)
"RTN","RGUTDDR",154,0)
 S:'OK DATA="-2^Record locked by another process"
"RTN","RGUTDDR",155,0)
 Q
"RTN","RGUTDDR",156,0)
LOCKERR S DATA="-3^Unexpected error"
"RTN","RGUTDDR",157,0)
 Q
"RTN","RGUTDDR",158,0)
 ; RPC: Convert pointer internal<->external
"RTN","RGUTDDR",159,0)
CVTPTR(DATA,FNUM,VAL,EXT) ;
"RTN","RGUTDDR",160,0)
 I EXT S DATA=$$GET1^DIQ(FNUM,VAL,.01)
"RTN","RGUTDDR",161,0)
 E  D
"RTN","RGUTDDR",162,0)
 .N ROOT
"RTN","RGUTDDR",163,0)
 .S ROOT=$$ROOT^DILFD(FNUM,,1)
"RTN","RGUTDDR",164,0)
 .I '$L(ROOT) S DATA=""
"RTN","RGUTDDR",165,0)
 .E  I VAL?1"`"1.N D
"RTN","RGUTDDR",166,0)
 ..S VAL=+$E(VAL,2,999),DATA=$S('VAL:"",$D(@ROOT@(VAL,0))#2:VAL,1:"")
"RTN","RGUTDDR",167,0)
 .E  D
"RTN","RGUTDDR",168,0)
 ..N LP
"RTN","RGUTDDR",169,0)
 ..F LP=0:1:3 S DATA=$$CP(LP) Q:DATA
"RTN","RGUTDDR",170,0)
 Q
"RTN","RGUTDDR",171,0)
 ; Lookup value in "B" xref
"RTN","RGUTDDR",172,0)
CP(XFM) N RTN,LKP
"RTN","RGUTDDR",173,0)
 S LKP=$S(XFM#2:$E(VAL,1,30),1:VAL),LKP=$S(XFM\2:$$UP^XLFSTR(LKP),1:LKP),RTN=0
"RTN","RGUTDDR",174,0)
 F  S RTN=$O(@ROOT@("B",LKP,RTN)) Q:'RTN  Q:$P($G(@ROOT@(RTN,0)),U)=VAL
"RTN","RGUTDDR",175,0)
 Q RTN
"RTN","RGUTDDR",176,0)
 ; RPC: Find an entry using specified fields and values
"RTN","RGUTDDR",177,0)
 ;   FNUM = File number to search
"RTN","RGUTDDR",178,0)
 ;   IENS = IENS for subfile
"RTN","RGUTDDR",179,0)
 ;   FLGS = Search flags.  Combination of:
"RTN","RGUTDDR",180,0)
 ;       P = partial match
"RTN","RGUTDDR",181,0)
 ;       I = case insensitive
"RTN","RGUTDDR",182,0)
 ;   FLDS = Field #'s or names to search.  Can be ;-delimited or list.
"RTN","RGUTDDR",183,0)
 ;   VALS = Values to search.  Can be single value or list.
"RTN","RGUTDDR",184,0)
 ;   MAX  = Maximum entries to return (default=all)
"RTN","RGUTDDR",185,0)
 ;   Returns list of one or all IENs matching criteria or
"RTN","RGUTDDR",186,0)
 ;     -n^error text if error.
"RTN","RGUTDDR",187,0)
FIND(DATA,FNUM,IENS,FLGS,FLDS,VALS,MAX) ;
"RTN","RGUTDDR",188,0)
 N ROOT,QUIT,XRF,XKY,CNT,X
"RTN","RGUTDDR",189,0)
 S IENS=$G(IENS)
"RTN","RGUTDDR",190,0)
 I $L(IENS),$E(IENS)'="," S IENS=","_IENS
"RTN","RGUTDDR",191,0)
 S ROOT=$$ROOT^DILFD(FNUM,IENS,1),QUIT=0,FLGS=$G(FLGS),MAX=+$G(MAX),CNT=0
"RTN","RGUTDDR",192,0)
 S:$D(VALS)=1 VALS(1)=VALS
"RTN","RGUTDDR",193,0)
 I $D(FLDS)=1 F X=1:1:$L(FLDS,";") S FLDS(X)=$P(FLDS,";",X)
"RTN","RGUTDDR",194,0)
 F FLDS=0:0 S FLDS=$O(FLDS(FLDS)) Q:'FLDS  D  Q:QUIT
"RTN","RGUTDDR",195,0)
 .I '$D(VALS(FLDS)) S QUIT="-1^Not enough lookup values." Q
"RTN","RGUTDDR",196,0)
 .S X=$$FLDNUM(FNUM,FLDS(FLDS))
"RTN","RGUTDDR",197,0)
 .I '$L(X) S QUIT="-2^Unknown field "_FLDS(FLDS)_"." Q
"RTN","RGUTDDR",198,0)
 .S FLDS(FLDS)=X
"RTN","RGUTDDR",199,0)
 .I '$D(XRF) D
"RTN","RGUTDDR",200,0)
 ..S X=$$XREF(FNUM,X)
"RTN","RGUTDDR",201,0)
 ..S:$L(X) XRF=X,XKY=$S(FLGS["I":$$UP^XLFSTR(VALS(FLDS)),1:VALS(FLDS))
"RTN","RGUTDDR",202,0)
 I 'QUIT,'$D(XRF) S QUIT="-3^At least one field must be a key field."
"RTN","RGUTDDR",203,0)
 D:'QUIT FINDX
"RTN","RGUTDDR",204,0)
 I QUIT<0 K @DATA S @DATA@(0)=QUIT
"RTN","RGUTDDR",205,0)
 Q
"RTN","RGUTDDR",206,0)
FINDX G FINDN:XRF="#",FINDP:FLGS["P",FINDE
"RTN","RGUTDDR",207,0)
 ; Find by IEN
"RTN","RGUTDDR",208,0)
FINDN D FINDF(XKY)
"RTN","RGUTDDR",209,0)
 Q
"RTN","RGUTDDR",210,0)
 ; Find exact match
"RTN","RGUTDDR",211,0)
FINDE N XKT,IEN
"RTN","RGUTDDR",212,0)
 S IEN=0,XKT=$E(XKY,1,30)
"RTN","RGUTDDR",213,0)
 F  S IEN=$O(@ROOT@(XRF,XKT,IEN)) Q:'IEN  D  Q:QUIT
"RTN","RGUTDDR",214,0)
 .D FINDF(IEN)
"RTN","RGUTDDR",215,0)
 Q
"RTN","RGUTDDR",216,0)
 ; Partial match
"RTN","RGUTDDR",217,0)
FINDP N XKT,VAL,IEN,LEN
"RTN","RGUTDDR",218,0)
 S XKT=$E(XKY,1,30),VAL=XKT,LEN=$L(XKT)
"RTN","RGUTDDR",219,0)
 F  D  S VAL=$O(@ROOT@(XRF,VAL)) Q:$E(VAL,1,LEN)'=XKT!QUIT
"RTN","RGUTDDR",220,0)
 .S IEN=0
"RTN","RGUTDDR",221,0)
 .F  S IEN=$O(@ROOT@(XRF,VAL,IEN)) Q:'IEN  D  Q:QUIT
"RTN","RGUTDDR",222,0)
 ..D FINDF(IEN)
"RTN","RGUTDDR",223,0)
 Q
"RTN","RGUTDDR",224,0)
 ; Check fields for match.  Add to output if all match
"RTN","RGUTDDR",225,0)
FINDF(IEN) ;
"RTN","RGUTDDR",226,0)
 N FND
"RTN","RGUTDDR",227,0)
 S FLDS=0,FND=1
"RTN","RGUTDDR",228,0)
 F  S FLDS=$O(FLDS(FLDS)) Q:'FLDS  D  Q:'FND
"RTN","RGUTDDR",229,0)
 .S FND=$$FINDM(FLDS(FLDS),VALS(FLDS),IEN)
"RTN","RGUTDDR",230,0)
 I FND D
"RTN","RGUTDDR",231,0)
 .S CNT=CNT+1,@DATA@(CNT)=IEN
"RTN","RGUTDDR",232,0)
 .I MAX,CNT'<MAX S QUIT=1
"RTN","RGUTDDR",233,0)
 Q
"RTN","RGUTDDR",234,0)
 ; Check for match
"RTN","RGUTDDR",235,0)
FINDM(FLD,VAL,IEN) ;
"RTN","RGUTDDR",236,0)
 N VALX
"RTN","RGUTDDR",237,0)
 S VALX=$$FLDVAL(FNUM,FLD,IEN,ROOT)
"RTN","RGUTDDR",238,0)
 S:FLGS["I" VAL=$$UP^XLFSTR(VAL),VALX=$$UP^XLFSTR(VALX)
"RTN","RGUTDDR",239,0)
 Q $S(FLGS["P":$E(VALX,1,$L(VAL))=VAL,1:VAL=VALX)
"RTN","RGUTDDR",240,0)
 ; Return field number from name
"RTN","RGUTDDR",241,0)
FLDNUM(FNUM,FLD) ;EP
"RTN","RGUTDDR",242,0)
 Q $S(FLD=+FLD:FLD,FLD="#":0,1:$O(^DD(FNUM,"B",FLD,0)))
"RTN","RGUTDDR",243,0)
 ; Returns the standard xref for the specified field.
"RTN","RGUTDDR",244,0)
XREF(FNUM,FLD,LAST) ;EP
"RTN","RGUTDDR",245,0)
 N XREF
"RTN","RGUTDDR",246,0)
 S LAST=+$G(LAST),XREF="",FLD=$$FLDNUM(FNUM,FLD)
"RTN","RGUTDDR",247,0)
 Q:'$L(FLD) ""
"RTN","RGUTDDR",248,0)
 Q:'FLD "#"
"RTN","RGUTDDR",249,0)
 F  S LAST=$O(^DD(FNUM,FLD,1,LAST)) Q:'LAST  I $D(^(LAST,0)),$P(^(0),U,3)="" S XREF=$P(^(0),U,2) Q
"RTN","RGUTDDR",250,0)
 Q XREF
"RTN","RGUTDDR",251,0)
 ; Returns field # if xref is a standard type, or 0 if not.
"RTN","RGUTDDR",252,0)
XREFFLD(FNUM,XREF) ;EP
"RTN","RGUTDDR",253,0)
 N FLD,LAST,X
"RTN","RGUTDDR",254,0)
 S FLD=$O(^DD(FNUM,0,"IX",XREF,FNUM,0))
"RTN","RGUTDDR",255,0)
 Q:'FLD 0
"RTN","RGUTDDR",256,0)
 F  S X=$$XREF(FNUM,FLD,.LAST) Q:'$L(X)!(X=XREF)
"RTN","RGUTDDR",257,0)
 Q $S($L(X):FLD,1:0)
"RTN","RGUTDIC")
0^36^B28066955
"RTN","RGUTDIC",1,0)
RGUTDIC ;RI/CBMI/DKM - Encapsulated FileMan API;03-Mar-2015 14:24;DKM
"RTN","RGUTDIC",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTDIC",3,0)
 ;;
"RTN","RGUTDIC",4,0)
 ;=================================================================
"RTN","RGUTDIC",5,0)
 ; Parameterized routine to add/edit/extract an entry in a
"RTN","RGUTDIC",6,0)
 ; FileMan file.  Encapsulates global structure info so no
"RTN","RGUTDIC",7,0)
 ; need to specify this directly.
"RTN","RGUTDIC",8,0)
 ; Inputs:
"RTN","RGUTDIC",9,0)
 ;    %RGDIC = Global root, file number, or bookmark
"RTN","RGUTDIC",10,0)
 ;    %RGCMD = n    : IEN of entry to process
"RTN","RGUTDIC",11,0)
 ;             0    : Process last IEN referenced
"RTN","RGUTDIC",12,0)
 ;             +n   : Move down to subfile n
"RTN","RGUTDIC",13,0)
 ;             -    : Move up to parent file
"RTN","RGUTDIC",14,0)
 ;             @n   : Delete IEN #n (or last referenced if missing)
"RTN","RGUTDIC",15,0)
 ;             =x;y : Lookup y at current level using options in x
"RTN","RGUTDIC",16,0)
 ;             ?x;y ; Lookup y using RGUTLKP utility with options in x
"RTN","RGUTDIC",17,0)
 ;             >x;y : Read fields specified in y using options in x
"RTN","RGUTDIC",18,0)
 ;             <x;y : Write fields specified in y using options in x
"RTN","RGUTDIC",19,0)
 ;             ~x;y : Same as <, but creates new entry
"RTN","RGUTDIC",20,0)
 ;             %n   : Force DINUM to n
"RTN","RGUTDIC",21,0)
 ; Outputs:
"RTN","RGUTDIC",22,0)
 ;     Returns in the first piece the IEN of the entry or...
"RTN","RGUTDIC",23,0)
 ;      0 = Entry was deleted
"RTN","RGUTDIC",24,0)
 ;     -1 = Entry was rejected
"RTN","RGUTDIC",25,0)
 ;     -2 = Entry locked by another process
"RTN","RGUTDIC",26,0)
 ;     -3 = Unexpected error
"RTN","RGUTDIC",27,0)
 ;=================================================================
"RTN","RGUTDIC",28,0)
ENTRY(%RGDIC,%RGCMD) ;
"RTN","RGUTDIC",29,0)
 S %RGDIC(0)=+$G(DUZ)
"RTN","RGUTDIC",30,0)
 N DUZ,DIC,DINUM,DIE,DIQ,DIQUIET,DIK,%RGX,%RGIEN,%RGARG,%RGN1,%RGN2,%RGZ,X,Y
"RTN","RGUTDIC",31,0)
 N DA,DC,DD,DG,DH,DK,DL,DO,DQ,DR,DU,DV,DW,DY
"RTN","RGUTDIC",32,0)
 S DUZ=%RGDIC(0),DUZ(0)="@",@$$TRAP^RGUTOS("ERROR^RGUTDIC"),%RGCMD=$G(%RGCMD),%RGIEN="",DIQUIET=1
"RTN","RGUTDIC",33,0)
 ; Build the bookmark if a global reference or file # passed
"RTN","RGUTDIC",34,0)
 I %RGDIC'[U D
"RTN","RGUTDIC",35,0)
 .S:%RGDIC'=+%RGDIC %RGDIC=+$O(^DIC("B",%RGDIC,0))
"RTN","RGUTDIC",36,0)
 .S %RGDIC=$$ROOT^DILFD(%RGDIC)_U_U_%RGDIC
"RTN","RGUTDIC",37,0)
 I $P(%RGDIC,U,4)="" D
"RTN","RGUTDIC",38,0)
 .S %RGZ=U_$P(%RGDIC,U,2),%RGZ=$E(%RGZ,1,$L(%RGZ)-1),%RGZ=%RGZ_$S(%RGZ["(":")",1:"")
"RTN","RGUTDIC",39,0)
 .S $P(%RGDIC,U,4)=$P(@%RGZ@(0),U,2)
"RTN","RGUTDIC",40,0)
 F %RGN1=1:1:$L(%RGCMD,"|") S %RGARG=$P(%RGCMD,"|",%RGN1),%RGZ=$E(%RGARG) D  Q:%RGIEN<0
"RTN","RGUTDIC",41,0)
 .S %RGN2=$F("-+=@><~?%",%RGZ)
"RTN","RGUTDIC",42,0)
 .S:%RGN2 %RGN2=%RGN2-1,%RGARG=$E(%RGARG,2,999)
"RTN","RGUTDIC",43,0)
 .D DA,@%RGN2
"RTN","RGUTDIC",44,0)
 .S:%RGIEN>0 $P(%RGDIC,U,3)=%RGIEN
"RTN","RGUTDIC",45,0)
 S $P(%RGDIC,U)=%RGIEN
"RTN","RGUTDIC",46,0)
 Q %RGDIC
"RTN","RGUTDIC",47,0)
 ; Set IEN
"RTN","RGUTDIC",48,0)
0 S:%RGARG'<0 %RGIEN=$S($D(@%RGDIC(2)@(+%RGARG)):+%RGARG,1:0),$P(%RGDIC,U,3)=%RGIEN
"RTN","RGUTDIC",49,0)
 Q
"RTN","RGUTDIC",50,0)
 ; Move up to parent file
"RTN","RGUTDIC",51,0)
1 N %RGX,%RGY
"RTN","RGUTDIC",52,0)
 S $P(%RGDIC,U,4)=$P($P(%RGDIC,U,4),"|",2,999)
"RTN","RGUTDIC",53,0)
 S %RGY=$P(%RGDIC,U,2),%RGX=$L(%RGY,"|"),$P(%RGDIC,U,2)=$P(%RGY,"|",1,%RGX-1)
"RTN","RGUTDIC",54,0)
 S %RGIEN=+$P(%RGY,"|",%RGX),$P(%RGDIC,U,3)=%RGIEN
"RTN","RGUTDIC",55,0)
 D DA
"RTN","RGUTDIC",56,0)
 Q
"RTN","RGUTDIC",57,0)
 ; Move down to subfile
"RTN","RGUTDIC",58,0)
2 N %RGX,%RGY,%RGZ
"RTN","RGUTDIC",59,0)
 I $P(%RGDIC,U,3)'>0 S %RGIEN=-1 Q
"RTN","RGUTDIC",60,0)
 S %RGY=+$P(%RGDIC,U,4)
"RTN","RGUTDIC",61,0)
 S:%RGARG'=+%RGARG %RGARG=+$O(^DD(%RGY,"B",%RGARG,0)),%RGARG=+$P($G(^DD(%RGY,%RGARG,0)),U,2)
"RTN","RGUTDIC",62,0)
 S %RGX=+%RGARG,%RGZ=+$O(^DD(%RGY,"SB",%RGX,0)),%RGZ=$P($P(^DD(%RGY,%RGZ,0),U,4),";"),%RGX=$P(^(0),U,2)
"RTN","RGUTDIC",63,0)
 S:%RGZ'=+%RGZ %RGZ=""""_%RGZ_""""
"RTN","RGUTDIC",64,0)
 S $P(%RGDIC,U,4)=%RGX_"|"_$P(%RGDIC,U,4),$P(%RGDIC,U,2)=$P(%RGDIC,U,2)_"|"_$P(%RGDIC,U,3)_","_%RGZ_","
"RTN","RGUTDIC",65,0)
 S %RGIEN="",$P(%RGDIC,U,3)=""
"RTN","RGUTDIC",66,0)
 D DA
"RTN","RGUTDIC",67,0)
 Q
"RTN","RGUTDIC",68,0)
 ; Lookup an entry
"RTN","RGUTDIC",69,0)
3 N X,Y
"RTN","RGUTDIC",70,0)
 I %RGARG[";" S DIC(0)=$P(%RGARG,";"),%RGARG=$P(%RGARG,";",2,999)
"RTN","RGUTDIC",71,0)
 E  S DIC(0)="XMF"
"RTN","RGUTDIC",72,0)
 S DIC=%RGDIC(1),X=%RGARG
"RTN","RGUTDIC",73,0)
 D ^DIC
"RTN","RGUTDIC",74,0)
 S %RGIEN=+Y
"RTN","RGUTDIC",75,0)
 Q
"RTN","RGUTDIC",76,0)
 ; Delete an entry
"RTN","RGUTDIC",77,0)
4 N X,Y
"RTN","RGUTDIC",78,0)
 S:%RGARG DA=%RGARG
"RTN","RGUTDIC",79,0)
 S DIK=%RGDIC(1),%RGIEN=0
"RTN","RGUTDIC",80,0)
 D ^DIK
"RTN","RGUTDIC",81,0)
 Q
"RTN","RGUTDIC",82,0)
 ; Extract data
"RTN","RGUTDIC",83,0)
5 N %RGZ,%RGZ1,%RGX,%RGY
"RTN","RGUTDIC",84,0)
 I '%RGIEN S %RGIEN=-1 Q
"RTN","RGUTDIC",85,0)
 S DR=""
"RTN","RGUTDIC",86,0)
 F %RGX=2:1:$L(%RGARG,";") D
"RTN","RGUTDIC",87,0)
 .S %RGY=$P(%RGARG,";",%RGX)
"RTN","RGUTDIC",88,0)
 .I %RGY["=" S %RGZ=$$FLD($P(%RGY,"=",2)),%RGZ1(%RGZ,$P(%RGY,"="))="",%RGY=%RGZ
"RTN","RGUTDIC",89,0)
 .S DR=DR_$S($L(DR):";",1:"")_%RGY
"RTN","RGUTDIC",90,0)
 S DIC=%RGDIC(1),DIQ(0)=$P(%RGARG,";")
"RTN","RGUTDIC",91,0)
 S:DIQ(0)="" DIQ(0)="E"
"RTN","RGUTDIC",92,0)
 K ^UTILITY("DIQ1",$J)
"RTN","RGUTDIC",93,0)
 D
"RTN","RGUTDIC",94,0)
 .N X,Y
"RTN","RGUTDIC",95,0)
 .D EN^DIQ1
"RTN","RGUTDIC",96,0)
 F %RGX=0:0 S %RGX=$O(%RGZ1(%RGX)),%RGZ="" Q:'%RGX  D
"RTN","RGUTDIC",97,0)
 .F  S %RGZ=$O(%RGZ1(%RGX,%RGZ)),%RGZ1="" Q:%RGZ=""  D
"RTN","RGUTDIC",98,0)
 ..F %RGY="E","I" D
"RTN","RGUTDIC",99,0)
 ...S:$D(^UTILITY("DIQ1",$J,+$P(%RGDIC,U,4),%RGIEN,%RGX,%RGY)) %RGZ1=%RGZ1_$S($L(%RGZ1):U,1:"")_^(%RGY)
"RTN","RGUTDIC",100,0)
 ..S @%RGZ=%RGZ1
"RTN","RGUTDIC",101,0)
 Q
"RTN","RGUTDIC",102,0)
 ; Edit existing entry
"RTN","RGUTDIC",103,0)
6 S DIC(0)=$P(%RGARG,";"),DIC("P")=$P($P(%RGDIC,U,4),"|"),%RGARG=$P(%RGARG,";",2,999)
"RTN","RGUTDIC",104,0)
 I %RGIEN'>0 S %RGIEN=-1 Q
"RTN","RGUTDIC",105,0)
 S DIE=%RGDIC(1),DR=%RGARG
"RTN","RGUTDIC",106,0)
 L +@%RGDIC(2)@(%RGIEN):$S(DIC(0)["!":9999999,1:0)
"RTN","RGUTDIC",107,0)
 E  S %RGIEN=-2 Q
"RTN","RGUTDIC",108,0)
 D ^DIE
"RTN","RGUTDIC",109,0)
 L -@%RGDIC(2)@(%RGIEN)
"RTN","RGUTDIC",110,0)
 S %RGIEN=+$G(DA)
"RTN","RGUTDIC",111,0)
 Q
"RTN","RGUTDIC",112,0)
 ; Create new entry
"RTN","RGUTDIC",113,0)
7 N X,Y,DD,DO,DLAYGO
"RTN","RGUTDIC",114,0)
 S DIC=%RGDIC(1),DIC(0)=$P(%RGARG,";")_"L",DIC("P")=$P($P(%RGDIC,U,4),"|"),Y=$P(%RGARG,";",2),%RGARG=DIC(0)_";"_$P(%RGARG,";",3,999),DLAYGO=DIC("P")\1
"RTN","RGUTDIC",115,0)
 I +Y'=.01 S %RGIEN=-1 Q
"RTN","RGUTDIC",116,0)
 S X=$P(Y,"/",4)
"RTN","RGUTDIC",117,0)
 S:X="" X=$P(Y,"/",5)
"RTN","RGUTDIC",118,0)
 X:$E(X)=U $E(X,2,999)
"RTN","RGUTDIC",119,0)
 I $P(^DD(+DIC("P"),.01,0),U,2)["W" D
"RTN","RGUTDIC",120,0)
 .D WP
"RTN","RGUTDIC",121,0)
 E  D ^DIC:DIC(0)'["U",FILE^DICN:DIC(0)["U"
"RTN","RGUTDIC",122,0)
 S %RGIEN=+Y
"RTN","RGUTDIC",123,0)
 I %RGIEN>0,$P(%RGARG,";",2,99)'="" D DA,6
"RTN","RGUTDIC",124,0)
 K DINUM
"RTN","RGUTDIC",125,0)
 Q
"RTN","RGUTDIC",126,0)
8 ; Lookup entry
"RTN","RGUTDIC",127,0)
 N %RGOPT,%RGP,RGFN
"RTN","RGUTDIC",128,0)
 S %RGOPT=$P(%RGARG,";"),%RGARG=$P(%RGARG,";",2,999),RGFN=+$P(%RGDIC,U,4)
"RTN","RGUTDIC",129,0)
 S %RGP=+$P(%RGDIC,U,4),%RGP=$P($G(^DD(%RGP,.01,0)),U)
"RTN","RGUTDIC",130,0)
 S:$L(%RGP) %RGP=%RGP_": "
"RTN","RGUTDIC",131,0)
 S %RGIEN=$$ENTRY^RGUTLKP(%RGDIC(2),%RGOPT,%RGP,"",%RGARG,"","",$X,$Y,"","","HLP^RGUTDIC")
"RTN","RGUTDIC",132,0)
 Q
"RTN","RGUTDIC",133,0)
 ; Force DINUM
"RTN","RGUTDIC",134,0)
9 S DINUM=%RGARG
"RTN","RGUTDIC",135,0)
 Q
"RTN","RGUTDIC",136,0)
HLP W $G(^DD(+RGFN,.01,3)),!
"RTN","RGUTDIC",137,0)
 Q
"RTN","RGUTDIC",138,0)
 ; Word processing field (special case of #7)
"RTN","RGUTDIC",139,0)
WP N %RGZ,%RGZ1
"RTN","RGUTDIC",140,0)
 I X="@" D
"RTN","RGUTDIC",141,0)
 .K @%RGDIC(2)
"RTN","RGUTDIC",142,0)
 .S Y=0
"RTN","RGUTDIC",143,0)
 E  D
"RTN","RGUTDIC",144,0)
 .S %RGZ=$G(@%RGDIC(2)@(0)),Y=$G(DINUM,1+$O(^($C(1)),-1))
"RTN","RGUTDIC",145,0)
 .S %RGZ1=+$P(%RGZ,U,4),%RGZ=+$P(%RGZ,U,3)
"RTN","RGUTDIC",146,0)
 .S:Y>%RGZ %RGZ=Y
"RTN","RGUTDIC",147,0)
 .S:'$D(^(Y)) %RGZ1=%RGZ1+1
"RTN","RGUTDIC",148,0)
 .S ^(0)=U_U_%RGZ_U_%RGZ1_U_$G(DT),^(Y,0)=X
"RTN","RGUTDIC",149,0)
 Q:$P(^DD(+DIC("P"),.01,0),U,2)'["a"
"RTN","RGUTDIC",150,0)
 S %RGIEN=Y
"RTN","RGUTDIC",151,0)
 D DA,WPAUDIT^CCCODAUD(+DIC("P"),.DA,X,"")
"RTN","RGUTDIC",152,0)
 Q
"RTN","RGUTDIC",153,0)
 ; Trap unexpected error
"RTN","RGUTDIC",154,0)
ERROR S $P(%RGDIC,U)=-3
"RTN","RGUTDIC",155,0)
 Q %RGDIC
"RTN","RGUTDIC",156,0)
 ; Return field #
"RTN","RGUTDIC",157,0)
FLD(X) Q $S(X=+X:X,1:+$O(^DD(+$P(%RGDIC,U,4),"B",X,0)))
"RTN","RGUTDIC",158,0)
 ; Set up DA array
"RTN","RGUTDIC",159,0)
DA N %RGZ,%RGZ1,%RGZ2
"RTN","RGUTDIC",160,0)
 K DA
"RTN","RGUTDIC",161,0)
 S:'$G(%RGIEN) %RGIEN=$P(%RGDIC,U,3)
"RTN","RGUTDIC",162,0)
 S %RGZ=$P(%RGDIC,U,2),%RGZ2=$L(%RGZ,"|"),DA=%RGIEN
"RTN","RGUTDIC",163,0)
 F %RGZ1=2:1:%RGZ2 S DA(%RGZ2-%RGZ1+1)=+$P(%RGZ,"|",%RGZ1)
"RTN","RGUTDIC",164,0)
 S %RGDIC(1)=U_$TR($P(%RGDIC,U,2),"|"),%RGDIC(2)=$E(%RGDIC(1),1,$L(%RGDIC(1))-1),%RGDIC(2)=%RGDIC(2)_$S(%RGDIC(2)["(":")",1:"")
"RTN","RGUTDIC",165,0)
 Q
"RTN","RGUTDT")
0^37^B4547736
"RTN","RGUTDT",1,0)
RGUTDT ;RI/CBMI/DKM - FM date to formatted date;03-Mar-2015 14:24;DKM
"RTN","RGUTDT",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTDT",3,0)
 ;;
"RTN","RGUTDT",4,0)
 ;=================================================================
"RTN","RGUTDT",5,0)
 ; Inputs:
"RTN","RGUTDT",6,0)
 ;   RGDAT = date to format (DHCP format or $H format)
"RTN","RGUTDT",7,0)
 ;   RGFMT = date and time format control (optional)
"RTN","RGUTDT",8,0)
 ;      xxx0 = dd-mmm-yyyy
"RTN","RGUTDT",9,0)
 ;      xxx1 = mmm dd,yyyy
"RTN","RGUTDT",10,0)
 ;      xxx2 = mm/dd/yyyy
"RTN","RGUTDT",11,0)
 ;      xxx3 = mm-dd-yyyy
"RTN","RGUTDT",12,0)
 ;      xx0x = hh:mm
"RTN","RGUTDT",13,0)
 ;      xx1x = hh:mm xx
"RTN","RGUTDT",14,0)
 ;      x0xx = use space to separate date/time
"RTN","RGUTDT",15,0)
 ;      x1xx = use @ to separate date/time
"RTN","RGUTDT",16,0)
 ;      0xxx = allow leading zeros
"RTN","RGUTDT",17,0)
 ;      1xxx = remove leading zeros
"RTN","RGUTDT",18,0)
 ; Outputs:
"RTN","RGUTDT",19,0)
 ;   Returns formatted date
"RTN","RGUTDT",20,0)
 ;=================================================================
"RTN","RGUTDT",21,0)
ENTRY(RGDAT,RGFMT) ; EP
"RTN","RGUTDT",22,0)
 S RGDAT=$G(RGDAT,$H)
"RTN","RGUTDT",23,0)
 Q:'RGDAT ""
"RTN","RGUTDT",24,0)
 N RGZ1,RGZ2,RGZ3,RGZ4,RGDLM,RGTM
"RTN","RGUTDT",25,0)
 S:RGDAT?1.N1",".N RGDAT=$$HTFM^XLFDT(RGDAT)
"RTN","RGUTDT",26,0)
 S RGFMT=$G(RGFMT)#100000,RGFMT=RGFMT#10000,RGZ4=RGFMT\1000,RGFMT=RGFMT#1000,RGDLM=$S(RGFMT>99:"@",1:" "),RGFMT=RGFMT#100,RGTM=RGFMT\10,RGFMT=RGFMT#10
"RTN","RGUTDT",27,0)
 I RGDAT\1 D
"RTN","RGUTDT",28,0)
 .S RGZ3=RGDAT\1+17000000,RGZ1=$E(RGZ3,7,8),RGZ2=$E(RGZ3,5,6),RGZ3=$E(RGZ3,1,4)
"RTN","RGUTDT",29,0)
 .S:RGZ4 RGZ1=+RGZ1,RGZ2=+RGZ2
"RTN","RGUTDT",30,0)
 .S:RGFMT<2 RGZ2=$P("Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",",",RGZ2)
"RTN","RGUTDT",31,0)
 .S RGZ1=$S('RGFMT:RGZ1_"-"_RGZ2_"-"_RGZ3,RGFMT=1:RGZ2_" "_RGZ1_","_RGZ3,RGFMT=2:RGZ2_"/"_RGZ1_"/"_RGZ3,1:RGZ2_"-"_RGZ1_"-"_RGZ3)
"RTN","RGUTDT",32,0)
 E  S RGZ1=""
"RTN","RGUTDT",33,0)
 S RGZ2=RGDAT#1*10000+10000\1
"RTN","RGUTDT",34,0)
 I RGZ2=10000!(RGZ2>12400) S RGZ2=""
"RTN","RGUTDT",35,0)
 E  D
"RTN","RGUTDT",36,0)
 .S:RGTM RGZ2=$S(RGZ2=12400:RGZ2-1200_" am",RGZ2>11299:RGZ2-1200_" pm",RGZ2>11199:RGZ2_" pm",RGZ2<10099:RGZ2+1200_" am",1:RGZ2_" am")
"RTN","RGUTDT",37,0)
 .S RGZ3=$S(RGZ4:+$E(RGZ2,2,3),1:$E(RGZ2,2,3)),RGZ2=RGZ3_":"_$E(RGZ2,4,8)
"RTN","RGUTDT",38,0)
 Q RGZ1_$S('$L(RGZ2):"",$L(RGZ1):RGDLM,1:"")_RGZ2
"RTN","RGUTEDT")
0^38^B45219659
"RTN","RGUTEDT",1,0)
RGUTEDT ;RI/CBMI/DKM - Screen-oriented line editor;22-Mar-2015 02:37;DKM
"RTN","RGUTEDT",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTEDT",3,0)
 ;;
"RTN","RGUTEDT",4,0)
 ;=================================================================
"RTN","RGUTEDT",5,0)
 ; Inputs:
"RTN","RGUTEDT",6,0)
 ;   RGDATA  = Data to edit
"RTN","RGUTEDT",7,0)
 ;   RGLEN   = Maximum length of data
"RTN","RGUTEDT",8,0)
 ;   RGX     = Starting column position
"RTN","RGUTEDT",9,0)
 ;   RGY     = Starting row position
"RTN","RGUTEDT",10,0)
 ;   RGVALD  = List of valid inputs (optional)
"RTN","RGUTEDT",11,0)
 ;   RGDISV  = DISV node to save under (optional)
"RTN","RGUTEDT",12,0)
 ;   RGTERM  = Valid input terminators (default=<CR>)
"RTN","RGUTEDT",13,0)
 ;   RGABRT  = Valid input abort characters (default=none)
"RTN","RGUTEDT",14,0)
 ;   RGRM    = Right margin setting (default=IOM or 80)
"RTN","RGUTEDT",15,0)
 ;   RGQUIT  = Exit code (returned)
"RTN","RGUTEDT",16,0)
 ;   RGOPT   = Input options
"RTN","RGUTEDT",17,0)
 ;      C = Mark <CR> with ~
"RTN","RGUTEDT",18,0)
 ;      E = Echo off
"RTN","RGUTEDT",19,0)
 ;      H = Horizontal scroll
"RTN","RGUTEDT",20,0)
 ;      I = No timeout
"RTN","RGUTEDT",21,0)
 ;      L = Lowercase only
"RTN","RGUTEDT",22,0)
 ;      O = Overwrite mode
"RTN","RGUTEDT",23,0)
 ;      Q = Quiet mode
"RTN","RGUTEDT",24,0)
 ;      R = Reverse video
"RTN","RGUTEDT",25,0)
 ;      T = Auto-terminate
"RTN","RGUTEDT",26,0)
 ;      U = Uppercase only
"RTN","RGUTEDT",27,0)
 ;      V = Up/down cursor keys terminate input
"RTN","RGUTEDT",28,0)
 ;      X = Suppress auto-erase
"RTN","RGUTEDT",29,0)
 ; Outputs:
"RTN","RGUTEDT",30,0)
 ;   Return value = Edited data
"RTN","RGUTEDT",31,0)
 ;=================================================================
"RTN","RGUTEDT",32,0)
ENTRY(RGDATA,RGLEN,RGX,RGY,RGVALD,RGOPT,RGDISV,RGTERM,RGABRT,RGRM,RGQUIT) ;
"RTN","RGUTEDT",33,0)
 N RGZ,RGZ1,RGZ2,RGSAVE,RGINS,RGAE,RGBUF,RGTAB,RGPOS,RGEON,RGLEFT,RGBEL,RGMAX,RGRVON,RGRVOFF,RGC,RGW
"RTN","RGUTEDT",34,0)
 S RGVALD=$G(RGVALD),RGOPT=$$UP^XLFSTR($G(RGOPT)),RGBEL=$S(RGOPT'["Q":$C(7),1:""),RGDISV=$G(RGDISV)
"RTN","RGUTEDT",35,0)
 S:$G(RGTERM)="" RGTERM=$C(13)                                         ; Valid line terminators
"RTN","RGUTEDT",36,0)
 S RGABRT=$G(RGABRT)                                                   ; Valid input abort keys
"RTN","RGUTEDT",37,0)
 S RGRVON=$C(27,91,55,109),RGRVOFF=$C(27,91,109)                       ; Reverse video control
"RTN","RGUTEDT",38,0)
 S RGINS=RGOPT'["O"                                                    ; Default mode = insert
"RTN","RGUTEDT",39,0)
 S RGAE=RGOPT'["X"                                                     ; Auto-erase option
"RTN","RGUTEDT",40,0)
 S RGEON=RGOPT'["E"                                                    ; No echo option
"RTN","RGUTEDT",41,0)
 I RGOPT["I"!'$D(DTIME) N DTIME S DTIME=999999                          ; Suppress timeout option
"RTN","RGUTEDT",42,0)
 S RGBUF=""
"RTN","RGUTEDT",43,0)
 S RGRM=$G(RGRM,$G(IOM,80))                                            ; Display width
"RTN","RGUTEDT",44,0)
 S RGTAB=$C(9)                                                         ; Tab character
"RTN","RGUTEDT",45,0)
 S RGX=$G(RGX,$X),RGY=$G(RGY,$Y),RGW=RGRM-RGX
"RTN","RGUTEDT",46,0)
 S:RGW'>0 RGW=1
"RTN","RGUTEDT",47,0)
 S:'$G(RGLEN) RGLEN=RGW                                                ; Default field width
"RTN","RGUTEDT",48,0)
 S RGMAX=$S(RGOPT["H":250,1:RGLEN)                                     ; Maximum data length
"RTN","RGUTEDT",49,0)
 S (RGSAVE,RGDATA)=$E($G(RGDATA),1,RGMAX)                              ; Truncate data if too long
"RTN","RGUTEDT",50,0)
 D RM^RGUTOS(0)
"RTN","RGUTEDT",51,0)
 X ^%ZOSF("EOFF")
"RTN","RGUTEDT",52,0)
 F  Q:RGDATA'[RGTAB  S RGZ=$P(RGDATA,RGTAB),RGDATA=RGZ_$J("",8-($L(RGZ)#8))_$P(RGDATA,RGTAB,2,999)
"RTN","RGUTEDT",53,0)
RESTART D RESET
"RTN","RGUTEDT",54,0)
AGAIN F RGQUIT=0:0 Q:RGQUIT  D NXT S RGAE=0
"RTN","RGUTEDT",55,0)
 X ^%ZOSF("EON")
"RTN","RGUTEDT",56,0)
 W $$XY^RGUT(RGX,RGY),$S(RGOPT["R":RGRVOFF,1:"")
"RTN","RGUTEDT",57,0)
 I RGDISV'="" Q:"^^"[RGDATA RGDATA S:RGDATA=" " RGDATA=$G(^DISV(DUZ,RGDISV))
"RTN","RGUTEDT",58,0)
 S:RGDISV'="" ^DISV(DUZ,RGDISV)=RGDATA
"RTN","RGUTEDT",59,0)
 Q RGDATA                                                              ; Return to calling routine
"RTN","RGUTEDT",60,0)
NXT D POSCUR()                                                            ; Position cursor
"RTN","RGUTEDT",61,0)
 R *RGC:DTIME                                                          ; Next character typed
"RTN","RGUTEDT",62,0)
 I RGC=27 D ESC Q:'RGC
"RTN","RGUTEDT",63,0)
 I RGC<1!(RGABRT[$C(RGC)) S RGDATA=U,RGQUIT=1 Q
"RTN","RGUTEDT",64,0)
 I RGTERM[$C(RGC) D TERM Q
"RTN","RGUTEDT",65,0)
 I RGC=27 Q
"RTN","RGUTEDT",66,0)
 I RGC<27 S RGZ="CTL"_$C(RGC+64) D:$L($T(@RGZ)) @(RGZ) Q
"RTN","RGUTEDT",67,0)
 I RGC=127!(RGC=240) D CTLH Q
"RTN","RGUTEDT",68,0)
 I RGC>64,RGC<91,RGOPT["L" S RGC=RGC+32
"RTN","RGUTEDT",69,0)
 E  I RGC>96,RGC<123,RGOPT["U" S RGC=RGC-32
"RTN","RGUTEDT",70,0)
 I $L(RGVALD),RGVALD'[$C(RGC) W RGBEL Q
"RTN","RGUTEDT",71,0)
 D:RGAE CTLK,POSCUR()                                                  ; Erase buffer if auto erase on
"RTN","RGUTEDT",72,0)
 D INSW($C(RGC))
"RTN","RGUTEDT",73,0)
 S RGQUIT=RGPOS=RGLEN&(RGOPT["T")
"RTN","RGUTEDT",74,0)
 Q
"RTN","RGUTEDT",75,0)
CTLA S RGINS='RGINS                                                        ; Toggle insert mode
"RTN","RGUTEDT",76,0)
 Q
"RTN","RGUTEDT",77,0)
CTLB D MOVETO(0)                                                           ; Move cursor to beginning
"RTN","RGUTEDT",78,0)
 Q
"RTN","RGUTEDT",79,0)
CTLX S RGDATA=RGSAVE                                                       ; Restore buffer to original
"RTN","RGUTEDT",80,0)
 G RESET
"RTN","RGUTEDT",81,0)
CTLE D MOVETO($L(RGDATA))                                                  ; Move cursor to end
"RTN","RGUTEDT",82,0)
 Q
"RTN","RGUTEDT",83,0)
CTLI D INSW($J("",8-(RGPOS#8)))                                            ; Insert expanded tab
"RTN","RGUTEDT",84,0)
 Q
"RTN","RGUTEDT",85,0)
CTLJ F RGZ=RGPOS:-1:1 Q:$A(RGDATA,RGZ)'=32                                     ; Find previous nonspace
"RTN","RGUTEDT",86,0)
 F RGZ=RGZ:-1:1 Q:$A(RGDATA,RGZ)=32                                          ; Find previous space
"RTN","RGUTEDT",87,0)
 S RGBUF=$E(RGDATA,RGZ,RGPOS)                                            ; Save deleted portion
"RTN","RGUTEDT",88,0)
 S RGDATA=$E(RGDATA,1,RGZ-1)_$E(RGDATA,RGPOS+1,RGLEN)                    ; Remove word
"RTN","RGUTEDT",89,0)
 D MOVETO(RGZ-1)
"RTN","RGUTEDT",90,0)
 Q
"RTN","RGUTEDT",91,0)
CTLK S RGBUF=RGDATA                                                        ; Save buffer
"RTN","RGUTEDT",92,0)
 S RGDATA=""                                                           ; Erase buffer
"RTN","RGUTEDT",93,0)
 D RESET
"RTN","RGUTEDT",94,0)
 Q
"RTN","RGUTEDT",95,0)
CTLL S RGBUF=$E(RGDATA,RGPOS+1,RGLEN)                                      ; Save deleted portion
"RTN","RGUTEDT",96,0)
 S RGDATA=$E(RGDATA,1,RGPOS)                                           ; Truncate at current position
"RTN","RGUTEDT",97,0)
 D DSPLY(RGPOS)
"RTN","RGUTEDT",98,0)
 Q
"RTN","RGUTEDT",99,0)
CTLM D POSCUR(RGPOS),INSW("~"):RGOPT["C",MOVETO(RGPOS-$X+RGX+RGW)
"RTN","RGUTEDT",100,0)
 Q
"RTN","RGUTEDT",101,0)
CTLR D INSW(RGBUF)                                                         ; Insert at current position
"RTN","RGUTEDT",102,0)
 Q
"RTN","RGUTEDT",103,0)
CTLT D CTLL
"RTN","RGUTEDT",104,0)
 Q
"RTN","RGUTEDT",105,0)
CTLU S RGBUF=$E(RGDATA,1,RGPOS)                                            ; Save deleted portion
"RTN","RGUTEDT",106,0)
 S RGDATA=$E(RGDATA,RGPOS+1,RGLEN)                                     ; Remove to left of cursor
"RTN","RGUTEDT",107,0)
 D RESET
"RTN","RGUTEDT",108,0)
 Q
"RTN","RGUTEDT",109,0)
CTLH I 'RGPOS W RGBEL Q
"RTN","RGUTEDT",110,0)
 D LEFT
"RTN","RGUTEDT",111,0)
CTLD S RGDATA=$E(RGDATA,1,RGPOS)_$E(RGDATA,RGPOS+2,RGMAX)                  ; Delete character to left
"RTN","RGUTEDT",112,0)
 D DSPLY(RGPOS,1)
"RTN","RGUTEDT",113,0)
 Q
"RTN","RGUTEDT",114,0)
TERM S RGQUIT=2
"RTN","RGUTEDT",115,0)
 Q
"RTN","RGUTEDT",116,0)
ESC R *RGZ:1
"RTN","RGUTEDT",117,0)
 R:RGZ>0 *RGZ:1
"RTN","RGUTEDT",118,0)
 S RGC=0
"RTN","RGUTEDT",119,0)
 G UP:RGZ=65,DOWN:RGZ=66,RIGHT:RGZ=67,LEFT:RGZ=68                              ;Execute code
"RTN","RGUTEDT",120,0)
 S RGC=27
"RTN","RGUTEDT",121,0)
 Q
"RTN","RGUTEDT",122,0)
DSPLY(RGP1,RGP2) ;
"RTN","RGUTEDT",123,0)
 Q:'RGEON                                                              ; Refresh buffer display starting at position RGP1
"RTN","RGUTEDT",124,0)
 N RGZ,RGZ1
"RTN","RGUTEDT",125,0)
 S RGP1=+$G(RGP1,RGLEFT),RGZ=$E(RGDATA,RGP1+1,RGLEFT+RGLEN),RGP2=$S($D(RGP2):RGP2+$L(RGZ),1:RGLEN-RGP1+RGLEFT)
"RTN","RGUTEDT",126,0)
 S:RGP2>RGLEN RGP2=RGLEN
"RTN","RGUTEDT",127,0)
 S RGZ=RGZ_$J("",RGP2-$L(RGZ))
"RTN","RGUTEDT",128,0)
 F  D  Q:RGZ=""
"RTN","RGUTEDT",129,0)
 .D POSCUR(RGP1)
"RTN","RGUTEDT",130,0)
 .S RGZ1=RGRM-$X
"RTN","RGUTEDT",131,0)
 .S:RGZ1<1 RGZ1=1
"RTN","RGUTEDT",132,0)
 .W $E(RGZ,1,RGZ1)
"RTN","RGUTEDT",133,0)
 .S RGZ=$E(RGZ,RGZ1+1,999),RGP1=RGP1+RGZ1
"RTN","RGUTEDT",134,0)
 Q
"RTN","RGUTEDT",135,0)
INSW(RGTXT) ;
"RTN","RGUTEDT",136,0)
 S:RGPOS>$L(RGDATA) RGDATA=RGDATA_$J("",RGPOS-$L(RGDATA))              ; Pad if past end of buffer
"RTN","RGUTEDT",137,0)
 S RGDATA=$E($E(RGDATA,1,RGPOS)_RGTXT_$E(RGDATA,RGPOS+2-RGINS,RGMAX),1,RGMAX)
"RTN","RGUTEDT",138,0)
 D DSPLY(RGPOS,0),MOVETO(RGPOS+$L(RGTXT))
"RTN","RGUTEDT",139,0)
 Q
"RTN","RGUTEDT",140,0)
POSCUR(RGP) ;
"RTN","RGUTEDT",141,0)
 N RGZX,RGZY
"RTN","RGUTEDT",142,0)
 S RGP=+$G(RGP,RGPOS),RGZX=RGP-RGLEFT,RGZY=RGZX\RGW+RGY,RGZX=RGZX#RGW+RGX
"RTN","RGUTEDT",143,0)
 W $$XY^RGUT(RGZX,RGZY)
"RTN","RGUTEDT",144,0)
 Q
"RTN","RGUTEDT",145,0)
MOVETO(RGP) ;
"RTN","RGUTEDT",146,0)
 I RGP>RGMAX!(RGP<0) W RGBEL Q
"RTN","RGUTEDT",147,0)
 S RGPOS=RGP,RGP=RGLEFT
"RTN","RGUTEDT",148,0)
 S:RGPOS<RGLEFT RGLEFT=RGPOS-RGW-1
"RTN","RGUTEDT",149,0)
 S:RGLEFT+RGLEN<RGPOS RGLEFT=RGPOS-RGW+1
"RTN","RGUTEDT",150,0)
 S:RGLEFT'<RGMAX RGLEFT=RGMAX-RGW
"RTN","RGUTEDT",151,0)
 S:RGLEFT<0 RGLEFT=0
"RTN","RGUTEDT",152,0)
 D DSPLY():RGLEFT'=RGP,POSCUR()
"RTN","RGUTEDT",153,0)
 Q
"RTN","RGUTEDT",154,0)
UP I RGOPT["V" S RGQUIT=3
"RTN","RGUTEDT",155,0)
 E  D MOVETO(RGPOS-RGW)
"RTN","RGUTEDT",156,0)
 Q
"RTN","RGUTEDT",157,0)
DOWN I RGOPT["V" S RGQUIT=4
"RTN","RGUTEDT",158,0)
 E  D MOVETO(RGPOS+RGW)
"RTN","RGUTEDT",159,0)
 Q
"RTN","RGUTEDT",160,0)
RIGHT D MOVETO(RGPOS+1)
"RTN","RGUTEDT",161,0)
 Q
"RTN","RGUTEDT",162,0)
LEFT D MOVETO(RGPOS-1)
"RTN","RGUTEDT",163,0)
 Q
"RTN","RGUTEDT",164,0)
RESET W $S(RGOPT["R":RGRVON,1:RGRVOFF)
"RTN","RGUTEDT",165,0)
 S (RGPOS,RGLEFT)=0                                                    ; Current edit offset
"RTN","RGUTEDT",166,0)
 D DSPLY()                                                             ; Refresh display
"RTN","RGUTEDT",167,0)
 Q
"RTN","RGUTHFS")
0^61^B5078426
"RTN","RGUTHFS",1,0)
RGUTHFS ;RI/CBMI/DKM - Host IO Support ;03-Mar-2015 14:24;DKM
"RTN","RGUTHFS",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTHFS",3,0)
 ;;
"RTN","RGUTHFS",4,0)
 ;=================================================================
"RTN","RGUTHFS",5,0)
 ; Capture output to HFS and optionally redirect to global
"RTN","RGUTHFS",6,0)
 ;   EXEC = Code to execute
"RTN","RGUTHFS",7,0)
 ;   ROOT = Global root to receive output (or null to leave in HFS)
"RTN","RGUTHFS",8,0)
 ;   RM   = Right margin setting (defaults to 80)
"RTN","RGUTHFS",9,0)
CAPTURE(EXEC,ROOT,RM) ;EP
"RTN","RGUTHFS",10,0)
 N UFN,HNDL,TMP,IOM,IOSL,IOST,IOF,IOT,IOS,$ET
"RTN","RGUTHFS",11,0)
 S $ET="",UFN=$$UFN^RGUT,TMP=$$DEFDIR^RGUTOS,HNDL="RGUTHFS",@$$TRAP^RGUTOS("ERR^RGUTHFS")
"RTN","RGUTHFS",12,0)
 S:$L($G(ROOT)) ROOT=$NA(@ROOT)
"RTN","RGUTHFS",13,0)
 D OPEN^%ZISH(HNDL,TMP,UFN,"W")
"RTN","RGUTHFS",14,0)
 D:'POP IOVAR(.RM),EXEC,HFSCLOSE(HNDL,UFN)
"RTN","RGUTHFS",15,0)
 Q:$Q TMP_UFN
"RTN","RGUTHFS",16,0)
 Q
"RTN","RGUTHFS",17,0)
EXEC X EXEC
"RTN","RGUTHFS",18,0)
 Q
"RTN","RGUTHFS",19,0)
 ; Error trap
"RTN","RGUTHFS",20,0)
ERR D @^%ZOSF("ERRTN"),HFSCLOSE(HNDL,UFN,1)
"RTN","RGUTHFS",21,0)
 Q:$Q ""
"RTN","RGUTHFS",22,0)
 Q
"RTN","RGUTHFS",23,0)
 ; Setup IO variables based on IO Device
"RTN","RGUTHFS",24,0)
IOVAR(XIOM,XIO,XIOSL,XIOST,XIOF,XIOT) ;
"RTN","RGUTHFS",25,0)
 N X
"RTN","RGUTHFS",26,0)
 S ION=$G(XIO,"RGUT HFS DEVICE"),IOS=+$O(^%ZIS(1,"B",ION,0)),IOM=80,IOSL=62,IOST=$G(XIOST,"P-OTHER"),IOF=$G(XIOF,""""""),IOT=$G(XIOT,"HFS")
"RTN","RGUTHFS",27,0)
 S:$D(^%ZIS(1,IOS,0)) IOST(0)=+$G(^("SUBTYPE")),IOT=$G(^("TYPE"),IOT),IOST=$P($G(^%ZIS(2,IOST(0),0),IOST),U)
"RTN","RGUTHFS",28,0)
 S X=$O(^%ZIS(2,"B",IOST,0))
"RTN","RGUTHFS",29,0)
 S:X IOST(0)=X,X=$G(^%ZIS(2,X,1)),IOM=$P(X,U),IOF=$P(X,U,2),IOSL=$P(X,U,3)
"RTN","RGUTHFS",30,0)
 S:$G(XIOM) IOM=XIOM
"RTN","RGUTHFS",31,0)
 S:$G(XIOSL) IOSL=XIOSL
"RTN","RGUTHFS",32,0)
 U IO
"RTN","RGUTHFS",33,0)
 Q
"RTN","RGUTHFS",34,0)
 ; Move HFS data to global (if ROOT specified) and cleanup
"RTN","RGUTHFS",35,0)
HFSCLOSE(HNDL,UFN,BAD) ;
"RTN","RGUTHFS",36,0)
 N DEL
"RTN","RGUTHFS",37,0)
 D GETDEV^%ZISUTL(HNDL)
"RTN","RGUTHFS",38,0)
 I IOT="HFS" D
"RTN","RGUTHFS",39,0)
 .D CLOSE^%ZISH(HNDL)
"RTN","RGUTHFS",40,0)
 E  D RMDEV^%ZISUTL(HNDL)
"RTN","RGUTHFS",41,0)
 Q:'$L($G(ROOT))
"RTN","RGUTHFS",42,0)
 K @ROOT
"RTN","RGUTHFS",43,0)
 I '$G(BAD),$$FTG^%ZISH($$DEFDIR^RGUTOS,UFN,$NA(@ROOT@(1)),$QL(ROOT)+1) D STRIP
"RTN","RGUTHFS",44,0)
 S DEL(UFN)=""
"RTN","RGUTHFS",45,0)
 I $$DEL^%ZISH($$DEFDIR^RGUTOS,"DEL")
"RTN","RGUTHFS",46,0)
 Q
"RTN","RGUTHFS",47,0)
 ; Strip off control chars and remove leading/trailing blank lines
"RTN","RGUTHFS",48,0)
STRIP N I,J,K,X
"RTN","RGUTHFS",49,0)
 S (I,J)=0
"RTN","RGUTHFS",50,0)
 F  S I=$O(@ROOT@(I)) Q:'I  S X=@ROOT@(I) D  S @ROOT@(I)=X
"RTN","RGUTHFS",51,0)
 .I X[$C(8),$L(X,$C(8))=$L(X,$C(95)) S X=$TR(X,$C(7,8,12,95))
"RTN","RGUTHFS",52,0)
 .E  S X=$TR(X,$C(7,8,12))
"RTN","RGUTHFS",53,0)
 .S:$L(X) J=I,K=$G(K,J)
"RTN","RGUTHFS",54,0)
 I $D(K) F  S I=$O(@ROOT@(I)) Q:I=K  K @ROOT@(I)
"RTN","RGUTHFS",55,0)
 F  S J=$O(@ROOT@(J)) Q:'J  K @ROOT@(J)
"RTN","RGUTHFS",56,0)
 Q
"RTN","RGUTIMP")
0^44^B10992396
"RTN","RGUTIMP",1,0)
RGUTIMP ;RI/CBMI/DKM - Import text into FileMan file;03-Mar-2015 14:24;DKM
"RTN","RGUTIMP",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIMP",3,0)
 ;;
"RTN","RGUTIMP",4,0)
 ;=================================================================
"RTN","RGUTIMP",5,0)
 ; Imports data from a specially formatted text file into a
"RTN","RGUTIMP",6,0)
 ; FileMan file.
"RTN","RGUTIMP",7,0)
 ; Inputs:
"RTN","RGUTIMP",8,0)
 ;   RGINP  = Full input file or global specification.
"RTN","RGUTIMP",9,0)
 ;   RGTRACE= If nonzero, generates a debug trace.
"RTN","RGUTIMP",10,0)
 ; Outputs:
"RTN","RGUTIMP",11,0)
 ;   Returns status code^status message.  Status code of 0 means
"RTN","RGUTIMP",12,0)
 ;   successful completion.
"RTN","RGUTIMP",13,0)
 ;=================================================================
"RTN","RGUTIMP",14,0)
ENTRY(RGINP,RGTRACE) ;
"RTN","RGUTIMP",15,0)
 N RGLN,RGFN,RGLVL,RGBM,RGC,RGLBL,RGQT,RGST,RGIO,RGGBL
"RTN","RGUTIMP",16,0)
 S @$$TRAP^RGUTOS("ERROR^RGUTIMP")
"RTN","RGUTIMP",17,0)
 S RGFN=0,RGLVL=-1,RGTRACE=+$G(RGTRACE),RGST=0,RGIO=$I,U="^",RGC=0,RGGBL=$E(RGINP)=U
"RTN","RGUTIMP",18,0)
 I RGGBL S RGINP=$$CREF^DILF(RGINP)
"RTN","RGUTIMP",19,0)
 E  D OPEN^RGUTOS(.RGINP,"R")
"RTN","RGUTIMP",20,0)
 F  Q:$$READ  D  Q:RGST
"RTN","RGUTIMP",21,0)
 .U RGIO
"RTN","RGUTIMP",22,0)
 .W:RGTRACE=1 RGC,*13
"RTN","RGUTIMP",23,0)
 .W:RGTRACE=2 RGC_": ",$$TRUNC^RGUT(RGLN,$G(IOM,80)-$X-2),!
"RTN","RGUTIMP",24,0)
 .D DOIT(RGLN)
"RTN","RGUTIMP",25,0)
 D:'RGGBL CLOSE^RGUTOS(.RGINP)
"RTN","RGUTIMP",26,0)
 Q RGST
"RTN","RGUTIMP",27,0)
READ() I 'RGGBL S RGC=RGC+1 Q $$READ^RGUTOS(.RGLN,RGINP)
"RTN","RGUTIMP",28,0)
 S RGC=$O(@RGINP@(RGC))
"RTN","RGUTIMP",29,0)
 Q:'RGC 1
"RTN","RGUTIMP",30,0)
 I $D(@RGINP@(RGC))#2 S RGLN=@RGINP@(RGC) Q 0
"RTN","RGUTIMP",31,0)
 I $D(@RGINP@(RGC,0))#2 S RGLN=@RGINP@(RGC,0) Q 0
"RTN","RGUTIMP",32,0)
 Q 1
"RTN","RGUTIMP",33,0)
ERROR D ERR("Fatal error",$$EC^%ZOSV)
"RTN","RGUTIMP",34,0)
 Q RGST
"RTN","RGUTIMP",35,0)
DOIT(RGLN) ;
"RTN","RGUTIMP",36,0)
 N RGZ,RGL,RGFLD,RGWP
"RTN","RGUTIMP",37,0)
 S RGLN=$$TRIM^RGUT(RGLN)
"RTN","RGUTIMP",38,0)
 I ";"[$E(RGLN) W:RGTRACE=3 $P(RGLN,";",2,999),! Q
"RTN","RGUTIMP",39,0)
 F RGL=0:1 Q:$E(RGLN,RGL+1)'="."
"RTN","RGUTIMP",40,0)
 S RGLN=$E(RGLN,RGL+1,999)
"RTN","RGUTIMP",41,0)
 I RGLN'[":" D ERR("Missing label",RGLN) Q
"RTN","RGUTIMP",42,0)
 S RGLBL=$$TRIM^RGUT($P(RGLN,":")),RGLN=$$TRIM^RGUT($P(RGLN,":",2,999))
"RTN","RGUTIMP",43,0)
 I 'RGL S RGFN=$$FILE(RGLN) Q
"RTN","RGUTIMP",44,0)
 I RGL>RGLVL D ERR("Invalid nesting",RGLN) Q
"RTN","RGUTIMP",45,0)
 S RGLVL=RGL,RGFN=+$P(RGBM(RGLVL),U,4)
"RTN","RGUTIMP",46,0)
 S RGFLD=$$FLD(RGLBL,RGFN)
"RTN","RGUTIMP",47,0)
 S RGZ=+$P($G(^DD(RGFN,RGFLD,0)),U,2)
"RTN","RGUTIMP",48,0)
 I RGZ D  Q:RGST
"RTN","RGUTIMP",49,0)
 .S RGLVL=RGLVL+1,RGFN=RGZ,RGBM(RGLVL)=$$ENTRY^RGUTDIC(RGBM(RGLVL-1),"+"_RGFN)
"RTN","RGUTIMP",50,0)
 .I +RGBM(RGLVL)<0 D ERR("Error access subfile entry",RGLBL) Q
"RTN","RGUTIMP",51,0)
 .S RGFLD=$$FLD(.01,RGFN)
"RTN","RGUTIMP",52,0)
 I 'RGFLD D ERR("Unknown field",RGLBL) Q
"RTN","RGUTIMP",53,0)
 I 'RGWP,RGLN="" Q
"RTN","RGUTIMP",54,0)
 ;S:RGLN="+" RGLN=U_$TR($P(RGBM(RGLVL),U,2),"|",",")_"$C(1))",RGLN=1+$O(@RGLN,-1)\1
"RTN","RGUTIMP",55,0)
 I RGFLD=.01!'RGBM(RGLVL)!RGWP D  Q
"RTN","RGUTIMP",56,0)
 .I 'RGWP,RGFLD'=.01 D ERR("First field is not primary index",RGLBL) Q
"RTN","RGUTIMP",57,0)
 .I 'RGWP D
"RTN","RGUTIMP",58,0)
 ..S RGBM(RGLVL)=$$ENTRY^RGUTDIC(RGBM(RGLVL),"="_RGLN)
"RTN","RGUTIMP",59,0)
 ..S:+RGBM(RGLVL)'>0 RGBM(RGLVL)=$$ENTRY^RGUTDIC(RGBM(RGLVL),"="_$$UP^XLFSTR(RGLN))
"RTN","RGUTIMP",60,0)
 .S:+RGBM(RGLVL)'>0!RGWP RGBM(RGLVL)=$$ENTRY^RGUTDIC(RGBM(RGLVL),$S(RGLN="@"&'RGWP:RGLN,1:"~LX;.01///^S X=RGLN"))
"RTN","RGUTIMP",61,0)
 .I +RGBM(RGLVL)'>0,RGLN'="@" D ERR("Error adding entry",RGLN)
"RTN","RGUTIMP",62,0)
 S RGBM(RGLVL)=$$ENTRY^RGUTDIC(RGBM(RGLVL),"<;"_RGFLD_"///^S X=RGLN")
"RTN","RGUTIMP",63,0)
 D:+RGBM(RGLVL)'>0 ERR("Error writing to field",RGLBL)
"RTN","RGUTIMP",64,0)
 Q
"RTN","RGUTIMP",65,0)
FILE(RGFN) ;
"RTN","RGUTIMP",66,0)
 K RGBM
"RTN","RGUTIMP",67,0)
 S RGBM(1)=$$ENTRY^RGUTDIC(RGFN),RGLVL=1
"RTN","RGUTIMP",68,0)
 I +RGBM(1)'<0 S RGFN=+$P(RGBM(1),U,4)
"RTN","RGUTIMP",69,0)
 E  D ERR("Error accessing database",RGFN)
"RTN","RGUTIMP",70,0)
 Q RGFN
"RTN","RGUTIMP",71,0)
FLD(RGNM,RGFN) ;
"RTN","RGUTIMP",72,0)
 N RGZ
"RTN","RGUTIMP",73,0)
 S RGZ=$S(RGNM="":.01,RGNM=+RGNM:RGNM,1:+$O(^DD(RGFN,"B",RGNM,0)))
"RTN","RGUTIMP",74,0)
 I '$D(^DD(RGFN,RGZ,0)) S RGZ=0
"RTN","RGUTIMP",75,0)
 E  S RGWP=$P(^(0),U,2)["W"
"RTN","RGUTIMP",76,0)
 Q RGZ
"RTN","RGUTIMP",77,0)
ERR(RGMSG,RGX) ;
"RTN","RGUTIMP",78,0)
 S RGST=RGC_U_RGMSG_$S($D(RGX):": "_RGX,1:"")
"RTN","RGUTIMP",79,0)
 W:RGTRACE=2 RGC_": "_$P(RGST,U,2,999),!
"RTN","RGUTIMP",80,0)
 Q
"RTN","RGUTIN")
1^45
"RTN","RGUTIN0")
0^46^B1098740
"RTN","RGUTIN0",1,0)
RGUTIN0 ;RI/CBMI/DKM - Platform-dependent operations;01-Apr-2015 09:11;DKM
"RTN","RGUTIN0",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN0",3,0)
 ;;
"RTN","RGUTIN0",4,0)
 ;=================================================================
"RTN","RGUTIN0",5,0)
 ; Return version #
"RTN","RGUTIN0",6,0)
VER() Q $P($T(+2),";",3)
"RTN","RGUTIN0",7,0)
CVTFN(RGFIL,RGROOT) ;
"RTN","RGUTIN0",8,0)
 N RGZ,RGZ1,RGD
"RTN","RGUTIN0",9,0)
 S RGD=$$DIRDLM,RGROOT=$G(RGROOT)
"RTN","RGUTIN0",10,0)
 S:$E(RGROOT,$L(RGROOT))=$E(RGD,3) RGROOT=$E(RGROOT,1,$L(RGROOT)-1)
"RTN","RGUTIN0",11,0)
 S RGZ=$L(RGFIL,"/"),RGZ1=$P(RGFIL,"/",1,RGZ-1),RGFIL=$P(RGFIL,"/",RGZ)
"RTN","RGUTIN0",12,0)
 S:$L(RGZ1) RGROOT=RGROOT_$E(RGD,$S($L(RGROOT):2,1:1))_$TR(RGZ1,"/.-",$E(RGD,2))
"RTN","RGUTIN0",13,0)
 Q RGROOT_$S($L(RGROOT):$E(RGD,3),1:"")_RGFIL
"RTN","RGUTIN0",14,0)
 ; Set right margin
"RTN","RGUTIN0",15,0)
RM(X) ;EP
"RTN","RGUTIN0",16,0)
 X ^%ZOSF("RM")
"RTN","RGUTIN0",17,0)
 Q
"RTN","RGUTIN0",18,0)
ETRAP() Q $$NEWERR^%ZTER
"RTN","RGUTIN0",19,0)
 ; Return UCI
"RTN","RGUTIN0",20,0)
UCI(P) N Y
"RTN","RGUTIN0",21,0)
 X ^%ZOSF("UCI")
"RTN","RGUTIN0",22,0)
 Q $S($G(P):$P(Y,",",P),1:Y)
"RTN","RGUTIN0",23,0)
 ; Open a host file
"RTN","RGUTIN0",24,0)
OPENX(X1,X2) ;EP
"RTN","RGUTIN0",25,0)
 D OPEN(.X1,.X2)
"RTN","RGUTIN0",26,0)
 Q X1
"RTN","RGUTIN16")
0^47^B4411769
"RTN","RGUTIN16",1,0)
RGUTIN16 ;RI/CBMI/DKM - Inits for VMS;11-Mar-2015 09:33;DKM
"RTN","RGUTIN16",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN16",3,0)
 ;;
"RTN","RGUTIN16",4,0)
 ;=================================================================
"RTN","RGUTIN16",5,0)
 ; Open a host file
"RTN","RGUTIN16",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN16",7,0)
 N Z
"RTN","RGUTIN16",8,0)
 S Z="X1"_$S("Rr"[$G(X2):":READONLY:0","Ww"[X2:":(NEWVERSION,RECORDSIZE=65535)","Bb"[X2:":(READONLY,BLOCKSIZE=0)",1:"")
"RTN","RGUTIN16",9,0)
 O @Z
"RTN","RGUTIN16",10,0)
 U X1
"RTN","RGUTIN16",11,0)
 S ^TMP("RGUTHFS",$J,X1)=""
"RTN","RGUTIN16",12,0)
 Q
"RTN","RGUTIN16",13,0)
 ; Close a host file
"RTN","RGUTIN16",14,0)
CLOSE(X) ;EP
"RTN","RGUTIN16",15,0)
 C X
"RTN","RGUTIN16",16,0)
 K ^TMP("RGUTHFS",$J,X)
"RTN","RGUTIN16",17,0)
 Q
"RTN","RGUTIN16",18,0)
 ; Close all open host files
"RTN","RGUTIN16",19,0)
CLOSEALL ;EP
"RTN","RGUTIN16",20,0)
 N Z
"RTN","RGUTIN16",21,0)
 S Z=""
"RTN","RGUTIN16",22,0)
 F  S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:Z=""  C Z
"RTN","RGUTIN16",23,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN16",24,0)
 Q
"RTN","RGUTIN16",25,0)
EOF U $I:TRAP
"RTN","RGUTIN16",26,0)
 Q
"RTN","RGUTIN16",27,0)
EOFERR() Q $ZE["ENDOFILE"
"RTN","RGUTIN16",28,0)
 ; Read a line of data
"RTN","RGUTIN16",29,0)
READ(X,Y) ;EP
"RTN","RGUTIN16",30,0)
 U $G(Y,$I):NOTRAP
"RTN","RGUTIN16",31,0)
 R X:5
"RTN","RGUTIN16",32,0)
 Q $S($T:$ZA=-1,1:1)
"RTN","RGUTIN16",33,0)
 ; Delete a host file
"RTN","RGUTIN16",34,0)
DELETE(X) ;EP
"RTN","RGUTIN16",35,0)
 O X::0
"RTN","RGUTIN16",36,0)
 C X:DELETE
"RTN","RGUTIN16",37,0)
 Q
"RTN","RGUTIN16",38,0)
 ; Rename a host file
"RTN","RGUTIN16",39,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN16",40,0)
 O X1:READONLY:0
"RTN","RGUTIN16",41,0)
 C X1:RENAME=X2
"RTN","RGUTIN16",42,0)
 Q
"RTN","RGUTIN16",43,0)
 ; Make a directory
"RTN","RGUTIN16",44,0)
MKDIR(X) Q:$Q 0
"RTN","RGUTIN16",45,0)
 Q
"RTN","RGUTIN16",46,0)
 ; Return directory of files
"RTN","RGUTIN16",47,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN16",48,0)
 N Z,Z1
"RTN","RGUTIN16",49,0)
 S $ZT="DIRX^RGUTOS",X3=$G(X3,"^UTILITY(""DIR"",$J)")
"RTN","RGUTIN16",50,0)
 K @X3
"RTN","RGUTIN16",51,0)
 S:'$G(X2) X2=9999999999
"RTN","RGUTIN16",52,0)
 F Z=1:1:X2 S Z1=$ZSEARCH(X1),X1="" Q:Z1=""  S @X3@($P(Z1,"]",2))=""
"RTN","RGUTIN16",53,0)
DIRX Q
"RTN","RGUTIN16",54,0)
 ; Return default working directory
"RTN","RGUTIN16",55,0)
DEFDIR(X) ;EP
"RTN","RGUTIN16",56,0)
 Q $G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN16",57,0)
 ; Return path delimiters
"RTN","RGUTIN16",58,0)
DIRDLM() ;EP
"RTN","RGUTIN16",59,0)
 Q "[.]"
"RTN","RGUTIN16",60,0)
 ; Parse current error
"RTN","RGUTIN16",61,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN16",62,0)
 S X1=$P($P($ZE,", ",2),"-",3),X2=$P($P($ZE,", "),":"),X3=$P($ZE,", ",$S(X1="ZTRAP":4,1:3))
"RTN","RGUTIN16",63,0)
 Q
"RTN","RGUTIN16",64,0)
 ; Raise an exception
"RTN","RGUTIN16",65,0)
RAISE(X) ;EP
"RTN","RGUTIN16",66,0)
 ZT $G(X)
"RTN","RGUTIN16",67,0)
 ; Set error trap
"RTN","RGUTIN16",68,0)
TRAP(X) ;EP
"RTN","RGUTIN16",69,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTIN16",70,0)
 ; Return size of a file
"RTN","RGUTIN16",71,0)
SIZE(X) ;EP
"RTN","RGUTIN16",72,0)
 Q $ZC(%GETFILE,X,"BLS")*$ZC(%GETFILE,X,"EOF")
"RTN","RGUTIN16",73,0)
 ; Return free disk space
"RTN","RGUTIN16",74,0)
FREE(X) ;EP
"RTN","RGUTIN16",75,0)
 Q $ZC(%GETDVI,X,"FREEBLOCKS")/2048
"RTN","RGUTIN16",76,0)
 ; Return host ip address
"RTN","RGUTIN16",77,0)
HOSTIP() ;EP
"RTN","RGUTIN16",78,0)
 Q ""
"RTN","RGUTIN16",79,0)
 ; Return host name
"RTN","RGUTIN16",80,0)
HOSTNAME() ;EP
"RTN","RGUTIN16",81,0)
 Q ""
"RTN","RGUTIN16",82,0)
 ; Return client ip address
"RTN","RGUTIN16",83,0)
CLIENTIP() ;EP
"RTN","RGUTIN16",84,0)
 N IP,$ET
"RTN","RGUTIN16",85,0)
 S $ET="S $EC=""""",IP=$&%UCXGETPEER
"RTN","RGUTIN16",86,0)
 Q $A(IP,1)_"."_$A(IP,2)_"."_$A(IP,3)_"."_$A(IP,4)
"RTN","RGUTIN18")
0^48^B4789827
"RTN","RGUTIN18",1,0)
RGUTIN18 ;RI/CBMI/DKM - Inits for Cache (Windows);11-Mar-2015 09:33;DKM
"RTN","RGUTIN18",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN18",3,0)
 ;;
"RTN","RGUTIN18",4,0)
 ;=================================================================
"RTN","RGUTIN18",5,0)
 ; Open a host file
"RTN","RGUTIN18",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN18",7,0)
 O X1:$S("Rr"[$G(X2):"RS","Ww"[X2:"WNS","Bb"[X2:"RF",1:""):0
"RTN","RGUTIN18",8,0)
 E  ZT "NOPEN"
"RTN","RGUTIN18",9,0)
 U X1
"RTN","RGUTIN18",10,0)
 S ^TMP("RGUTHFS",$J,X1)=""
"RTN","RGUTIN18",11,0)
 Q
"RTN","RGUTIN18",12,0)
 ; Close a host file
"RTN","RGUTIN18",13,0)
CLOSE(X) ;EP
"RTN","RGUTIN18",14,0)
 C X
"RTN","RGUTIN18",15,0)
 K ^TMP("RGUTHFS",$J,X)
"RTN","RGUTIN18",16,0)
 Q
"RTN","RGUTIN18",17,0)
 ; Close all host files
"RTN","RGUTIN18",18,0)
CLOSEALL ;EP
"RTN","RGUTIN18",19,0)
 N Z
"RTN","RGUTIN18",20,0)
 S Z=""
"RTN","RGUTIN18",21,0)
 F  S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:Z=""  C Z
"RTN","RGUTIN18",22,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN18",23,0)
 Q
"RTN","RGUTIN18",24,0)
EOF ZT:$ZA=-1 "ENDOFFILE"
"RTN","RGUTIN18",25,0)
 Q
"RTN","RGUTIN18",26,0)
EOFERR() Q:$ZE["ENDOFFILE"
"RTN","RGUTIN18",27,0)
 ; Read line of data
"RTN","RGUTIN18",28,0)
READ(X,Y) ;EP
"RTN","RGUTIN18",29,0)
 N $ET
"RTN","RGUTIN18",30,0)
 S $ET="",$ZT="READX^RGUTOS"
"RTN","RGUTIN18",31,0)
 U $G(Y,$I)
"RTN","RGUTIN18",32,0)
 Q:$ZEOF 1
"RTN","RGUTIN18",33,0)
 R X:5
"RTN","RGUTIN18",34,0)
 Q:$T 0
"RTN","RGUTIN18",35,0)
READX Q 1
"RTN","RGUTIN18",36,0)
 ; Delete a host file
"RTN","RGUTIN18",37,0)
DELETE(X) ;EP
"RTN","RGUTIN18",38,0)
 S X=$ZF(-1,"del """_X_"""")
"RTN","RGUTIN18",39,0)
 Q
"RTN","RGUTIN18",40,0)
 ; Rename a host file
"RTN","RGUTIN18",41,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN18",42,0)
 S X1=$ZF(-1,"ren """_X1_""" """_X2_"""")
"RTN","RGUTIN18",43,0)
 Q
"RTN","RGUTIN18",44,0)
 ; Make a directory
"RTN","RGUTIN18",45,0)
MKDIR(X) S X='$$ZF(-1,"mkdir "_X)
"RTN","RGUTIN18",46,0)
 Q:$Q X
"RTN","RGUTIN18",47,0)
 Q
"RTN","RGUTIN18",48,0)
 ; Return directory of files
"RTN","RGUTIN18",49,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN18",50,0)
 N Z,Z1,FDLM
"RTN","RGUTIN18",51,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN18",52,0)
 S X3=$G(X3,$NA(^UTILITY("DIR",$J)))
"RTN","RGUTIN18",53,0)
 K @X3
"RTN","RGUTIN18",54,0)
 S:'$G(X2) X2=9999999999
"RTN","RGUTIN18",55,0)
 F Z=1:1:X2 S Z1=$ZSEARCH(X1),X1="" Q:Z1=""  D
"RTN","RGUTIN18",56,0)
 .S Z1=$P(Z1,FDLM,$L(Z1,FDLM))
"RTN","RGUTIN18",57,0)
 .S:$TR(Z1,".")'="" @X3@(Z1)=""
"RTN","RGUTIN18",58,0)
 Q
"RTN","RGUTIN18",59,0)
 ; Return path delimiters
"RTN","RGUTIN18",60,0)
DIRDLM() ;EP
"RTN","RGUTIN18",61,0)
 Q "\\\"
"RTN","RGUTIN18",62,0)
 ; Return default working directory
"RTN","RGUTIN18",63,0)
DEFDIR(X) ;EP
"RTN","RGUTIN18",64,0)
 N FDLM
"RTN","RGUTIN18",65,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN18",66,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN18",67,0)
 S:$E(X,$L(X))'=FDLM X=X_FDLM
"RTN","RGUTIN18",68,0)
 Q X
"RTN","RGUTIN18",69,0)
 ; Parse current error
"RTN","RGUTIN18",70,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN18",71,0)
 S X1=$E($P($ZE,">"),2,99),X2=$P($P($ZE,">",2),":"),X3=X1
"RTN","RGUTIN18",72,0)
 S:X2["*" X2=""
"RTN","RGUTIN18",73,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTIN18",74,0)
 Q
"RTN","RGUTIN18",75,0)
 ; Raise an exception
"RTN","RGUTIN18",76,0)
RAISE(X) ;EP
"RTN","RGUTIN18",77,0)
 ZT $G(X)
"RTN","RGUTIN18",78,0)
 ; Set error trap
"RTN","RGUTIN18",79,0)
TRAP(X) ;EP
"RTN","RGUTIN18",80,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTIN18",81,0)
 ; Return size of file
"RTN","RGUTIN18",82,0)
SIZE(X) ;EP
"RTN","RGUTIN18",83,0)
 Q 0
"RTN","RGUTIN18",84,0)
 ; Return free disk space
"RTN","RGUTIN18",85,0)
FREE(X) ;EP
"RTN","RGUTIN18",86,0)
 Q 0
"RTN","RGUTIN18",87,0)
 ; Return host ip address
"RTN","RGUTIN18",88,0)
HOSTIP() ;EP
"RTN","RGUTIN18",89,0)
 Q $P($P($ZU(131,1),","),":",2)
"RTN","RGUTIN18",90,0)
 ; Return host name
"RTN","RGUTIN18",91,0)
HOSTNAME() ;EP
"RTN","RGUTIN18",92,0)
 Q $P($P($ZU(131,1),","),":")
"RTN","RGUTIN18",93,0)
 ; Return client ip address
"RTN","RGUTIN18",94,0)
CLIENTIP() ;EP
"RTN","RGUTIN18",95,0)
 N IP,$ET
"RTN","RGUTIN18",96,0)
 S $ET="S $EC=""""",IP=$ZU(111,0)
"RTN","RGUTIN18",97,0)
 Q $A(IP,1)_"."_$A(IP,2)_"."_$A(IP,3)_"."_$A(IP,4)
"RTN","RGUTIN19")
0^88^B4603804
"RTN","RGUTIN19",1,0)
RGUTIN19 ;RI/CBMI/DKM - Inits for GT.M (Unix);01-Apr-2015 16:04;DKM
"RTN","RGUTIN19",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN19",3,0)
 ;;
"RTN","RGUTIN19",4,0)
 ;=================================================================
"RTN","RGUTIN19",5,0)
 ; Open a host file
"RTN","RGUTIN19",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN19",7,0)
 O X1:@($S("Rr"[$G(X2):"readonly","Ww"[X2:"newversion","Bb"[X2:"stream",1:""))
"RTN","RGUTIN19",8,0)
 U X1
"RTN","RGUTIN19",9,0)
 S ^TMP("RGUTHFS",$J,X1)=""
"RTN","RGUTIN19",10,0)
 Q
"RTN","RGUTIN19",11,0)
 ; Close a host file
"RTN","RGUTIN19",12,0)
CLOSE(X) ;EP
"RTN","RGUTIN19",13,0)
 C X
"RTN","RGUTIN19",14,0)
 K ^TMP("RGUTHFS",$J,X)
"RTN","RGUTIN19",15,0)
 Q
"RTN","RGUTIN19",16,0)
 ; Close all open host files
"RTN","RGUTIN19",17,0)
CLOSEALL ;EP
"RTN","RGUTIN19",18,0)
 N Z
"RTN","RGUTIN19",19,0)
 S Z=""
"RTN","RGUTIN19",20,0)
 F  S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:Z=""  C Z
"RTN","RGUTIN19",21,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN19",22,0)
 Q
"RTN","RGUTIN19",23,0)
EOF ZM:$ZEOF 150340312
"RTN","RGUTIN19",24,0)
 Q
"RTN","RGUTIN19",25,0)
EOFERR() Q $ZT["IOEOF"
"RTN","RGUTIN19",26,0)
 ; Read a line of data
"RTN","RGUTIN19",27,0)
READ(X,Y) ;EP
"RTN","RGUTIN19",28,0)
 N $ET
"RTN","RGUTIN19",29,0)
 S $ET="",$ZT="G READX"
"RTN","RGUTIN19",30,0)
 U $G(Y,$I)
"RTN","RGUTIN19",31,0)
 Q:$ZEOF 1
"RTN","RGUTIN19",32,0)
 R X:5
"RTN","RGUTIN19",33,0)
 Q:$T 0
"RTN","RGUTIN19",34,0)
READX Q 1
"RTN","RGUTIN19",35,0)
 ; Delete a host file
"RTN","RGUTIN19",36,0)
DELETE(X) ;EP
"RTN","RGUTIN19",37,0)
 O X:(exception="G DELX")
"RTN","RGUTIN19",38,0)
 C X:(delete)
"RTN","RGUTIN19",39,0)
DELX Q
"RTN","RGUTIN19",40,0)
 ; Rename a host file
"RTN","RGUTIN19",41,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN19",42,0)
 O X1
"RTN","RGUTIN19",43,0)
 C X1:(rename=X2)
"RTN","RGUTIN19",44,0)
 Q
"RTN","RGUTIN19",45,0)
 ; Make a directory
"RTN","RGUTIN19",46,0)
MKDIR(X) ZSYSTEM "mkdir -p "_X
"RTN","RGUTIN19",47,0)
 Q:$Q '$ZSYSTEM
"RTN","RGUTIN19",48,0)
 Q
"RTN","RGUTIN19",49,0)
 ; Generate directory listing
"RTN","RGUTIN19",50,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN19",51,0)
 N Z,Z1,FDLM
"RTN","RGUTIN19",52,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN19",53,0)
 S X3=$G(X3,$NA(^UTILITY("DIR",$J)))
"RTN","RGUTIN19",54,0)
 K @X3
"RTN","RGUTIN19",55,0)
 S:'$G(X2) X2=99999999
"RTN","RGUTIN19",56,0)
 F Z=1:1:X2 S Z1=$ZSEARCH(X1) Q:Z1=""  D
"RTN","RGUTIN19",57,0)
 .S Z1=$ZPARSE(Z1,"NAME")_$ZPARSE(Z1,"TYPE")
"RTN","RGUTIN19",58,0)
 .S:$TR(Z1,".")'="" @X3@(Z1)=""
"RTN","RGUTIN19",59,0)
 Q
"RTN","RGUTIN19",60,0)
 ; Return path delimiters
"RTN","RGUTIN19",61,0)
DIRDLM() ;EP
"RTN","RGUTIN19",62,0)
 Q "///"
"RTN","RGUTIN19",63,0)
 ; Return default working directory
"RTN","RGUTIN19",64,0)
DEFDIR(X) ;EP
"RTN","RGUTIN19",65,0)
 N FDLM
"RTN","RGUTIN19",66,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN19",67,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN19",68,0)
 S:$E(X,$L(X))'=FDLM X=X_FDLM
"RTN","RGUTIN19",69,0)
 Q X
"RTN","RGUTIN19",70,0)
 ; Parse current error
"RTN","RGUTIN19",71,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN19",72,0)
 S X1=$ZSTATUS,X2=$P(X1,",",2),X3=$P(X1,",",4),X1=$P($P(X1,",",3),"-",3)
"RTN","RGUTIN19",73,0)
 Q
"RTN","RGUTIN19",74,0)
 ; Raise an exception
"RTN","RGUTIN19",75,0)
RAISE(X) ;EP
"RTN","RGUTIN19",76,0)
 S $ZYERROR="ZTRAP^RGUTOS"
"RTN","RGUTIN19",77,0)
 ZM 150342768:$G(X)
"RTN","RGUTIN19",78,0)
 Q
"RTN","RGUTIN19",79,0)
 ; Set error trap
"RTN","RGUTIN19",80,0)
TRAP(X) ;EP
"RTN","RGUTIN19",81,0)
 S $ZYERROR="ZTRAP^RGUTOS"
"RTN","RGUTIN19",82,0)
 Q "$ZT="""_$S($D(X):"G "_X,1:"")_""""
"RTN","RGUTIN19",83,0)
ZTRAP S $ZE=$ZSTATUS
"RTN","RGUTIN19",84,0)
 Q
"RTN","RGUTIN19",85,0)
 ; Return size of a file
"RTN","RGUTIN19",86,0)
SIZE(X) ;EP
"RTN","RGUTIN19",87,0)
 Q 0
"RTN","RGUTIN19",88,0)
 ; Return free disk space
"RTN","RGUTIN19",89,0)
FREE(X) ;EP
"RTN","RGUTIN19",90,0)
 Q 0
"RTN","RGUTIN19",91,0)
 ; Return host ip address
"RTN","RGUTIN19",92,0)
HOSTIP() ;EP
"RTN","RGUTIN19",93,0)
 Q ""
"RTN","RGUTIN19",94,0)
 ; Return host name
"RTN","RGUTIN19",95,0)
HOSTNAME() ;EP
"RTN","RGUTIN19",96,0)
 Q ""
"RTN","RGUTIN19",97,0)
 ; Return client ip address
"RTN","RGUTIN19",98,0)
CLIENTIP() ;EP
"RTN","RGUTIN19",99,0)
 Q ""
"RTN","RGUTIN58")
0^70^B5722564
"RTN","RGUTIN58",1,0)
RGUTIN58 ;RI/CBMI/DKM/PLS - Inits for MSM-UNIX;11-Mar-2015 09:33;DKM
"RTN","RGUTIN58",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN58",3,0)
 ;;
"RTN","RGUTIN58",4,0)
 ;=================================================================
"RTN","RGUTIN58",5,0)
 ; Open a host file
"RTN","RGUTIN58",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN58",7,0)
 N Z
"RTN","RGUTIN58",8,0)
 S X2=$G(X2,"R")
"RTN","RGUTIN58",9,0)
 F Z=51:1:55 I '$D(^TMP("RGUTHFS",$J,Z)) D  Q
"RTN","RGUTIN58",10,0)
 .ZT:Z=55 "TMOF"
"RTN","RGUTIN58",11,0)
 .O Z:(X1:$S("RrWw"[X2:X2,1:"R")::::$S("Bb"[X2:"",1:$C(10)))
"RTN","RGUTIN58",12,0)
 .U Z
"RTN","RGUTIN58",13,0)
 .ZT:$ZA "OPEN"
"RTN","RGUTIN58",14,0)
 .S ^TMP("RGUTHFS",$J,Z)=X1,X1=Z
"RTN","RGUTIN58",15,0)
 Q
"RTN","RGUTIN58",16,0)
 ; Close a host file
"RTN","RGUTIN58",17,0)
CLOSE(X) ;EP
"RTN","RGUTIN58",18,0)
 N Z
"RTN","RGUTIN58",19,0)
 S Z=X,X=$G(^TMP("RGUTHFS",$J,X))
"RTN","RGUTIN58",20,0)
 K ^(Z)
"RTN","RGUTIN58",21,0)
 C Z
"RTN","RGUTIN58",22,0)
 Q
"RTN","RGUTIN58",23,0)
 ; Close all open host files
"RTN","RGUTIN58",24,0)
CLOSEALL ;EP
"RTN","RGUTIN58",25,0)
 N Z
"RTN","RGUTIN58",26,0)
 F Z=0:0 S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:'Z  C Z
"RTN","RGUTIN58",27,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN58",28,0)
 Q
"RTN","RGUTIN58",29,0)
EOF ZT:$ZC "EOF"
"RTN","RGUTIN58",30,0)
 Q
"RTN","RGUTIN58",31,0)
EOFERR() Q $ZE["ZEOF"
"RTN","RGUTIN58",32,0)
 ; Read a line of data
"RTN","RGUTIN58",33,0)
READ(X,Y) ;EP
"RTN","RGUTIN58",34,0)
 U:$G(Y)'="" Y
"RTN","RGUTIN58",35,0)
 R X:5
"RTN","RGUTIN58",36,0)
 Q $S($T:$ZC&'$L(X),1:1)
"RTN","RGUTIN58",37,0)
 ; Delete a host file
"RTN","RGUTIN58",38,0)
DELETE(X) ;EP
"RTN","RGUTIN58",39,0)
 D JW("rm "_X)
"RTN","RGUTIN58",40,0)
 Q
"RTN","RGUTIN58",41,0)
 ; Rename a host file
"RTN","RGUTIN58",42,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN58",43,0)
 D JW("mv "_X1_" "_X2)
"RTN","RGUTIN58",44,0)
 Q
"RTN","RGUTIN58",45,0)
 ; Make a directory
"RTN","RGUTIN58",46,0)
MKDIR(X) Q:$Q 0
"RTN","RGUTIN58",47,0)
 Q
"RTN","RGUTIN58",48,0)
 ; Generate a directory listing
"RTN","RGUTIN58",49,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN58",50,0)
 N TFN,X,Z
"RTN","RGUTIN58",51,0)
 N $ET
"RTN","RGUTIN58",52,0)
 S $ET="",@$$TRAP("DIRERR^RGUTOS")
"RTN","RGUTIN58",53,0)
 S X1=$G(X1),X2=+$G(X2),X3=$G(X3,"^UTILITY(""DIR"",$J)")
"RTN","RGUTIN58",54,0)
 S TFN=$$DEFDIR_"RGUTAUTO."_$J
"RTN","RGUTIN58",55,0)
 K @X3
"RTN","RGUTIN58",56,0)
 ;
"RTN","RGUTIN58",57,0)
 D DELETE(TFN)
"RTN","RGUTIN58",58,0)
 D JW("ls -d "_X1_" >> "_TFN)
"RTN","RGUTIN58",59,0)
 D OPEN(.TFN,"R")
"RTN","RGUTIN58",60,0)
 F Z=1:1 Q:(X2&(Z>X2))  Q:$$READ(.X,TFN)  D
"RTN","RGUTIN58",61,0)
 .S X=$TR($P(X,"/",$L(X,"/")),$C(10),"")
"RTN","RGUTIN58",62,0)
 .I X]"" S @X3@(X)=""
"RTN","RGUTIN58",63,0)
DIRERR D CLOSE(.TFN)
"RTN","RGUTIN58",64,0)
 D DELETE(TFN)
"RTN","RGUTIN58",65,0)
 Q
"RTN","RGUTIN58",66,0)
 ; Return default working directory
"RTN","RGUTIN58",67,0)
DEFDIR(X) ;EP
"RTN","RGUTIN58",68,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN58",69,0)
 S:$E(X,$L(X))'="/" X=X_"/"
"RTN","RGUTIN58",70,0)
 Q X
"RTN","RGUTIN58",71,0)
 ; Return path delimiters
"RTN","RGUTIN58",72,0)
DIRDLM() ;EP
"RTN","RGUTIN58",73,0)
 Q "///"
"RTN","RGUTIN58",74,0)
 ; Return free disk space
"RTN","RGUTIN58",75,0)
FREE(X) ;EP
"RTN","RGUTIN58",76,0)
 S X=$ZOS(9,$E(X))
"RTN","RGUTIN58",77,0)
 Q X*$P(X,"^",2)*$P(X,"^",3)/1048576
"RTN","RGUTIN58",78,0)
 ; Parse current error
"RTN","RGUTIN58",79,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN58",80,0)
 S X1=$E($P($ZE,">"),2,99),X2=$P($P($ZE,">",2),":"),X3=X1
"RTN","RGUTIN58",81,0)
 S:X2["*" X2=""
"RTN","RGUTIN58",82,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTIN58",83,0)
 Q
"RTN","RGUTIN58",84,0)
 ; Raise an exception
"RTN","RGUTIN58",85,0)
RAISE(X) ;EP
"RTN","RGUTIN58",86,0)
 ZT $G(X)
"RTN","RGUTIN58",87,0)
 ; Set error trap
"RTN","RGUTIN58",88,0)
TRAP(X) ;EP
"RTN","RGUTIN58",89,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTIN58",90,0)
 ; Return size of a file
"RTN","RGUTIN58",91,0)
SIZE(X) ;EP
"RTN","RGUTIN58",92,0)
 N I,Y,Z
"RTN","RGUTIN58",93,0)
 S Z=$ZOS(12,X,0),Z=$P(Z,"^",2,999),Y=0
"RTN","RGUTIN58",94,0)
 I Z'="" F I=30:-1:27 S Y=Y*256+$A(Z,I)
"RTN","RGUTIN58",95,0)
 Q Y
"RTN","RGUTIN58",96,0)
 ; Return host ip address
"RTN","RGUTIN58",97,0)
HOSTIP() ;EP
"RTN","RGUTIN58",98,0)
 Q ""
"RTN","RGUTIN58",99,0)
 ; Return host name
"RTN","RGUTIN58",100,0)
HOSTNAME() ;EP
"RTN","RGUTIN58",101,0)
 Q ""
"RTN","RGUTIN58",102,0)
 ; Return client ip address
"RTN","RGUTIN58",103,0)
CLIENTIP() ;EP
"RTN","RGUTIN58",104,0)
 Q ""
"RTN","RGUTIN58",105,0)
 ; Issue host command and wait
"RTN","RGUTIN58",106,0)
JW(ZOSHC) ;msm extrinsic
"RTN","RGUTIN58",107,0)
 N ZOSHX
"RTN","RGUTIN58",108,0)
 S ZOSHX=$$JOBWAIT^%HOSTCMD(ZOSHC)
"RTN","RGUTIN58",109,0)
 Q
"RTN","RGUTIN68")
0^69^B4748681
"RTN","RGUTIN68",1,0)
RGUTIN68 ;RI/CBMI/DKM - Inits for Cache (Unix);11-Mar-2015 09:33;DKM
"RTN","RGUTIN68",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN68",3,0)
 ;;
"RTN","RGUTIN68",4,0)
 ;=================================================================
"RTN","RGUTIN68",5,0)
 ; Open a host file
"RTN","RGUTIN68",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN68",7,0)
 O X1:$S("Rr"[$G(X2):"RS","Ww"[X2:"WNS","Bb"[X2:"RF",1:""):0
"RTN","RGUTIN68",8,0)
 E  ZT "NOPEN"
"RTN","RGUTIN68",9,0)
 U X1
"RTN","RGUTIN68",10,0)
 S ^TMP("RGUTHFS",$J,X1)=""
"RTN","RGUTIN68",11,0)
 Q
"RTN","RGUTIN68",12,0)
 ; Close a host file
"RTN","RGUTIN68",13,0)
CLOSE(X) ;EP
"RTN","RGUTIN68",14,0)
 C X
"RTN","RGUTIN68",15,0)
 K ^TMP("RGUTHFS",$J,X)
"RTN","RGUTIN68",16,0)
 Q
"RTN","RGUTIN68",17,0)
 ; Close all open host files
"RTN","RGUTIN68",18,0)
CLOSEALL ;EP
"RTN","RGUTIN68",19,0)
 N Z
"RTN","RGUTIN68",20,0)
 S Z=""
"RTN","RGUTIN68",21,0)
 F  S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:Z=""  C Z
"RTN","RGUTIN68",22,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN68",23,0)
 Q
"RTN","RGUTIN68",24,0)
EOF ZT:$ZA=-1 "ENDOFFILE"
"RTN","RGUTIN68",25,0)
 Q
"RTN","RGUTIN68",26,0)
EOFERR() Q:$ZE["ENDOFFILE"
"RTN","RGUTIN68",27,0)
 ; Read a line of data
"RTN","RGUTIN68",28,0)
READ(X,Y) ;EP
"RTN","RGUTIN68",29,0)
 N $ET
"RTN","RGUTIN68",30,0)
 S $ET="",$ZT="READX"
"RTN","RGUTIN68",31,0)
 U $G(Y,$I)
"RTN","RGUTIN68",32,0)
 Q:$ZEOF 1
"RTN","RGUTIN68",33,0)
 R X:5
"RTN","RGUTIN68",34,0)
 Q:$T 0
"RTN","RGUTIN68",35,0)
READX Q 1
"RTN","RGUTIN68",36,0)
 ; Delete a host file
"RTN","RGUTIN68",37,0)
DELETE(X) ;EP
"RTN","RGUTIN68",38,0)
 S X=$ZF(-1,"rm """_X_"""")
"RTN","RGUTIN68",39,0)
 Q
"RTN","RGUTIN68",40,0)
 ; Rename a host file
"RTN","RGUTIN68",41,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN68",42,0)
 S X1=$ZF(-1,"mv """_X1_""" """_X2_"""")
"RTN","RGUTIN68",43,0)
 Q
"RTN","RGUTIN68",44,0)
 ; Make a directory
"RTN","RGUTIN68",45,0)
MKDIR(X) S X='$ZF(-1,"mkdir -p "_X)
"RTN","RGUTIN68",46,0)
 Q:$Q X
"RTN","RGUTIN68",47,0)
 Q
"RTN","RGUTIN68",48,0)
 ; Generate directory listing
"RTN","RGUTIN68",49,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN68",50,0)
 N Z,Z1,FDLM
"RTN","RGUTIN68",51,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN68",52,0)
 S X3=$G(X3,$NA(^UTILITY("DIR",$J)))
"RTN","RGUTIN68",53,0)
 K @X3
"RTN","RGUTIN68",54,0)
 S:'$G(X2) X2=9999999999
"RTN","RGUTIN68",55,0)
 F Z=1:1:X2 S Z1=$ZSEARCH(X1),X1="" Q:Z1=""  D
"RTN","RGUTIN68",56,0)
 .S Z1=$P(Z1,FDLM,$L(Z1,FDLM))
"RTN","RGUTIN68",57,0)
 .S:$TR(Z1,".")'="" @X3@(Z1)=""
"RTN","RGUTIN68",58,0)
 Q
"RTN","RGUTIN68",59,0)
 ; Return path delimiters
"RTN","RGUTIN68",60,0)
DIRDLM() ;EP
"RTN","RGUTIN68",61,0)
 Q "///"
"RTN","RGUTIN68",62,0)
 ; Return default working directory
"RTN","RGUTIN68",63,0)
DEFDIR(X) ;EP
"RTN","RGUTIN68",64,0)
 N FDLM
"RTN","RGUTIN68",65,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTIN68",66,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN68",67,0)
 S:$E(X,$L(X))'=FDLM X=X_FDLM
"RTN","RGUTIN68",68,0)
 Q X
"RTN","RGUTIN68",69,0)
 ; Parse current error
"RTN","RGUTIN68",70,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN68",71,0)
 S X1=$E($P($ZE,">"),2,99),X2=$P($P($ZE,">",2),":"),X3=X1
"RTN","RGUTIN68",72,0)
 S:X2["*" X2=""
"RTN","RGUTIN68",73,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTIN68",74,0)
 Q
"RTN","RGUTIN68",75,0)
 ; Raise an exception
"RTN","RGUTIN68",76,0)
RAISE(X) ;EP
"RTN","RGUTIN68",77,0)
 ZT $G(X)
"RTN","RGUTIN68",78,0)
 ; Set error trap
"RTN","RGUTIN68",79,0)
TRAP(X) ;EP
"RTN","RGUTIN68",80,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTIN68",81,0)
 ; Return size of a file
"RTN","RGUTIN68",82,0)
SIZE(X) ;EP
"RTN","RGUTIN68",83,0)
 Q 0
"RTN","RGUTIN68",84,0)
 ; Return free disk space
"RTN","RGUTIN68",85,0)
FREE(X) ;EP
"RTN","RGUTIN68",86,0)
 Q 0
"RTN","RGUTIN68",87,0)
 ; Return host ip address
"RTN","RGUTIN68",88,0)
HOSTIP() ;EP
"RTN","RGUTIN68",89,0)
 Q $P($P($ZU(131,1),","),":",2)
"RTN","RGUTIN68",90,0)
 ; Return host name
"RTN","RGUTIN68",91,0)
HOSTNAME() ;EP
"RTN","RGUTIN68",92,0)
 Q $P($P($ZU(131,1),","),":")
"RTN","RGUTIN68",93,0)
 ; Return client ip address
"RTN","RGUTIN68",94,0)
CLIENTIP() ;EP
"RTN","RGUTIN68",95,0)
 N IP,$ET
"RTN","RGUTIN68",96,0)
 S $ET="S $EC=""""",IP=$ZU(111,0)
"RTN","RGUTIN68",97,0)
 Q $A(IP,1)_"."_$A(IP,2)_"."_$A(IP,3)_"."_$A(IP,4)
"RTN","RGUTIN8")
0^49^B4269472
"RTN","RGUTIN8",1,0)
RGUTIN8 ;RI/CBMI/DKM - Inits for MSM;11-Mar-2015 09:33;DKM
"RTN","RGUTIN8",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTIN8",3,0)
 ;;
"RTN","RGUTIN8",4,0)
 ;=================================================================
"RTN","RGUTIN8",5,0)
 ; Open a host file
"RTN","RGUTIN8",6,0)
OPEN(X1,X2) ;EP
"RTN","RGUTIN8",7,0)
 N Z
"RTN","RGUTIN8",8,0)
 S X2=$G(X2,"R")
"RTN","RGUTIN8",9,0)
 F Z=51:1:55 I '$D(^TMP("RGUTHFS",$J,Z)) D  Q
"RTN","RGUTIN8",10,0)
 .ZT:Z=55 "TMOF"
"RTN","RGUTIN8",11,0)
 .O Z:(X1:$S("RrWw"[X2:X2,1:"R")::::$S("Bb"[X2:"",1:$C(13,10)))
"RTN","RGUTIN8",12,0)
 .U Z
"RTN","RGUTIN8",13,0)
 .ZT:$ZA "OPEN"
"RTN","RGUTIN8",14,0)
 .S ^TMP("RGUTHFS",$J,Z)=X1,X1=Z
"RTN","RGUTIN8",15,0)
 Q
"RTN","RGUTIN8",16,0)
 ; Close a host file
"RTN","RGUTIN8",17,0)
CLOSE(X) ;EP
"RTN","RGUTIN8",18,0)
 N Z
"RTN","RGUTIN8",19,0)
 S Z=X,X=$G(^TMP("RGUTHFS",$J,X))
"RTN","RGUTIN8",20,0)
 K ^(Z)
"RTN","RGUTIN8",21,0)
 C Z
"RTN","RGUTIN8",22,0)
 Q
"RTN","RGUTIN8",23,0)
 ; Close all open host files
"RTN","RGUTIN8",24,0)
CLOSEALL ;EP
"RTN","RGUTIN8",25,0)
 N Z
"RTN","RGUTIN8",26,0)
 F Z=0:0 S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:'Z  C Z
"RTN","RGUTIN8",27,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTIN8",28,0)
 Q
"RTN","RGUTIN8",29,0)
EOF ZT:$ZC "EOF"
"RTN","RGUTIN8",30,0)
 Q
"RTN","RGUTIN8",31,0)
EOFERR() Q $ZE["ZEOF"
"RTN","RGUTIN8",32,0)
 ; Read a line of data
"RTN","RGUTIN8",33,0)
READ(X,Y) ;EP
"RTN","RGUTIN8",34,0)
 U:$G(Y)'="" Y
"RTN","RGUTIN8",35,0)
 R X:5
"RTN","RGUTIN8",36,0)
 Q $S($T:$ZC&'$L(X),1:1)
"RTN","RGUTIN8",37,0)
 ; Delete a host file
"RTN","RGUTIN8",38,0)
DELETE(X) ;EP
"RTN","RGUTIN8",39,0)
 S X=$ZOS(2,X)
"RTN","RGUTIN8",40,0)
 Q
"RTN","RGUTIN8",41,0)
 ; Rename a host file
"RTN","RGUTIN8",42,0)
RENAME(X1,X2) ;EP
"RTN","RGUTIN8",43,0)
 N Z
"RTN","RGUTIN8",44,0)
 S Z=$ZOS(3,X1,X2)
"RTN","RGUTIN8",45,0)
 Q
"RTN","RGUTIN8",46,0)
 ; Make a directory
"RTN","RGUTIN8",47,0)
MKDIR(X) Q:$Q 0
"RTN","RGUTIN8",48,0)
 Q
"RTN","RGUTIN8",49,0)
 ; Generate a directory listing
"RTN","RGUTIN8",50,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTIN8",51,0)
 N Z
"RTN","RGUTIN8",52,0)
 S X1=$ZOS(12,X1,0),X2=+$G(X2),X3=$G(X3,"^UTILITY(""DIR"",$J)")
"RTN","RGUTIN8",53,0)
 K @X3
"RTN","RGUTIN8",54,0)
 F Z=1:1 Q:(X2&(Z>X2))!($P(X1,"^")="")  S @X3@($P(X1,"^"))="",X1=$ZOS(13,X1)
"RTN","RGUTIN8",55,0)
 Q
"RTN","RGUTIN8",56,0)
 ; Return default working directory
"RTN","RGUTIN8",57,0)
DEFDIR(X) ;EP
"RTN","RGUTIN8",58,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTIN8",59,0)
 S:$E(X,$L(X))'="\" X=X_"\"
"RTN","RGUTIN8",60,0)
 Q X
"RTN","RGUTIN8",61,0)
 ; Return path delimiters
"RTN","RGUTIN8",62,0)
DIRDLM() ;EP
"RTN","RGUTIN8",63,0)
 Q "\\\"
"RTN","RGUTIN8",64,0)
 ; Return free disk space
"RTN","RGUTIN8",65,0)
FREE(X) ;EP
"RTN","RGUTIN8",66,0)
 S X=$ZOS(9,$E(X))
"RTN","RGUTIN8",67,0)
 Q X*$P(X,"^",2)*$P(X,"^",3)/1048576
"RTN","RGUTIN8",68,0)
 ; Parse current error
"RTN","RGUTIN8",69,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTIN8",70,0)
 S X1=$E($P($ZE,">"),2,99),X2=$P($P($ZE,">",2),":"),X3=X1
"RTN","RGUTIN8",71,0)
 S:X2["*" X2=""
"RTN","RGUTIN8",72,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTIN8",73,0)
 Q
"RTN","RGUTIN8",74,0)
 ; Raise an exception
"RTN","RGUTIN8",75,0)
RAISE(X) ;EP
"RTN","RGUTIN8",76,0)
 ZT $G(X)
"RTN","RGUTIN8",77,0)
 ; Set error trap
"RTN","RGUTIN8",78,0)
TRAP(X) ;EP
"RTN","RGUTIN8",79,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTIN8",80,0)
 ; Return size of a file
"RTN","RGUTIN8",81,0)
SIZE(X) ;EP
"RTN","RGUTIN8",82,0)
 N I,Y,Z
"RTN","RGUTIN8",83,0)
 S Z=$ZOS(12,X,0),Z=$P(Z,"^",2,999),Y=0
"RTN","RGUTIN8",84,0)
 I Z'="" F I=30:-1:27 S Y=Y*256+$A(Z,I)
"RTN","RGUTIN8",85,0)
 Q Y
"RTN","RGUTIN8",86,0)
 ; Return host ip address
"RTN","RGUTIN8",87,0)
HOSTIP() ;EP
"RTN","RGUTIN8",88,0)
 Q ""
"RTN","RGUTIN8",89,0)
 ; Return host name
"RTN","RGUTIN8",90,0)
HOSTNAME() ;EP
"RTN","RGUTIN8",91,0)
 Q ""
"RTN","RGUTIN8",92,0)
 ; Return client ip address
"RTN","RGUTIN8",93,0)
CLIENTIP() ;EP
"RTN","RGUTIN8",94,0)
 Q ""
"RTN","RGUTIN8U")
1^68
"RTN","RGUTINIT")
0^60^B6940463
"RTN","RGUTINIT",1,0)
RGUTINIT ;RI/CBMI/DKM - Platform specific inits;01-Apr-2015 08:59;DKM
"RTN","RGUTINIT",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTINIT",3,0)
 ;;
"RTN","RGUTINIT",4,0)
 ;=================================================================
"RTN","RGUTINIT",5,0)
PRE N PKG,FDA
"RTN","RGUTINIT",6,0)
 S PKG=$$LKPKG^XPDUTL("RGUT")
"RTN","RGUTINIT",7,0)
 Q:'PKG
"RTN","RGUTINIT",8,0)
 Q:$P(^DIC(9.4,PKG,0),U)="RG UTILITIES"
"RTN","RGUTINIT",9,0)
 S FDA(9.4,PKG_",",.01)="RG UTILITIES"
"RTN","RGUTINIT",10,0)
 D FILE^DIE(,"FDA")
"RTN","RGUTINIT",11,0)
 Q
"RTN","RGUTINIT",12,0)
POST N RGOS,RGH,X
"RTN","RGUTINIT",13,0)
 S U="^",X="ERROR^RGUTINIT",@^%ZOSF("TRAP"),RGOS=$P(^%ZOSF("OS"),U,2)
"RTN","RGUTINIT",14,0)
 I 'RGOS D
"RTN","RGUTINIT",15,0)
 .D HOME^%ZIS,TITLE^RGUT("Platform-Specific Inits",1.6)
"RTN","RGUTINIT",16,0)
 .S RGH(1)="Enter the name of this MUMPS environment for the RG-namespace"
"RTN","RGUTINIT",17,0)
 .S RGH(2)="platform-specific initialization process."
"RTN","RGUTINIT",18,0)
 .S RGOS=$$ENTRY^RGUTLKP("^DD(""OS"")","UX","Operating System: ","B","*","","",0,5,"","","HELP(.RGH)")
"RTN","RGUTINIT",19,0)
 .W !!
"RTN","RGUTINIT",20,0)
 D:RGOS>0 INIT(RGOS)
"RTN","RGUTINIT",21,0)
 Q
"RTN","RGUTINIT",22,0)
INIT(RGOS) ;
"RTN","RGUTINIT",23,0)
 N I,X,Y,Z,N,RGOSZ
"RTN","RGUTINIT",24,0)
 S RGOSZ=$$OSRTN($G(RGOS))
"RTN","RGUTINIT",25,0)
 S:$L(RGOSZ) @("RGOSZ="_RGOSZ)
"RTN","RGUTINIT",26,0)
 I '$L(RGOSZ) D  Q
"RTN","RGUTINIT",27,0)
 .X "ZL RGUTOS1 ZS RGUTOS"
"RTN","RGUTINIT",28,0)
 .D MES("Init not found for specified OS. Will use generic init.")
"RTN","RGUTINIT",29,0)
 S I=0,N="RGUT"
"RTN","RGUTINIT",30,0)
 K ^TMP(N,$J)
"RTN","RGUTINIT",31,0)
 F Z=0,1 F X=$S(Z:3,1:1):1 S Y=$T(+X^@$S(Z:RGOSZ,1:"RGUTIN0")) Q:Y=""  S I=I+1,^TMP(N,$J,I,0)=Y
"RTN","RGUTINIT",32,0)
 S $P(^TMP(N,$J,1,0),";")="RGUTOS "
"RTN","RGUTINIT",33,0)
 D SAVE^RGUTRTN("RGUTOS",$NA(^TMP(N,$J)),1)
"RTN","RGUTINIT",34,0)
 F Z=1:1 S X=$P($T(DEVICE+Z),";;",2,99) Q:X=""  S ^TMP(N,$J,Z)=$$MSG^RGUT(X,"|")
"RTN","RGUTINIT",35,0)
 I $$ENTRY^RGUTIMP($NA(^TMP(N,$J))) D
"RTN","RGUTINIT",36,0)
 .D MES("Unable to install RGUT HFS DEVICE.")
"RTN","RGUTINIT",37,0)
 W !!,"Initialization completed for "_$P(^DD("OS",RGOS,0),"^")_" operating system.",!!
"RTN","RGUTINIT",38,0)
 K ^TMP(N,$J)
"RTN","RGUTINIT",39,0)
 Q
"RTN","RGUTINIT",40,0)
OSRTN(X) Q $P($T(@("OS"_X)),";",4,99)
"RTN","RGUTINIT",41,0)
OS8 ;;MSM;$S($ZV["UNIX":"RGUTIN58",1:"RGUTIN8")
"RTN","RGUTINIT",42,0)
OS16 ;;DSM;"RGUTIN16"
"RTN","RGUTINIT",43,0)
OS18 ;;Cache;$S($ZV["UNIX":"RGUTIN68",1:"RGUTIN18")
"RTN","RGUTINIT",44,0)
OS19 ;;GT.M;"RGUTIN19"
"RTN","RGUTINIT",45,0)
MES(X) D BMES^XPDUTL(X)
"RTN","RGUTINIT",46,0)
 Q
"RTN","RGUTINIT",47,0)
ERROR D MES("An error has occurred during initialization.")
"RTN","RGUTINIT",48,0)
 Q
"RTN","RGUTINIT",49,0)
 ; Return $I for HFS device
"RTN","RGUTINIT",50,0)
HFS() Q $S(RGOS=16:"TEMP.TMP",RGOS=8:51,RGOS=18:"NUL",1:"@")
"RTN","RGUTINIT",51,0)
DEVICE ; Device setup
"RTN","RGUTINIT",52,0)
 ;;:3.5
"RTN","RGUTINIT",53,0)
 ;;.NAME: RGUT HFS DEVICE
"RTN","RGUTINIT",54,0)
 ;;.LOCATION OF TERMINAL: HFS
"RTN","RGUTINIT",55,0)
 ;;.$I: |$$HFS^RGUTINIT|
"RTN","RGUTINIT",56,0)
 ;;.SIGN-ON/SYSTEM DEVICE: N
"RTN","RGUTINIT",57,0)
 ;;.TYPE: HFS
"RTN","RGUTINIT",58,0)
 ;;.SUBTYPE: P-OTHER
"RTN","RGUTINIT",59,0)
 ;;.ASK DEVICE: N
"RTN","RGUTINIT",60,0)
 ;;.ASK PARAMETERS: N
"RTN","RGUTINIT",61,0)
 ;;.ASK HOST FILE: N
"RTN","RGUTINIT",62,0)
 ;;.ASK HFS I/O OPERATION: N
"RTN","RGUTINIT",63,0)
 ;;
"RTN","RGUTLK2")
0^50^B49012377
"RTN","RGUTLK2",1,0)
RGUTLK2 ;RI/CBMI/DKM - Continuation of RGUTLKP;03-Mar-2015 14:24;DKM
"RTN","RGUTLK2",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTLK2",3,0)
 ;;
"RTN","RGUTLK2",4,0)
 ;=================================================================
"RTN","RGUTLK2",5,0)
LKP(%RGDX) ;
"RTN","RGUTLK2",6,0)
 N %RGD,%RGZ,%RGN
"RTN","RGUTLK2",7,0)
 S %RGXRN=0,%RGTRNC=0,%RGIEN="",%RGSCT=0,%RGD=%RGDX
"RTN","RGUTLK2",8,0)
 W:'%RGHTML $$XY(%RGX+$L(%RGPRMP),%RGY),$S(%RGOPT["X":"",1:%RGD),%RGEOS,!,"Searching"_$S(%RGOPT[U:" (press ^ to abort)",1:"")_"...",*13
"RTN","RGUTLK2",9,0)
 I $E(%RGD)="`" S %RGSLCT=%RGD G:'%RGHTML NR5 D SHOW($E(%RGD,2,999)) Q 1
"RTN","RGUTLK2",10,0)
NXTREF S %RGXRN=%RGXRN+1,%RGXRF=$P(%RGXRFS,U,%RGXRN),%RGD=%RGDX
"RTN","RGUTLK2",11,0)
 I %RGXRF="" G:%RGSCT NR3 W:'%RGHTML *7,*13,%RGEOL,"Not found"_$S(%RGD="":".",1:": ")_$S(%RGD'=+%RGD:%RGD,%RGOPT["D":$$ENTRY^RGUTDT(%RGD),1:%RGD) S %RGD1=$S(%RGOPT["X":U,1:"") Q ""
"RTN","RGUTLK2",12,0)
 S %RGOPT(0)=%RGOPT_%RGXRFS(%RGXRF)
"RTN","RGUTLK2",13,0)
 I %RGOPT(0)["D",$L(%RGDX) D  G:%RGD<1 NXTREF
"RTN","RGUTLK2",14,0)
 .S %RGD=$$DT^RGUT(%RGDX)
"RTN","RGUTLK2",15,0)
 I %RGOPT(0)["W" D MTL G NXTREF
"RTN","RGUTLK2",16,0)
 S %RGKEY=$S(%RGOPT(0)["P":$P(%RGD," "),1:%RGD)_$S(%RGDIR<0:$C(255),1:""),%RGNUM=$S(%RGKEY=+%RGKEY:%RGKEY,1:"")
"RTN","RGUTLK2",17,0)
 I %RGD'="",$D(@%RGDIC@(%RGXRF,%RGD)) S %=%RGSCT+1 D ADD(%RGD) I %RGSCT=%,%RGOPT(0)["A" D SLCT(%RGSCT) Q %RGIEN
"RTN","RGUTLK2",18,0)
NR2 I %RGOPT(0)[U R %#1:0 I %=U S %RGTRNC=1 G NR3:%RGSCT Q ""
"RTN","RGUTLK2",19,0)
 S %RGKEY=$O(@%RGDIC@(%RGXRF,%RGKEY),%RGDIR)
"RTN","RGUTLK2",20,0)
 I (%RGNUM="")=(%RGKEY=+%RGKEY),%RGD'="" S %RGKEY=""
"RTN","RGUTLK2",21,0)
 I %RGKEY'="",%RGOPT(0)["P",%RGKEY'=%RGD S %=$$PARTIAL(%RGD,%RGKEY) D ADD(%RGKEY):%>0 G:%'<0 NR2:%RGSCT<100
"RTN","RGUTLK2",22,0)
 I %RGKEY'="",%RGOPT(0)'["P",$E(%RGKEY,1,$L(%RGD))=%RGD D ADD(%RGKEY) G:%RGSCT<100 NR2
"RTN","RGUTLK2",23,0)
 I %RGNUM'="" S %RGKEY=%RGNUM_$C($S(%RGDIR<0:255,1:1)),%RGNUM="" G NR2
"RTN","RGUTLK2",24,0)
 I %RGSCT'<100 W:'%RGHTML *7 S %RGXALL=0,%RGTRNC=1
"RTN","RGUTLK2",25,0)
 G:'%RGSCT!%RGXALL NXTREF
"RTN","RGUTLK2",26,0)
NR3 I %RGSCT=1,%RGOPT(0)[1,'%RGTRNC D SLCT(1) Q %RGIEN
"RTN","RGUTLK2",27,0)
 S %RGKEY=%RGSLT,%RGSLT=1,%RGSMAX=$S(%RGHTML!%RGRS:99999,1:17-%RGY)
"RTN","RGUTLK2",28,0)
NR4 W:'%RGHTML $$XY(0,%RGY+1),%RGEOS,!
"RTN","RGUTLK2",29,0)
 F %RGN=%RGKEY:1:%RGKEY+%RGSMAX-1 D  Q:%RGN=%RGSCT
"RTN","RGUTLK2",30,0)
 .F %RGZ=0:1:%RGCOL-1 D
"RTN","RGUTLK2",31,0)
 ..S %1=IOM/%RGCOL*%RGZ\1,%RGLAST=%RGZ*%RGSMAX+%RGN
"RTN","RGUTLK2",32,0)
 ..Q:%RGLAST>%RGSCT
"RTN","RGUTLK2",33,0)
 ..W:'%RGHTML $$XY(%1,$Y),%RGEOL,%RGLAST,?5
"RTN","RGUTLK2",34,0)
 ..D SHOW(^TMP(%RGPID,%RGLAST),%1+4)
"RTN","RGUTLK2",35,0)
 .W:'%RGQT !
"RTN","RGUTLK2",36,0)
 Q:%RGHTML $S(%RGTRNC:-%RGSCT,1:%RGSCT)
"RTN","RGUTLK2",37,0)
 W:%RGLAST<%RGSCT !,%RGSCT-%RGLAST," more choice(s)..."
"RTN","RGUTLK2",38,0)
 W:%RGTRNC "  (list was truncated)",!
"RTN","RGUTLK2",39,0)
 W %RGEOS_%RGBEL,!!
"RTN","RGUTLK2",40,0)
 R "Enter selection: ",%RGSLCT:DTIME
"RTN","RGUTLK2",41,0)
 S:'$T %RGSLCT=U
"RTN","RGUTLK2",42,0)
 W *13
"RTN","RGUTLK2",43,0)
 I %RGOPT["K",%RGSLCT="" Q -1
"RTN","RGUTLK2",44,0)
 I "Nn"[%RGSLCT S %RGKEY=$S(%RGLAST<%RGSCT:%RGLAST+1,1:1) G NR4
"RTN","RGUTLK2",45,0)
 I "Bb"[%RGSLCT S %RGKEY=$S(%RGKEY=1:%RGSCT-%RGSMAX+1,%RGKEY'>%RGSMAX:1,1:%RGKEY-%RGSMAX) S:%RGKEY<1 %RGKEY=1 G NR4
"RTN","RGUTLK2",46,0)
 I "?"[%RGSLCT D HELP2 G NR4
"RTN","RGUTLK2",47,0)
 I "^^"[%RGSLCT S %RGD2="",%RGD1=$S(%RGOPT(0)["X":%RGSLCT,%RGSLCT="^^":%RGSLCT,1:"") Q ""
"RTN","RGUTLK2",48,0)
NR5 F  D  Q:%RGSLCT=""
"RTN","RGUTLK2",49,0)
 .I %RGOPT(0)["M" S %RGD=$P(%RGSLCT,";"),%RGSLCT=$P(%RGSLCT,";",2,999)
"RTN","RGUTLK2",50,0)
 .E  S %RGD=%RGSLCT,%RGSLCT=""
"RTN","RGUTLK2",51,0)
 .Q:'$L(%RGD)
"RTN","RGUTLK2",52,0)
 .I %RGD?1.N D SLCT(%RGD) Q
"RTN","RGUTLK2",53,0)
 .I %RGOPT(0)["M",%RGD?1.N1"-".N D  Q
"RTN","RGUTLK2",54,0)
 ..N %1,%2
"RTN","RGUTLK2",55,0)
 ..S %1=+%RGD,%2=+$P(%RGD,"-",2)
"RTN","RGUTLK2",56,0)
 ..S:'%2 %2=%RGSCT
"RTN","RGUTLK2",57,0)
 ..S:%1>%2 %RGD=%1,%1=%2,%2=%RGD
"RTN","RGUTLK2",58,0)
 ..S:%2>%RGSCT %2=%RGSCT
"RTN","RGUTLK2",59,0)
 ..F %=%1:1:%2 D SLCT(%)
"RTN","RGUTLK2",60,0)
 .I %RGOPT["X",%RGOPT'["L" S (%RGSLCT,%RGD1,%RGIEN)="" Q
"RTN","RGUTLK2",61,0)
 .I $E(%RGD)="`" D  Q
"RTN","RGUTLK2",62,0)
 ..S %RGD=+$E(%RGD,2,999)
"RTN","RGUTLK2",63,0)
 ..I $$VALD(%RGD) D DISV(%RGD) S %RGIEN=%RGD
"RTN","RGUTLK2",64,0)
 .S %RGD1=%RGD1_";"_%RGD
"RTN","RGUTLK2",65,0)
 W $$XY(0,%RGY+1),%RGEOS,!
"RTN","RGUTLK2",66,0)
 Q %RGIEN
"RTN","RGUTLK2",67,0)
 ; Add list selection to output
"RTN","RGUTLK2",68,0)
SLCT(%RGSLCT) ;
"RTN","RGUTLK2",69,0)
 I %RGSLCT>0,%RGSLCT'>%RGSCT D
"RTN","RGUTLK2",70,0)
 .S %RGIEN=+^TMP(%RGPID,+%RGSLCT)
"RTN","RGUTLK2",71,0)
 .D DISV(%RGIEN)
"RTN","RGUTLK2",72,0)
 Q
"RTN","RGUTLK2",73,0)
 ; Add IEN to output
"RTN","RGUTLK2",74,0)
DISV(%RGIEN) ;
"RTN","RGUTLK2",75,0)
 Q:%RGIEN=""
"RTN","RGUTLK2",76,0)
 I %RGMUL'="",'$D(@%RGMUL@(%RGIEN)) S @%RGMUL@(%RGIEN)="" D:'%RGQT APP(%RGIEN)
"RTN","RGUTLK2",77,0)
 D:%RGMUL="" APP(%RGIEN)
"RTN","RGUTLK2",78,0)
 Q:%RGOPT(0)["F"
"RTN","RGUTLK2",79,0)
 K:%RGSAME ^DISV(DUZ,%RGDISV)
"RTN","RGUTLK2",80,0)
 S %RGSAME=0,^DISV(DUZ,%RGDISV)=%RGIEN,^(%RGDISV,%RGIEN)=""
"RTN","RGUTLK2",81,0)
 Q
"RTN","RGUTLK2",82,0)
 ; Append primary key to key list
"RTN","RGUTLK2",83,0)
APP(%RGIEN) ;
"RTN","RGUTLK2",84,0)
 N %RGKEY
"RTN","RGUTLK2",85,0)
 S %RGKEY=$S(%RGIEN=+%RGIEN:$P($G(@%RGDIC@(%RGIEN,0)),U),1:%RGIEN)
"RTN","RGUTLK2",86,0)
 S %RGKEY=$$FMT(%RGIEN,%RGKEY)
"RTN","RGUTLK2",87,0)
 Q:'$L(%RGKEY)!($L(%RGKEY)+$L(%RGD2)'<250)
"RTN","RGUTLK2",88,0)
 S %RGD2=%RGD2_$S($L(%RGD2):";",1:"")_%RGKEY
"RTN","RGUTLK2",89,0)
 I %RGOPT(0)'["J",%RGOPT(0)'["M" S %RGD2=%RGD2_"  "_$$SID(%RGIEN)
"RTN","RGUTLK2",90,0)
 Q
"RTN","RGUTLK2",91,0)
 ; Multi-term lookup
"RTN","RGUTLK2",92,0)
MTL N %
"RTN","RGUTLK2",93,0)
 S %=$S(%RGDIC[")":$TR(%RGDIC,")",","),1:%RGDIC_"(")_"%RGXRF)"
"RTN","RGUTLK2",94,0)
 S %=$$LKP^RGUTMTL(%,%RGD,"^TMP(""MTL"",%RGPID)",%RGOPT(0)[U)
"RTN","RGUTLK2",95,0)
 S:%<0 %RGTRNC=1
"RTN","RGUTLK2",96,0)
 D:% ADD(%RGPID,"^TMP","MTL")
"RTN","RGUTLK2",97,0)
 K ^TMP("MTL",%RGPID)
"RTN","RGUTLK2",98,0)
 Q
"RTN","RGUTLK2",99,0)
 ; Add key to selection list
"RTN","RGUTLK2",100,0)
ADD(%RGKEY,%RGIDX,%RGSUB) ;
"RTN","RGUTLK2",101,0)
 N %S
"RTN","RGUTLK2",102,0)
 S:'$D(%RGIDX) %RGIDX=%RGDIC,%RGSUB=%RGXRF
"RTN","RGUTLK2",103,0)
 F %S=0:0 S %S=$O(@%RGIDX@(%RGSUB,%RGKEY,%S)) Q:'%S  D
"RTN","RGUTLK2",104,0)
 .I %RGOPT(0)["O",$D(^TMP(%RGPID,0,%S)) Q
"RTN","RGUTLK2",105,0)
 .I $$VALD(%S) D
"RTN","RGUTLK2",106,0)
 ..S %RGSCT=%RGSCT+1,^TMP(%RGPID,%RGSCT)=%S_U_$S(%RGOPT(0)["W":"",1:%RGKEY),^(0,%S)=""
"RTN","RGUTLK2",107,0)
 ..I %RGOPT(0)["S",$G(^DISV(DUZ,%RGDISV))=%S S %RGSLT=%RGSCT
"RTN","RGUTLK2",108,0)
 Q
"RTN","RGUTLK2",109,0)
 ; Check entry against screening criteria
"RTN","RGUTLK2",110,0)
VALD(%S) Q:'$D(@%RGDIC@(%S))!'%S 0
"RTN","RGUTLK2",111,0)
 Q:%RGSCN="" 1
"RTN","RGUTLK2",112,0)
 N %,%1
"RTN","RGUTLK2",113,0)
 S %1=1,@$$TRAP^RGUTOS("V3^RGUTLK2")
"RTN","RGUTLK2",114,0)
 F %=0:0 S %=$O(@%RGSCN@(%)) Q:'%  D  Q:%1
"RTN","RGUTLK2",115,0)
 .S %1=0,@$$TRAP^RGUTOS("V2^RGUTLK2")
"RTN","RGUTLK2",116,0)
 .X "S %1="_@%RGSCN@(%)
"RTN","RGUTLK2",117,0)
V2 .Q
"RTN","RGUTLK2",118,0)
 Q %1
"RTN","RGUTLK2",119,0)
V3 Q 0
"RTN","RGUTLK2",120,0)
 ; Show the specified selection
"RTN","RGUTLK2",121,0)
SHOW(%RGSLCT,%RGCOL1,%RGCOL2) ;
"RTN","RGUTLK2",122,0)
 N %S,%Z,%P,%I
"RTN","RGUTLK2",123,0)
 S %S=+%RGSLCT,%Z=$G(@%RGDIC@(%S,0)),%P=$$FMT(%S,$S(%RGOPT["I":$P(%RGSLCT,U,2),1:$P(%Z,U)))
"RTN","RGUTLK2",124,0)
 ;S %I=$$SID(%S,$P(%RGSLCT,U,2)),%I=$S(%I="":%P,1:%I)
"RTN","RGUTLK2",125,0)
 S %I=$$SID(%S,%P),%I=$S(%I="":%P,1:%I)
"RTN","RGUTLK2",126,0)
 I %RGHTML D  Q
"RTN","RGUTLK2",127,0)
 .I '%RGQT W $$MSG^RGUT(%RGPRMP,"|"),!
"RTN","RGUTLK2",128,0)
 .E  D DISV(%S)
"RTN","RGUTLK2",129,0)
 S %RGCOL1=+$G(%RGCOL1,$X)
"RTN","RGUTLK2",130,0)
 I %RGOPT(0)["Y" S %RGCOL2=+$G(%RGCOL2,IOM\%RGCOL+%RGCOL1-8-$L(%I))
"RTN","RGUTLK2",131,0)
 E  S %RGCOL2=+$G(%RGCOL2,IOM\%RGCOL\$S(%RGOPT(0)["D":3,1:2)-3+%RGCOL1)
"RTN","RGUTLK2",132,0)
 W $$XY(%RGCOL1,$Y)
"RTN","RGUTLK2",133,0)
 I %RGOPT(0)'["J",%I'=%P W $$TRUNC^RGUT(%P,IOM\%RGCOL-6),?%RGCOL2," "_$$TRUNC^RGUT(%I,IOM-%RGCOL2-2)
"RTN","RGUTLK2",134,0)
 E  W $$TRUNC^RGUT(%I,IOM\%RGCOL-6)
"RTN","RGUTLK2",135,0)
 Q
"RTN","RGUTLK2",136,0)
 ; Return external form of result
"RTN","RGUTLK2",137,0)
FMT(%S,%RGKEY) ;
"RTN","RGUTLK2",138,0)
 Q:%RGKEY="" %RGKEY
"RTN","RGUTLK2",139,0)
 I %RGTRP'="",$D(@%RGTRP@(%RGKEY)) Q @%RGTRP@(%RGKEY)
"RTN","RGUTLK2",140,0)
 S:%RGOPT(0)["D" %RGKEY=$$ENTRY^RGUTDT(%RGKEY)
"RTN","RGUTLK2",141,0)
 I %RGOPT(0)["Z",%RGSCN'="",$G(@%RGSCN)'="" S @("%RGKEY="_@%RGSCN)
"RTN","RGUTLK2",142,0)
 S:%RGOPT["J" %RGKEY=$$SID(%S,%RGKEY)
"RTN","RGUTLK2",143,0)
 Q %RGKEY
"RTN","RGUTLK2",144,0)
 ; Return secondary identifier
"RTN","RGUTLK2",145,0)
SID(%S,%RGKEY) ;
"RTN","RGUTLK2",146,0)
 S %RGKEY=$G(%RGKEY)
"RTN","RGUTLK2",147,0)
 N %Z
"RTN","RGUTLK2",148,0)
 S %Z=$G(@%RGDIC@(%S,0)),@("%Z="_$S(%RGSID<0:$S(%RGKEY=$$UP^XLFSTR($P(%Z,U)):"""""",1:"%RGKEY"),%RGSID="":"%RGSID",1:%RGSID))
"RTN","RGUTLK2",149,0)
 Q %Z
"RTN","RGUTLK2",150,0)
 ; Partial key lookup
"RTN","RGUTLK2",151,0)
PARTIAL(%RGD,%RGKEY) ;
"RTN","RGUTLK2",152,0)
 N %,%1,%2
"RTN","RGUTLK2",153,0)
 S (%(1),%(2))=0,%1(1)=%RGD,%1(2)=%RGKEY
"RTN","RGUTLK2",154,0)
 F %=1,2 S %1(%)=$TR(%1(%),".,;:?/!-","        ")
"RTN","RGUTLK2",155,0)
P1 S (%2(1),%2(2))=""
"RTN","RGUTLK2",156,0)
 F %=1,2 D
"RTN","RGUTLK2",157,0)
 .F %(%)=%(%)+1:1:$L(%1(%)," ") S %2(%)=$P(%1(%)," ",%(%)) Q:%2(%)'=""
"RTN","RGUTLK2",158,0)
 Q:%2(1)="" 1
"RTN","RGUTLK2",159,0)
 Q:%2(1)'=$E(%2(2),1,$L(%2(1))) -(%(1)=1)
"RTN","RGUTLK2",160,0)
 G P1
"RTN","RGUTLK2",161,0)
HELP(X) ; Application-specific help
"RTN","RGUTLK2",162,0)
 N %
"RTN","RGUTLK2",163,0)
 S %=""
"RTN","RGUTLK2",164,0)
 F  S %=$O(X(%)) Q:%=""  D:$Y>20 PAUSE W $G(X(%)),!
"RTN","RGUTLK2",165,0)
 Q
"RTN","RGUTLK2",166,0)
 ; Generic help
"RTN","RGUTLK2",167,0)
HELP1 N %
"RTN","RGUTLK2",168,0)
 W !!
"RTN","RGUTLK2",169,0)
 D:%RGHLP'="" @%RGHLP
"RTN","RGUTLK2",170,0)
 W !,"Enter a blank line for default action.",!
"RTN","RGUTLK2",171,0)
 D:$Y>20 PAUSE
"RTN","RGUTLK2",172,0)
 W:%RGOPT'["W" "Enter ?? to see all possible selections.",!
"RTN","RGUTLK2",173,0)
 D:$Y>20 PAUSE
"RTN","RGUTLK2",174,0)
 W "Enter a space to retrieve previous selection.",!
"RTN","RGUTLK2",175,0)
 D:$Y>20 PAUSE
"RTN","RGUTLK2",176,0)
 W "Enter a valid identifier for lookup."
"RTN","RGUTLK2",177,0)
 W:(%RGOPT'["*")&(%RGXRFS[U) "  Append a * to include all indices."
"RTN","RGUTLK2",178,0)
 W !
"RTN","RGUTLK2",179,0)
 I %RGOPT["M" D
"RTN","RGUTLK2",180,0)
 .D:$Y>20 PAUSE
"RTN","RGUTLK2",181,0)
 .W "Separate multiple selections by semicolons."
"RTN","RGUTLK2",182,0)
 R !!,"Press any key to continue...",*%:DTIME
"RTN","RGUTLK2",183,0)
 Q
"RTN","RGUTLK2",184,0)
 ; Help at choice prompt
"RTN","RGUTLK2",185,0)
HELP2 N %
"RTN","RGUTLK2",186,0)
 W $$XY(0,16),%RGEOS,!
"RTN","RGUTLK2",187,0)
 W $S(%RGOPT(0)["K":"Enter N for next choices.",1:"Press RETURN for more choices.")
"RTN","RGUTLK2",188,0)
 W ?35,"Enter B for previous choices.",!
"RTN","RGUTLK2",189,0)
 W "Enter ^ to abort lookup.",?35,"Enter choice number to select.",!
"RTN","RGUTLK2",190,0)
 W "Any other entry = new lookup."
"RTN","RGUTLK2",191,0)
 W:%RGOPT(0)["M" ?35,"Separate multiple selections by semicolons."
"RTN","RGUTLK2",192,0)
 R !!,"Press any key to continue...",*%:DTIME
"RTN","RGUTLK2",193,0)
 Q
"RTN","RGUTLK2",194,0)
PAUSE Q:%RGRS
"RTN","RGUTLK2",195,0)
 N %
"RTN","RGUTLK2",196,0)
 R !,"Press any key for more...",*%:DTIME
"RTN","RGUTLK2",197,0)
 W $$XY(0,%RGY+2),%RGEOS
"RTN","RGUTLK2",198,0)
 Q
"RTN","RGUTLK2",199,0)
XY(X,Y) ;I %RGRS W:'X *13 S $X=X,$Y=Y Q ""
"RTN","RGUTLK2",200,0)
 S:%RGRS Y=$Y
"RTN","RGUTLK2",201,0)
 Q $$XY^RGUT(X,Y)
"RTN","RGUTLKP")
0^51^B26828890
"RTN","RGUTLKP",1,0)
RGUTLKP ;RI/CBMI/DKM - File lookup utility;03-Mar-2015 14:24;DKM
"RTN","RGUTLKP",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTLKP",3,0)
 ;;
"RTN","RGUTLKP",4,0)
 ;=================================================================
"RTN","RGUTLKP",5,0)
 ; Inputs:
"RTN","RGUTLKP",6,0)
 ;   %RGDIC  = Global root or file #
"RTN","RGUTLKP",7,0)
 ;   %RGOPT  = Options
"RTN","RGUTLKP",8,0)
 ;      A allow automatic selection of exact match
"RTN","RGUTLKP",9,0)
 ;      B sound bell with selection prompt
"RTN","RGUTLKP",10,0)
 ;      C use roll & scroll mode
"RTN","RGUTLKP",11,0)
 ;      D index is in date/time format
"RTN","RGUTLKP",12,0)
 ;      E use line editor
"RTN","RGUTLKP",13,0)
 ;      F forget the entry (i.e., ^DISV not updated)
"RTN","RGUTLKP",14,0)
 ;      G start with prior entry
"RTN","RGUTLKP",15,0)
 ;      H HTML-formatted output
"RTN","RGUTLKP",16,0)
 ;      I show only lookup identifiers
"RTN","RGUTLKP",17,0)
 ;      J show only secondary identifiers
"RTN","RGUTLKP",18,0)
 ;      K null entry at select prompt exits
"RTN","RGUTLKP",19,0)
 ;      L like X, but allows lookup at select prompt
"RTN","RGUTLKP",20,0)
 ;      M allow multiple selection
"RTN","RGUTLKP",21,0)
 ;      O show entry only once
"RTN","RGUTLKP",22,0)
 ;      P partial lookup
"RTN","RGUTLKP",23,0)
 ;      Q silent lookup
"RTN","RGUTLKP",24,0)
 ;      R reverse search through indices
"RTN","RGUTLKP",25,0)
 ;      S start selection list at last selection
"RTN","RGUTLKP",26,0)
 ;      T forget trapped inputs
"RTN","RGUTLKP",27,0)
 ;      U force uppercase translation
"RTN","RGUTLKP",28,0)
 ;      V extended DISV recall (prompt-specific)
"RTN","RGUTLKP",29,0)
 ;      W use multi-term lookup algorithm
"RTN","RGUTLKP",30,0)
 ;      X do not prompt for input
"RTN","RGUTLKP",31,0)
 ;      Y right justify secondary identifiers
"RTN","RGUTLKP",32,0)
 ;      Z perform special formatting of output
"RTN","RGUTLKP",33,0)
 ;      1 automatic selection if one match only
"RTN","RGUTLKP",34,0)
 ;      2-9 # of columns for selection display (default=1)
"RTN","RGUTLKP",35,0)
 ;      * force all indices to be searched
"RTN","RGUTLKP",36,0)
 ;      ^ allow search to be aborted
"RTN","RGUTLKP",37,0)
 ;   %RGPRMP = Prompt (optional)
"RTN","RGUTLKP",38,0)
 ;   %RGXRFS  = Cross-references to examine (all "B"'s by default)
"RTN","RGUTLKP",39,0)
 ;   %RGDATA  = Data to lookup (optional)
"RTN","RGUTLKP",40,0)
 ;   %RGSCN   = Screening criteria (optional)
"RTN","RGUTLKP",41,0)
 ;   %RGMUL   = Local variable or global reference to
"RTN","RGUTLKP",42,0)
 ;              store multiple hits
"RTN","RGUTLKP",43,0)
 ;   %RGX     = Column position for prompt (optional)
"RTN","RGUTLKP",44,0)
 ;   %RGY     = Row position for prompt (optional)
"RTN","RGUTLKP",45,0)
 ;   %RGSID   = Piece # of secondary identifier (optional)
"RTN","RGUTLKP",46,0)
 ;              or executable M code to display same
"RTN","RGUTLKP",47,0)
 ;   %RGTRP   = Special inputs to trap (optional)
"RTN","RGUTLKP",48,0)
 ;   %RGHLP   = Entry point to invoke help
"RTN","RGUTLKP",49,0)
 ; Outputs:
"RTN","RGUTLKP",50,0)
 ;    Return value = index of selected entry or:
"RTN","RGUTLKP",51,0)
 ;      -1 for forced exit by ^
"RTN","RGUTLKP",52,0)
 ;      -2 for forced exit by ^^
"RTN","RGUTLKP",53,0)
 ;       0 for null entry
"RTN","RGUTLKP",54,0)
 ;=================================================================
"RTN","RGUTLKP",55,0)
ENTRY(%RGDIC,%RGOPT,%RGPRMP,%RGXRFS,%RGDATA,%RGSCN,%RGMUL,%RGX,%RGY,%RGSID,%RGTRP,%RGHLP) ;
"RTN","RGUTLKP",56,0)
 N %,%1,%N,%S,%Z,%RGPID,%RGXRF,%RGSCT,%RGKEY,%RGKEY1,%RGDISV,%RGSLCT
"RTN","RGUTLKP",57,0)
 N %RGXALL,%RGXRN,%RGSMAX,%RGTRNC,%RGD,%RGD1,%RGD2,%RGBEL,%RGNUM
"RTN","RGUTLKP",58,0)
 N %RGDIR,%RGSLT,%RGCOL,%RGLAST,%RGSAME,%RGEOS,%RGEOL,%RGHTML,%RGRS,%RGQT
"RTN","RGUTLKP",59,0)
 I $$NEWERR^%ZTER N $ET S $ET=""
"RTN","RGUTLKP",60,0)
 S (%RGOPT,%RGOPT(0))=$$UP^XLFSTR($G(%RGOPT)),%RGPID="%RGLKP"_$J
"RTN","RGUTLKP",61,0)
 S %RGBEL=$S(%RGOPT["B":$C(7),1:""),%RGDIR=$S(%RGOPT["R":-1,1:1)
"RTN","RGUTLKP",62,0)
 S %RGSLT=1,%RGCOL=1,%RGEOS=$C(27,91,74),%RGEOL=$C(27,91,75),%RGHTML=0
"RTN","RGUTLKP",63,0)
 S %RGX=$G(%RGX,0),%RGY=$G(%RGY,3),DTIME=$G(DTIME,999999)
"RTN","RGUTLKP",64,0)
 S %RGLAST=0,%RGRS=%RGOPT["C",%RGQT=%RGOPT["Q"
"RTN","RGUTLKP",65,0)
 S:%RGRS %RGEOS="",%RGY=$Y
"RTN","RGUTLKP",66,0)
 S:%RGQT %RGOPT=%RGOPT_"XHM"
"RTN","RGUTLKP",67,0)
 S:%RGOPT["H" (%RGBEL,%RGEOL,%RGEOS)="",%RGOPT=%RGOPT_"X",%RGHTML=1
"RTN","RGUTLKP",68,0)
 S:%RGOPT["L" %RGOPT=%RGOPT_"X"
"RTN","RGUTLKP",69,0)
 S U="^",DUZ=$G(DUZ,0),IO=$G(IO,$I),IOM=$G(IOM,80),%RGMUL=$G(%RGMUL),%RGHLP=$G(%RGHLP),%RGTRP=$G(%RGTRP),%RGSCN=$G(%RGSCN),%RGSAME=%RGOPT["M"&(%RGMUL'="")
"RTN","RGUTLKP",70,0)
 F %=2:1:9 S:%RGOPT[% %RGCOL=%
"RTN","RGUTLKP",71,0)
 S:%RGOPT'["M" %RGMUL=""
"RTN","RGUTLKP",72,0)
 K:%RGMUL'="" @%RGMUL
"RTN","RGUTLKP",73,0)
 S:%RGDIC=+%RGDIC %RGDIC=$$ROOT^DILFD(%RGDIC)
"RTN","RGUTLKP",74,0)
 S:$E(%RGDIC,$L(%RGDIC))="(" %RGDIC=$E(%RGDIC,1,$L(%RGDIC)-1)
"RTN","RGUTLKP",75,0)
 S:$E(%RGDIC,$L(%RGDIC))="," %RGDIC=$E(%RGDIC,1,$L(%RGDIC)-1)
"RTN","RGUTLKP",76,0)
 I %RGDIC["(",$E(%RGDIC,$L(%RGDIC))'=")" S %RGDIC=%RGDIC_")"
"RTN","RGUTLKP",77,0)
 S %RGPRMP=$G(%RGPRMP,$S(%RGOPT["X":"",1:"Enter identifier: "))
"RTN","RGUTLKP",78,0)
 S %RGDISV=$S(%RGDIC[")":$TR(%RGDIC,")",","),1:%RGDIC_"(")_$S(%RGOPT["V":";"_%RGPRMP,1:"")
"RTN","RGUTLKP",79,0)
 S %RGSID=$G(%RGSID),%RGXRFS=$G(%RGXRFS),%RGDATA=$G(%RGDATA)
"RTN","RGUTLKP",80,0)
 S:%RGSID=+%RGSID %RGSID=$S(%RGSID<0:%RGSID,1:"$P(%Z,U,"_%RGSID_")")
"RTN","RGUTLKP",81,0)
 W:'%RGHTML $$XY(%RGX,%RGY),%RGEOS,!
"RTN","RGUTLKP",82,0)
 I %RGOPT["G",$G(^DISV(DUZ,%RGDISV))'="" D
"RTN","RGUTLKP",83,0)
 .S %RGDATA=^(%RGDISV)
"RTN","RGUTLKP",84,0)
 .S:+%RGDATA=%RGDATA %RGDATA=$P($G(@%RGDIC@(%RGDATA,0)),U)
"RTN","RGUTLKP",85,0)
 I %RGXRFS="" D
"RTN","RGUTLKP",86,0)
 .S (%,%RGXRFS)="B"
"RTN","RGUTLKP",87,0)
 .F  S %=$O(@%RGDIC@(%)) Q:$E(%)'="B"  S %RGXRFS=%RGXRFS_U_%
"RTN","RGUTLKP",88,0)
 F %=1:1:$L(%RGXRFS,U) S %1=$P(%RGXRFS,U,%) S:%1'="" %RGXRFS($P(%1,":"))=$P(%1,":",2),$P(%RGXRFS,U,%)=$P(%1,":")
"RTN","RGUTLKP",89,0)
 S (%RGD1,%RGD2)=""
"RTN","RGUTLKP",90,0)
 D RM(0)
"RTN","RGUTLKP",91,0)
 S %RGIEN=$$INPUT
"RTN","RGUTLKP",92,0)
 W:'%RGHTML $$XY(%RGX+$L(%RGPRMP),%RGY),$$TRUNC^RGUT(%RGD2,IOM-$X),%RGEOS
"RTN","RGUTLKP",93,0)
 D RM(IOM)
"RTN","RGUTLKP",94,0)
 K ^TMP(%RGPID)
"RTN","RGUTLKP",95,0)
 Q %RGIEN
"RTN","RGUTLKP",96,0)
INPUT() ;
"RTN","RGUTLKP",97,0)
INP K ^TMP(%RGPID)
"RTN","RGUTLKP",98,0)
 D READ
"RTN","RGUTLKP",99,0)
 S:%RGOPT["U" %RGD=$$UP^XLFSTR(%RGD)
"RTN","RGUTLKP",100,0)
 S @$$TRAP^RGUTOS("ERROR^RGUTLKP")
"RTN","RGUTLKP",101,0)
 I %RGD="",%RGTRP'="" S %RGD=$G(@%RGTRP@(" "))
"RTN","RGUTLKP",102,0)
 Q:"^^"[%RGD -$L(%RGD)
"RTN","RGUTLKP",103,0)
 I "?"[%RGD D HELP1^RGUTLK2 G INP
"RTN","RGUTLKP",104,0)
 I %RGD=" " D SAME G:%RGD="" INP2
"RTN","RGUTLKP",105,0)
 I %RGTRP'="",$D(@%RGTRP@(%RGD)) D  Q %RGD
"RTN","RGUTLKP",106,0)
 .S %RGSAME=1
"RTN","RGUTLKP",107,0)
 .D:%RGOPT'["T" DISV^RGUTLK2(%RGD)
"RTN","RGUTLKP",108,0)
 .S %RGD2=$G(@%RGTRP@(%RGD))
"RTN","RGUTLKP",109,0)
 .S:%RGD2="" %RGD2=%RGD
"RTN","RGUTLKP",110,0)
 S:%RGD="??" %RGD=""
"RTN","RGUTLKP",111,0)
 I $E(%RGD,$L(%RGD))="*" S %RGXALL=1,%RGD=$E(%RGD,1,$L(%RGD)-1)
"RTN","RGUTLKP",112,0)
 E  S %RGXALL=%RGOPT["*"
"RTN","RGUTLKP",113,0)
 S %RGIEN=$$LKP^RGUTLK2(%RGD)
"RTN","RGUTLKP",114,0)
INP2 G INP:%RGIEN=""!$L(%RGD1)
"RTN","RGUTLKP",115,0)
 Q %RGIEN
"RTN","RGUTLKP",116,0)
READ S %RGD=""
"RTN","RGUTLKP",117,0)
 F  Q:%RGD'=""!(%RGD1="")  S %RGD=$P(%RGD1,";"),%RGD1=$P(%RGD1,";",2,999)
"RTN","RGUTLKP",118,0)
 Q:$L(%RGD)
"RTN","RGUTLKP",119,0)
 S %RGD=%RGDATA,%RGDATA=""
"RTN","RGUTLKP",120,0)
 W:'%RGHTML $$XY(0,%RGY+2),%RGEOS,$$XY(%RGX,%RGY),%RGPRMP_%RGEOL
"RTN","RGUTLKP",121,0)
 I %RGOPT["X" S:%RGOPT["E" %RGOPT=$TR(%RGOPT,"X"),%RGDATA=%RGD Q
"RTN","RGUTLKP",122,0)
 I %RGOPT["E" D
"RTN","RGUTLKP",123,0)
 .N %,%1
"RTN","RGUTLKP",124,0)
 .S:%RGD?1"`"1.N %RGD=+$E(%RGD,2,99),%RGD=$$FMT^RGUTLK2(%RGD,$P($G(@%RGDIC@(%RGD,0)),U))
"RTN","RGUTLKP",125,0)
 .S %1=0,%=%RGX+$L(%RGPRMP),%=$$ENTRY^RGUTEDT(%RGD,IOM-%-1,%,%RGY,"","RHV",,,,,.%1)
"RTN","RGUTLKP",126,0)
 .S:%1=3 %=U
"RTN","RGUTLKP",127,0)
 .S:%="?" %RGDATA=%RGD
"RTN","RGUTLKP",128,0)
 .S %RGD=%
"RTN","RGUTLKP",129,0)
 E  I '$L(%RGD) R %RGD:DTIME S:'$T %RGD=U
"RTN","RGUTLKP",130,0)
 I %RGOPT["M",%RGD[";" S %RGD1=%RGD G READ
"RTN","RGUTLKP",131,0)
 Q
"RTN","RGUTLKP",132,0)
SAME S %RGSAME=0,%RGIEN="",%RGD="",%RGSCT=0
"RTN","RGUTLKP",133,0)
 I %RGMUL'="" D
"RTN","RGUTLKP",134,0)
 .S %=""
"RTN","RGUTLKP",135,0)
 .F  S %=$O(^DISV(DUZ,%RGDISV,%)) Q:%=""  D SM1
"RTN","RGUTLKP",136,0)
 E  S %=$G(^DISV(DUZ,%RGDISV)) D:%'="" SM1
"RTN","RGUTLKP",137,0)
 S:%RGHTML %RGIEN=%RGSCT
"RTN","RGUTLKP",138,0)
 Q
"RTN","RGUTLKP",139,0)
SM1 I %RGTRP'="",$D(@%RGTRP@(%)) S %RGIEN=%,%RGD=%
"RTN","RGUTLKP",140,0)
 E  I $$VALD^RGUTLK2(%) S %RGIEN=%
"RTN","RGUTLKP",141,0)
 I  D DISV^RGUTLK2(%RGIEN) S %RGSCT=%RGSCT+1
"RTN","RGUTLKP",142,0)
 Q
"RTN","RGUTLKP",143,0)
XY(X,Y) Q $$XY^RGUTLK2(.X,.Y)
"RTN","RGUTLKP",144,0)
RM(X) X ^%ZOSF("RM")
"RTN","RGUTLKP",145,0)
 Q
"RTN","RGUTLKP",146,0)
ERROR W:'%RGHTML $$XY(0,%RGY+1),*7,%RGEOL,$$EC^%ZOSV
"RTN","RGUTLKP",147,0)
 S (%RGDATA,%RGD1,%RGD2)=""
"RTN","RGUTLKP",148,0)
 G INP
"RTN","RGUTMTL")
0^52^B13569820
"RTN","RGUTMTL",1,0)
RGUTMTL ;RI/CBMI/DKM - Multi-term lookup support ;03-Mar-2015 14:24;DKM
"RTN","RGUTMTL",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTMTL",3,0)
 ;;
"RTN","RGUTMTL",4,0)
 ;=================================================================
"RTN","RGUTMTL",5,0)
 ; Parse term into component words (KWIC)
"RTN","RGUTMTL",6,0)
PARSE2(RGTRM,RGRTN,RGMIN) ;
"RTN","RGUTMTL",7,0)
 N X,L,C,%
"RTN","RGUTMTL",8,0)
 K RGRTN
"RTN","RGUTMTL",9,0)
 S %="RGRTN(I)",X=$$UP^XLFSTR(RGTRM),RGMIN=+$G(RGMIN)
"RTN","RGUTMTL",10,0)
 D S^XTLKWIC
"RTN","RGUTMTL",11,0)
 S L="",C=0
"RTN","RGUTMTL",12,0)
 F  S L=$O(RGRTN(L)) Q:L=""  D
"RTN","RGUTMTL",13,0)
 .I $L(L)<RGMIN K RGRTN(L)
"RTN","RGUTMTL",14,0)
 .E  S C=C+1
"RTN","RGUTMTL",15,0)
 Q C
"RTN","RGUTMTL",16,0)
 ; Parse term into component words
"RTN","RGUTMTL",17,0)
PARSE(RGTRM,RGRTN,RGMIN) ;
"RTN","RGUTMTL",18,0)
 N X,Y,Z,L,C
"RTN","RGUTMTL",19,0)
 K RGRTN
"RTN","RGUTMTL",20,0)
 S RGTRM=$$UP^XLFSTR(RGTRM),C=0,RGMIN=+$G(RGMIN,1),Z=""
"RTN","RGUTMTL",21,0)
 F X=1:1 Q:'$L(RGTRM)  D:$E(RGTRM,X)'?1AN
"RTN","RGUTMTL",22,0)
 .S Y=Z,Z=$E(RGTRM,X),L=$E(RGTRM,1,X-1),RGTRM=$E(RGTRM,X+1,999),X=0
"RTN","RGUTMTL",23,0)
 .I $L(L)'<RGMIN,L'=+L,'$D(RGRTN(L)) S RGRTN(L)=Y,C=C+1,Y=""
"RTN","RGUTMTL",24,0)
 Q C
"RTN","RGUTMTL",25,0)
 ; Create/delete an MTL cross reference for term
"RTN","RGUTMTL",26,0)
XREF(RGRT,RGTRM,RGDA,RGDEL) ;
"RTN","RGUTMTL",27,0)
 N RGZ,RGG
"RTN","RGUTMTL",28,0)
 S RGZ=$L(RGRT),RGG=$S($E(RGRT,RGZ)=")":$E(RGRT,1,RGZ-1)_",",1:RGRT_"(")_"RGZ,",RGZ=$C(1)
"RTN","RGUTMTL",29,0)
 F  S RGZ=$O(RGDA(RGZ),-1) Q:'RGZ  S RGG=RGG_""""_RGDA(RGZ)_""","
"RTN","RGUTMTL",30,0)
 S RGG=RGG_""""_RGDA_""")"
"RTN","RGUTMTL",31,0)
 Q:'$$PARSE(RGTRM,.RGZ)
"RTN","RGUTMTL",32,0)
 S RGZ="",RGDEL=''$G(RGDEL)
"RTN","RGUTMTL",33,0)
 L +@RGRT:30
"RTN","RGUTMTL",34,0)
 F  S RGZ=$O(RGZ(RGZ)) Q:RGZ=""  D
"RTN","RGUTMTL",35,0)
 .I ''$D(@RGG)=RGDEL D
"RTN","RGUTMTL",36,0)
 ..I RGDEL K @RGG  K:$D(@RGRT@(RGZ))<10 @RGRT@(RGZ)
"RTN","RGUTMTL",37,0)
 ..E  D:'$D(@RGRT@(RGZ)) REFNEW(RGZ) S @RGG=""
"RTN","RGUTMTL",38,0)
 ..D REFCNT(RGZ,$S(RGDEL:-1,1:1))
"RTN","RGUTMTL",39,0)
 L -@RGRT
"RTN","RGUTMTL",40,0)
 Q
"RTN","RGUTMTL",41,0)
 ; Increment/decrement reference count for term and its stems
"RTN","RGUTMTL",42,0)
REFCNT(RGX,RGI) ;
"RTN","RGUTMTL",43,0)
 Q:'$L(RGX)
"RTN","RGUTMTL",44,0)
 I $D(@RGRT@(RGX)) D
"RTN","RGUTMTL",45,0)
 .N RGZ
"RTN","RGUTMTL",46,0)
 .S RGZ=$G(@RGRT@(RGX))+RGI
"RTN","RGUTMTL",47,0)
 .I RGZ<1 K @RGRT@(RGX)
"RTN","RGUTMTL",48,0)
 .E  S @RGRT@(RGX)=RGZ
"RTN","RGUTMTL",49,0)
 D REFCNT($E(RGX,1,$L(RGX)-1),RGI)
"RTN","RGUTMTL",50,0)
 Q
"RTN","RGUTMTL",51,0)
 ; Create new term reference
"RTN","RGUTMTL",52,0)
REFNEW(RGX) ;
"RTN","RGUTMTL",53,0)
 N RGZ,RGC,RGABR
"RTN","RGUTMTL",54,0)
 S RGZ=RGX,RGC=0,RGABR=0
"RTN","RGUTMTL",55,0)
 F  S RGZ=$$STEM(RGZ,RGX) Q:'$L(RGZ)  S RGC=RGC+$G(@RGRT@(RGZ)),RGZ=RGZ_$C(255)
"RTN","RGUTMTL",56,0)
 S @RGRT@(RGX)=RGC
"RTN","RGUTMTL",57,0)
 Q
"RTN","RGUTMTL",58,0)
 ; Lookup a term in an MTL index
"RTN","RGUTMTL",59,0)
 ; RGRT  = Root of index (e.g., ^RGCOD(990.9,"AD"))
"RTN","RGUTMTL",60,0)
 ; RGTRM = Term to lookup
"RTN","RGUTMTL",61,0)
 ; RGRTN = Root of returned array (note: killed before populated)
"RTN","RGUTMTL",62,0)
 ; RGABR = If nonzero, user can abort lookup with ^
"RTN","RGUTMTL",63,0)
LKP(RGRT,RGTRM,RGRTN,RGABR) ;
"RTN","RGUTMTL",64,0)
 N RGX,RGY,RGW,RGF,RGIEN,RGL,RGM,RGTRM1
"RTN","RGUTMTL",65,0)
 I $$NEWERR^%ZTER N $ET S $ET=""
"RTN","RGUTMTL",66,0)
 K @RGRTN
"RTN","RGUTMTL",67,0)
 S RGABR=+$G(RGABR),@$$TRAP^RGUTOS("LKP2^RGUTMTL")
"RTN","RGUTMTL",68,0)
 I $$PARSE(RGTRM,.RGTRM)=1 S RGW(1,$O(RGTRM("")))=""
"RTN","RGUTMTL",69,0)
 E  D
"RTN","RGUTMTL",70,0)
 .S RGTRM="",RGM=9999999999
"RTN","RGUTMTL",71,0)
 .F  S RGTRM=$O(RGTRM(RGTRM)) Q:RGTRM=""  D  Q:RGL<0
"RTN","RGUTMTL",72,0)
 ..S RGX=RGTRM(RGTRM)["=",RGY=RGTRM(RGTRM)["~",RGTRM1="",RGL=$S(RGY:9999999999,1:-1)
"RTN","RGUTMTL",73,0)
 ..I 'RGY F  S RGTRM1=$$STEM(RGTRM1,RGTRM,RGX) Q:RGTRM1=""  D:$D(^(RGTRM1))>1  Q:RGL>RGM
"RTN","RGUTMTL",74,0)
 ...S:RGL=-1 RGL=0
"RTN","RGUTMTL",75,0)
 ...S RGL=RGL+$G(^(RGTRM1))
"RTN","RGUTMTL",76,0)
 ...S RGTRM1=RGTRM1_$C(255)
"RTN","RGUTMTL",77,0)
 ..S RGW(RGL,RGTRM)=""
"RTN","RGUTMTL",78,0)
 ..I RGL>0,RGL<RGM S RGM=RGL
"RTN","RGUTMTL",79,0)
 ..D:RGABR ABORT
"RTN","RGUTMTL",80,0)
 Q:$D(RGW(-1)) 0
"RTN","RGUTMTL",81,0)
 S RGW="",RGF=0
"RTN","RGUTMTL",82,0)
 F  S RGW=$O(RGW(RGW)),RGTRM="" Q:RGW=""  D  Q:RGF=-1
"RTN","RGUTMTL",83,0)
 .F  S RGTRM=$O(RGW(RGW,RGTRM)) Q:RGTRM=""  D  Q:RGF=-1
"RTN","RGUTMTL",84,0)
 ..S RGX=RGTRM(RGTRM)["=",RGY=RGTRM(RGTRM)["~"
"RTN","RGUTMTL",85,0)
 ..I RGF D
"RTN","RGUTMTL",86,0)
 ...S RGIEN=0
"RTN","RGUTMTL",87,0)
 ...F  S RGIEN=$O(@RGRTN@(RGIEN)),RGTRM1="" Q:'RGIEN  D  Q:RGF=-1
"RTN","RGUTMTL",88,0)
 ....F  S RGTRM1=$$STEM(RGTRM1,RGTRM,RGX) Q:RGTRM1=""  Q:$D(^(RGTRM1,RGIEN))
"RTN","RGUTMTL",89,0)
 ....I RGY-(RGTRM1="") K @RGRTN@(RGIEN) S:$D(@RGRTN)'>1 RGF=-1
"RTN","RGUTMTL",90,0)
 ..E  D
"RTN","RGUTMTL",91,0)
 ...S RGTRM1="",RGF=1
"RTN","RGUTMTL",92,0)
 ...F  S RGTRM1=$$STEM(RGTRM1,RGTRM,RGX) Q:RGTRM1=""  M @RGRTN=^(RGTRM1)
"RTN","RGUTMTL",93,0)
 ...S:$D(@RGRTN)'>1 RGF=-1
"RTN","RGUTMTL",94,0)
 Q $D(@RGRTN)>1
"RTN","RGUTMTL",95,0)
LKP2 K @RGRTN
"RTN","RGUTMTL",96,0)
 Q -1
"RTN","RGUTMTL",97,0)
 ; Check for user abort
"RTN","RGUTMTL",98,0)
ABORT N RGZ
"RTN","RGUTMTL",99,0)
 R RGZ#1:0
"RTN","RGUTMTL",100,0)
 D:RGZ=U RAISE^RGUTOS()
"RTN","RGUTMTL",101,0)
 Q
"RTN","RGUTMTL",102,0)
 ; Return in successive calls all terms sharing common stem
"RTN","RGUTMTL",103,0)
 ; (sets naked reference)
"RTN","RGUTMTL",104,0)
STEM(RGLAST,RGSTEM,RGF) ;
"RTN","RGUTMTL",105,0)
 D:RGABR ABORT
"RTN","RGUTMTL",106,0)
 I RGLAST="" S RGLAST=RGSTEM Q:$D(@RGRT@(RGLAST)) RGLAST
"RTN","RGUTMTL",107,0)
 Q:$G(RGF) ""
"RTN","RGUTMTL",108,0)
 S RGLAST=$O(@RGRT@(RGLAST))
"RTN","RGUTMTL",109,0)
 Q $S($E(RGLAST,1,$L(RGSTEM))=RGSTEM:RGLAST,1:"")
"RTN","RGUTNTEG")
0^72^B4457644
"RTN","RGUTNTEG",1,0)
RGUTNTEG ;ISC/XTSUMBLD KERNEL - Package checksum checker ;03-Mar-2015 14:24;DKM
"RTN","RGUTNTEG",2,0)
 ;;3.0;RG UTILITIES;;Mar 20,2007;Build 362
"RTN","RGUTNTEG",3,0)
 ;;7.3;3070531.172703
"RTN","RGUTNTEG",4,0)
 S XT4="I 1",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RGUTNTEG",5,0)
CONT F XT1=1:1 S XT2=$T(ROU+XT1) Q:XT2=""  S X=$P(XT2," ",1),XT3=$P(XT2,";",3) X XT4 I $T W !,X X ^%ZOSF("TEST") S:'$T XT3=0 X:XT3 ^%ZOSF("RSUM") W ?10,$S('XT3:"Routine not in UCI",XT3'=Y:"Calculated "_$C(7)_Y_", off by "_(Y-XT3),1:"ok")
"RTN","RGUTNTEG",6,0)
 ;
"RTN","RGUTNTEG",7,0)
 K %1,%2,%3,X,Y,XT1,XT2,XT3,XT4 Q
"RTN","RGUTNTEG",8,0)
ONE S XT4="I $D(^UTILITY($J,X))",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RGUTNTEG",9,0)
 W !,"Check a subset of routines:" K ^UTILITY($J) X ^%ZOSF("RSEL")
"RTN","RGUTNTEG",10,0)
 W ! G CONT
"RTN","RGUTNTEG",11,0)
ROU ;;
"RTN","RGUTNTEG",12,0)
RGUT ;;7860723
"RTN","RGUTNTEG",13,0)
RGUTSTX ;;4121035
"RTN","RGUTNTEG",14,0)
RGUTSTX0 ;;3170389
"RTN","RGUTNTEG",15,0)
RGUTSTX1 ;;5106879
"RTN","RGUTNTEG",16,0)
RGUTALR ;;928023
"RTN","RGUTNTEG",17,0)
RGUTBIG ;;6024487
"RTN","RGUTNTEG",18,0)
RGUTDAT ;;5928509
"RTN","RGUTNTEG",19,0)
RGUTDIC ;;7938841
"RTN","RGUTNTEG",20,0)
RGUTDT ;;3374353
"RTN","RGUTNTEG",21,0)
RGUTEDT ;;16189636
"RTN","RGUTNTEG",22,0)
RGUTIMP ;;4666764
"RTN","RGUTNTEG",23,0)
RGUTIN0 ;;1050344
"RTN","RGUTNTEG",24,0)
RGUTIN16 ;;1582494
"RTN","RGUTNTEG",25,0)
RGUTIN18 ;;1178580
"RTN","RGUTNTEG",26,0)
RGUTIN8 ;;1256732
"RTN","RGUTNTEG",27,0)
RGUTLK2 ;;13861180
"RTN","RGUTNTEG",28,0)
RGUTLKP ;;7525106
"RTN","RGUTNTEG",29,0)
RGUTMTL ;;4714339
"RTN","RGUTNTEG",30,0)
RGUTOS ;;2258460
"RTN","RGUTNTEG",31,0)
RGUTOS1 ;;2630722
"RTN","RGUTNTEG",32,0)
RGUTRPC ;;4585641
"RTN","RGUTNTEG",33,0)
RGUTTSK ;;891526
"RTN","RGUTNTEG",34,0)
RGUTUSR ;;1781283
"RTN","RGUTNTEG",35,0)
RGUTUU ;;1311666
"RTN","RGUTNTEG",36,0)
RGUTINIT ;;3174314
"RTN","RGUTNTEG",37,0)
RGUTHFS ;;2629858
"RTN","RGUTNTEG",38,0)
RGUTDDR ;;9459760
"RTN","RGUTNTEG",39,0)
RGUTRPRT ;;1778623
"RTN","RGUTNTEG",40,0)
RGUTREG ;;578780
"RTN","RGUTNTEG",41,0)
RGUTBC28 ;;2148213
"RTN","RGUTNTEG",42,0)
RGUTBC39 ;;2796261
"RTN","RGUTNTEG",43,0)
RGUTBCDA ;;3981182
"RTN","RGUTNTEG",44,0)
RGUTIN68 ;;1159584
"RTN","RGUTNTEG",45,0)
RGUTIN58 ;;1357669
"RTN","RGUTNTEG",46,0)
RGUT1 ;;508281
"RTN","RGUTOS")
0^53^B7578051
"RTN","RGUTOS",1,0)
RGUTOS ;RI/CBMI/DKM - Platform-dependent operations;01-Apr-2015 09:11;DKM
"RTN","RGUTOS",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTOS",3,0)
 ;;
"RTN","RGUTOS",4,0)
 ;=================================================================
"RTN","RGUTOS",5,0)
 ; Return version #
"RTN","RGUTOS",6,0)
VER() Q $P($T(+2),";",3)
"RTN","RGUTOS",7,0)
CVTFN(RGFIL,RGROOT) ;
"RTN","RGUTOS",8,0)
 N RGZ,RGZ1,RGD
"RTN","RGUTOS",9,0)
 S RGD=$$DIRDLM,RGROOT=$G(RGROOT)
"RTN","RGUTOS",10,0)
 S:$E(RGROOT,$L(RGROOT))=$E(RGD,3) RGROOT=$E(RGROOT,1,$L(RGROOT)-1)
"RTN","RGUTOS",11,0)
 S RGZ=$L(RGFIL,"/"),RGZ1=$P(RGFIL,"/",1,RGZ-1),RGFIL=$P(RGFIL,"/",RGZ)
"RTN","RGUTOS",12,0)
 S:$L(RGZ1) RGROOT=RGROOT_$E(RGD,$S($L(RGROOT):2,1:1))_$TR(RGZ1,"/.-",$E(RGD,2))
"RTN","RGUTOS",13,0)
 Q RGROOT_$S($L(RGROOT):$E(RGD,3),1:"")_RGFIL
"RTN","RGUTOS",14,0)
 ; Set right margin
"RTN","RGUTOS",15,0)
RM(X) ;EP
"RTN","RGUTOS",16,0)
 X ^%ZOSF("RM")
"RTN","RGUTOS",17,0)
 Q
"RTN","RGUTOS",18,0)
ETRAP() Q $$NEWERR^%ZTER
"RTN","RGUTOS",19,0)
 ; Return UCI
"RTN","RGUTOS",20,0)
UCI(P) N Y
"RTN","RGUTOS",21,0)
 X ^%ZOSF("UCI")
"RTN","RGUTOS",22,0)
 Q $S($G(P):$P(Y,",",P),1:Y)
"RTN","RGUTOS",23,0)
 ; Open a host file
"RTN","RGUTOS",24,0)
OPENX(X1,X2) ;EP
"RTN","RGUTOS",25,0)
 D OPEN(.X1,.X2)
"RTN","RGUTOS",26,0)
 Q X1
"RTN","RGUTOS",27,0)
 ;;
"RTN","RGUTOS",28,0)
 ;=================================================================
"RTN","RGUTOS",29,0)
 ; Open a host file
"RTN","RGUTOS",30,0)
OPEN(X1,X2) ;EP
"RTN","RGUTOS",31,0)
 O X1:$S("Rr"[$G(X2):"RS","Ww"[X2:"WNS","Bb"[X2:"RF",1:""):0
"RTN","RGUTOS",32,0)
 E  ZT "NOPEN"
"RTN","RGUTOS",33,0)
 U X1
"RTN","RGUTOS",34,0)
 S ^TMP("RGUTHFS",$J,X1)=""
"RTN","RGUTOS",35,0)
 Q
"RTN","RGUTOS",36,0)
 ; Close a host file
"RTN","RGUTOS",37,0)
CLOSE(X) ;EP
"RTN","RGUTOS",38,0)
 C X
"RTN","RGUTOS",39,0)
 K ^TMP("RGUTHFS",$J,X)
"RTN","RGUTOS",40,0)
 Q
"RTN","RGUTOS",41,0)
 ; Close all open host files
"RTN","RGUTOS",42,0)
CLOSEALL ;EP
"RTN","RGUTOS",43,0)
 N Z
"RTN","RGUTOS",44,0)
 S Z=""
"RTN","RGUTOS",45,0)
 F  S Z=$O(^TMP("RGUTHFS",$J,Z)) Q:Z=""  C Z
"RTN","RGUTOS",46,0)
 K ^TMP("RGUTHFS",$J)
"RTN","RGUTOS",47,0)
 Q
"RTN","RGUTOS",48,0)
EOF ZT:$ZA=-1 "ENDOFFILE"
"RTN","RGUTOS",49,0)
 Q
"RTN","RGUTOS",50,0)
EOFERR() Q:$ZE["ENDOFFILE"
"RTN","RGUTOS",51,0)
 ; Read a line of data
"RTN","RGUTOS",52,0)
READ(X,Y) ;EP
"RTN","RGUTOS",53,0)
 N $ET
"RTN","RGUTOS",54,0)
 S $ET="",$ZT="READX"
"RTN","RGUTOS",55,0)
 U $G(Y,$I)
"RTN","RGUTOS",56,0)
 Q:$ZEOF 1
"RTN","RGUTOS",57,0)
 R X:5
"RTN","RGUTOS",58,0)
 Q:$T 0
"RTN","RGUTOS",59,0)
READX Q 1
"RTN","RGUTOS",60,0)
 ; Delete a host file
"RTN","RGUTOS",61,0)
DELETE(X) ;EP
"RTN","RGUTOS",62,0)
 S X=$ZF(-1,"rm """_X_"""")
"RTN","RGUTOS",63,0)
 Q
"RTN","RGUTOS",64,0)
 ; Rename a host file
"RTN","RGUTOS",65,0)
RENAME(X1,X2) ;EP
"RTN","RGUTOS",66,0)
 S X1=$ZF(-1,"mv """_X1_""" """_X2_"""")
"RTN","RGUTOS",67,0)
 Q
"RTN","RGUTOS",68,0)
 ; Make a directory
"RTN","RGUTOS",69,0)
MKDIR(X) S X='$ZF(-1,"mkdir -p "_X)
"RTN","RGUTOS",70,0)
 Q:$Q X
"RTN","RGUTOS",71,0)
 Q
"RTN","RGUTOS",72,0)
 ; Generate directory listing
"RTN","RGUTOS",73,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTOS",74,0)
 N Z,Z1,FDLM
"RTN","RGUTOS",75,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTOS",76,0)
 S X3=$G(X3,$NA(^UTILITY("DIR",$J)))
"RTN","RGUTOS",77,0)
 K @X3
"RTN","RGUTOS",78,0)
 S:'$G(X2) X2=9999999999
"RTN","RGUTOS",79,0)
 F Z=1:1:X2 S Z1=$ZSEARCH(X1),X1="" Q:Z1=""  D
"RTN","RGUTOS",80,0)
 .S Z1=$P(Z1,FDLM,$L(Z1,FDLM))
"RTN","RGUTOS",81,0)
 .S:$TR(Z1,".")'="" @X3@(Z1)=""
"RTN","RGUTOS",82,0)
 Q
"RTN","RGUTOS",83,0)
 ; Return path delimiters
"RTN","RGUTOS",84,0)
DIRDLM() ;EP
"RTN","RGUTOS",85,0)
 Q "///"
"RTN","RGUTOS",86,0)
 ; Return default working directory
"RTN","RGUTOS",87,0)
DEFDIR(X) ;EP
"RTN","RGUTOS",88,0)
 N FDLM
"RTN","RGUTOS",89,0)
 S FDLM=$E($$DIRDLM,1)
"RTN","RGUTOS",90,0)
 S X=$G(X,$P($G(^XTV(8989.3,1,"DEV")),U))
"RTN","RGUTOS",91,0)
 S:$E(X,$L(X))'=FDLM X=X_FDLM
"RTN","RGUTOS",92,0)
 Q X
"RTN","RGUTOS",93,0)
 ; Parse current error
"RTN","RGUTOS",94,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTOS",95,0)
 S X1=$E($P($ZE,">"),2,99),X2=$P($P($ZE,">",2),":"),X3=X1
"RTN","RGUTOS",96,0)
 S:X2["*" X2=""
"RTN","RGUTOS",97,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTOS",98,0)
 Q
"RTN","RGUTOS",99,0)
 ; Raise an exception
"RTN","RGUTOS",100,0)
RAISE(X) ;EP
"RTN","RGUTOS",101,0)
 ZT $G(X)
"RTN","RGUTOS",102,0)
 ; Set error trap
"RTN","RGUTOS",103,0)
TRAP(X) ;EP
"RTN","RGUTOS",104,0)
 Q "$ZT="""_$G(X)_""""
"RTN","RGUTOS",105,0)
 ; Return size of a file
"RTN","RGUTOS",106,0)
SIZE(X) ;EP
"RTN","RGUTOS",107,0)
 Q 0
"RTN","RGUTOS",108,0)
 ; Return free disk space
"RTN","RGUTOS",109,0)
FREE(X) ;EP
"RTN","RGUTOS",110,0)
 Q 0
"RTN","RGUTOS",111,0)
 ; Return host ip address
"RTN","RGUTOS",112,0)
HOSTIP() ;EP
"RTN","RGUTOS",113,0)
 Q $P($P($ZU(131,1),","),":",2)
"RTN","RGUTOS",114,0)
 ; Return host name
"RTN","RGUTOS",115,0)
HOSTNAME() ;EP
"RTN","RGUTOS",116,0)
 Q $P($P($ZU(131,1),","),":")
"RTN","RGUTOS",117,0)
 ; Return client ip address
"RTN","RGUTOS",118,0)
CLIENTIP() ;EP
"RTN","RGUTOS",119,0)
 N IP,$ET
"RTN","RGUTOS",120,0)
 S $ET="S $EC=""""",IP=$ZU(111,0)
"RTN","RGUTOS",121,0)
 Q $A(IP,1)_"."_$A(IP,2)_"."_$A(IP,3)_"."_$A(IP,4)
"RTN","RGUTOS1")
0^54^B9896056
"RTN","RGUTOS1",1,0)
RGUTOS ;RI/CBMI/DKM - Platform-dependent operations;01-Apr-2015 09:11;DKM
"RTN","RGUTOS1",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTOS1",3,0)
 ;;
"RTN","RGUTOS1",4,0)
 ;=================================================================
"RTN","RGUTOS1",5,0)
 ; Return version # of RTL
"RTN","RGUTOS1",6,0)
VER() ;EP
"RTN","RGUTOS1",7,0)
 Q +$P($T(RGUTOS+1),";",3)
"RTN","RGUTOS1",8,0)
 ; Set right margin
"RTN","RGUTOS1",9,0)
RM(X) ;EP
"RTN","RGUTOS1",10,0)
 X ^%ZOSF("RM")
"RTN","RGUTOS1",11,0)
 Q
"RTN","RGUTOS1",12,0)
 ; Raise an exception
"RTN","RGUTOS1",13,0)
RAISE(X) ;EP
"RTN","RGUTOS1",14,0)
 ZT $G(X)
"RTN","RGUTOS1",15,0)
 ; Return code to set error trap
"RTN","RGUTOS1",16,0)
TRAP(X) ;EP
"RTN","RGUTOS1",17,0)
 Q $$SUBST^RGUT(^%ZOSF("TRAP"),"X",""""_X_"""")
"RTN","RGUTOS1",18,0)
 ; Check for $ET capability
"RTN","RGUTOS1",19,0)
ETRAP() ;EP
"RTN","RGUTOS1",20,0)
 Q $$NEWERR^%ZTER
"RTN","RGUTOS1",21,0)
 ; Return UCI
"RTN","RGUTOS1",22,0)
UCI(P) N Y
"RTN","RGUTOS1",23,0)
 X ^%ZOSF("UCI")
"RTN","RGUTOS1",24,0)
 Q $S($G(P):$P(Y,",",P),1:Y)
"RTN","RGUTOS1",25,0)
 ; Open a file (extrinsic)
"RTN","RGUTOS1",26,0)
OPENX(X1,X2) ;EP
"RTN","RGUTOS1",27,0)
 D OPEN(.X1,.X2)
"RTN","RGUTOS1",28,0)
 Q X1
"RTN","RGUTOS1",29,0)
 ; Open a file
"RTN","RGUTOS1",30,0)
OPEN(X1,X2) ;EP
"RTN","RGUTOS1",31,0)
 N IO,POP,X3
"RTN","RGUTOS1",32,0)
 D PARSE(.X1,.X3),OPEN^%ZISH(X3_X1,X3,X1,$G(X2,"R"),32767)
"RTN","RGUTOS1",33,0)
 I POP ZT "OPEN"
"RTN","RGUTOS1",34,0)
 S ^XTMP("RGUTHFS",$J,IO)=X3_X1,X1=IO
"RTN","RGUTOS1",35,0)
 Q
"RTN","RGUTOS1",36,0)
 ; Close a file
"RTN","RGUTOS1",37,0)
CLOSE(X) ;EP
"RTN","RGUTOS1",38,0)
 N Y
"RTN","RGUTOS1",39,0)
 S Y=$G(^XTMP("RGUTHFS",$J,X)),IO=X
"RTN","RGUTOS1",40,0)
 K ^(X)
"RTN","RGUTOS1",41,0)
 D CLOSE^%ZISH(Y)
"RTN","RGUTOS1",42,0)
 Q
"RTN","RGUTOS1",43,0)
 ; Close all open HFS
"RTN","RGUTOS1",44,0)
CLOSEALL ;EP
"RTN","RGUTOS1",45,0)
 N Z
"RTN","RGUTOS1",46,0)
 S Z=""
"RTN","RGUTOS1",47,0)
 F  S Z=$O(^XTMP("RGUTHFS",$J,Z)) Q:Z=""  D CLOSE(Z)
"RTN","RGUTOS1",48,0)
 Q
"RTN","RGUTOS1",49,0)
 ; Parse out directory from filename
"RTN","RGUTOS1",50,0)
PARSE(X,Y) ;EP
"RTN","RGUTOS1",51,0)
 N D,Z
"RTN","RGUTOS1",52,0)
 S D=$E($$DIRDLM,3),Z=$L(X,D),Y=$P(X,D,1,Z-1),Y=$S($L(Y):Y,1:$$PWD^%ZISH)_$S(Z>1:D,1:""),X=$P(X,D,Z)
"RTN","RGUTOS1",53,0)
 Q
"RTN","RGUTOS1",54,0)
 ; Read a line
"RTN","RGUTOS1",55,0)
READ(X,Y) ;EP
"RTN","RGUTOS1",56,0)
 N IO,%ZA,%ZB,%ZC,%ZL
"RTN","RGUTOS1",57,0)
 S IO=$G(Y,$I)
"RTN","RGUTOS1",58,0)
 D READNXT^%ZISH(.X)
"RTN","RGUTOS1",59,0)
 U IO
"RTN","RGUTOS1",60,0)
 Q $$STATUS^%ZISH&'$L(X)
"RTN","RGUTOS1",61,0)
 ; Delete a file
"RTN","RGUTOS1",62,0)
DELETE(X) ;EP
"RTN","RGUTOS1",63,0)
 N Z
"RTN","RGUTOS1",64,0)
 D PARSE(.X,.Z)
"RTN","RGUTOS1",65,0)
 S:$L(X) Z(X)="",Z=$$DEL^%ZISH(Z,"Z")
"RTN","RGUTOS1",66,0)
 Q
"RTN","RGUTOS1",67,0)
 ; Rename a file
"RTN","RGUTOS1",68,0)
RENAME(X1,X2) ;EP
"RTN","RGUTOS1",69,0)
 N X3,X4
"RTN","RGUTOS1",70,0)
 D PARSE(.X1,.X3),PARSE(.X2,.X4)
"RTN","RGUTOS1",71,0)
 I $$MV^%ZISH(X3,X1,X4,X2)
"RTN","RGUTOS1",72,0)
 Q
"RTN","RGUTOS1",73,0)
 ; Make a directory
"RTN","RGUTOS1",74,0)
MKDIR(X) Q:$Q 0
"RTN","RGUTOS1",75,0)
 Q
"RTN","RGUTOS1",76,0)
 ; List files
"RTN","RGUTOS1",77,0)
DIR(X1,X2,X3) ;EP
"RTN","RGUTOS1",78,0)
 N Z
"RTN","RGUTOS1",79,0)
 D PARSE(.X1,.Z)
"RTN","RGUTOS1",80,0)
 S Z(X1)="",X3=$G(X3,"^UTILITY(""DIR"",$J)")
"RTN","RGUTOS1",81,0)
 K @X3
"RTN","RGUTOS1",82,0)
 I $$LIST^%ZISH(Z,"Z",X3)
"RTN","RGUTOS1",83,0)
 Q
"RTN","RGUTOS1",84,0)
 ; Force error if at EOF
"RTN","RGUTOS1",85,0)
EOF I $$STATUS^%ZISH ZT "EOF"
"RTN","RGUTOS1",86,0)
 Q
"RTN","RGUTOS1",87,0)
 ; Returns true if current error is EOF
"RTN","RGUTOS1",88,0)
EOFERR() ;EP
"RTN","RGUTOS1",89,0)
 Q $$EC^%ZOSV["EOF"
"RTN","RGUTOS1",90,0)
 ; URL format filename-->HFS format
"RTN","RGUTOS1",91,0)
CVTFN(RGFIL,RGROOT) ;EP
"RTN","RGUTOS1",92,0)
 N RGZ,RGZ1,RGD
"RTN","RGUTOS1",93,0)
 S RGD=$$DIRDLM,RGROOT=$G(RGROOT)
"RTN","RGUTOS1",94,0)
 S:$E(RGROOT,$L(RGROOT))=$E(RGD,3) RGROOT=$E(RGROOT,1,$L(RGROOT)-1)
"RTN","RGUTOS1",95,0)
 S RGZ=$L(RGFIL,"/"),RGZ1=$P(RGFIL,"/",1,RGZ-1),RGFIL=$P(RGFIL,"/",RGZ)
"RTN","RGUTOS1",96,0)
 S:$L(RGZ1) RGROOT=RGROOT_$E(RGD,$S($L(RGROOT):2,1:1))_$TR(RGZ1,"/.-",$E(RGD,2))
"RTN","RGUTOS1",97,0)
 Q RGROOT_$S($L(RGROOT):$E(RGD,3),1:"")_RGFIL
"RTN","RGUTOS1",98,0)
 ; Return directory delimiters
"RTN","RGUTOS1",99,0)
DIRDLM() ;EP
"RTN","RGUTOS1",100,0)
 N X
"RTN","RGUTOS1",101,0)
 S X=$$PWD^%ZISH
"RTN","RGUTOS1",102,0)
 Q $S(X["[":"[.]",X["\":"\\\",1:"///")
"RTN","RGUTOS1",103,0)
 ; Parse error data
"RTN","RGUTOS1",104,0)
ERR(X1,X2,X3) ;EP
"RTN","RGUTOS1",105,0)
 N X
"RTN","RGUTOS1",106,0)
 S X=$$EC^%ZOSV,X1=$$VERSION^%ZOSV(1)
"RTN","RGUTOS1",107,0)
 G ERRMSM:X1["MSM",ERRDSM:X1["DSM"
"RTN","RGUTOS1",108,0)
 S (X1,X2,X3)=""
"RTN","RGUTOS1",109,0)
 Q
"RTN","RGUTOS1",110,0)
ERRMSM S X1=$E($P(X,">"),2,99),X2=$P($P(X,">",2),":"),X3=X1
"RTN","RGUTOS1",111,0)
 S:X2["*" X2=""
"RTN","RGUTOS1",112,0)
 S:$E(X1)="Z" X3=$E(X1,2,99),X1="ZTRAP"
"RTN","RGUTOS1",113,0)
 Q
"RTN","RGUTOS1",114,0)
ERRDSM S X1=$P($P(X,", ",2),"-",3),X2=$P($P(X,", "),":"),X3=$$TRIM^RGUT($P(X,", ",$S(X1="ZTRAP":4,1:3)))
"RTN","RGUTOS1",115,0)
 Q
"RTN","RGUTREG")
0^64^B709436
"RTN","RGUTREG",1,0)
RGUTREG ;RI/CBMI/DKM - Various registration actions ;03-Mar-2015 14:24;DKM
"RTN","RGUTREG",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTREG",3,0)
 ;;
"RTN","RGUTREG",4,0)
 ;=================================================================
"RTN","RGUTREG",5,0)
 ; Register a protocol to an extended action protocol
"RTN","RGUTREG",6,0)
 ; Input: P-Parent protocol
"RTN","RGUTREG",7,0)
 ;        C-Child protocol
"RTN","RGUTREG",8,0)
REGPROT(P,C,ERR) ;
"RTN","RGUTREG",9,0)
 N IENARY,PIEN,AIEN,FDA
"RTN","RGUTREG",10,0)
 D
"RTN","RGUTREG",11,0)
 .I '$L(P)!('$L(C)) S ERR="Missing input parameter" Q
"RTN","RGUTREG",12,0)
 .S IENARY(1)=$$FIND1^DIC(101,"","",P)
"RTN","RGUTREG",13,0)
 .S AIEN=$$FIND1^DIC(101,"","",C)
"RTN","RGUTREG",14,0)
 .I 'IENARY(1)!'AIEN S ERR="Unknown protocol name" Q
"RTN","RGUTREG",15,0)
 .S FDA(101.01,"?+2,"_IENARY(1)_",",.01)=AIEN
"RTN","RGUTREG",16,0)
 .D UPDATE^DIE("S","FDA","IENARY","ERR")
"RTN","RGUTREG",17,0)
 Q:$Q $G(ERR)=""
"RTN","RGUTREG",18,0)
 Q
"RTN","RGUTRPC")
0^56^B16275171
"RTN","RGUTRPC",1,0)
RGUTRPC ;RI/CBMI/DKM - RPC Encapsulations for RGUT routines ;03-Mar-2015 14:24;DKM
"RTN","RGUTRPC",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTRPC",3,0)
 ;;
"RTN","RGUTRPC",4,0)
 ;=================================================================
"RTN","RGUTRPC",5,0)
 ; RPC: RGUTDIC
"RTN","RGUTRPC",6,0)
DIC(RGDATA,RGBM,RGCMD,RGARG) ;
"RTN","RGUTRPC",7,0)
 S RGDATA(0)=$$ENTRY^RGUTDIC(RGBM,RGCMD)
"RTN","RGUTRPC",8,0)
 Q
"RTN","RGUTRPC",9,0)
 ; RPC: RGUTSTX
"RTN","RGUTRPC",10,0)
MSYNTAX(RGDATA,RGCODE,RGOPT) ;
"RTN","RGUTRPC",11,0)
 S RGDATA=$$ENTRY^RGUTSTX(RGCODE,.RGOPT)
"RTN","RGUTRPC",12,0)
 Q
"RTN","RGUTRPC",13,0)
 ; RPC: Return a group of entries from a file
"RTN","RGUTRPC",14,0)
 ; RGFN   = File #
"RTN","RGUTRPC",15,0)
 ; RGFROM = Starting entry (default is null)
"RTN","RGUTRPC",16,0)
 ; RGDIR  = Direction (default = 1)
"RTN","RGUTRPC",17,0)
 ; RGSCN  = Screening logic (optional)
"RTN","RGUTRPC",18,0)
 ; RGMAX  = Maximum entries (default = 20)
"RTN","RGUTRPC",19,0)
 ; RGXRF  = Cross reference (default = B)
"RTN","RGUTRPC",20,0)
FILGET(RGDATA,RGFN,RGFROM,RGDIR,RGSCN,RGMAX,RGXRF) ;
"RTN","RGUTRPC",21,0)
 N RGIEN,RGGBL,RGTOT,Y
"RTN","RGUTRPC",22,0)
 S RGFROM=$G(RGFROM),RGDIR=$S($G(RGDIR)<0:-1,1:1),RGMAX=$G(RGMAX,20),RGXRF=$G(RGXRF,"B"),RGSCN=$G(RGSCN),RGGBL=$$ROOT^DILFD(RGFN,,1),RGTOT=0
"RTN","RGUTRPC",23,0)
 Q:'$L(RGGBL)
"RTN","RGUTRPC",24,0)
 F  Q:RGTOT'<RGMAX  S RGFROM=$O(@RGGBL@(RGXRF,RGFROM),RGDIR),RGIEN=0 Q:'$L(RGFROM)  D
"RTN","RGUTRPC",25,0)
 .F  S RGIEN=$O(@RGGBL@(RGXRF,RGFROM,RGIEN)) Q:'RGIEN  D
"RTN","RGUTRPC",26,0)
 ..Q:'$D(@RGGBL@(RGIEN,0))
"RTN","RGUTRPC",27,0)
 ..I $L(RGSCN) S Y=RGIEN X RGSCN E  Q
"RTN","RGUTRPC",28,0)
 ..S RGTOT=RGTOT+1,@RGDATA@(RGTOT)=RGIEN_U_RGFROM
"RTN","RGUTRPC",29,0)
 Q
"RTN","RGUTRPC",30,0)
 ; RPC: Show all or selected entries for a file
"RTN","RGUTRPC",31,0)
 ; RGGBL = File # or closed global reference
"RTN","RGUTRPC",32,0)
 ; RGIEN = Optional list of IENs to retrieve (default=ALL)
"RTN","RGUTRPC",33,0)
 ;          May be passed as single IEN or array with IENs as subscripts
"RTN","RGUTRPC",34,0)
FILENT(RGDATA,RGGBL,RGIEN) ;
"RTN","RGUTRPC",35,0)
 N RGG,RGX
"RTN","RGUTRPC",36,0)
 S:RGGBL=+RGGBL RGGBL=$$ROOT^DILFD(RGGBL,,1)
"RTN","RGUTRPC",37,0)
 S RGDATA=$$TMPGBL
"RTN","RGUTRPC",38,0)
 Q:'$L(RGGBL)
"RTN","RGUTRPC",39,0)
 S:$G(RGIEN) RGIEN(+RGIEN)=""
"RTN","RGUTRPC",40,0)
 S RGG=$S($D(RGIEN):"RGIEN",1:RGGBL),RGIEN=0
"RTN","RGUTRPC",41,0)
 F  S RGIEN=$O(@RGG@(RGIEN)) Q:'RGIEN  D
"RTN","RGUTRPC",42,0)
 .S RGX=$P($G(@RGGBL@(RGIEN,0)),U)
"RTN","RGUTRPC",43,0)
 .S:$L(RGX) @RGDATA@(RGIEN)=RGIEN_U_RGX
"RTN","RGUTRPC",44,0)
 Q
"RTN","RGUTRPC",45,0)
 ; RPC: Show IEN of next/previous entry in a file
"RTN","RGUTRPC",46,0)
FILNXT(RGDATA,RGGBL,RGIEN) ;
"RTN","RGUTRPC",47,0)
 N RGD
"RTN","RGUTRPC",48,0)
 S:RGGBL=+RGGBL RGGBL=$$ROOT^DILFD(RGGBL,,1)
"RTN","RGUTRPC",49,0)
 I RGIEN<0 S RGIEN=-RGIEN,RGD=-1
"RTN","RGUTRPC",50,0)
 E  S RGD=1
"RTN","RGUTRPC",51,0)
 S RGDATA=+$O(@RGGBL@(RGIEN),RGD)
"RTN","RGUTRPC",52,0)
 Q
"RTN","RGUTRPC",53,0)
 ; RPC: Convert date input to FM format
"RTN","RGUTRPC",54,0)
STRTODAT(DATA,VAL,FMT) ;
"RTN","RGUTRPC",55,0)
 N %DT,X,Y
"RTN","RGUTRPC",56,0)
 I VAL'["@",VAL[" " S VAL=$TR(VAL," ","@")
"RTN","RGUTRPC",57,0)
 I VAL["@",$TR($P(VAL,"@",2),":0")="" S $P(VAL,"@",2)="00:00:01"
"RTN","RGUTRPC",58,0)
 S %DT=$G(FMT,"TS"),X=VAL
"RTN","RGUTRPC",59,0)
 D ^%DT
"RTN","RGUTRPC",60,0)
 S DATA=$S(Y>0:Y,1:"")
"RTN","RGUTRPC",61,0)
 Q
"RTN","RGUTRPC",62,0)
 ; Return reference to temp global
"RTN","RGUTRPC",63,0)
TMPGBL(X) ;EP
"RTN","RGUTRPC",64,0)
 K ^TMP("RGUTRPC"_$G(X),$J) Q $NA(^($J))
"RTN","RGUTRPC",65,0)
 ; Register/unregister RPCs within a given namespace to a context
"RTN","RGUTRPC",66,0)
REGNMSP(NMSP,CTX,DEL) ;EP
"RTN","RGUTRPC",67,0)
 N RPC,IEN,LEN
"RTN","RGUTRPC",68,0)
 S LEN=$L(NMSP),CTX=+$$GETOPT(CTX)
"RTN","RGUTRPC",69,0)
 I $G(DEL) D
"RTN","RGUTRPC",70,0)
 .S IEN=0
"RTN","RGUTRPC",71,0)
 .F  S IEN=$O(^DIC(19,CTX,"RPC","B",IEN)) Q:'IEN  D
"RTN","RGUTRPC",72,0)
 ..I $E($G(^XWB(8994,IEN,0)),1,LEN)=NMSP,$$REGRPC(IEN,CTX,1)
"RTN","RGUTRPC",73,0)
 E  D
"RTN","RGUTRPC",74,0)
 .Q:LEN<2
"RTN","RGUTRPC",75,0)
 .S RPC=NMSP
"RTN","RGUTRPC",76,0)
 .F  D:$L(RPC)  S RPC=$O(^XWB(8994,"B",RPC)) Q:NMSP'=$E(RPC,1,LEN)
"RTN","RGUTRPC",77,0)
 ..F IEN=0:0 S IEN=$O(^XWB(8994,"B",RPC,IEN)) Q:'IEN  I $$REGRPC(IEN,.CTX)
"RTN","RGUTRPC",78,0)
 Q
"RTN","RGUTRPC",79,0)
 ; Register/unregister an RPC to/from a context
"RTN","RGUTRPC",80,0)
 ; RPC = IEN or name of RPC
"RTN","RGUTRPC",81,0)
 ; CTX = IEN or name of context
"RTN","RGUTRPC",82,0)
 ; DEL = If nonzero, the RPC is unregistered (defaults to 0)
"RTN","RGUTRPC",83,0)
 ; Returns -1 if already registered; 0 if failed; 1 if succeeded
"RTN","RGUTRPC",84,0)
REGRPC(RPC,CTX,DEL) ;EP
"RTN","RGUTRPC",85,0)
 S RPC=+$$GETRPC(RPC)
"RTN","RGUTRPC",86,0)
 Q $S(RPC<1:0,1:$$REGMULT(19.05,"RPC",RPC,.CTX,.DEL))
"RTN","RGUTRPC",87,0)
 ; Add/remove a context to/from the ITEM multiple of another context.
"RTN","RGUTRPC",88,0)
REGCTX(SRC,DST,DEL) ;EP
"RTN","RGUTRPC",89,0)
 S SRC=+$$GETOPT(SRC)
"RTN","RGUTRPC",90,0)
 Q $S('SRC:0,1:$$REGMULT(19.01,10,SRC,.DST,.DEL))
"RTN","RGUTRPC",91,0)
 ; Add/delete an entry to/from a specified OPTION multiple.
"RTN","RGUTRPC",92,0)
 ; SFN = Subfile #
"RTN","RGUTRPC",93,0)
 ; NOD = Subnode for multiple
"RTN","RGUTRPC",94,0)
 ; ITM = Item IEN to add
"RTN","RGUTRPC",95,0)
 ; CTX = Option to add to
"RTN","RGUTRPC",96,0)
 ; DEL = Delete flag (optional)
"RTN","RGUTRPC",97,0)
REGMULT(SFN,NOD,ITM,CTX,DEL) ;
"RTN","RGUTRPC",98,0)
 N FDA,IEN
"RTN","RGUTRPC",99,0)
 S CTX=+$$GETOPT(CTX)
"RTN","RGUTRPC",100,0)
 S DEL=+$G(DEL)
"RTN","RGUTRPC",101,0)
 S IEN=+$O(^DIC(19,CTX,NOD,"B",ITM,0))
"RTN","RGUTRPC",102,0)
 Q:'IEN=DEL -1
"RTN","RGUTRPC",103,0)
 K ^TMP("DIERR",$J)
"RTN","RGUTRPC",104,0)
 I DEL S FDA(SFN,IEN_","_CTX_",",.01)="@"
"RTN","RGUTRPC",105,0)
 E  S FDA(SFN,"+1,"_CTX_",",.01)=ITM
"RTN","RGUTRPC",106,0)
 D UPDATE^DIE("","FDA")
"RTN","RGUTRPC",107,0)
 S FDA='$D(^TMP("DIERR",$J)) K ^($J)
"RTN","RGUTRPC",108,0)
 Q FDA
"RTN","RGUTRPC",109,0)
 ; Register a protocol to an extended action protocol
"RTN","RGUTRPC",110,0)
 ; Input: P-Parent protocol
"RTN","RGUTRPC",111,0)
 ;        C-Child protocol
"RTN","RGUTRPC",112,0)
REGPROT(P,C,ERR) ;EP
"RTN","RGUTRPC",113,0)
 N IENARY,PIEN,AIEN,FDA
"RTN","RGUTRPC",114,0)
 D
"RTN","RGUTRPC",115,0)
 .I '$L(P)!('$L(C)) S ERR="Missing input parameter" Q
"RTN","RGUTRPC",116,0)
 .S IENARY(1)=$$FIND1^DIC(101,"","",P)
"RTN","RGUTRPC",117,0)
 .S AIEN=$$FIND1^DIC(101,"","",C)
"RTN","RGUTRPC",118,0)
 .I 'IENARY(1)!'AIEN S ERR="Unknown protocol name" Q
"RTN","RGUTRPC",119,0)
 .S FDA(101.01,"?+2,"_IENARY(1)_",",.01)=AIEN
"RTN","RGUTRPC",120,0)
 .D UPDATE^DIE("S","FDA","IENARY","ERR")
"RTN","RGUTRPC",121,0)
 Q:$Q $G(ERR)=""
"RTN","RGUTRPC",122,0)
 Q
"RTN","RGUTRPC",123,0)
 ; Remove nonexistent RPCs from context
"RTN","RGUTRPC",124,0)
CLNRPC(CTX) ;EP
"RTN","RGUTRPC",125,0)
 N IEN
"RTN","RGUTRPC",126,0)
 S CTX=+$$GETOPT(CTX)
"RTN","RGUTRPC",127,0)
 F IEN=0:0 S IEN=$O(^DIC(19,CTX,"RPC","B",IEN)) Q:'IEN  D:'$D(^XWB(8994,IEN)) REGRPC(IEN,CTX,1)
"RTN","RGUTRPC",128,0)
 Q
"RTN","RGUTRPC",129,0)
 ; Return IEN of option
"RTN","RGUTRPC",130,0)
GETOPT(X) ;EP
"RTN","RGUTRPC",131,0)
 N Y
"RTN","RGUTRPC",132,0)
 Q:X=+X X
"RTN","RGUTRPC",133,0)
 S Y=$$FIND1^DIC(19,"","X",X)
"RTN","RGUTRPC",134,0)
 W:'Y "Cannot find option "_X,!!
"RTN","RGUTRPC",135,0)
 Q Y
"RTN","RGUTRPC",136,0)
 ; Return IEN of RPC
"RTN","RGUTRPC",137,0)
GETRPC(X) ;EP
"RTN","RGUTRPC",138,0)
 N Y
"RTN","RGUTRPC",139,0)
 Q:X=+X X
"RTN","RGUTRPC",140,0)
 S Y=$$FIND1^DIC(8994,"","X",X)
"RTN","RGUTRPC",141,0)
 W:'Y "Cannot find RPC "_X,!!
"RTN","RGUTRPC",142,0)
 Q Y
"RTN","RGUTRPRT")
0^63^B2852241
"RTN","RGUTRPRT",1,0)
RGUTRPRT ;RI/CBMI/DKM - Routine Pretty Print Program ;03-Mar-2015 14:24;DKM
"RTN","RGUTRPRT",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTRPRT",3,0)
 ;;
"RTN","RGUTRPRT",4,0)
 ;=================================================================
"RTN","RGUTRPRT",5,0)
 N R,C,D,P,N,M,L,X,Y,B,W,Z,S,A,F,T,Q
"RTN","RGUTRPRT",6,0)
 D HOME^%ZIS,TITLE^RGUT("Routine Pretty Print")
"RTN","RGUTRPRT",7,0)
 X ^%ZOSF("RSEL")
"RTN","RGUTRPRT",8,0)
 I $O(^UTILITY($J,0))="" W "No routines selected.",!! K ^UTILITY($J) Q
"RTN","RGUTRPRT",9,0)
 D ^%ZIS
"RTN","RGUTRPRT",10,0)
 Q:POP
"RTN","RGUTRPRT",11,0)
 X ^%ZOSF("UCI")
"RTN","RGUTRPRT",12,0)
 S A=Y,R=0,C="     >>> ",W=IOM-$L(C)-1,M=$L(C)+1,B=$$UND^RGUT(W),T=$E(IOST,1,2)="C-",F=$S(T:IOF,1:""""""),Q=0
"RTN","RGUTRPRT",13,0)
 F  S R=$O(^UTILITY($J,R)) Q:R=""  D
"RTN","RGUTRPRT",14,0)
 .I IO'=IO(0) U IO(0) W !,"Printing "_R_"..."
"RTN","RGUTRPRT",15,0)
 .U IO
"RTN","RGUTRPRT",16,0)
 .S D=$$ENTRY^RGUTDT($H),P=0,$Y=IOSL,S=0
"RTN","RGUTRPRT",17,0)
 .X "ZL @R F N=1:1 S L=$T(+N) Q:'$L(L)  S ^UTILITY($J,R,N)=L,S=S+$L(L)+2"
"RTN","RGUTRPRT",18,0)
 .S S="("_$$FMTNUM^RGUT(S)_" bytes)"
"RTN","RGUTRPRT",19,0)
 .F N=0:0 S N=$O(^UTILITY($J,R,N)) Q:'N  D  Q:Q
"RTN","RGUTRPRT",20,0)
 ..S L=^(N),X=$P(L," "),L=X_$E("        ",$L(X)+1,8)_" "_$P(L," ",2,999),Z=""
"RTN","RGUTRPRT",21,0)
 ..F  Q:L=""!Q  D
"RTN","RGUTRPRT",22,0)
 ...S X=$E(L,1,W),L=$E(L,W+1,999)
"RTN","RGUTRPRT",23,0)
 ...D:IOSL-2<$Y HDR
"RTN","RGUTRPRT",24,0)
 ...Q:Q
"RTN","RGUTRPRT",25,0)
 ...W Z,?M,X,!
"RTN","RGUTRPRT",26,0)
 ...S Z=C
"RTN","RGUTRPRT",27,0)
 K ^UTILITY($J)
"RTN","RGUTRPRT",28,0)
 D ^%ZISC
"RTN","RGUTRPRT",29,0)
 Q
"RTN","RGUTRPRT",30,0)
HDR I P,T R "Press enter to continue...",Q:$G(DTIME,300) S Q=Q["^"!'$T Q:Q
"RTN","RGUTRPRT",31,0)
 S P=P+1,$Y=0
"RTN","RGUTRPRT",32,0)
 W @F,!?M,A,$$CTR(R),$$RJ("Page "_P),!
"RTN","RGUTRPRT",33,0)
 W ?M,$G(^DD("SITE")),$$CTR(S),$$RJ(D),!
"RTN","RGUTRPRT",34,0)
 W ?M,B,!!
"RTN","RGUTRPRT",35,0)
 S:P=1 F=IOF
"RTN","RGUTRPRT",36,0)
 Q
"RTN","RGUTRPRT",37,0)
CTR(X) W ?(IOM-$L(X)\2+M),X
"RTN","RGUTRPRT",38,0)
 Q ""
"RTN","RGUTRPRT",39,0)
RJ(X) W ?(IOM-$L(X)),X
"RTN","RGUTRPRT",40,0)
 Q ""
"RTN","RGUTRTN")
0^89^B1253575
"RTN","RGUTRTN",1,0)
RGUTRTN ;RI/CBMI/DKM - Routine management utilities;01-Apr-2015 09:22;DKM
"RTN","RGUTRTN",2,0)
 ;;3.0;RG UTILITIES;**1**;Mar 20, 2007;Build 362
"RTN","RGUTRTN",3,0)
 ;;
"RTN","RGUTRTN",4,0)
 ;=================================================================
"RTN","RGUTRTN",5,0)
 ; Save buffer to routine
"RTN","RGUTRTN",6,0)
 ; RTN = Routine name
"RTN","RGUTRTN",7,0)
 ; BUF = Buffer containing routine contents (terminal subscript must be 0).
"RTN","RGUTRTN",8,0)
 ; KILL = If true, delete buffer after completion
"RTN","RGUTRTN",9,0)
SAVE(RTN,BUF,KILL) ;
"RTN","RGUTRTN",10,0)
 N XCM,XCN,DIE,X
"RTN","RGUTRTN",11,0)
 S XCN=0,DIE=BUF,X=RTN
"RTN","RGUTRTN",12,0)
 S:$E(DIE,$L(DIE))=")" $E(DIE,$L(DIE))=","
"RTN","RGUTRTN",13,0)
 X ^%ZOSF("SAVE")
"RTN","RGUTRTN",14,0)
 K:$G(KILL) @BUF
"RTN","RGUTRTN",15,0)
 Q
"RTN","RGUTRTN",16,0)
 ; Copy one routine to another
"RTN","RGUTRTN",17,0)
 ; SRC = Source routine
"RTN","RGUTRTN",18,0)
 ; DST = Destination routine
"RTN","RGUTRTN",19,0)
COPY(SRC,DST) ;
"RTN","RGUTRTN",20,0)
 N BUF,X,Y
"RTN","RGUTRTN",21,0)
 Q:'$L($T(+0^@SRC))
"RTN","RGUTRTN",22,0)
 S BUF=$$TMPGBL^RGUTRPC("RTN")
"RTN","RGUTRTN",23,0)
 F X=1:1 S Y=$T(+X^@SRC) Q:'$L(Y)  S @BUF@(X,0)=Y
"RTN","RGUTRTN",24,0)
 D SAVE(DST,BUF,1)
"RTN","RGUTRTN",25,0)
 Q
"RTN","RGUTRTN",26,0)
 ; Delete a routine
"RTN","RGUTRTN",27,0)
 ; RTN = Routine to delete
"RTN","RGUTRTN",28,0)
DELETE(RTN) ;
"RTN","RGUTRTN",29,0)
 D SAVE(RTN,$$TMPGBL^RGUTRPC("RTN"),1)
"RTN","RGUTRTN",30,0)
 Q
"RTN","RGUTRTN",31,0)
 ; Test for the presence of a routine or routine and tag
"RTN","RGUTRTN",32,0)
 ; RTN = Routine name with or without a tag.
"RTN","RGUTRTN",33,0)
TEST(RTN) ;
"RTN","RGUTRTN",34,0)
 N TAG,X
"RTN","RGUTRTN",35,0)
 S:RTN[U TAG=$P(RTN,U),RTN=$P(RTN,U,2)
"RTN","RGUTRTN",36,0)
 Q:'$L(RTN)!(RTN'?.1"%"1.AN) 0
"RTN","RGUTRTN",37,0)
 S X=RTN
"RTN","RGUTRTN",38,0)
 X ^%ZOSF("TEST")
"RTN","RGUTRTN",39,0)
 Q $S('$T:0,$G(TAG)="":1,TAG'?.1"%"1.AN:0,1:$T(@TAG^@RTN)'="")
"RTN","RGUTSTX")
0^27^B17505727
"RTN","RGUTSTX",1,0)
RGUTSTX ;RI/CBMI/DKM - M syntax analyzer;03-Mar-2015 14:24;DKM
"RTN","RGUTSTX",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTSTX",3,0)
 ;;
"RTN","RGUTSTX",4,0)
 ;=================================================================
"RTN","RGUTSTX",5,0)
 ; Perform syntactic analysis of a line of M code.
"RTN","RGUTSTX",6,0)
 ; Inputs:
"RTN","RGUTSTX",7,0)
 ;   RGM = M statement(s)
"RTN","RGUTSTX",8,0)
 ;   RGO = Options:
"RTN","RGUTSTX",9,0)
 ;      L = Line label allowed
"RTN","RGUTSTX",10,0)
 ;      . = Dotted syntax allowed
"RTN","RGUTSTX",11,0)
 ;      N = Do not init parsing tables
"RTN","RGUTSTX",12,0)
 ;      D = Do not delete parsing tables
"RTN","RGUTSTX",13,0)
 ;      Z = Process all Z-extensions as valid
"RTN","RGUTSTX",14,0)
 ; Outputs:
"RTN","RGUTSTX",15,0)
 ;   Returns 0 if successfully parsed.  Otherwise returns E^P^M
"RTN","RGUTSTX",16,0)
 ;   where E is an error code (see ERRORS label), P is the
"RTN","RGUTSTX",17,0)
 ;   character position where the error occurred, and M is the
"RTN","RGUTSTX",18,0)
 ;   error message.
"RTN","RGUTSTX",19,0)
 ;=================================================================
"RTN","RGUTSTX",20,0)
ENTRY(RGM,RGO) ;
"RTN","RGUTSTX",21,0)
 N RGPSN,RGLEN,RGERR,RGRN,RGQT,RGF,RGPID,RGCMD
"RTN","RGUTSTX",22,0)
 S RGM=$$UP^XLFSTR(RGM),RGO=$$UP^XLFSTR($G(RGO)),RGPSN=1,RGLEN=$L(RGM),RGERR=0,RGQT="""",RGF=0,RGPID="RGUTSTX",U="^"
"RTN","RGUTSTX",23,0)
 D LOAD:RGO'["N",PARSE:RGLEN
"RTN","RGUTSTX",24,0)
 K:RGO'["D" ^TMP(RGPID,$J)
"RTN","RGUTSTX",25,0)
 Q $S(RGERR:RGERR_U_$S(RGPSN>RGLEN:RGLEN,1:RGPSN)_U_$S(RGERR<0:$$EC^%ZOSV,1:$P($T(ERRORS+RGERR),";;",2)),1:0)
"RTN","RGUTSTX",26,0)
PARSE N RGZ,RGZ1
"RTN","RGUTSTX",27,0)
 S @$$TRAP^RGUTOS("ERROR^RGUTSTX")
"RTN","RGUTSTX",28,0)
 I RGO["L" D  Q:RGERR
"RTN","RGUTSTX",29,0)
 .S:$E(RGM)'=" " RGPSN=$$LABEL^RGUTSTX0
"RTN","RGUTSTX",30,0)
 .I $$NEXT^RGUTSTX0("("),'$$NEXT^RGUTSTX0(")") D
"RTN","RGUTSTX",31,0)
 ..F RGPSN=RGPSN:1 D  Q:$E(RGM,RGPSN)'=","!RGERR
"RTN","RGUTSTX",32,0)
 ...S RGPSN=$$NAME^RGUTSTX0(RGPSN,"L%")
"RTN","RGUTSTX",33,0)
 ..Q:RGERR
"RTN","RGUTSTX",34,0)
 ..S:'$$NEXT^RGUTSTX0(")") RGERR=3
"RTN","RGUTSTX",35,0)
 .S:" "'[$E(RGM,RGPSN) RGERR=2
"RTN","RGUTSTX",36,0)
 I RGO["." F RGPSN=RGPSN:1:RGLEN+1 Q:". "'[$E(RGM,RGPSN)
"RTN","RGUTSTX",37,0)
 F  Q:RGERR  D SKPSPC Q:";"[$E(RGM,RGPSN)  D
"RTN","RGUTSTX",38,0)
 .S RGCMD=""
"RTN","RGUTSTX",39,0)
 .F RGPSN=RGPSN:1 S RGZ=$E(RGM,RGPSN) Q:RGZ'?1A  S RGCMD=RGCMD_RGZ
"RTN","RGUTSTX",40,0)
 .I RGCMD="" S RGERR=4 Q
"RTN","RGUTSTX",41,0)
 .I $D(^TMP(RGPID,$J,"CMD",RGCMD)) S RGCMD=^(RGCMD)
"RTN","RGUTSTX",42,0)
 .E  I $E(RGCMD)="Z",RGO["Z" S RGCMD="PC;OPT;ARGS("":M"")"
"RTN","RGUTSTX",43,0)
 .E  S RGERR=4 Q
"RTN","RGUTSTX",44,0)
 .F RGRN=1:1:$L(RGCMD,";") D CMD^RGUTSTX0($P(RGCMD,";",RGRN)) Q:RGERR!'RGRN
"RTN","RGUTSTX",45,0)
 .I 'RGERR," "'[$E(RGM,RGPSN) S RGERR=2
"RTN","RGUTSTX",46,0)
 .E  S RGPSN=RGPSN+1
"RTN","RGUTSTX",47,0)
 Q
"RTN","RGUTSTX",48,0)
 ; Skip over blanks
"RTN","RGUTSTX",49,0)
SKPSPC F  Q:'$$NEXT^RGUTSTX0(" ")
"RTN","RGUTSTX",50,0)
 Q
"RTN","RGUTSTX",51,0)
 ; Load tables
"RTN","RGUTSTX",52,0)
LOAD N RGZ,RGZ1,RGZ2,RGL
"RTN","RGUTSTX",53,0)
 K ^TMP(RGPID,$J)
"RTN","RGUTSTX",54,0)
 F RGL="CMD","FCN","SYS" D
"RTN","RGUTSTX",55,0)
 .F RGZ=1:1 S RGZ1=$P($T(@RGL+RGZ),";;",2,999) Q:RGZ1=""  D
"RTN","RGUTSTX",56,0)
 ..S RGZ2=$P(RGZ1,";"),RGZ1=$P(RGZ1,";",2,999)
"RTN","RGUTSTX",57,0)
 ..F  Q:RGZ2=""  D
"RTN","RGUTSTX",58,0)
 ...S ^TMP(RGPID,$J,RGL,$P(RGZ2,","))=RGZ1,RGZ2=$P(RGZ2,",",2,999)
"RTN","RGUTSTX",59,0)
 Q
"RTN","RGUTSTX",60,0)
ERROR S RGERR=-1
"RTN","RGUTSTX",61,0)
 Q
"RTN","RGUTSTX",62,0)
CMD ;;*Commands*
"RTN","RGUTSTX",63,0)
 ;;B,BREAK;PC;OPT;ARGS()
"RTN","RGUTSTX",64,0)
 ;;C,CLOSE;PC;ARGS(":M")
"RTN","RGUTSTX",65,0)
 ;;D,DO;PC;OPT;LBL(2)
"RTN","RGUTSTX",66,0)
 ;;E,ELSE;NPC;OPT;ARGS()
"RTN","RGUTSTX",67,0)
 ;;F,FOR;NPC;OPT;FOR
"RTN","RGUTSTX",68,0)
 ;;G,GOTO;PC;LBL(1)
"RTN","RGUTSTX",69,0)
 ;;H,HALT,HANG;PC;OPT;EXP()
"RTN","RGUTSTX",70,0)
 ;;I,IF;NPC;OPT;ARGS()
"RTN","RGUTSTX",71,0)
 ;;J,JOB;PC;LBL(2)
"RTN","RGUTSTX",72,0)
 ;;K,KILL;PC;OPT;KILL
"RTN","RGUTSTX",73,0)
 ;;L,LOCK;PC;OPT;LOCK
"RTN","RGUTSTX",74,0)
 ;;M,MERGE;PC;MERGE
"RTN","RGUTSTX",75,0)
 ;;N,NEW;PC;OPT;NEW
"RTN","RGUTSTX",76,0)
 ;;O,OPEN;PC;ARGS(":M")
"RTN","RGUTSTX",77,0)
 ;;Q,QUIT;PC;OPT;EXP()
"RTN","RGUTSTX",78,0)
 ;;R,READ;PC;READ
"RTN","RGUTSTX",79,0)
 ;;S,SET;PC;SET
"RTN","RGUTSTX",80,0)
 ;;U,USE;PC;ARGS(":M")
"RTN","RGUTSTX",81,0)
 ;;V,VIEW;PC;ARGS(":M")
"RTN","RGUTSTX",82,0)
 ;;W,WRITE;PC;WRITE
"RTN","RGUTSTX",83,0)
 ;;X,XECUTE;PC;ARGS(":")
"RTN","RGUTSTX",84,0)
 ;;ZT,ZTRAP;PC;OPT;EXP()
"RTN","RGUTSTX",85,0)
 ;;ZS,ZSAVE;PC;OPT;EXP()
"RTN","RGUTSTX",86,0)
 ;;ZR,ZREMOVE;PC;OPT;LBL(1)
"RTN","RGUTSTX",87,0)
 ;;ZP,ZPRINT
"RTN","RGUTSTX",88,0)
 ;;
"RTN","RGUTSTX",89,0)
FCN ;;*Intrinsic functions*
"RTN","RGUTSTX",90,0)
 ;;A,ASCII;;1-2
"RTN","RGUTSTX",91,0)
 ;;C,CHAR;;1-999
"RTN","RGUTSTX",92,0)
 ;;D,DATA;;1-1;V
"RTN","RGUTSTX",93,0)
 ;;E,EXTRACT;S;1-3
"RTN","RGUTSTX",94,0)
 ;;F,FIND;;2-3
"RTN","RGUTSTX",95,0)
 ;;FN,FNUMBER;;2-3
"RTN","RGUTSTX",96,0)
 ;;G,GET;;1-2;V
"RTN","RGUTSTX",97,0)
 ;;J,JUSTIFY;;1-3
"RTN","RGUTSTX",98,0)
 ;;L,LENGTH;;1-2
"RTN","RGUTSTX",99,0)
 ;;N,NEXT;;1-2
"RTN","RGUTSTX",100,0)
 ;;NA,NAME;;1-2;V
"RTN","RGUTSTX",101,0)
 ;;O,ORDER;;1-2;V
"RTN","RGUTSTX",102,0)
 ;;P,PIECE;S;2-4
"RTN","RGUTSTX",103,0)
 ;;Q,QUERY;;1-2;V
"RTN","RGUTSTX",104,0)
 ;;R,RANDOM;;1-1
"RTN","RGUTSTX",105,0)
 ;;S,SELECT;:;1-999
"RTN","RGUTSTX",106,0)
 ;;T,TEXT;;1-1;L
"RTN","RGUTSTX",107,0)
 ;;TR,TRANSLATE;;2-3
"RTN","RGUTSTX",108,0)
 ;;V,VIEW;;1-999
"RTN","RGUTSTX",109,0)
 ;;
"RTN","RGUTSTX",110,0)
SYS ;;*System variables*
"RTN","RGUTSTX",111,0)
 ;;D,DEVICE
"RTN","RGUTSTX",112,0)
 ;;ET,ETRAP;SN
"RTN","RGUTSTX",113,0)
 ;;H,HOROLOG
"RTN","RGUTSTX",114,0)
 ;;I,IO
"RTN","RGUTSTX",115,0)
 ;;J,JOB
"RTN","RGUTSTX",116,0)
 ;;K,KEY
"RTN","RGUTSTX",117,0)
 ;;P,PRINCIPAL
"RTN","RGUTSTX",118,0)
 ;;S,STORAGE
"RTN","RGUTSTX",119,0)
 ;;SY,SYSTEM
"RTN","RGUTSTX",120,0)
 ;;T,TEST
"RTN","RGUTSTX",121,0)
 ;;TL,TLEVEL
"RTN","RGUTSTX",122,0)
 ;;TR,TRESTART
"RTN","RGUTSTX",123,0)
 ;;X;S
"RTN","RGUTSTX",124,0)
 ;;Y;S
"RTN","RGUTSTX",125,0)
 ;;ZT,ZTRAP;S
"RTN","RGUTSTX",126,0)
 ;;ZE,ZERROR;S
"RTN","RGUTSTX",127,0)
 ;;ES,ESTACK;N
"RTN","RGUTSTX",128,0)
 ;;EC,ECODE;S
"RTN","RGUTSTX",129,0)
ERRORS ;;*Error messages*
"RTN","RGUTSTX",130,0)
 ;;Bad variable name
"RTN","RGUTSTX",131,0)
 ;;Syntax error
"RTN","RGUTSTX",132,0)
 ;;Unbalanced parentheses
"RTN","RGUTSTX",133,0)
 ;;Unrecognized command
"RTN","RGUTSTX",134,0)
 ;;Postconditional not allowed
"RTN","RGUTSTX",135,0)
 ;;Missing operand
"RTN","RGUTSTX",136,0)
 ;;Unrecognized intrinsic function/variable
"RTN","RGUTSTX",137,0)
 ;;Incorrect number of arguments
"RTN","RGUTSTX",138,0)
 ;;Missing closing quote
"RTN","RGUTSTX",139,0)
 ;;Illegal pattern
"RTN","RGUTSTX",140,0)
 ;;Bad label name
"RTN","RGUTSTX",141,0)
 ;;Name too long
"RTN","RGUTSTX",142,0)
 ;;13
"RTN","RGUTSTX0")
0^28^B18234821
"RTN","RGUTSTX0",1,0)
RGUTSTX0 ;RI/CBMI/DKM - Continuation of RGUTSTX;03-Mar-2015 14:24;DKM
"RTN","RGUTSTX0",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTSTX0",3,0)
 ;;
"RTN","RGUTSTX0",4,0)
 ;=================================================================
"RTN","RGUTSTX0",5,0)
CMD(RGLBL) ;
"RTN","RGUTSTX0",6,0)
 D:RGLBL'="" @RGLBL
"RTN","RGUTSTX0",7,0)
 Q
"RTN","RGUTSTX0",8,0)
 ; Postconditional
"RTN","RGUTSTX0",9,0)
PC D:$$NEXT(":") EXP()
"RTN","RGUTSTX0",10,0)
 Q:RGERR
"RTN","RGUTSTX0",11,0)
 I " "'[$E(RGM,RGPSN) S RGERR=2
"RTN","RGUTSTX0",12,0)
 E  S RGPSN=RGPSN+1
"RTN","RGUTSTX0",13,0)
 Q
"RTN","RGUTSTX0",14,0)
 ; No postconditional
"RTN","RGUTSTX0",15,0)
NPC I $$NEXT(":") S RGERR=5
"RTN","RGUTSTX0",16,0)
 E  I " "'[$E(RGM,RGPSN) S RGERR=2
"RTN","RGUTSTX0",17,0)
 E  S RGPSN=RGPSN+1
"RTN","RGUTSTX0",18,0)
 Q
"RTN","RGUTSTX0",19,0)
 ; Arguments optional
"RTN","RGUTSTX0",20,0)
OPT S:" "[$E(RGM,RGPSN) RGRN=0
"RTN","RGUTSTX0",21,0)
 Q
"RTN","RGUTSTX0",22,0)
 ; Multiple arguments
"RTN","RGUTSTX0",23,0)
ARGS(RGEX) ;
"RTN","RGUTSTX0",24,0)
 S RGEX=$G(RGEX)
"RTN","RGUTSTX0",25,0)
 F  D EXP(RGEX) Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX0",26,0)
 Q
"RTN","RGUTSTX0",27,0)
 ; Expression
"RTN","RGUTSTX0",28,0)
EXP(RGEX) ;
"RTN","RGUTSTX0",29,0)
 D EXP^RGUTSTX1(.RGEX)
"RTN","RGUTSTX0",30,0)
 Q
"RTN","RGUTSTX0",31,0)
 ; Label reference
"RTN","RGUTSTX0",32,0)
LBL(RGA) F  D LBL1(.RGA) Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX0",33,0)
 Q
"RTN","RGUTSTX0",34,0)
LBL1(RGA) ;
"RTN","RGUTSTX0",35,0)
 S RGA=+$G(RGA)
"RTN","RGUTSTX0",36,0)
 D LBL2
"RTN","RGUTSTX0",37,0)
 Q:RGERR
"RTN","RGUTSTX0",38,0)
 D:$$NEXT("+") EXP(")")
"RTN","RGUTSTX0",39,0)
 Q:RGERR
"RTN","RGUTSTX0",40,0)
 D:$$NEXT(U) LBL2
"RTN","RGUTSTX0",41,0)
 I 'RGERR,RGA=2 D PARAMS(".;0-999")
"RTN","RGUTSTX0",42,0)
 I 'RGERR,RGA D EXP(")"):$$NEXT(":")
"RTN","RGUTSTX0",43,0)
 Q
"RTN","RGUTSTX0",44,0)
LBL2 I $$NEXT("@") D
"RTN","RGUTSTX0",45,0)
 .D EXP("=")
"RTN","RGUTSTX0",46,0)
 E  S:$E(RGM,RGPSN)?.1AN.1"%" RGPSN=$$LABEL
"RTN","RGUTSTX0",47,0)
 Q
"RTN","RGUTSTX0",48,0)
 ; Write command
"RTN","RGUTSTX0",49,0)
WRITE F  D  Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX0",50,0)
 .I $$NEXT("!#") D  Q:'$$NEXT("?",0)
"RTN","RGUTSTX0",51,0)
 ..F  Q:'$$NEXT("!#")
"RTN","RGUTSTX0",52,0)
 .I $$NEXT("?*")
"RTN","RGUTSTX0",53,0)
 .D EXP()
"RTN","RGUTSTX0",54,0)
 Q
"RTN","RGUTSTX0",55,0)
 ; Read command
"RTN","RGUTSTX0",56,0)
READ N RGZ
"RTN","RGUTSTX0",57,0)
 F  D  Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX0",58,0)
 .I $$NEXT("!#") D  Q:'$$NEXT("?",0)
"RTN","RGUTSTX0",59,0)
 ..F  Q:'$$NEXT("!#")
"RTN","RGUTSTX0",60,0)
 .I $$NEXT("?") D EXP() Q
"RTN","RGUTSTX0",61,0)
 .I $$NEXT(RGQT) D QT2^RGUTSTX1 Q
"RTN","RGUTSTX0",62,0)
 .S RGZ=$$NEXT("*")
"RTN","RGUTSTX0",63,0)
 .D LVAL("LGS")
"RTN","RGUTSTX0",64,0)
 .I 'RGERR,'RGZ,$$NEXT("#") D EXP()
"RTN","RGUTSTX0",65,0)
 .I 'RGERR,$$NEXT(":") D EXP()
"RTN","RGUTSTX0",66,0)
 Q
"RTN","RGUTSTX0",67,0)
 ; Lock command
"RTN","RGUTSTX0",68,0)
LOCK D LIST("LG+:","LG")
"RTN","RGUTSTX0",69,0)
 Q
"RTN","RGUTSTX0",70,0)
 ; Set command
"RTN","RGUTSTX0",71,0)
SET D LIST("LGS=","LGS")
"RTN","RGUTSTX0",72,0)
 Q
"RTN","RGUTSTX0",73,0)
 ; New command
"RTN","RGUTSTX0",74,0)
NEW D LIST("N","")
"RTN","RGUTSTX0",75,0)
 Q
"RTN","RGUTSTX0",76,0)
 ; Kill command
"RTN","RGUTSTX0",77,0)
KILL D LIST("KGL","")
"RTN","RGUTSTX0",78,0)
 Q
"RTN","RGUTSTX0",79,0)
 ; Merge command
"RTN","RGUTSTX0",80,0)
MERGE D LIST("LG=")
"RTN","RGUTSTX0",81,0)
 Q
"RTN","RGUTSTX0",82,0)
 ; For command
"RTN","RGUTSTX0",83,0)
FOR D LVAL("LGS")
"RTN","RGUTSTX0",84,0)
 I '$$NEXT("=") S RGERR=2 Q
"RTN","RGUTSTX0",85,0)
 F  D  Q:" "[$E(RGM,RGPSN)  I '$$NEXT(",") S RGERR=2 Q
"RTN","RGUTSTX0",86,0)
 .D EXP(),EXP():$$NEXT(":"),EXP():$$NEXT(":")
"RTN","RGUTSTX0",87,0)
 Q
"RTN","RGUTSTX0",88,0)
 ; Evaluate L-value
"RTN","RGUTSTX0",89,0)
 ; RGL: Allowed types:
"RTN","RGUTSTX0",90,0)
 ;     L=Local array
"RTN","RGUTSTX0",91,0)
 ;     G=Global arrays
"RTN","RGUTSTX0",92,0)
 ;     S=Settable intrinsics/system variables
"RTN","RGUTSTX0",93,0)
 ;     N=Newable system variables
"RTN","RGUTSTX0",94,0)
 ;     K=Killable system variables
"RTN","RGUTSTX0",95,0)
LVAL(RGL) ;
"RTN","RGUTSTX0",96,0)
 I $$NEXT("@",0) D  Q
"RTN","RGUTSTX0",97,0)
 .S RGL="="
"RTN","RGUTSTX0",98,0)
 .D EXP(.RGL)
"RTN","RGUTSTX0",99,0)
 S RGL=$G(RGL)
"RTN","RGUTSTX0",100,0)
 I RGL["G",$$NEXT(U) D  Q
"RTN","RGUTSTX0",101,0)
 .N RGF
"RTN","RGUTSTX0",102,0)
 .D GLBL^RGUTSTX1
"RTN","RGUTSTX0",103,0)
 I $TR(RGL,"SNK")'=RGL,$$NEXT("$") D  Q
"RTN","RGUTSTX0",104,0)
 .N RGZ
"RTN","RGUTSTX0",105,0)
 .S RGZ=$$INT(.RGPSN,RGL)
"RTN","RGUTSTX0",106,0)
 .D:'RGERR PARAMS(RGZ)
"RTN","RGUTSTX0",107,0)
 S RGPSN=$$NAME(RGPSN,"%")
"RTN","RGUTSTX0",108,0)
 I 'RGERR,RGL["L" D PARAMS()
"RTN","RGUTSTX0",109,0)
 Q
"RTN","RGUTSTX0",110,0)
 ; Evaluate parameters/subscripts
"RTN","RGUTSTX0",111,0)
PARAMS(RGX) ;
"RTN","RGUTSTX0",112,0)
 D:$$NEXT("(") PLIST^RGUTSTX1(.RGX)
"RTN","RGUTSTX0",113,0)
 Q
"RTN","RGUTSTX0",114,0)
 ; New/Kill/Set/Lock argument list
"RTN","RGUTSTX0",115,0)
LIST(RGL1,RGL2) ;
"RTN","RGUTSTX0",116,0)
 N RGP,RGI
"RTN","RGUTSTX0",117,0)
 S RGP=0
"RTN","RGUTSTX0",118,0)
 F  D  Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX0",119,0)
 .I 'RGP,RGL1["+",$$NEXT("+-")
"RTN","RGUTSTX0",120,0)
 .I $D(RGL2),$$NEXT("(") D  Q:RGERR
"RTN","RGUTSTX0",121,0)
 ..I RGP S RGERR=2 Q
"RTN","RGUTSTX0",122,0)
 ..E  S RGP=1
"RTN","RGUTSTX0",123,0)
 .S RGI=$S(RGP:RGL2,1:RGL1)
"RTN","RGUTSTX0",124,0)
 .D LVAL(.RGI)
"RTN","RGUTSTX0",125,0)
 .Q:RGERR
"RTN","RGUTSTX0",126,0)
 .I $$NEXT(")") D  Q:RGERR
"RTN","RGUTSTX0",127,0)
 ..I RGP S RGP=0
"RTN","RGUTSTX0",128,0)
 ..E  S RGERR=2
"RTN","RGUTSTX0",129,0)
 .I 'RGP,RGL1[":",$$NEXT(":") D EXP()
"RTN","RGUTSTX0",130,0)
 .I 'RGP,RGL1["=" D
"RTN","RGUTSTX0",131,0)
 ..I '$$NEXT("=") S:RGI'["@" RGERR=2
"RTN","RGUTSTX0",132,0)
 ..E  D EXP():$D(RGL2),LVAL(RGL1):'$D(RGL2)
"RTN","RGUTSTX0",133,0)
 I 'RGERR,RGP S RGERR=3
"RTN","RGUTSTX0",134,0)
 Q
"RTN","RGUTSTX0",135,0)
 ; Check for validity of label name
"RTN","RGUTSTX0",136,0)
LABEL(RGP) ;
"RTN","RGUTSTX0",137,0)
 Q $$NAME(.RGP,"L%")
"RTN","RGUTSTX0",138,0)
 ; Check for validity of variable/label name
"RTN","RGUTSTX0",139,0)
NAME(RGP,RGF) ;
"RTN","RGUTSTX0",140,0)
 N RGP1
"RTN","RGUTSTX0",141,0)
 S (RGP,RGP1)=$G(RGP,RGPSN),RGF=$G(RGF)
"RTN","RGUTSTX0",142,0)
 I RGF["$",$E(RGM,RGP)="$" S RGP=RGP+1,RGP1=RGP
"RTN","RGUTSTX0",143,0)
 I RGF["%",$E(RGM,RGP)="%" S RGP=RGP+1
"RTN","RGUTSTX0",144,0)
 F RGP=RGP:1 Q:$E(RGM,RGP)'?@$S(RGF["L":"1AN",RGP=RGP1:"1A",1:"1AN")
"RTN","RGUTSTX0",145,0)
 I RGP=RGP1 S RGERR=$S(RGF["L":11,1:1)
"RTN","RGUTSTX0",146,0)
 E  S:RGP-RGP1>8 RGERR=12
"RTN","RGUTSTX0",147,0)
 Q RGP
"RTN","RGUTSTX0",148,0)
 ; Instrinsic function/system variable
"RTN","RGUTSTX0",149,0)
INT(RGP,RGL) ;
"RTN","RGUTSTX0",150,0)
 N RGP2,RGINT,RGNM
"RTN","RGUTSTX0",151,0)
 S RGP=$G(RGP,RGPSN),RGP2=$$NAME(RGP),RGL=$G(RGL)
"RTN","RGUTSTX0",152,0)
 Q:RGERR ""
"RTN","RGUTSTX0",153,0)
 S RGNM=$E(RGM,RGP,RGP2-1)
"RTN","RGUTSTX0",154,0)
 I $E(RGM,RGP2)="(" S:$D(^TMP(RGPID,$J,"FCN",RGNM)) RGINT=^(RGNM)
"RTN","RGUTSTX0",155,0)
 E  S:$D(^TMP(RGPID,$J,"SYS",RGNM)) RGINT=^(RGNM)
"RTN","RGUTSTX0",156,0)
 I '$D(RGINT),RGO["Z" S RGINT=";0-999"
"RTN","RGUTSTX0",157,0)
 I '$D(RGINT) S RGERR=7
"RTN","RGUTSTX0",158,0)
 E  I RGL'="",$TR(RGL,$P(RGINT,";"))=RGL S RGERR=2,RGINT=""
"RTN","RGUTSTX0",159,0)
 E  S RGP=RGP2
"RTN","RGUTSTX0",160,0)
 Q $G(RGINT)
"RTN","RGUTSTX0",161,0)
 ; Check next character
"RTN","RGUTSTX0",162,0)
NEXT(RGC,RGI) ;
"RTN","RGUTSTX0",163,0)
 I RGPSN'>RGLEN,RGC[$E(RGM,RGPSN) S RGPSN=RGPSN+$G(RGI,1)
"RTN","RGUTSTX0",164,0)
 Q $T
"RTN","RGUTSTX1")
0^29^B20280544
"RTN","RGUTSTX1",1,0)
RGUTSTX1 ;RI/CBMI/DKM - Continuation of RGUTSTX;03-Mar-2015 14:24;DKM
"RTN","RGUTSTX1",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTSTX1",3,0)
 ;;
"RTN","RGUTSTX1",4,0)
 ;=================================================================
"RTN","RGUTSTX1",5,0)
 ; Parse an expression
"RTN","RGUTSTX1",6,0)
EXP(RGEX) ;
"RTN","RGUTSTX1",7,0)
 N RGF,RGC,RGPN
"RTN","RGUTSTX1",8,0)
 S (RGF,RGPN)=0,RGEX=$G(RGEX)
"RTN","RGUTSTX1",9,0)
 F  D  Q:RGF<0!RGERR
"RTN","RGUTSTX1",10,0)
 .S RGC=$E(RGM,RGPSN),RGPSN=RGPSN+1
"RTN","RGUTSTX1",11,0)
 .D @("OP"_RGF)
"RTN","RGUTSTX1",12,0)
 I 'RGERR,RGPN S RGERR=3
"RTN","RGUTSTX1",13,0)
 S RGEX=$S($G(RGPN(RGPN,"@")):"@",1:"")_RGEX
"RTN","RGUTSTX1",14,0)
 Q
"RTN","RGUTSTX1",15,0)
 ; Operands
"RTN","RGUTSTX1",16,0)
OP0 I RGC'=".",RGEX["." S RGEX=$TR(RGEX,".")
"RTN","RGUTSTX1",17,0)
 G:RGC'="" COLON2:RGC=":",GLBL:RGC=U,DOT:RGC=".",INDIR:RGC="@",FCN:RGC="$",UNARY:"'+-"[RGC,QT:RGC=RGQT,NUM:RGC?1N,OPNPAR:RGC="(",VAR:RGC?1A,VAR:RGC="%"
"RTN","RGUTSTX1",18,0)
 S RGERR=6
"RTN","RGUTSTX1",19,0)
 Q
"RTN","RGUTSTX1",20,0)
 ; Operators
"RTN","RGUTSTX1",21,0)
OP1 G END:RGC="",INDIR2:RGC="@",DONE:RGEX["="&'RGPN!(RGC=" ")
"RTN","RGUTSTX1",22,0)
 K RGPN(RGPN,"@")
"RTN","RGUTSTX1",23,0)
 I RGC="*",$$NEXT(RGC)
"RTN","RGUTSTX1",24,0)
 G COLON:RGC=":",CLSPAR:RGC=")",RBRKT:RGC="]",BINARY:"!#&*-_+=\/<>["[RGC,NOT:RGC="'",PTRN:RGC="?"
"RTN","RGUTSTX1",25,0)
DONE S RGPSN=RGPSN-1
"RTN","RGUTSTX1",26,0)
END S RGF=-1
"RTN","RGUTSTX1",27,0)
 Q
"RTN","RGUTSTX1",28,0)
 ; Negated operator
"RTN","RGUTSTX1",29,0)
NOT S:'$$NEXT("=<>[]?&!",0) RGERR=2
"RTN","RGUTSTX1",30,0)
 Q
"RTN","RGUTSTX1",31,0)
 ; Parse a global reference
"RTN","RGUTSTX1",32,0)
GLBL D:$$NEXT("[") PLIST(";1-2","]")
"RTN","RGUTSTX1",33,0)
 Q:RGERR
"RTN","RGUTSTX1",34,0)
 S:'$$NEXT("(",0) RGPSN=$$NAME^RGUTSTX0(RGPSN,"$%")
"RTN","RGUTSTX1",35,0)
 I 'RGERR,$$NEXT("(") D PLIST(";1-999")
"RTN","RGUTSTX1",36,0)
 S RGF=1
"RTN","RGUTSTX1",37,0)
 Q
"RTN","RGUTSTX1",38,0)
 ; Indirection (prefix)
"RTN","RGUTSTX1",39,0)
INDIR S RGPN(RGPN,"@")=$G(RGPN(RGPN,"@"))+1
"RTN","RGUTSTX1",40,0)
 Q
"RTN","RGUTSTX1",41,0)
 ; Indirection (suffix)
"RTN","RGUTSTX1",42,0)
INDIR2 I +$G(RGPN(RGPN,"@"))'>0 S RGERR=2
"RTN","RGUTSTX1",43,0)
 E  I '$$NEXT("(") S RGERR=2
"RTN","RGUTSTX1",44,0)
 E  D
"RTN","RGUTSTX1",45,0)
 .S RGPN(RGPN,"@")=-(RGPN(RGPN,"@")>1)
"RTN","RGUTSTX1",46,0)
 .D PLIST()
"RTN","RGUTSTX1",47,0)
 Q
"RTN","RGUTSTX1",48,0)
 ; Intrinsic function/system variable
"RTN","RGUTSTX1",49,0)
FCN G:$$NEXT("$") EXT
"RTN","RGUTSTX1",50,0)
INT N RGZ,RGZ1
"RTN","RGUTSTX1",51,0)
 S RGZ1=$E(RGM,RGPSN),RGZ=$$INT^RGUTSTX0(.RGPSN),RGF=1
"RTN","RGUTSTX1",52,0)
 I 'RGERR,$$NEXT("(") D PLIST(RGZ)
"RTN","RGUTSTX1",53,0)
 Q
"RTN","RGUTSTX1",54,0)
 ; Extrinsic function
"RTN","RGUTSTX1",55,0)
EXT S:'$$NEXT(U,0) RGPSN=$$LABEL^RGUTSTX0
"RTN","RGUTSTX1",56,0)
 Q:RGERR
"RTN","RGUTSTX1",57,0)
 S:$$NEXT(U) RGPSN=$$LABEL^RGUTSTX0
"RTN","RGUTSTX1",58,0)
 Q:RGERR
"RTN","RGUTSTX1",59,0)
 D:$$NEXT("(") PLIST(".;0-999")
"RTN","RGUTSTX1",60,0)
 S RGF=1
"RTN","RGUTSTX1",61,0)
 Q
"RTN","RGUTSTX1",62,0)
 ; Unary operator
"RTN","RGUTSTX1",63,0)
UNARY Q
"RTN","RGUTSTX1",64,0)
 ; String literal
"RTN","RGUTSTX1",65,0)
QT D QT2
"RTN","RGUTSTX1",66,0)
 S RGF=1
"RTN","RGUTSTX1",67,0)
 Q
"RTN","RGUTSTX1",68,0)
 ; Find matching quote
"RTN","RGUTSTX1",69,0)
QT2 F RGPSN=RGPSN:1:RGLEN I $$NEXT(RGQT),'$$NEXT(RGQT,0) Q
"RTN","RGUTSTX1",70,0)
 S:$E(RGM,RGPSN-1)'=RGQT RGERR=9
"RTN","RGUTSTX1",71,0)
 Q
"RTN","RGUTSTX1",72,0)
 ; Numeric constant
"RTN","RGUTSTX1",73,0)
NUM N RGZ,RGZ1
"RTN","RGUTSTX1",74,0)
 S RGZ=0,RGF=1
"RTN","RGUTSTX1",75,0)
 F RGPSN=RGPSN-1:1 S RGZ1=$E(RGM,RGPSN) D @("NUM"_RGZ) Q:RGZ<0
"RTN","RGUTSTX1",76,0)
 S:RGZ=-2 RGERR=2
"RTN","RGUTSTX1",77,0)
 Q
"RTN","RGUTSTX1",78,0)
NUM0 S RGZ=$S(RGZ1?1N:1,RGZ1=".":2,1:-2)
"RTN","RGUTSTX1",79,0)
 Q
"RTN","RGUTSTX1",80,0)
NUM1 S RGZ=$S(RGZ1?1N:1,RGZ1=".":3,1:-1)
"RTN","RGUTSTX1",81,0)
 Q
"RTN","RGUTSTX1",82,0)
NUM2 S RGZ=$S(RGZ1?1N:3,1:-2)
"RTN","RGUTSTX1",83,0)
 Q
"RTN","RGUTSTX1",84,0)
NUM3 S RGZ=$S(RGZ1?1N:3,RGZ1="E":4,1:-1)
"RTN","RGUTSTX1",85,0)
 Q
"RTN","RGUTSTX1",86,0)
NUM4 S RGZ=$S(RGZ1="+":5,RGZ1="-":5,RGZ1=".":7,RGZ1?1N:6,1:-2)
"RTN","RGUTSTX1",87,0)
 Q
"RTN","RGUTSTX1",88,0)
NUM5 S RGZ=$S(RGZ1?1N:6,RGZ1=".":7,1:-2)
"RTN","RGUTSTX1",89,0)
 Q
"RTN","RGUTSTX1",90,0)
NUM6 S RGZ=$S(RGZ1?1N:6,RGZ1=".":8,1:-1)
"RTN","RGUTSTX1",91,0)
 Q
"RTN","RGUTSTX1",92,0)
NUM7 S RGZ=$S(RGZ1?1N:8,1:-2)
"RTN","RGUTSTX1",93,0)
 Q
"RTN","RGUTSTX1",94,0)
NUM8 S RGZ=$S(RGZ1?1N:8,1:-1)
"RTN","RGUTSTX1",95,0)
 Q
"RTN","RGUTSTX1",96,0)
 ; Open parenthesis
"RTN","RGUTSTX1",97,0)
OPNPAR S RGPN=RGPN+1
"RTN","RGUTSTX1",98,0)
 K RGPN(RGPN)
"RTN","RGUTSTX1",99,0)
 Q
"RTN","RGUTSTX1",100,0)
 ; Period (variable by reference or FP number)
"RTN","RGUTSTX1",101,0)
DOT I RGEX[".",$E(RGM,RGPSN)'?1N D
"RTN","RGUTSTX1",102,0)
 .I '$$NEXT("@") S RGPSN=$$NAME^RGUTSTX0(RGPSN,"%"),RGF=-1
"RTN","RGUTSTX1",103,0)
 .E  D INDIR
"RTN","RGUTSTX1",104,0)
 E  D NUM
"RTN","RGUTSTX1",105,0)
 Q
"RTN","RGUTSTX1",106,0)
 ; Variable name
"RTN","RGUTSTX1",107,0)
VAR S RGPSN=$$NAME^RGUTSTX0(RGPSN-1,"%"),RGF=1
"RTN","RGUTSTX1",108,0)
 D:$$NEXT("(") PLIST()
"RTN","RGUTSTX1",109,0)
 Q
"RTN","RGUTSTX1",110,0)
 ; Closing parenthesis
"RTN","RGUTSTX1",111,0)
CLSPAR I 'RGPN,RGEX[")" G DONE
"RTN","RGUTSTX1",112,0)
 I RGPN S RGPN=RGPN-1
"RTN","RGUTSTX1",113,0)
 E  S RGERR=3
"RTN","RGUTSTX1",114,0)
 Q
"RTN","RGUTSTX1",115,0)
 ; Right bracket (] or ]])
"RTN","RGUTSTX1",116,0)
RBRKT I 'RGPN,RGEX["]" G DONE
"RTN","RGUTSTX1",117,0)
 I $$NEXT(RGC)
"RTN","RGUTSTX1",118,0)
 ; Binary operator
"RTN","RGUTSTX1",119,0)
BINARY S RGF=0
"RTN","RGUTSTX1",120,0)
 Q
"RTN","RGUTSTX1",121,0)
 ; Colon operand
"RTN","RGUTSTX1",122,0)
COLON2 S:RGEX'["M" RGERR=6
"RTN","RGUTSTX1",123,0)
 Q
"RTN","RGUTSTX1",124,0)
 ; Colon operator
"RTN","RGUTSTX1",125,0)
COLON G:RGEX'[":" DONE
"RTN","RGUTSTX1",126,0)
 S RGF=0
"RTN","RGUTSTX1",127,0)
 S:RGEX'["M" RGEX=$TR(RGEX,":")
"RTN","RGUTSTX1",128,0)
 Q
"RTN","RGUTSTX1",129,0)
 ; Pattern match
"RTN","RGUTSTX1",130,0)
PTRN N RGZ,RGZ1
"RTN","RGUTSTX1",131,0)
 I $$NEXT("@") S RGF=0 Q
"RTN","RGUTSTX1",132,0)
 S RGZ=RGPSN,@$$TRAP^RGUTOS("PERR^RGUTSTX1"),RGZ1=0
"RTN","RGUTSTX1",133,0)
 F  D  Q:RGZ1<0!RGERR
"RTN","RGUTSTX1",134,0)
 .D QT2:$$NEXT(RGQT),PTRN1:$$NEXT("("),PTRN2:$$NEXT(")")
"RTN","RGUTSTX1",135,0)
 .I RGZ1,$$NEXT(",")
"RTN","RGUTSTX1",136,0)
 .S:'$$NEXT("ACELNPU.0123456789") RGZ1=-1
"RTN","RGUTSTX1",137,0)
 S:'RGERR RGZ=RGZ?@$E(RGM,RGZ,RGPSN-1)
"RTN","RGUTSTX1",138,0)
 Q
"RTN","RGUTSTX1",139,0)
PTRN1 S RGZ1=RGZ1+1
"RTN","RGUTSTX1",140,0)
 Q
"RTN","RGUTSTX1",141,0)
PTRN2 S RGZ1=RGZ1-1
"RTN","RGUTSTX1",142,0)
 S:RGZ1<0 RGPSN=RGPSN-1
"RTN","RGUTSTX1",143,0)
 Q
"RTN","RGUTSTX1",144,0)
PERR S RGERR=10
"RTN","RGUTSTX1",145,0)
 Q
"RTN","RGUTSTX1",146,0)
 ; Process a parameter list
"RTN","RGUTSTX1",147,0)
PLIST(RGP,RGT) ;
"RTN","RGUTSTX1",148,0)
 N RGC,RGP1,RGP2,RGZ
"RTN","RGUTSTX1",149,0)
 S RGT=$G(RGT,")"),RGP=$G(RGP,";0-999"),RGP2=$P(RGP,";",2),RGP1=+RGP2,RGP2=+$P(RGP2,"-",2),RGC=0,RGZ=$P(RGP,";")
"RTN","RGUTSTX1",150,0)
 I '$$NEXT(RGT,0) D
"RTN","RGUTSTX1",151,0)
 .F RGC=1:1 D  Q:RGERR!'$$NEXT(",")
"RTN","RGUTSTX1",152,0)
 ..D @("PL"_$P(RGP,";",RGC+2))
"RTN","RGUTSTX1",153,0)
 I 'RGERR,RGC<RGP1!(RGC>RGP2) S RGERR=8
"RTN","RGUTSTX1",154,0)
 I 'RGERR,'$$NEXT(RGT) S RGERR=3
"RTN","RGUTSTX1",155,0)
 Q
"RTN","RGUTSTX1",156,0)
PL N RGEX
"RTN","RGUTSTX1",157,0)
 I RGZ=".",$$NEXT(",",0) Q
"RTN","RGUTSTX1",158,0)
 S RGEX=RGT_RGZ
"RTN","RGUTSTX1",159,0)
 D EXP(.RGEX)
"RTN","RGUTSTX1",160,0)
 I RGZ[":",RGEX[":" S RGERR=2
"RTN","RGUTSTX1",161,0)
 Q
"RTN","RGUTSTX1",162,0)
PLV D LVAL^RGUTSTX0("LG")
"RTN","RGUTSTX1",163,0)
 Q
"RTN","RGUTSTX1",164,0)
PLL D LBL1^RGUTSTX0()
"RTN","RGUTSTX1",165,0)
 Q
"RTN","RGUTSTX1",166,0)
 ; Get next character
"RTN","RGUTSTX1",167,0)
NEXT(RGC,RGI) ;
"RTN","RGUTSTX1",168,0)
 Q $$NEXT^RGUTSTX0(RGC,.RGI)
"RTN","RGUTTSK")
0^57^B998610
"RTN","RGUTTSK",1,0)
RGUTTSK ;RI/CBMI/DKM - Encapsulates TaskMan API ;14-Mar-2015 22:16;DKM
"RTN","RGUTTSK",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTTSK",3,0)
 ;;
"RTN","RGUTTSK",4,0)
 ;=================================================================
"RTN","RGUTTSK",5,0)
QUEUE(ZTRTN,ZTDESC,ZTDTH,ZTSAVE,ZTIO,ZTUCI,ZTPRI) ;
"RTN","RGUTTSK",6,0)
 N %RGZ,%RGZ1,%RGZ2,ZTKIL,ZTSK,ZTCPU
"RTN","RGUTTSK",7,0)
 S:'$G(ZTDTH) ZTDTH=$H
"RTN","RGUTTSK",8,0)
 S:ZTDTH'?1.N1","1.N ZTDTH=$$FMTH^XLFDT(ZTDTH)
"RTN","RGUTTSK",9,0)
 Q:ZTDTH<0 0
"RTN","RGUTTSK",10,0)
 S ZTUCI=$G(ZTUCI,^%ZOSF("PROD"))
"RTN","RGUTTSK",11,0)
 S ZTUCI=$TR(ZTUCI,":",","),ZTCPU=$P(ZTUCI,",",2),ZTUCI=$P(ZTUCI,",")
"RTN","RGUTTSK",12,0)
 S ZTSAVE=$G(ZTSAVE),ZTIO=$G(ZTIO),U="^"
"RTN","RGUTTSK",13,0)
 F %RGZ=1:1:$L(ZTSAVE,U) D
"RTN","RGUTTSK",14,0)
 .S %RGZ1=$P(ZTSAVE,U,%RGZ),%RGZ2=$P(%RGZ1,"=",2,999),%RGZ1=$P(%RGZ1,"=")
"RTN","RGUTTSK",15,0)
 .S:%RGZ1'="" ZTSAVE(%RGZ1)=%RGZ2
"RTN","RGUTTSK",16,0)
 D ^%ZTLOAD
"RTN","RGUTTSK",17,0)
 Q +$G(ZTSK)
"RTN","RGUTUSR")
0^58^B3790974
"RTN","RGUTUSR",1,0)
RGUTUSR ;RI/CBMI/DKM - Parse recipient list;03-Mar-2015 14:24;DKM
"RTN","RGUTUSR",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTUSR",3,0)
 ;;
"RTN","RGUTUSR",4,0)
 ;=================================================================
"RTN","RGUTUSR",5,0)
 ; Takes a list of recipients (which may be DUZ #'s, names,
"RTN","RGUTUSR",6,0)
 ; mail groups, or special tokens) as input and produces an
"RTN","RGUTUSR",7,0)
 ; array of DUZ's as output.  If a list element is found in
"RTN","RGUTUSR",8,0)
 ; in the token list RGLST, the value of the token entry will
"RTN","RGUTUSR",9,0)
 ; be substituted.
"RTN","RGUTUSR",10,0)
 ; Inputs:
"RTN","RGUTUSR",11,0)
 ;     RGUTSR = Semicolon-delimited list of recipients
"RTN","RGUTUSR",12,0)
 ;     RGLST = Special token list
"RTN","RGUTUSR",13,0)
 ; Outputs:
"RTN","RGUTUSR",14,0)
 ;     RGOUT = Local array to receive DUZ list
"RTN","RGUTUSR",15,0)
 ;=================================================================
"RTN","RGUTUSR",16,0)
ENTRY(RGUTSR,RGOUT,RGLST) ;
"RTN","RGUTUSR",17,0)
 N RGZ,RGZ1,RGZ2
"RTN","RGUTUSR",18,0)
 K RGOUT
"RTN","RGUTUSR",19,0)
 F RGZ=1:1:$L(RGUTSR,";") S RGZ1=$P(RGUTSR,";",RGZ) D:RGZ1'=""  S:RGZ1 RGOUT(+RGZ1)=""
"RTN","RGUTUSR",20,0)
 .S:$D(RGLST(RGZ1)) RGZ1=RGLST(RGZ1)
"RTN","RGUTUSR",21,0)
 .Q:RGZ1?.N
"RTN","RGUTUSR",22,0)
 .I RGZ1?1"-"1.N D MGRP(-RGZ1) S RGZ1=0 Q
"RTN","RGUTUSR",23,0)
 .S RGZ2=$E(RGZ1,1,2)
"RTN","RGUTUSR",24,0)
 .I RGZ2="G." D MGRP($E(RGZ1,3,999)) Q
"RTN","RGUTUSR",25,0)
 .I RGZ2="L." D LIST($E(RGZ1,3,999)) Q
"RTN","RGUTUSR",26,0)
 .S RGZ1=$$LKP(RGZ1)
"RTN","RGUTUSR",27,0)
 Q
"RTN","RGUTUSR",28,0)
LKP(RGNAME) ;
"RTN","RGUTUSR",29,0)
 N RGZ,RGZ1
"RTN","RGUTUSR",30,0)
 I $D(^VA(200,"B",RGNAME)) S RGZ=RGNAME G L1
"RTN","RGUTUSR",31,0)
 S RGZ=$O(^(RGNAME)),RGZ1=$O(^(RGZ))
"RTN","RGUTUSR",32,0)
 Q:(RGZ="")!(RGNAME'=$E(RGZ,1,$L(RGNAME))) 0
"RTN","RGUTUSR",33,0)
 Q:(RGZ1'="")&(RGNAME=$E(RGZ1,1,$L(RGNAME))) 0
"RTN","RGUTUSR",34,0)
L1 S RGZ1=$O(^(RGZ,0)),RGZ=$O(^(RGZ1))
"RTN","RGUTUSR",35,0)
 Q:'RGZ1!RGZ 0
"RTN","RGUTUSR",36,0)
 Q RGZ1
"RTN","RGUTUSR",37,0)
LIST(RGLIST) ;
"RTN","RGUTUSR",38,0)
 Q:RGLIST=""
"RTN","RGUTUSR",39,0)
 S:RGLIST'=+RGLIST RGLIST=+$O(^CCCDSS(25193.6,"B",RGLIST,0))
"RTN","RGUTUSR",40,0)
 S @$$TRAP^RGUTOS("LERR^RGUTUSR")
"RTN","RGUTUSR",41,0)
 X:$D(^CCCDSS(25193.6,RGLIST,1)) ^(1)
"RTN","RGUTUSR",42,0)
LERR Q
"RTN","RGUTUSR",43,0)
MGRP(RGMGRP) ;
"RTN","RGUTUSR",44,0)
 N RGX
"RTN","RGUTUSR",45,0)
 S RGX(0)=""
"RTN","RGUTUSR",46,0)
 D MGRP2(RGMGRP)
"RTN","RGUTUSR",47,0)
 Q
"RTN","RGUTUSR",48,0)
MGRP2(RGMGRP) ;
"RTN","RGUTUSR",49,0)
 N RGZ,RGZ1
"RTN","RGUTUSR",50,0)
 Q:RGMGRP=""
"RTN","RGUTUSR",51,0)
 S:RGMGRP'=+RGMGRP RGMGRP=+$O(^XMB(3.8,"B",RGMGRP,0))
"RTN","RGUTUSR",52,0)
 Q:$D(RGX(RGMGRP))
"RTN","RGUTUSR",53,0)
 S RGX(RGMGRP)=""
"RTN","RGUTUSR",54,0)
 F RGZ=0:0 S RGZ=+$O(^XMB(3.8,RGMGRP,1,RGZ)) Q:'RGZ  S RGOUT(+^(RGZ,0))=""
"RTN","RGUTUSR",55,0)
 F RGZ=0:0 S RGZ=+$O(^XMB(3.8,RGMGRP,5,RGZ)) Q:'RGZ  D MGRP2(^(RGZ,0))
"RTN","RGUTUSR",56,0)
 Q
"RTN","RGUTUU")
0^59^B1813543
"RTN","RGUTUU",1,0)
RGUTUU ;RI/CBMI/DKM - UUEncode and UUDecode functions.;03-Mar-2015 14:24;DKM
"RTN","RGUTUU",2,0)
 ;;3.0;RG UTILITIES;;Mar 20, 2007;Build 362
"RTN","RGUTUU",3,0)
 ;;
"RTN","RGUTUU",4,0)
 ;=================================================================
"RTN","RGUTUU",5,0)
ENCODE(X) ;
"RTN","RGUTUU",6,0)
 N RGZ,RGZ1,RGZ2,RGZ3,RGZ4,RGZ5,RGZ6
"RTN","RGUTUU",7,0)
 S RGZ=$$INIT,RGZ1=""
"RTN","RGUTUU",8,0)
 F RGZ2=1:3:$L(X) D
"RTN","RGUTUU",9,0)
 .S RGZ3=0,RGZ6=""
"RTN","RGUTUU",10,0)
 .F RGZ4=0:1:2 D
"RTN","RGUTUU",11,0)
 ..S RGZ5=$A(X,RGZ2+RGZ4),RGZ3=RGZ3*256+$S(RGZ5<0:0,1:RGZ5)
"RTN","RGUTUU",12,0)
 .F RGZ4=1:1:4 S RGZ6=$E(RGZ,RGZ3#64+2)_RGZ6,RGZ3=RGZ3\64
"RTN","RGUTUU",13,0)
 .S RGZ1=RGZ1_RGZ6
"RTN","RGUTUU",14,0)
 S RGZ2=$L(X)#3
"RTN","RGUTUU",15,0)
 S:RGZ2 RGZ3=$L(RGZ1),$E(RGZ1,RGZ3-2+RGZ2,RGZ3)=$E("==",RGZ2,2)
"RTN","RGUTUU",16,0)
 Q RGZ1
"RTN","RGUTUU",17,0)
DECODE(X) ;
"RTN","RGUTUU",18,0)
 N RGZ,RGZ1,RGZ2,RGZ3,RGZ4,RGZ5,RGZ6
"RTN","RGUTUU",19,0)
 S RGZ=$$INIT,RGZ1=""
"RTN","RGUTUU",20,0)
 F RGZ2=1:4:$L(X) D
"RTN","RGUTUU",21,0)
 .S RGZ3=0,RGZ6=""
"RTN","RGUTUU",22,0)
 .F RGZ4=0:1:3 D
"RTN","RGUTUU",23,0)
 ..S RGZ5=$F(RGZ,$E(X,RGZ2+RGZ4))-3
"RTN","RGUTUU",24,0)
 ..S RGZ3=RGZ3*64+$S(RGZ5<0:0,1:RGZ5)
"RTN","RGUTUU",25,0)
 .F RGZ4=0:1:2 S RGZ6=$C(RGZ3#256)_RGZ6,RGZ3=RGZ3\256
"RTN","RGUTUU",26,0)
 .S RGZ1=RGZ1_RGZ6
"RTN","RGUTUU",27,0)
 Q $E(RGZ1,1,$L(RGZ1)-$L(X,"=")+1)
"RTN","RGUTUU",28,0)
INIT() Q "=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
"RTN","RGXY")
1^73
"RTN","RGZOSF")
1^74
"VER")
8.0^22.0
**INSTALL NAME**
NETSERV CONNECTION MANAGER 1.0
"BLD",8506,0)
NETSERV CONNECTION MANAGER 1.0^NETWORK SERVICES^0^3150407^n
"BLD",8506,1,0)
^^2^2^3150401.074349
"BLD",8506,1,1,0)
Manages TCP connections for various network services.  Provides concurrent
"BLD",8506,1,2,0)
socket modes for Intersystems Cache and for GT.M.
"BLD",8506,4,0)
^9.64PA^996.5^1
"BLD",8506,4,996.5,0)
996.5
"BLD",8506,4,996.5,222)
y^y^f^^^^n^^
"BLD",8506,4,996.5,224)

"BLD",8506,4,"B",996.5,996.5)

"BLD",8506,6.3)
51
"BLD",8506,"ABPKG")
n
"BLD",8506,"KRN",0)
^9.67PA^779.2^20
"BLD",8506,"KRN",.4,0)
.4
"BLD",8506,"KRN",.401,0)
.401
"BLD",8506,"KRN",.402,0)
.402
"BLD",8506,"KRN",.403,0)
.403
"BLD",8506,"KRN",.5,0)
.5
"BLD",8506,"KRN",.84,0)
.84
"BLD",8506,"KRN",3.6,0)
3.6
"BLD",8506,"KRN",3.8,0)
3.8
"BLD",8506,"KRN",9.2,0)
9.2
"BLD",8506,"KRN",9.8,0)
9.8
"BLD",8506,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",8506,"KRN",9.8,"NM",1,0)
RGNETTCP^^0^B81351545
"BLD",8506,"KRN",9.8,"NM","B","RGNETTCP",1)

"BLD",8506,"KRN",19,0)
19
"BLD",8506,"KRN",19.1,0)
19.1
"BLD",8506,"KRN",101,0)
101
"BLD",8506,"KRN",409.61,0)
409.61
"BLD",8506,"KRN",771,0)
771
"BLD",8506,"KRN",779.2,0)
779.2
"BLD",8506,"KRN",870,0)
870
"BLD",8506,"KRN",8989.51,0)
8989.51
"BLD",8506,"KRN",8989.52,0)
8989.52
"BLD",8506,"KRN",8994,0)
8994
"BLD",8506,"KRN","B",.4,.4)

"BLD",8506,"KRN","B",.401,.401)

"BLD",8506,"KRN","B",.402,.402)

"BLD",8506,"KRN","B",.403,.403)

"BLD",8506,"KRN","B",.5,.5)

"BLD",8506,"KRN","B",.84,.84)

"BLD",8506,"KRN","B",3.6,3.6)

"BLD",8506,"KRN","B",3.8,3.8)

"BLD",8506,"KRN","B",9.2,9.2)

"BLD",8506,"KRN","B",9.8,9.8)

"BLD",8506,"KRN","B",19,19)

"BLD",8506,"KRN","B",19.1,19.1)

"BLD",8506,"KRN","B",101,101)

"BLD",8506,"KRN","B",409.61,409.61)

"BLD",8506,"KRN","B",771,771)

"BLD",8506,"KRN","B",779.2,779.2)

"BLD",8506,"KRN","B",870,870)

"BLD",8506,"KRN","B",8989.51,8989.51)

"BLD",8506,"KRN","B",8989.52,8989.52)

"BLD",8506,"KRN","B",8994,8994)

"BLD",8506,"QUES",0)
^9.62^^
"BLD",8506,"REQB",0)
^9.611^1^1
"BLD",8506,"REQB",1,0)
RG UTILITIES 3.0^2
"BLD",8506,"REQB","B","RG UTILITIES 3.0",1)

"FIA",996.5)
NETSERV TCP LISTENER
"FIA",996.5,0)
^RGNET(996.5,
"FIA",996.5,0,0)
996.5
"FIA",996.5,0,1)
y^y^f^^^^n^^
"FIA",996.5,0,10)

"FIA",996.5,0,11)

"FIA",996.5,0,"RLRO")

"FIA",996.5,0,"VR")
1.0^NETSERV CONNECTION MANAGER
"FIA",996.5,996.5)
0
"MBREQ")
1
"PKG",225,-1)
1^1
"PKG",225,0)
NETWORK SERVICES^RGNE^Network services
"PKG",225,20,0)
^9.402P^^
"PKG",225,22,0)
^9.49I^1^1
"PKG",225,22,1,0)
1.0^3150407
"PKG",225,22,1,1,0)
^^2^2^3150407
"PKG",225,22,1,1,1,0)
Manages TCP connections for various network services.  Provides concurrent
"PKG",225,22,1,1,2,0)
socket modes for Intersystems Cache and for GT.M.
"PKG",225,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","RGNETTCP")
0^1^B81351545
"RTN","RGNETTCP",1,0)
RGNETTCP ;RI/CBMI/DKM - TCP Connection Manager ;07-Apr-2015 15:21;DKM
"RTN","RGNETTCP",2,0)
 ;;1.0;NETWORK SERVICES;;29-Mar-2015;Build 51
"RTN","RGNETTCP",3,0)
 ;=================================================================
"RTN","RGNETTCP",4,0)
 ; Start a primary listener
"RTN","RGNETTCP",5,0)
START(RGCFG) ;
"RTN","RGNETTCP",6,0)
 D SSLIS(RGCFG,1)
"RTN","RGNETTCP",7,0)
 Q
"RTN","RGNETTCP",8,0)
 ; Stop a primary listener
"RTN","RGNETTCP",9,0)
STOP(RGCFG) ;
"RTN","RGNETTCP",10,0)
 D SSLIS(RGCFG,0)
"RTN","RGNETTCP",11,0)
 Q
"RTN","RGNETTCP",12,0)
 ; Restart a primary listener
"RTN","RGNETTCP",13,0)
RESTART(RGCFG) ;
"RTN","RGNETTCP",14,0)
 Q:$$OSCHECK
"RTN","RGNETTCP",15,0)
 D STOP(.RGCFG),START(.RGCFG)
"RTN","RGNETTCP",16,0)
 Q
"RTN","RGNETTCP",17,0)
 ; Start all primary listeners
"RTN","RGNETTCP",18,0)
STARTALL D SSALL(1)
"RTN","RGNETTCP",19,0)
 Q
"RTN","RGNETTCP",20,0)
 ; Stop all primary listeners
"RTN","RGNETTCP",21,0)
STOPALL D SSALL(0)
"RTN","RGNETTCP",22,0)
 Q
"RTN","RGNETTCP",23,0)
 ; Restart all primary listeners
"RTN","RGNETTCP",24,0)
RESTALL Q:$$OSCHECK
"RTN","RGNETTCP",25,0)
 D STOPALL,STARTALL
"RTN","RGNETTCP",26,0)
 Q
"RTN","RGNETTCP",27,0)
 ; List the status of all primary listeners
"RTN","RGNETTCP",28,0)
LISTALL Q:$$OSCHECK
"RTN","RGNETTCP",29,0)
 N RGCFG,LP,X
"RTN","RGNETTCP",30,0)
 F LP=0:0 S LP=$O(^RGNET(996.5,LP)) Q:'LP  D
"RTN","RGNETTCP",31,0)
 .K RGCFG
"RTN","RGNETTCP",32,0)
 .S RGCFG=LP
"RTN","RGNETTCP",33,0)
 .D GETCFG(.RGCFG)
"RTN","RGNETTCP",34,0)
 .S X=$$STATE
"RTN","RGNETTCP",35,0)
 .W RGCFG("name")," (",RGCFG("port"),") is",$S(X:"",1:" not")," running.",!!
"RTN","RGNETTCP",36,0)
 Q
"RTN","RGNETTCP",37,0)
 ; Start/stop all registered listeners
"RTN","RGNETTCP",38,0)
 ; SS - 1 = start, 0 = stop
"RTN","RGNETTCP",39,0)
 ; SL - true = silent mode
"RTN","RGNETTCP",40,0)
SSALL(SS,SL) ;
"RTN","RGNETTCP",41,0)
 Q:$$OSCHECK(.SL)
"RTN","RGNETTCP",42,0)
 N RGCFG
"RTN","RGNETTCP",43,0)
 F RGCFG=0:0 S RGCFG=$O(^RGNET(996.5,RGCFG)) Q:'RGCFG  D SSLIS(RGCFG,SS,.SL)
"RTN","RGNETTCP",44,0)
 Q
"RTN","RGNETTCP",45,0)
 ; Start/stop primary listener
"RTN","RGNETTCP",46,0)
 ; SS - 1 = start, 0 = stop
"RTN","RGNETTCP",47,0)
 ; SL - true = silent mode
"RTN","RGNETTCP",48,0)
SSLIS(RGCFG,SS,SL) ;
"RTN","RGNETTCP",49,0)
 Q:$$OSCHECK(.SL)
"RTN","RGNETTCP",50,0)
 N $ET,SAME,RGMODE
"RTN","RGNETTCP",51,0)
 Q:'$$GETCFG(.RGCFG)
"RTN","RGNETTCP",52,0)
 S SL=$G(SL,$D(ZTQUEUED))
"RTN","RGNETTCP",53,0)
 S:'SL $ET="D SSERR^RGNETTCP"
"RTN","RGNETTCP",54,0)
 W:'SL RGCFG("name")," (",RGCFG("port"),"): "
"RTN","RGNETTCP",55,0)
 S SAME=$$STATE=SS
"RTN","RGNETTCP",56,0)
 S:'SS @$$LOCKNODE(.RGCFG)=1
"RTN","RGNETTCP",57,0)
 I SAME W:'SL $S(SS:"already",1:"not")," running.",!!  Q
"RTN","RGNETTCP",58,0)
 I SS,RGCFG("disabled") W:'SL "disabled.",!! Q
"RTN","RGNETTCP",59,0)
 D:SS JOB(0,.RGCFG)
"RTN","RGNETTCP",60,0)
 Q:SL
"RTN","RGNETTCP",61,0)
 N P1,P2,LP
"RTN","RGNETTCP",62,0)
 S P1=$S(SS:"start",1:"stop"),P2=P1_$S(SS:"ed",1:"ped")
"RTN","RGNETTCP",63,0)
 W "waiting for ",P1," signal..."
"RTN","RGNETTCP",64,0)
 F LP=1:1:5 D
"RTN","RGNETTCP",65,0)
 .H 2
"RTN","RGNETTCP",66,0)
 .W "."
"RTN","RGNETTCP",67,0)
 .S:$$STATE=SS LP=99
"RTN","RGNETTCP",68,0)
 I LP<99 W " failed to ",P1,".",!!
"RTN","RGNETTCP",69,0)
 E  W " ",P2,".",!!
"RTN","RGNETTCP",70,0)
 Q
"RTN","RGNETTCP",71,0)
SSERR W "failed: ",$$EC^%ZOSV,!!
"RTN","RGNETTCP",72,0)
 D UNWIND^%ZTER
"RTN","RGNETTCP",73,0)
 Q
"RTN","RGNETTCP",74,0)
 ; Fetch listener configuration
"RTN","RGNETTCP",75,0)
 ; Populates RGCFG with configuration data.
"RTN","RGNETTCP",76,0)
 ; Returns listener IEN
"RTN","RGNETTCP",77,0)
GETCFG(RGCFG) ;
"RTN","RGNETTCP",78,0)
 Q:$D(RGCFG)=11 RGCFG
"RTN","RGNETTCP",79,0)
 S:RGCFG'=+RGCFG RGCFG=+$O(^RGNET(996.5,"B",RGCFG,0))
"RTN","RGNETTCP",80,0)
 I RGCFG D
"RTN","RGNETTCP",81,0)
 .N N0,LP
"RTN","RGNETTCP",82,0)
 .S N0=^RGNET(996.5,RGCFG,0),RGCFG("handler")=$G(^(10))
"RTN","RGNETTCP",83,0)
 .F LP=1:1:5 S RGCFG($P("name^port^uci^disabled^maximum",U,LP))=$P(N0,U,LP)
"RTN","RGNETTCP",84,0)
 Q:$Q RGCFG
"RTN","RGNETTCP",85,0)
 Q
"RTN","RGNETTCP",86,0)
 ; Entry point for GT.M socket dispatch
"RTN","RGNETTCP",87,0)
GTMEP D EN(2,$ZCM)
"RTN","RGNETTCP",88,0)
 Q
"RTN","RGNETTCP",89,0)
 ; Start listener as background process
"RTN","RGNETTCP",90,0)
 ; Returns true if operation was successful.
"RTN","RGNETTCP",91,0)
JOB(RGMODE,RGCFG) ;
"RTN","RGNETTCP",92,0)
 N SUCCESS
"RTN","RGNETTCP",93,0)
 I RGMODE>1 S SUCCESS=0
"RTN","RGNETTCP",94,0)
 E  I '$$GETCFG(.RGCFG) S SUCCESS=0
"RTN","RGNETTCP",95,0)
 E  I RGMODE=1 D
"RTN","RGNETTCP",96,0)
 .X "J EN^RGNETTCP(RGMODE,RGCFG):(:4:RGTDEV:RGTDEV):15"
"RTN","RGNETTCP",97,0)
 .S SUCCESS=$T
"RTN","RGNETTCP",98,0)
 E  I $L(RGCFG("uci")) D
"RTN","RGNETTCP",99,0)
 .X "J EN^RGNETTCP(RGMODE,RGCFG)[RGCFG(""uci"")]"
"RTN","RGNETTCP",100,0)
 .S SUCCESS=$T
"RTN","RGNETTCP",101,0)
 E  D
"RTN","RGNETTCP",102,0)
 .J EN^RGNETTCP(RGMODE,RGCFG)
"RTN","RGNETTCP",103,0)
 .S SUCCESS=$T
"RTN","RGNETTCP",104,0)
 Q:$Q SUCCESS
"RTN","RGNETTCP",105,0)
 Q
"RTN","RGNETTCP",106,0)
 ; Start listener process (primary and secondary)
"RTN","RGNETTCP",107,0)
 ;   RGMODE = Connection type:
"RTN","RGNETTCP",108,0)
 ;     0: primary listener   - dispatches connections
"RTN","RGNETTCP",109,0)
 ;     1: secondary listener - dispatched by primary listener
"RTN","RGNETTCP",110,0)
 ;     2: secondary listener - dispatched by OS
"RTN","RGNETTCP",111,0)
 ;     3: debug listener     - debug mode listener
"RTN","RGNETTCP",112,0)
 ;   RGCFG = Listener name or IEN
"RTN","RGNETTCP",113,0)
EN(RGMODE,RGCFG) ;
"RTN","RGNETTCP",114,0)
 N RGTDEV,RGQUIT,RGRETRY,RGOS,$ET,$ES
"RTN","RGNETTCP",115,0)
 S U="^",DT=$$DT^XLFDT,$ET="D ETRAP1^RGNETTCP"
"RTN","RGNETTCP",116,0)
 D:'$$GETCFG(.RGCFG) RAISE("Unknown listener.")
"RTN","RGNETTCP",117,0)
 Q:RGCFG("disabled")
"RTN","RGNETTCP",118,0)
 S (RGQUIT,RGRETRY)=0,RGOS=$$OS
"RTN","RGNETTCP",119,0)
 D:RGOS<0 RAISE("Unsupported operating system.")
"RTN","RGNETTCP",120,0)
 I RGOS,RGMODE'>1 D BADMODE                                            ; GT.M supports only modes 2 and 3
"RTN","RGNETTCP",121,0)
 I 'RGOS,RGMODE=2 D BADMODE                                            ; Cache does not support mode 2
"RTN","RGNETTCP",122,0)
 Q:'$$STATE(1)                                                         ; Quit if listener already running
"RTN","RGNETTCP",123,0)
 D CLEANUP,STSAVE(0),NULLOPEN,STSAVE(1)                                ; Initialize environment
"RTN","RGNETTCP",124,0)
 D CHPRN(.RGCFG)                                                       ; Change process name
"RTN","RGNETTCP",125,0)
 F  D LISTEN Q:RGQUIT>0!RGMODE                                         ; Main loop
"RTN","RGNETTCP",126,0)
 D STATE(0),STREST(1),^%ZISC,STREST(0),CLEANUP,LOGOUT^XUSRB:$G(DUZ)
"RTN","RGNETTCP",127,0)
 Q
"RTN","RGNETTCP",128,0)
 ; Entry point for interactive debugging
"RTN","RGNETTCP",129,0)
DEBUG N PORT,CFG
"RTN","RGNETTCP",130,0)
 D TITLE^RGUT("Debug Mode Support",$P($T(+2),";",3))
"RTN","RGNETTCP",131,0)
 F  D  Q:$D(CFG)
"RTN","RGNETTCP",132,0)
 .S CFG=$$ENTRY^RGUTLKP(996.5,,"Enter listener name: ")
"RTN","RGNETTCP",133,0)
 .W !
"RTN","RGNETTCP",134,0)
 .Q:CFG'>0
"RTN","RGNETTCP",135,0)
 .D GETCFG(.CFG)
"RTN","RGNETTCP",136,0)
 .I CFG("disabled") W "That listener is disabled.  Try again.",! K CFG
"RTN","RGNETTCP",137,0)
 Q:CFG'>0
"RTN","RGNETTCP",138,0)
 S PORT=$$PMPT("Port","Enter listener port.",CFG("port"))
"RTN","RGNETTCP",139,0)
 Q:U[PORT
"RTN","RGNETTCP",140,0)
 S CFG("port")=PORT
"RTN","RGNETTCP",141,0)
 I $L($T(^%Serenji)),$$ASK^RGUT("Use Serenji Debugger","Y") D  Q
"RTN","RGNETTCP",142,0)
 .N SRJIP,SRJPORT
"RTN","RGNETTCP",143,0)
 .S SRJIP=$$PMPT("Serenji Listener Addr","Enter Serenji listener address",IP)
"RTN","RGNETTCP",144,0)
 .Q:U[SRJIP
"RTN","RGNETTCP",145,0)
 .S SRJPORT=$$PMPT("Serenji Listener Port","Enter Serenji listener port",4321)
"RTN","RGNETTCP",146,0)
 .Q:U[SRJPORT
"RTN","RGNETTCP",147,0)
 .D DEBUG^%Serenji("EN^RGNETTCP(3,.CFG)",SRJIP,SRJPORT)
"RTN","RGNETTCP",148,0)
 W !,"Now listening on port ",CFG("port"),!
"RTN","RGNETTCP",149,0)
 D EN(3,.CFG)
"RTN","RGNETTCP",150,0)
 Q
"RTN","RGNETTCP",151,0)
 ; Prompt for user input
"RTN","RGNETTCP",152,0)
PMPT(PMPT,HELP,DFLT) ;
"RTN","RGNETTCP",153,0)
 N RET
"RTN","RGNETTCP",154,0)
 F  D  Q:$D(RET)
"RTN","RGNETTCP",155,0)
 .W PMPT,": ",$S($D(DFLT):DFLT_"// ",1:"")
"RTN","RGNETTCP",156,0)
 .R RET:$G(DTIME,30)
"RTN","RGNETTCP",157,0)
 .E  S RET=U
"RTN","RGNETTCP",158,0)
 .I $D(DFLT),'$L(RET) S RET=DFLT W DFLT
"RTN","RGNETTCP",159,0)
 .W !
"RTN","RGNETTCP",160,0)
 .I RET["?" W !,HELP,!! K RET
"RTN","RGNETTCP",161,0)
 Q RET
"RTN","RGNETTCP",162,0)
 ; Determine operating system
"RTN","RGNETTCP",163,0)
 ; Returns 0 = Cache, 1 = GT.M, -1 = unknown
"RTN","RGNETTCP",164,0)
OS() N OS
"RTN","RGNETTCP",165,0)
 S OS=$P($G(^%ZOSF("OS")),U)
"RTN","RGNETTCP",166,0)
 Q $S(OS["OpenM":0,OS["GT.M":1,1:-1)
"RTN","RGNETTCP",167,0)
 ; Displays function not available message for GT.M environments
"RTN","RGNETTCP",168,0)
 ; Returns 1 if function not available.
"RTN","RGNETTCP",169,0)
OSCHECK(SL) ;
"RTN","RGNETTCP",170,0)
 Q:'$$OS 0
"RTN","RGNETTCP",171,0)
 W:'$G(SL) "That function is not available for this environment.",!
"RTN","RGNETTCP",172,0)
 Q 1
"RTN","RGNETTCP",173,0)
 ; Main loop
"RTN","RGNETTCP",174,0)
LISTEN N $ET,$ES,RGOUT,RGSTATE,HNDLR
"RTN","RGNETTCP",175,0)
 S $ET="D ETRAP2^RGNETTCP",RGQUIT='$$TCPOPEN,RGOUT=""
"RTN","RGNETTCP",176,0)
 S HNDLR=RGCFG("handler")_"(.RGSTATE)"
"RTN","RGNETTCP",177,0)
 F  Q:$$QUIT  D
"RTN","RGNETTCP",178,0)
 .D TCPUSE
"RTN","RGNETTCP",179,0)
 .D:RGMODE @HNDLR
"RTN","RGNETTCP",180,0)
 .D:'RGMODE WAIT
"RTN","RGNETTCP",181,0)
 .D TCPFLUSH
"RTN","RGNETTCP",182,0)
 D TCPCLOSE
"RTN","RGNETTCP",183,0)
 Q
"RTN","RGNETTCP",184,0)
 ; Wait for connection request, then spawn handler (RGMODE = 0)
"RTN","RGNETTCP",185,0)
WAIT N X
"RTN","RGNETTCP",186,0)
 R X:10
"RTN","RGNETTCP",187,0)
 D:$T JOB(1,.RGCFG)
"RTN","RGNETTCP",188,0)
 Q
"RTN","RGNETTCP",189,0)
 ; Return temp global root
"RTN","RGNETTCP",190,0)
TMPGBL() Q $NA(^TMP("RGNETTCP",$J))
"RTN","RGNETTCP",191,0)
 ; Cleanup environment
"RTN","RGNETTCP",192,0)
CLEANUP K @$$TMPGBL,^XUTL("XQ",$J),@$$LOCKNODE(.RGCFG)
"RTN","RGNETTCP",193,0)
 Q
"RTN","RGNETTCP",194,0)
 ; Returns true if listener should quit
"RTN","RGNETTCP",195,0)
QUIT() S:'RGQUIT RGQUIT=RGRETRY>5
"RTN","RGNETTCP",196,0)
 S:'RGQUIT RGQUIT=+$G(@$$LOCKNODE(.RGCFG))
"RTN","RGNETTCP",197,0)
 I 'RGQUIT,RGMODE=3 S RGQUIT=$$QUIT3
"RTN","RGNETTCP",198,0)
 Q RGQUIT
"RTN","RGNETTCP",199,0)
 ; Allows user to request quit in debug mode
"RTN","RGNETTCP",200,0)
QUIT3() N X
"RTN","RGNETTCP",201,0)
 U $P
"RTN","RGNETTCP",202,0)
 R X#1:0
"RTN","RGNETTCP",203,0)
 D TCPUSE
"RTN","RGNETTCP",204,0)
 Q X=U
"RTN","RGNETTCP",205,0)
 ; Save application state
"RTN","RGNETTCP",206,0)
STSAVE(ST) ;
"RTN","RGNETTCP",207,0)
 D SAVE^XUS1
"RTN","RGNETTCP",208,0)
 K @$$TMPGBL@(ST)
"RTN","RGNETTCP",209,0)
 M @$$TMPGBL@(ST)=^XUTL("XQ",$J)
"RTN","RGNETTCP",210,0)
 Q
"RTN","RGNETTCP",211,0)
 ; Restore application state
"RTN","RGNETTCP",212,0)
STREST(ST) ;
"RTN","RGNETTCP",213,0)
 K ^XUTL("XQ",$J)
"RTN","RGNETTCP",214,0)
 M ^XUTL("XQ",$J)=@$$TMPGBL@(ST)
"RTN","RGNETTCP",215,0)
 K IO
"RTN","RGNETTCP",216,0)
 D RESETVAR^%ZIS
"RTN","RGNETTCP",217,0)
 I ST,$D(IO)#2 D
"RTN","RGNETTCP",218,0)
 .N $ET
"RTN","RGNETTCP",219,0)
 .S $ET="S $EC="""" D NULLOPEN^RGNETTCP"
"RTN","RGNETTCP",220,0)
 .U IO
"RTN","RGNETTCP",221,0)
 Q
"RTN","RGNETTCP",222,0)
 ; Establish null device as default IO device
"RTN","RGNETTCP",223,0)
NULLOPEN N %ZIS,IOP,POP
"RTN","RGNETTCP",224,0)
 S %ZIS="0H",IOP="NULL"
"RTN","RGNETTCP",225,0)
 D ^%ZIS,RAISE("Failed to open null device."):POP
"RTN","RGNETTCP",226,0)
 U IO
"RTN","RGNETTCP",227,0)
 Q
"RTN","RGNETTCP",228,0)
 ; Open TCP listener port
"RTN","RGNETTCP",229,0)
 ; Returns true if successful
"RTN","RGNETTCP",230,0)
TCPOPEN() ;
"RTN","RGNETTCP",231,0)
 N POP
"RTN","RGNETTCP",232,0)
 S POP=0
"RTN","RGNETTCP",233,0)
 I RGMODE=3 D
"RTN","RGNETTCP",234,0)
 .I RGOS D
"RTN","RGNETTCP",235,0)
 ..S RGTDEV="server$"_RGCFG("port")
"RTN","RGNETTCP",236,0)
 ..X "O RGTDEV:(ZLISTEN=RGCFG(""port"")_"":TCP"":attach=""server""):9999:""socket"""
"RTN","RGNETTCP",237,0)
 ..X:$T "U RGTDEV:(nowrap:nodelimiter:ioerror=""ETRAP2^RGNETTCP"")"
"RTN","RGNETTCP",238,0)
 ..S POP='$T
"RTN","RGNETTCP",239,0)
 .E  D
"RTN","RGNETTCP",240,0)
 ..S RGTDEV="|TCP|"_RGCFG("port")
"RTN","RGNETTCP",241,0)
 ..X "O RGTDEV:(:RGCFG(""port""):""DS""):9999"
"RTN","RGNETTCP",242,0)
 ..S POP='$T
"RTN","RGNETTCP",243,0)
 E  I RGMODE D
"RTN","RGNETTCP",244,0)
 .S RGTDEV=$P
"RTN","RGNETTCP",245,0)
 .I RGOS D
"RTN","RGNETTCP",246,0)
 ..S @"$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)"""
"RTN","RGNETTCP",247,0)
 ..X "U RGTDEV:(nowrap:nodelimiter:ioerror=""ETRAP2^RGNETTCP"")"
"RTN","RGNETTCP",248,0)
 E  D
"RTN","RGNETTCP",249,0)
 .I 'RGOS D
"RTN","RGNETTCP",250,0)
 ..S RGTDEV="|TCP|"_RGCFG("port")
"RTN","RGNETTCP",251,0)
 ..X "O RGTDEV:(:RGCFG(""port""):""ADS""):5"
"RTN","RGNETTCP",252,0)
 ..S POP='$T
"RTN","RGNETTCP",253,0)
 Q 'POP
"RTN","RGNETTCP",254,0)
 ; Use TCP listener port
"RTN","RGNETTCP",255,0)
TCPUSE U RGTDEV
"RTN","RGNETTCP",256,0)
 Q
"RTN","RGNETTCP",257,0)
 ; Close TCP listener port
"RTN","RGNETTCP",258,0)
TCPCLOSE C:$D(RGTDEV) RGTDEV
"RTN","RGNETTCP",259,0)
 Q
"RTN","RGNETTCP",260,0)
 ; Return CNT characters from input buffer
"RTN","RGNETTCP",261,0)
 ; CNT = # of characters to return
"RTN","RGNETTCP",262,0)
 ; TMO = Optional timeout in seconds
"RTN","RGNETTCP",263,0)
 ; USE = If true or not specified, call TCPUSE before read
"RTN","RGNETTCP",264,0)
TCPREAD(CNT,TMO,USE) ;
"RTN","RGNETTCP",265,0)
 Q:CNT'>0 ""
"RTN","RGNETTCP",266,0)
 N X
"RTN","RGNETTCP",267,0)
 D:$G(USE,1) TCPUSE
"RTN","RGNETTCP",268,0)
 S TMO=+$G(TMO)
"RTN","RGNETTCP",269,0)
 R X#CNT:TMO
"RTN","RGNETTCP",270,0)
 Q X
"RTN","RGNETTCP",271,0)
 ; Read up to termination sequence
"RTN","RGNETTCP",272,0)
 ; TRM = Read termination sequence (included in returned value)
"RTN","RGNETTCP",273,0)
 ; TMO = Optional timeout in seconds
"RTN","RGNETTCP",274,0)
TCPREADT(TRM,TMO) ;
"RTN","RGNETTCP",275,0)
 N ST,L,X,USE
"RTN","RGNETTCP",276,0)
 S LN="",L=$L(TRM)-1,USE=1
"RTN","RGNETTCP",277,0)
 F  S X=$$TCPREAD(1,.TMO,USE) Q:'$L(X)  D  Q:L<0
"RTN","RGNETTCP",278,0)
 .S LN=LN_X,(TMO,USE)=0
"RTN","RGNETTCP",279,0)
 .S:$E(LN,$L(LN)-L,$L(LN))=TRM L=-1
"RTN","RGNETTCP",280,0)
 Q LN
"RTN","RGNETTCP",281,0)
 ; Read one byte from socket
"RTN","RGNETTCP",282,0)
 ; TMO = Optional timeout in seconds
"RTN","RGNETTCP",283,0)
TCPREADB(TMO) ;
"RTN","RGNETTCP",284,0)
 Q $A($$TCPREAD(1,.TMO))
"RTN","RGNETTCP",285,0)
 ; Write data to socket
"RTN","RGNETTCP",286,0)
 ; All write operations must be done via this method.
"RTN","RGNETTCP",287,0)
 ; This operation is buffered with a write threshold at 1024 bytes.
"RTN","RGNETTCP",288,0)
 ; DATA = Date to write
"RTN","RGNETTCP",289,0)
TCPWRITE(DATA) ;
"RTN","RGNETTCP",290,0)
 S RGOUT=RGOUT_DATA
"RTN","RGNETTCP",291,0)
 D:$L(RGOUT)>1024 TCPFLUSH
"RTN","RGNETTCP",292,0)
 Q
"RTN","RGNETTCP",293,0)
 ; Flush the output buffer
"RTN","RGNETTCP",294,0)
TCPFLUSH Q:'$L(RGOUT)
"RTN","RGNETTCP",295,0)
 D TCPUSE
"RTN","RGNETTCP",296,0)
 W RGOUT,!
"RTN","RGNETTCP",297,0)
 S RGOUT=""
"RTN","RGNETTCP",298,0)
 Q
"RTN","RGNETTCP",299,0)
 ; Write array (local or global) to TCP stream
"RTN","RGNETTCP",300,0)
 ; ARY  = Local or global array reference
"RTN","RGNETTCP",301,0)
 ; EOL  = Line terminator to add (optional)
"RTN","RGNETTCP",302,0)
 ; KILL = If true, kill array after writing (default is false)
"RTN","RGNETTCP",303,0)
ARYOUT(ARY,EOL,KILL) ;
"RTN","RGNETTCP",304,0)
 N ND,LN
"RTN","RGNETTCP",305,0)
 Q:'$L(ARY)
"RTN","RGNETTCP",306,0)
 S ARY=$NA(@ARY)
"RTN","RGNETTCP",307,0)
 S ND=ARY,LN=$QL(ARY),EOL=$G(EOL)
"RTN","RGNETTCP",308,0)
 F  S ND=$Q(@ND) Q:'$L(ND)  Q:$NA(@ND,LN)'=ARY  D TCPWRITE(@ND_EOL)
"RTN","RGNETTCP",309,0)
 K:$G(KILL) @ARY
"RTN","RGNETTCP",310,0)
 Q
"RTN","RGNETTCP",311,0)
 ; Write contents of a file to TCP stream
"RTN","RGNETTCP",312,0)
 ; FIL  = File path
"RTN","RGNETTCP",313,0)
 ; EOL  = Line terminator to add (optional)
"RTN","RGNETTCP",314,0)
 ; KILL = If true, delete the file after writing (default is false)
"RTN","RGNETTCP",315,0)
FILOUT(FIL,EOL,KILL) ;
"RTN","RGNETTCP",316,0)
 N LN
"RTN","RGNETTCP",317,0)
 S EOL=$G(EOL)
"RTN","RGNETTCP",318,0)
 D OPEN^RGUTOS(.FIL,"R")
"RTN","RGNETTCP",319,0)
 F  Q:$$READ^RGUTOS(.LN,FIL)  D TCPWRITE(LN_EOL)
"RTN","RGNETTCP",320,0)
 D CLOSE^RGUTOS(.FIL)
"RTN","RGNETTCP",321,0)
 D:$G(KILL) DELETE^RGUTOS(FIL)
"RTN","RGNETTCP",322,0)
 Q
"RTN","RGNETTCP",323,0)
 ; Throw a bad mode exception
"RTN","RGNETTCP",324,0)
BADMODE D RAISE("Mode not supported for OS.")
"RTN","RGNETTCP",325,0)
 Q
"RTN","RGNETTCP",326,0)
 ; Raise an exception
"RTN","RGNETTCP",327,0)
RAISE(MSG) ;
"RTN","RGNETTCP",328,0)
 D RAISE^RGUTOS(MSG)
"RTN","RGNETTCP",329,0)
 Q
"RTN","RGNETTCP",330,0)
 ; Startup error
"RTN","RGNETTCP",331,0)
ETRAP1 S RGQUIT=1
"RTN","RGNETTCP",332,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","RGNETTCP",333,0)
 Q
"RTN","RGNETTCP",334,0)
 ; Communication error
"RTN","RGNETTCP",335,0)
ETRAP2 S RGRETRY=RGRETRY+1
"RTN","RGNETTCP",336,0)
 S:RGQUIT'>0 RGQUIT=$S(RGRETRY>5:1,'RGMODE:-1,1:0)
"RTN","RGNETTCP",337,0)
 D:RGRETRY=1 ^%ZTER
"RTN","RGNETTCP",338,0)
 D UNWIND^%ZTER
"RTN","RGNETTCP",339,0)
 Q
"RTN","RGNETTCP",340,0)
 ; Lock/Unlock listener
"RTN","RGNETTCP",341,0)
 ; ACT:  1 = lock, 0 = unlock, missing = return status
"RTN","RGNETTCP",342,0)
 ; Returns true if locked, false if not.
"RTN","RGNETTCP",343,0)
STATE(ACT) ;
"RTN","RGNETTCP",344,0)
 N RES,LN
"RTN","RGNETTCP",345,0)
 S LN=$$LOCKNODE(.RGCFG)
"RTN","RGNETTCP",346,0)
 I '$D(ACT) D
"RTN","RGNETTCP",347,0)
 .L +@LN:0
"RTN","RGNETTCP",348,0)
 .S RES='$T
"RTN","RGNETTCP",349,0)
 .L:'RES -@LN
"RTN","RGNETTCP",350,0)
 E  I ACT D
"RTN","RGNETTCP",351,0)
 .L +@LN:1
"RTN","RGNETTCP",352,0)
 .S RES=$T
"RTN","RGNETTCP",353,0)
 E  D
"RTN","RGNETTCP",354,0)
 .L -@LN
"RTN","RGNETTCP",355,0)
 .S RES=0
"RTN","RGNETTCP",356,0)
 Q:$Q RES
"RTN","RGNETTCP",357,0)
 Q
"RTN","RGNETTCP",358,0)
 ; Get global reference for lock node
"RTN","RGNETTCP",359,0)
LOCKNODE(RGCFG) ;
"RTN","RGNETTCP",360,0)
 Q:'$$GETCFG(.RGCFG) ""
"RTN","RGNETTCP",361,0)
 Q $NA(^[RGCFG("uci")]XTMP("RGNETTCP","LN",RGCFG,$S($G(RGMODE):$J,1:0)))
"RTN","RGNETTCP",362,0)
 ; Change process name to reflect active listener
"RTN","RGNETTCP",363,0)
CHPRN(RGCFG) ;
"RTN","RGNETTCP",364,0)
 D SETNM^%ZOSV("RGNETTCP_"_RGCFG("port"))
"RTN","RGNETTCP",365,0)
 Q
"SEC","^DIC",996.5,996.5,0,"AUDIT")
@
"SEC","^DIC",996.5,996.5,0,"DD")
@
"SEC","^DIC",996.5,996.5,0,"DEL")
@
"SEC","^DIC",996.5,996.5,0,"LAYGO")
@
"SEC","^DIC",996.5,996.5,0,"RD")
@
"SEC","^DIC",996.5,996.5,0,"WR")
@
"VER")
8.0^22.0
"^DD",996.5,996.5,0)
FIELD^^4^6
"^DD",996.5,996.5,0,"DDA")
N
"^DD",996.5,996.5,0,"DT")
3150330
"^DD",996.5,996.5,0,"IX","B",996.5,.01)

"^DD",996.5,996.5,0,"NM","NETSERV TCP LISTENER")

"^DD",996.5,996.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",996.5,996.5,.01,1,0)
^.1
"^DD",996.5,996.5,.01,1,1,0)
996.5^B
"^DD",996.5,996.5,.01,1,1,1)
S ^RGNET(996.5,"B",$E(X,1,30),DA)=""
"^DD",996.5,996.5,.01,1,1,2)
K ^RGNET(996.5,"B",$E(X,1,30),DA)
"^DD",996.5,996.5,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",996.5,996.5,.01,21,0)
^^1^1^3150330.090909
"^DD",996.5,996.5,.01,21,1,0)
This is the unique name for the primary listener.
"^DD",996.5,996.5,1,0)
PORT^NJ5,0^^0;2^K:+X'=X!(X>32767)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,1,3)
Enter the TCP port number.
"^DD",996.5,996.5,1,21,0)
^^2^2^3150330.090954
"^DD",996.5,996.5,1,21,1,0)
This is the TCP port that the primary listener uses to service connection
"^DD",996.5,996.5,1,21,2,0)
requests.
"^DD",996.5,996.5,1,"DT")
3150329
"^DD",996.5,996.5,2,0)
UCI^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",996.5,996.5,2,3)
Enter the target UCI (none = current).
"^DD",996.5,996.5,2,21,0)
^^2^2^3150330.091148
"^DD",996.5,996.5,2,21,1,0)
This is the UCI where the primary listener should be spawned.  If not specified,
"^DD",996.5,996.5,2,21,2,0)
the primary listener will reside in the same UCI where it was initially spawned.
"^DD",996.5,996.5,2,"DT")
3150329
"^DD",996.5,996.5,3,0)
DISABLE^S^0:NO;1:YES;^0;4^Q
"^DD",996.5,996.5,3,3)
Enter YES to disable the listener.
"^DD",996.5,996.5,3,21,0)
^^2^2^3150330.091254
"^DD",996.5,996.5,3,21,1,0)
If set to YES, attempts to spawn a primary or secondary listener will fail.
"^DD",996.5,996.5,3,21,2,0)
This has no impact on currently running listeners.
"^DD",996.5,996.5,3,"DT")
3150330
"^DD",996.5,996.5,4,0)
MAXIMUM^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,4,3)
Enter the maximum number of secondary listeners.
"^DD",996.5,996.5,4,21,0)
^.001^3^3^3150330^
"^DD",996.5,996.5,4,21,1,0)
This sets the maximum allowable number of secondary listeners that may be 
"^DD",996.5,996.5,4,21,2,0)
spawned by the primary listener.  When this number is exceeded, additional
"^DD",996.5,996.5,4,21,3,0)
connection requests will be denied.
"^DD",996.5,996.5,4,"DT")
3150330
"^DD",996.5,996.5,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.5,996.5,10,3)
Enter entry point for I/O handler as TAG^ROUTINE.
"^DD",996.5,996.5,10,21,0)
^^7^7^3150330.091725
"^DD",996.5,996.5,10,21,1,0)
This is the entry point (as TAG^ROUTINE) that will service an established
"^DD",996.5,996.5,10,21,2,0)
connection.  The handler should relinquish control back to the caller after
"^DD",996.5,996.5,10,21,3,0)
completing each request/response cycle to allow the caller to determine if
"^DD",996.5,996.5,10,21,4,0)
the connection should be terminated.  The handler may request termination
"^DD",996.5,996.5,10,21,5,0)
by setting RGQUIT to a nonzero value.  Otherwise, unless an external request
"^DD",996.5,996.5,10,21,6,0)
to terminate the connection has been received, the handler will be called
"^DD",996.5,996.5,10,21,7,0)
again.
"^DD",996.5,996.5,10,"DT")
3150330
"^DIC",996.5,996.5,0)
NETSERV TCP LISTENER^996.5
"^DIC",996.5,996.5,0,"GL")
^RGNET(996.5,
"^DIC",996.5,996.5,"%D",0)
^1.001^2^2^3150330^
"^DIC",996.5,996.5,"%D",1,0)
Each entry in this file represents a configuration for a listener that will
"^DIC",996.5,996.5,"%D",2,0)
process requests on a given TCP port via the specified handler.
"^DIC",996.5,"B","NETSERV TCP LISTENER",996.5)

**INSTALL NAME**
NETSERV WEB SERVER 1.0
"BLD",8508,0)
NETSERV WEB SERVER 1.0^NETWORK SERVICES^0^3150407^n
"BLD",8508,1,0)
^^3^3^3150401.074908
"BLD",8508,1,1,0)
This is an implementation of a Web Server that uses the NETSERV connection
"BLD",8508,1,2,0)
manager.  It can be used not only to serve web pages, but also for web
"BLD",8508,1,3,0)
service endpoints for SOAP or REST interfaces.
"BLD",8508,4,0)
^9.64PA^996.5^3
"BLD",8508,4,996.5,0)
996.5
"BLD",8508,4,996.5,222)
n^y^f^^n^^y^o^n
"BLD",8508,4,996.5,224)
I $G(^RGNET(996.5,Y,10))["^RGNETW"
"BLD",8508,4,996.51,0)
996.51
"BLD",8508,4,996.51,222)
y^y^f^^n^^y^o^n
"BLD",8508,4,996.52,0)
996.52
"BLD",8508,4,996.52,222)
y^y^f^^n^^y^o^n
"BLD",8508,4,996.52,224)
I $G(^RGNET(996.52,Y,10))["^RGNETW"
"BLD",8508,4,"B",996.5,996.5)

"BLD",8508,4,"B",996.51,996.51)

"BLD",8508,4,"B",996.52,996.52)

"BLD",8508,6.3)
51
"BLD",8508,"ABPKG")
n
"BLD",8508,"KRN",0)
^9.67PA^779.2^20
"BLD",8508,"KRN",.4,0)
.4
"BLD",8508,"KRN",.401,0)
.401
"BLD",8508,"KRN",.402,0)
.402
"BLD",8508,"KRN",.403,0)
.403
"BLD",8508,"KRN",.5,0)
.5
"BLD",8508,"KRN",.84,0)
.84
"BLD",8508,"KRN",3.6,0)
3.6
"BLD",8508,"KRN",3.8,0)
3.8
"BLD",8508,"KRN",9.2,0)
9.2
"BLD",8508,"KRN",9.8,0)
9.8
"BLD",8508,"KRN",9.8,"NM",0)
^9.68A^3^2
"BLD",8508,"KRN",9.8,"NM",2,0)
RGNETWWW^^0^B84272769
"BLD",8508,"KRN",9.8,"NM",3,0)
RGNETWRR^^0^B31409526
"BLD",8508,"KRN",9.8,"NM","B","RGNETWRR",3)

"BLD",8508,"KRN",9.8,"NM","B","RGNETWWW",2)

"BLD",8508,"KRN",19,0)
19
"BLD",8508,"KRN",19.1,0)
19.1
"BLD",8508,"KRN",101,0)
101
"BLD",8508,"KRN",409.61,0)
409.61
"BLD",8508,"KRN",771,0)
771
"BLD",8508,"KRN",779.2,0)
779.2
"BLD",8508,"KRN",870,0)
870
"BLD",8508,"KRN",8989.51,0)
8989.51
"BLD",8508,"KRN",8989.52,0)
8989.52
"BLD",8508,"KRN",8994,0)
8994
"BLD",8508,"KRN","B",.4,.4)

"BLD",8508,"KRN","B",.401,.401)

"BLD",8508,"KRN","B",.402,.402)

"BLD",8508,"KRN","B",.403,.403)

"BLD",8508,"KRN","B",.5,.5)

"BLD",8508,"KRN","B",.84,.84)

"BLD",8508,"KRN","B",3.6,3.6)

"BLD",8508,"KRN","B",3.8,3.8)

"BLD",8508,"KRN","B",9.2,9.2)

"BLD",8508,"KRN","B",9.8,9.8)

"BLD",8508,"KRN","B",19,19)

"BLD",8508,"KRN","B",19.1,19.1)

"BLD",8508,"KRN","B",101,101)

"BLD",8508,"KRN","B",409.61,409.61)

"BLD",8508,"KRN","B",771,771)

"BLD",8508,"KRN","B",779.2,779.2)

"BLD",8508,"KRN","B",870,870)

"BLD",8508,"KRN","B",8989.51,8989.51)

"BLD",8508,"KRN","B",8989.52,8989.52)

"BLD",8508,"KRN","B",8994,8994)

"BLD",8508,"QUES",0)
^9.62^^
"BLD",8508,"REQB",0)
^9.611^1^1
"BLD",8508,"REQB",1,0)
NETSERV CONNECTION MANAGER 1.0^2
"BLD",8508,"REQB","B","NETSERV CONNECTION MANAGER 1.0",1)

"DATA",996.5,1,0)
HTTP ENDPOINT^9080^^0^^
"DATA",996.5,1,10)
NETSERV^RGNETWWW
"DATA",996.51,100,0)
100^Continue
"DATA",996.51,101,0)
101^Switching Protocols
"DATA",996.51,102,0)
102^Processing (WebDAV)
"DATA",996.51,200,0)
200^OK
"DATA",996.51,201,0)
201^Created
"DATA",996.51,202,0)
202^Accepted
"DATA",996.51,203,0)
203^Non-Authoritative Information
"DATA",996.51,204,0)
204^No Content
"DATA",996.51,205,0)
205^Reset Content
"DATA",996.51,206,0)
206^Partial Content
"DATA",996.51,207,0)
207^Multi-Status (WebDAV)
"DATA",996.51,208,0)
208^Already Reported (WebDAV)
"DATA",996.51,226,0)
226^IM Used
"DATA",996.51,300,0)
300^Multiple Choices
"DATA",996.51,301,0)
301^Moved Permanently
"DATA",996.51,302,0)
302^Found
"DATA",996.51,303,0)
303^See Other
"DATA",996.51,304,0)
304^Not Modified
"DATA",996.51,305,0)
305^Use Proxy
"DATA",996.51,306,0)
306^(Unused)
"DATA",996.51,307,0)
307^Temporary Redirect
"DATA",996.51,308,0)
308^Permanent Redirect (experiemental)
"DATA",996.51,400,0)
400^Bad Request
"DATA",996.51,401,0)
401^Unauthorized
"DATA",996.51,402,0)
402^Payment Required
"DATA",996.51,403,0)
403^Forbidden
"DATA",996.51,404,0)
404^Not Found
"DATA",996.51,405,0)
405^Method Not Allowed
"DATA",996.51,406,0)
406^Not Acceptable
"DATA",996.51,407,0)
407^Proxy Authentication Required
"DATA",996.51,408,0)
408^Request Timeout
"DATA",996.51,409,0)
409^Conflict
"DATA",996.51,410,0)
410^Gone
"DATA",996.51,411,0)
411^Length Required
"DATA",996.51,412,0)
412^Precondition Failed
"DATA",996.51,413,0)
413^Request Entity Too Large
"DATA",996.51,414,0)
414^Request-URI Too Long
"DATA",996.51,415,0)
415^Unsupported Media Type
"DATA",996.51,416,0)
416^Requested Range Not Satisfiable
"DATA",996.51,417,0)
417^Expectation Failed
"DATA",996.51,418,0)
418^I'm a teapot (RFC 2324)
"DATA",996.51,420,0)
420^Enhance Your Calm (Twitter)
"DATA",996.51,422,0)
422^Unprocessable Entity (WebDAV)
"DATA",996.51,423,0)
423^Locked (WebDAV)
"DATA",996.51,424,0)
424^Failed Dependency (WebDAV)
"DATA",996.51,425,0)
425^Reserved for WebDAV
"DATA",996.51,426,0)
426^Upgrade Required
"DATA",996.51,428,0)
428^Precondition Required
"DATA",996.51,429,0)
429^Too Many Requests
"DATA",996.51,431,0)
431^Request Header Fields Too Large
"DATA",996.51,444,0)
444^No Response (Nginx)
"DATA",996.51,449,0)
449^Retry With (Microsoft)
"DATA",996.51,450,0)
450^Blocked by Windows Parental Controls (Microsoft)
"DATA",996.51,499,0)
499^Client Closed Request (Nginx)
"DATA",996.51,500,0)
500^Internal Server Error
"DATA",996.51,501,0)
501^Not Implemented
"DATA",996.51,502,0)
502^Bad Gateway
"DATA",996.51,503,0)
503^Service Unavailable
"DATA",996.51,504,0)
504^Gateway Timeout
"DATA",996.51,505,0)
505^HTTP Version Not Supported
"DATA",996.51,506,0)
506^Variant Also Negotiates (Experimental)
"DATA",996.51,507,0)
507^Insufficient Storage (WebDAV)
"DATA",996.51,508,0)
508^Loop Detected (WebDAV)
"DATA",996.51,509,0)
509^Bandwidth Limit Exceeded (Apache)
"DATA",996.51,510,0)
510^Not Extended
"DATA",996.51,511,0)
511^Network Authentication Required
"DATA",996.51,598,0)
598^Network read timeout error
"DATA",996.51,599,0)
599^Network connect timeout error
"DATA",996.52,6,0)
/^GET^
"DATA",996.52,6,10)
GREETING^RGNETWWW
"DATA",996.52,6,99,0)
^996.5299^1^1^3150330.181114
"DATA",996.52,6,99,1,0)
This is the root endpoint for this service.
"DATA",996.52,7,0)
UTILITY/RTN^GET^BASIC
"DATA",996.52,7,10)
RTN^RGNETWRR
"DATA",996.52,8,0)
UTILITY/RPC^GET^BASIC
"DATA",996.52,8,10)
RPC^RGNETWRR
"FIA",996.5)
NETSERV TCP LISTENER
"FIA",996.5,0)
^RGNET(996.5,
"FIA",996.5,0,0)
996.5
"FIA",996.5,0,1)
n^y^f^^n^^y^o^n
"FIA",996.5,0,10)

"FIA",996.5,0,11)
I $G(^RGNET(996.5,Y,10))["^RGNETW"
"FIA",996.5,0,"RLRO")

"FIA",996.5,0,"VR")
1.0^NETSERV WEB SERVER
"FIA",996.5,996.5)
0
"FIA",996.51)
NETSERV HTTP STATUS
"FIA",996.51,0)
^RGNET(996.51,
"FIA",996.51,0,0)
996.51
"FIA",996.51,0,1)
y^y^f^^n^^y^o^n
"FIA",996.51,0,10)

"FIA",996.51,0,11)

"FIA",996.51,0,"RLRO")

"FIA",996.51,0,"VR")
1.0^NETSERV WEB SERVER
"FIA",996.51,996.51)
0
"FIA",996.52)
NETSERV HTTP ENDPOINT
"FIA",996.52,0)
^RGNET(996.52,
"FIA",996.52,0,0)
996.52
"FIA",996.52,0,1)
y^y^f^^n^^y^o^n
"FIA",996.52,0,10)

"FIA",996.52,0,11)
I $G(^RGNET(996.52,Y,10))["^RGNETW"
"FIA",996.52,0,"RLRO")

"FIA",996.52,0,"VR")
1.0^NETSERV WEB SERVER
"FIA",996.52,996.52)
0
"FIA",996.52,996.5299)
0
"IX",996.52,996.52,"C",0)
996.52^C^Compound index by METHOD and URL.^MU^^R^IR^I^996.52^^^^^LS
"IX",996.52,996.52,"C",1)
S ^RGNET(996.52,"C",X(1),X(2),DA)=$$TOPTRN^RGNETWWW(X(2))
"IX",996.52,996.52,"C",2)
K ^RGNET(996.52,"C",X(1),X(2),DA)
"IX",996.52,996.52,"C",2.5)
K ^RGNET(996.52,"C")
"IX",996.52,996.52,"C",11.1,0)
^.114IA^2^2
"IX",996.52,996.52,"C",11.1,1,0)
1^F^996.52^1^10^1^F
"IX",996.52,996.52,"C",11.1,2,0)
2^F^996.52^.01^150^2^F
"MBREQ")
1
"PKG",225,-1)
1^1
"PKG",225,0)
NETWORK SERVICES^RGNE^Network services
"PKG",225,20,0)
^9.402P^^
"PKG",225,22,0)
^9.49I^1^1
"PKG",225,22,1,0)
1.0^3150407
"PKG",225,22,1,1,0)
^^3^3^3150407
"PKG",225,22,1,1,1,0)
This is an implementation of a Web Server that uses the NETSERV connection
"PKG",225,22,1,1,2,0)
manager.  It can be used not only to serve web pages, but also for web
"PKG",225,22,1,1,3,0)
service endpoints for SOAP or REST interfaces.
"PKG",225,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","RGNETWRR")
0^3^B31409526
"RTN","RGNETWRR",1,0)
RGNETWRR ;RI/CBMI/DKM - Web endpoint for RPC and routine lookup ;01-Apr-2015 11:20;DKM
"RTN","RGNETWRR",2,0)
 ;;1.0;RGSERV WEB SERVER;;1-Apr-2015;Build 51
"RTN","RGNETWRR",3,0)
 ;=================================================================
"RTN","RGNETWRR",4,0)
 ; RPC lookup entry point
"RTN","RGNETWRR",5,0)
RPC N RPC,RPCX,RTN,TAG,IEN,CCH,LN,X,Y,Z
"RTN","RGNETWRR",6,0)
 S Y="Remote Procedure Inquiry ("_$$UCI^RGUTOS(1)_")"
"RTN","RGNETWRR",7,0)
 D ADDCSS
"RTN","RGNETWRR",8,0)
 D BODY("<title>"_Y_"</title>")
"RTN","RGNETWRR",9,0)
 D BODY("<h1>"_Y_"</h1><br>")
"RTN","RGNETWRR",10,0)
 D BODY("<form method=GET action='RPC'>")
"RTN","RGNETWRR",11,0)
 D BODY("RPC Name: ")
"RTN","RGNETWRR",12,0)
 D BODY("<input name='NAME' type=text autofocus></input>")
"RTN","RGNETWRR",13,0)
 D BODY("<input type=submit value='Search'>")
"RTN","RGNETWRR",14,0)
 D BODY("</form>")
"RTN","RGNETWRR",15,0)
 D BODY("<br><div class='content'/>")
"RTN","RGNETWRR",16,0)
 S RPC=$$GETPARAM^RGNETWWW("NAME"),RPCX=RPC,LN=$L(RPCX)
"RTN","RGNETWRR",17,0)
 Q:'LN
"RTN","RGNETWRR",18,0)
 D BODY("<table>")
"RTN","RGNETWRR",19,0)
 F X="NAME","ENTRY POINT","RETURN TYPE","WRAP","DESCRIPTION" D
"RTN","RGNETWRR",20,0)
 .D BODY("<th>"_X_"</th>")
"RTN","RGNETWRR",21,0)
 F  D  S RPCX=$O(^XWB(8994,"B",RPCX)) Q:$E(RPCX,1,LN)'=RPC
"RTN","RGNETWRR",22,0)
 .F IEN=0:0 S IEN=$O(^XWB(8994,"B",RPCX,IEN)) Q:'IEN  D
"RTN","RGNETWRR",23,0)
 ..D BODY("<tr bgcolor=#"_$$COLOR(.CCH)_">")
"RTN","RGNETWRR",24,0)
 ..S Y=$G(^XWB(8994,IEN,0)),RTN=$P(Y,U,3),TAG=$P(Y,U,2)
"RTN","RGNETWRR",25,0)
 ..D CELL($P(Y,U))
"RTN","RGNETWRR",26,0)
 ..D CELL("<a target='"_$$UCI^RGUTOS(1)_":RTN' href='RTN?NAME="_TAG_U_RTN_$S($L(TAG):"#"_TAG,1:"")_"'>"_$P(Y,U,2,3)_"</a>",1)
"RTN","RGNETWRR",27,0)
 ..D SET($P(Y,U,4),8994,.04)
"RTN","RGNETWRR",28,0)
 ..D SET($P(Y,U,8),8994,.08)
"RTN","RGNETWRR",29,0)
 ..D BODY("<td>")
"RTN","RGNETWRR",30,0)
 ..; Output RPC Description
"RTN","RGNETWRR",31,0)
 ..S Z=0
"RTN","RGNETWRR",32,0)
 ..F X=0:0 S X=$O(^XWB(8994,IEN,1,X)) Q:'X  S Y=$$ESCAPE(^(X,0)) D
"RTN","RGNETWRR",33,0)
 ...I 'Z D
"RTN","RGNETWRR",34,0)
 ....D BODY("<table><tr><td><br><pre>")
"RTN","RGNETWRR",35,0)
 ....S Z=1
"RTN","RGNETWRR",36,0)
 ...D BODY(Y)
"RTN","RGNETWRR",37,0)
 ..D:Z BODY("</pre></td></tr></table>")
"RTN","RGNETWRR",38,0)
 ..; Output Parameter Descriptions
"RTN","RGNETWRR",39,0)
 ..S Z=0
"RTN","RGNETWRR",40,0)
 ..F X=0:0 S X=$O(^XWB(8994,IEN,2,X)) Q:'X  S Y=$$ESCAPE(^(X,0)) D
"RTN","RGNETWRR",41,0)
 ...I 'Z D
"RTN","RGNETWRR",42,0)
 ....D BODY("<table>")
"RTN","RGNETWRR",43,0)
 ....F Z="NAME","TYPE","DESCRIPTION" D BODY("<th>"_Z_"</th>")
"RTN","RGNETWRR",44,0)
 ....S Z=1
"RTN","RGNETWRR",45,0)
 ...D BODY("<tr>")
"RTN","RGNETWRR",46,0)
 ...D CELL($P(Y,U),1)
"RTN","RGNETWRR",47,0)
 ...D SET($P(Y,U,2),8994.02,.02)
"RTN","RGNETWRR",48,0)
 ...D BODY("<td><br><pre>")
"RTN","RGNETWRR",49,0)
 ...F Y=0:0 S Y=$O(^XWB(8994,IEN,2,X,1,Y)) Q:'Y  D BODY($$ESCAPE(^(Y,0))) S Z=2
"RTN","RGNETWRR",50,0)
 ...D:Z'=2 BODY("none")
"RTN","RGNETWRR",51,0)
 ...D BODY("</pre></td></tr>")
"RTN","RGNETWRR",52,0)
 ..D:Z BODY("</table>")
"RTN","RGNETWRR",53,0)
 ..; Output Return Description
"RTN","RGNETWRR",54,0)
 ..S Z=0
"RTN","RGNETWRR",55,0)
 ..F X=0:0 S X=$O(^XWB(8994,IEN,3,X)) Q:'X  S Y=$$ESCAPE(^(X,0)) D
"RTN","RGNETWRR",56,0)
 ...I 'Z D
"RTN","RGNETWRR",57,0)
 ....D BODY("<table><th>RETURN VALUE</th><tr><td><br><pre>")
"RTN","RGNETWRR",58,0)
 ....S Z=1
"RTN","RGNETWRR",59,0)
 ...D BODY(Y)
"RTN","RGNETWRR",60,0)
 ..D:Z BODY("</pre></td></tr></table>")
"RTN","RGNETWRR",61,0)
 ..D BODY("</td></tr>")
"RTN","RGNETWRR",62,0)
 D BODY("</table></div>")
"RTN","RGNETWRR",63,0)
 Q
"RTN","RGNETWRR",64,0)
 ; Routine lookup endpoint
"RTN","RGNETWRR",65,0)
RTN N RTN,TAG,BLD,LN,X,X1,X2,XL,XP,Y
"RTN","RGNETWRR",66,0)
 S Y=$$UCI^RGUTOS(1),X="Routine Inquiry ("_Y_")"
"RTN","RGNETWRR",67,0)
 S RTN=$$GETPARAM^RGNETWWW("NAME"),TAG=" "
"RTN","RGNETWRR",68,0)
 D ADDCSS
"RTN","RGNETWRR",69,0)
 D:'$L(RTN) BODY("<title>"_X_"</title>")
"RTN","RGNETWRR",70,0)
 D:$L(RTN) BODY("<title>"_Y_": "_RTN_"</title>")
"RTN","RGNETWRR",71,0)
 D BODY("<h1>"_X_"</h1><br>")
"RTN","RGNETWRR",72,0)
 D BODY("<form method=GET action='RTN'>")
"RTN","RGNETWRR",73,0)
 D BODY("Routine Name: ")
"RTN","RGNETWRR",74,0)
 D BODY("<input name='NAME' type=text autofocus value='"_RTN_"'></input>")
"RTN","RGNETWRR",75,0)
 D BODY("<input type=submit value='Search'>")
"RTN","RGNETWRR",76,0)
 D BODY("</form>")
"RTN","RGNETWRR",77,0)
 D BODY("<br><div class='content highlight'>")
"RTN","RGNETWRR",78,0)
 Q:'$L(RTN)
"RTN","RGNETWRR",79,0)
 S:RTN[U TAG=$P(RTN,U),RTN=$P(RTN,U,2)
"RTN","RGNETWRR",80,0)
 I '$$TEST^RGUTRTN(RTN) D  Q
"RTN","RGNETWRR",81,0)
 .D BODY("<h2>Routine not found.</h2>")
"RTN","RGNETWRR",82,0)
 I '$L($T(+1^@RTN)) D  Q
"RTN","RGNETWRR",83,0)
 .D BODY("<h2>Source code not found.</h2>")
"RTN","RGNETWRR",84,0)
 D BODY("<pre>")
"RTN","RGNETWRR",85,0)
 F LN=1:1 S X=$T(+LN^@RTN) Q:'$L(X)  D
"RTN","RGNETWRR",86,0)
 .S X1=$P(X," "),X2=$P(X," ",2,9999)
"RTN","RGNETWRR",87,0)
 .S XP=$P(X1,"(",2,999),X1=$P(X1,"("),XL=$L(X1),BLD=X1=TAG
"RTN","RGNETWRR",88,0)
 .S:$L(XP) XP="("_XP
"RTN","RGNETWRR",89,0)
 .D:XL BODY("<a NAME='"_X1_"'></a>")
"RTN","RGNETWRR",90,0)
 .S X1=$$LJ^XLFSTR(X1_XP,8)
"RTN","RGNETWRR",91,0)
 .S:BLD X1="<span class='bold'>"_$E(X1,1,XL)_"</span>"_$E(X1,XL+1,999)
"RTN","RGNETWRR",92,0)
 .D ADDLNK(.X2)
"RTN","RGNETWRR",93,0)
 .S X2=$TR($$ESCAPE^RGNETWWW(X2),$C(1,2),"<>")
"RTN","RGNETWRR",94,0)
 .D BODY(X1_" "_X2)
"RTN","RGNETWRR",95,0)
 D BODY("</pre></div>")
"RTN","RGNETWRR",96,0)
 Q
"RTN","RGNETWRR",97,0)
ADDCSS D BODY("<style>")
"RTN","RGNETWRR",98,0)
 D BODY("body {overflow:hidden}")
"RTN","RGNETWRR",99,0)
 D BODY("input[type=submit] {background:none}")
"RTN","RGNETWRR",100,0)
 D BODY("td {vertical-align: middle}")
"RTN","RGNETWRR",101,0)
 D BODY(".content {position:absolute;top:120px;bottom:0;left:0;right:0;overflow:auto;padding:2px;margin:5px}")
"RTN","RGNETWRR",102,0)
 D BODY(".bold {font-weight:bold;color:red}")
"RTN","RGNETWRR",103,0)
 D BODY(".highlight {background:antiquewhite}")
"RTN","RGNETWRR",104,0)
 D BODY("table {width:100%}")
"RTN","RGNETWRR",105,0)
 D BODY("table, th, td, .highlight {border:1px solid black}")
"RTN","RGNETWRR",106,0)
 D BODY("</style>")
"RTN","RGNETWRR",107,0)
 Q
"RTN","RGNETWRR",108,0)
ADDLNK(TXT) ;
"RTN","RGNETWRR",109,0)
 N P,R,S,C,Q,E,E1,B,PC
"RTN","RGNETWRR",110,0)
 S S=0,Q=0,R=0,E=""
"RTN","RGNETWRR",111,0)
 F P=1:1 D  Q:'$L(C)
"RTN","RGNETWRR",112,0)
 .S C=$E(TXT,P)
"RTN","RGNETWRR",113,0)
 .I C="""" D  Q
"RTN","RGNETWRR",114,0)
 ..I Q,$E(TXT,P+1)="""" S P=P+1 Q
"RTN","RGNETWRR",115,0)
 ..S Q='Q
"RTN","RGNETWRR",116,0)
 .Q:Q
"RTN","RGNETWRR",117,0)
 .I C=";" S P=99999 Q
"RTN","RGNETWRR",118,0)
 .I C="(" S R=R+1
"RTN","RGNETWRR",119,0)
 .I C=")",R S R=R-1
"RTN","RGNETWRR",120,0)
 .D @("AL"_S)
"RTN","RGNETWRR",121,0)
 Q
"RTN","RGNETWRR",122,0)
 ; Looking for branch command
"RTN","RGNETWRR",123,0)
AL0 S B="DGdg"[C
"RTN","RGNETWRR",124,0)
 S:" ."'[C S=1
"RTN","RGNETWRR",125,0)
 Q
"RTN","RGNETWRR",126,0)
 ; Postconditional?
"RTN","RGNETWRR",127,0)
AL1 S PC=C=":",S=$S(PC:3,C=" ":3-B,1:99)
"RTN","RGNETWRR",128,0)
 Q
"RTN","RGNETWRR",129,0)
 ; Collect branch target
"RTN","RGNETWRR",130,0)
AL2 S:'$L(E) E1=P
"RTN","RGNETWRR",131,0)
 I $L(C),"^%"[C!(C?1AN) S E=E_C Q
"RTN","RGNETWRR",132,0)
 D ALX
"RTN","RGNETWRR",133,0)
 S S=$S(R:3,C=",":2,C=" ":0,1:99)
"RTN","RGNETWRR",134,0)
 Q
"RTN","RGNETWRR",135,0)
 ; Expression
"RTN","RGNETWRR",136,0)
AL3 I C=" ",PC S PC=0,S=$S(B:2,1:3)
"RTN","RGNETWRR",137,0)
 E  S S=$S(C="$":4,C=" ":0,1:3)
"RTN","RGNETWRR",138,0)
 Q
"RTN","RGNETWRR",139,0)
 ; Extrinsic?
"RTN","RGNETWRR",140,0)
AL4 S S=$S(C="$":5,C=" ":0,1:3)
"RTN","RGNETWRR",141,0)
 Q
"RTN","RGNETWRR",142,0)
 ; Extrinsic EP
"RTN","RGNETWRR",143,0)
AL5 S:'$L(E) E1=P
"RTN","RGNETWRR",144,0)
 I "^%"[C!(C?1AN) S E=E_C Q
"RTN","RGNETWRR",145,0)
 D ALX
"RTN","RGNETWRR",146,0)
 S S=$S(C=" ":0,1:3)
"RTN","RGNETWRR",147,0)
 Q
"RTN","RGNETWRR",148,0)
 ; Bad syntax
"RTN","RGNETWRR",149,0)
AL99 S P=99999
"RTN","RGNETWRR",150,0)
 Q
"RTN","RGNETWRR",151,0)
 ; Add a link
"RTN","RGNETWRR",152,0)
ALX Q:'$L(E)
"RTN","RGNETWRR",153,0)
 S E=$S(E[U:$P(E,U,1,2),1:E_U_RTN)
"RTN","RGNETWRR",154,0)
 S:E["%" E=$$SUBST^RGUT(E,"%","%25")
"RTN","RGNETWRR",155,0)
 S E=$C(1)_"a href='RTN?NAME="_E_"#"_$P(E,U)_"'"_$C(2),TXT=$E(TXT,1,E1-1)_E_$E(TXT,E1,P-1)_$C(1)_"/a"_$C(2)_$E(TXT,P,9999),P=P+$L(E)+4,E=""
"RTN","RGNETWRR",156,0)
 Q
"RTN","RGNETWRR",157,0)
BODY(X) D ADD^RGNETWWW(X_$C(13,10))
"RTN","RGNETWRR",158,0)
 Q
"RTN","RGNETWRR",159,0)
CELL(X,C) ;
"RTN","RGNETWRR",160,0)
 D BODY("<td align="_$S($G(C):"center",1:"left")_">")
"RTN","RGNETWRR",161,0)
 D BODY(X)
"RTN","RGNETWRR",162,0)
 D BODY("</td>")
"RTN","RGNETWRR",163,0)
 Q
"RTN","RGNETWRR",164,0)
SET(VAL,FIL,FLD) ;
"RTN","RGNETWRR",165,0)
 D CELL($$SET^RGUT(+VAL,$P($G(^DD(FIL,FLD,0)),U,3)_";0:UNKNOWN"),1)
"RTN","RGNETWRR",166,0)
 Q
"RTN","RGNETWRR",167,0)
 ; Return a rotating palette of pastel colors
"RTN","RGNETWRR",168,0)
 ;   CCH = Last color used.
"RTN","RGNETWRR",169,0)
 ;   Returns next color in sequence.
"RTN","RGNETWRR",170,0)
COLOR(CCH) ;
"RTN","RGNETWRR",171,0)
 ;S CCH=$S($G(CCH)="":"FFFFCC",CCH="FFCCFF":"FFCCCC",CCH="CCCCFF":"FFFFCC",1:$E(CCH,5,6)_$E(CCH,1,4))
"RTN","RGNETWRR",172,0)
 ;S CCH=$S($G(CCH)="":"FFFFCC",1:$E(CCH,5,6)_$E(CCH,1,4))
"RTN","RGNETWRR",173,0)
 S CCH=$S($G(CCH)="":"CCFFFF",CCH="FFFFCC":"CCCCFF",CCH="FFCCCC":"CCFFFF",1:$E(CCH,5,6)_$E(CCH,1,4))
"RTN","RGNETWRR",174,0)
 Q CCH
"RTN","RGNETWRR",175,0)
ESCAPE(X) ;
"RTN","RGNETWRR",176,0)
 Q $$ESCAPE^RGNETWWW(X)
"RTN","RGNETWWW")
0^2^B84272769
"RTN","RGNETWWW",1,0)
RGNETWWW ;RI/CBMI/DKM - HTTP support ;07-Apr-2015 20:21;DKM
"RTN","RGNETWWW",2,0)
 ;;1.0;NETWORK SERVICES;;14-March-2014;Build 51
"RTN","RGNETWWW",3,0)
 ;=================================================================
"RTN","RGNETWWW",4,0)
 ; This is the TCP I/O handler entry point
"RTN","RGNETWWW",5,0)
NETSERV(DUMMY) ;
"RTN","RGNETWWW",6,0)
 D WRITEALL($$PROCESS("$$TCPSTRM(.LN)"))
"RTN","RGNETWWW",7,0)
 S RGQUIT=RGMODE'=3
"RTN","RGNETWWW",8,0)
 Q
"RTN","RGNETWWW",9,0)
 ; Entry point where request is in an array.
"RTN","RGNETWWW",10,0)
 ;  SRCARY = Array reference.  Note that the array contents will be destroyed.
"RTN","RGNETWWW",11,0)
 ;  Returns the global reference where the response is stored.
"RTN","RGNETWWW",12,0)
ENTRYARY(SRCARY) ;
"RTN","RGNETWWW",13,0)
 Q $$PROCESS("$$ARYSTRM(.LN,""SRCARY"")")
"RTN","RGNETWWW",14,0)
 ; Entry point for processing a request.  By using a stream,
"RTN","RGNETWWW",15,0)
 ; we can process requests from sources other than a TCP
"RTN","RGNETWWW",16,0)
 ; stream.
"RTN","RGNETWWW",17,0)
 ;   SOURCE = Extrinsic that will act as an input stream for reading the request.
"RTN","RGNETWWW",18,0)
PROCESS(SOURCE) ;
"RTN","RGNETWWW",19,0)
 N RGNETREQ,RGNETRSP
"RTN","RGNETWWW",20,0)
 D INIT,PROCX,ENDRSP,CLEANUP
"RTN","RGNETWWW",21,0)
 Q:$Q RGNETRSP
"RTN","RGNETWWW",22,0)
 Q
"RTN","RGNETWWW",23,0)
PROCX N HANDLER,EP,AUTH,X,$ET,$ES
"RTN","RGNETWWW",24,0)
 S $ET="D ETRAP^RGNETWWW"
"RTN","RGNETWWW",25,0)
 S X=$$PARSEREQ(SOURCE,.RGNETREQ)
"RTN","RGNETWWW",26,0)
 I X D SETSTAT(X) Q
"RTN","RGNETWWW",27,0)
 S HANDLER=$$URL2EP(RGNETREQ("METHOD"),RGNETREQ("PATH"))
"RTN","RGNETWWW",28,0)
 I 'HANDLER D SETSTAT(404,"No endpoint") Q
"RTN","RGNETWWW",29,0)
 S EP=$G(^RGNET(996.52,HANDLER,10)),AUTH=$P(^(0),U,3)
"RTN","RGNETWWW",30,0)
 I '$L(EP) D SETSTAT(404,"No handler") Q
"RTN","RGNETWWW",31,0)
 Q:'$$AUTH(AUTH,$L(AUTH))
"RTN","RGNETWWW",32,0)
 D @EP
"RTN","RGNETWWW",33,0)
 Q
"RTN","RGNETWWW",34,0)
 ; Trap an expected error, returning it as a 500 status code.
"RTN","RGNETWWW",35,0)
ETRAP D SETSTAT(500,$P($EC,",",2)),^%ZTER,UNWIND^%ZTER
"RTN","RGNETWWW",36,0)
 Q
"RTN","RGNETWWW",37,0)
 ; Writes the contents of the buffer to the TCP socket.
"RTN","RGNETWWW",38,0)
 ;  BUFFER = Array reference containing buffered output.
"RTN","RGNETWWW",39,0)
WRITEALL(BUFFER) ;
"RTN","RGNETWWW",40,0)
 N LP1,LP2
"RTN","RGNETWWW",41,0)
 S LP1=""
"RTN","RGNETWWW",42,0)
 F  S LP1=$O(@BUFFER@(LP1)) Q:'$L(LP1)  D
"RTN","RGNETWWW",43,0)
 .D:$D(@BUFFER@(LP1))#2 TCPWRITE^RGNETTCP(@BUFFER@(LP1))
"RTN","RGNETWWW",44,0)
 .S LP2=""
"RTN","RGNETWWW",45,0)
 .F  S LP2=$O(@BUFFER@(LP1,LP2)) Q:'$L(LP2)  D
"RTN","RGNETWWW",46,0)
 ..D TCPWRITE^RGNETTCP(@BUFFER@(LP1,LP2))
"RTN","RGNETWWW",47,0)
 Q
"RTN","RGNETWWW",48,0)
 ; Extrinsic to act as a TCP input stream
"RTN","RGNETWWW",49,0)
 ;  .LN = Single line returned from input stream.
"RTN","RGNETWWW",50,0)
TCPSTRM(LN) ;
"RTN","RGNETWWW",51,0)
 N L,TMO
"RTN","RGNETWWW",52,0)
 S TMO=$S('$D(LN):10,1:0)
"RTN","RGNETWWW",53,0)
 S LN=$$TCPREADT^RGNETTCP($C(13,10),TMO),L=$L(LN)
"RTN","RGNETWWW",54,0)
 I L,$E(LN,L-1,L)=$C(13,10) S LN=$E(LN,1,L-2)
"RTN","RGNETWWW",55,0)
 Q L
"RTN","RGNETWWW",56,0)
 ; Extrinsic to act as an array stream source
"RTN","RGNETWWW",57,0)
 ;  .LN = Single line returned from input stream.
"RTN","RGNETWWW",58,0)
 ;  ARYREF = Contains arrary reference.  Note: input array will be killed.
"RTN","RGNETWWW",59,0)
ARYSTRM(LN,ARYREF) ;
"RTN","RGNETWWW",60,0)
 N X,L
"RTN","RGNETWWW",61,0)
 S X=$Q(@ARYREF),L=$QL(ARYREF)
"RTN","RGNETWWW",62,0)
 Q:'$L(X) 0
"RTN","RGNETWWW",63,0)
 Q:$NA(@X,L)'=ARYREF 0
"RTN","RGNETWWW",64,0)
 S LN=@X
"RTN","RGNETWWW",65,0)
 K @X
"RTN","RGNETWWW",66,0)
 Q 1
"RTN","RGNETWWW",67,0)
 ; Parse the HTTP request
"RTN","RGNETWWW",68,0)
 ;  STREAM  = Input stream (an extrinsic for returning successive lines)
"RTN","RGNETWWW",69,0)
 ; .RGNETREQ = Array to receive the parsed results
"RTN","RGNETWWW",70,0)
 ; Parsed components are stored under the following nodes:
"RTN","RGNETWWW",71,0)
 ;  HDR    = Headers
"RTN","RGNETWWW",72,0)
 ;  METHOD = Method
"RTN","RGNETWWW",73,0)
 ;  PARAMS = Query parameters
"RTN","RGNETWWW",74,0)
 ;  PATH   = Request path
"RTN","RGNETWWW",75,0)
 ;  HOST   = Request URL (less protocol)
"RTN","RGNETWWW",76,0)
PARSEREQ(STREAM,RGNETREQ) ;
"RTN","RGNETWWW",77,0)
 N METHOD,PATH,HEADERS,LP,LN,CNT,QRY,X
"RTN","RGNETWWW",78,0)
 S CNT=0,NEXT="X="_STREAM
"RTN","RGNETWWW",79,0)
 F  S @NEXT Q:'X  D
"RTN","RGNETWWW",80,0)
 .I '$D(METHOD) S METHOD=LN Q
"RTN","RGNETWWW",81,0)
 .I 'CNT S CNT='$L(LN) Q:CNT
"RTN","RGNETWWW",82,0)
 .I 'CNT D PARSEHDR(LN) Q
"RTN","RGNETWWW",83,0)
 .S RGNETREQ("BODY",CNT)=LN,CNT=CNT+1
"RTN","RGNETWWW",84,0)
 I '$D(METHOD) Q 400
"RTN","RGNETWWW",85,0)
 S PATH=$P(METHOD," ",2),METHOD=$P(METHOD," ")
"RTN","RGNETWWW",86,0)
 I '$L(METHOD) Q 405
"RTN","RGNETWWW",87,0)
 I PATH["?" D
"RTN","RGNETWWW",88,0)
 .S QRY=$P(PATH,"?",2,9999),PATH=$P(PATH,"?")
"RTN","RGNETWWW",89,0)
 .D PARSEQS(QRY)
"RTN","RGNETWWW",90,0)
 S:$E(PATH)="/" PATH=$E(PATH,2,9999)
"RTN","RGNETWWW",91,0)
 S:$E(PATH,$L(PATH))="/" PATH=$E(PATH,1,$L(PATH)-1)
"RTN","RGNETWWW",92,0)
 S PATH=$$UNESCURL(PATH)
"RTN","RGNETWWW",93,0)
 S RGNETREQ("METHOD")=METHOD
"RTN","RGNETWWW",94,0)
 S RGNETREQ("PATH")=PATH
"RTN","RGNETWWW",95,0)
 S RGNETREQ("HOST")=$G(RGNETREQ("HDR","host"))_"/"_$P(PATH,"/")
"RTN","RGNETWWW",96,0)
 Q 0
"RTN","RGNETWWW",97,0)
 ; Parse query string into array named in PREF.
"RTN","RGNETWWW",98,0)
 ;  QS = Query string
"RTN","RGNETWWW",99,0)
 ;  PREF = Array reference to receive data.  Defaults to RGNETREQ("PARAMS").
"RTN","RGNETWWW",100,0)
PARSEQS(QS,PREF) ;
"RTN","RGNETWWW",101,0)
 N X,Y,Z,N,V,M
"RTN","RGNETWWW",102,0)
 S PREF=$G(PREF,$NA(RGNETREQ("PARAMS")))
"RTN","RGNETWWW",103,0)
 F X=1:1:$L(QS,"&") D
"RTN","RGNETWWW",104,0)
 .S Y=$P(QS,"&",X),N=$$UNESCURL($P(Y,"=")),V=$$UNESCURL($P(Y,"=",2,9999)),M=""
"RTN","RGNETWWW",105,0)
 .I $L(N) D
"RTN","RGNETWWW",106,0)
 ..S Z=$L(N,":")
"RTN","RGNETWWW",107,0)
 ..I Z>1 D
"RTN","RGNETWWW",108,0)
 ...S Y=$P(N,":",Z)
"RTN","RGNETWWW",109,0)
 ...S M=$S(Y="missing":"m",Y="exact":"e",Y="text":"t",1:"")
"RTN","RGNETWWW",110,0)
 ...S:$L(M) N=$P(N,":",1,Z-1)
"RTN","RGNETWWW",111,0)
 ..S Y=1+$O(@PREF@(N,""),-1)
"RTN","RGNETWWW",112,0)
 ..F Z=1:1:$L(V,",") D
"RTN","RGNETWWW",113,0)
 ...S @PREF@(N,Y,Z)=$P(V,",",Z)
"RTN","RGNETWWW",114,0)
 ...S @PREF@(N,Y,Z,"OPR")=M
"RTN","RGNETWWW",115,0)
 Q
"RTN","RGNETWWW",116,0)
 ; Parse body as query string values
"RTN","RGNETWWW",117,0)
PARSEBD(PARAMS) ;
"RTN","RGNETWWW",118,0)
 N X
"RTN","RGNETWWW",119,0)
 F X=0:0 S X=$O(RGNETREQ("BODY",X)) Q:'X  D PARSEQS(RGNETREQ("BODY",X),"PARAMS")
"RTN","RGNETWWW",120,0)
 Q
"RTN","RGNETWWW",121,0)
 ; Parse http header into array named in HREF.
"RTN","RGNETWWW",122,0)
PARSEHDR(VALUE,HREF) ;
"RTN","RGNETWWW",123,0)
 N N,V
"RTN","RGNETWWW",124,0)
 S HREF=$G(HREF,$NA(RGNETREQ("HDR")))
"RTN","RGNETWWW",125,0)
 S N=$$LOW^XLFSTR($P(VALUE,":")),V=$$TRIM^XLFSTR($P(VALUE,":",2,999))
"RTN","RGNETWWW",126,0)
 S:$L(N) @HREF@(N)=V
"RTN","RGNETWWW",127,0)
 Q
"RTN","RGNETWWW",128,0)
 ; Replace escaped characters in URL
"RTN","RGNETWWW",129,0)
UNESCURL(X) ;
"RTN","RGNETWWW",130,0)
 I X["%"!(X["+") D
"RTN","RGNETWWW",131,0)
 .N P,C,H
"RTN","RGNETWWW",132,0)
 .F P=1:1 S C=$E(X,P) Q:'$L(C)  D
"RTN","RGNETWWW",133,0)
 ..I C="+" S $E(X,P)=" "
"RTN","RGNETWWW",134,0)
 ..E  I C="%" S H=$E(X,P+1,P+2),$E(X,P,P+2)=$$UNHEX^XTHCUTL(H)
"RTN","RGNETWWW",135,0)
 Q X
"RTN","RGNETWWW",136,0)
 ; Escape reserved characters
"RTN","RGNETWWW",137,0)
ESCAPE(VALUE) ;
"RTN","RGNETWWW",138,0)
 N LP
"RTN","RGNETWWW",139,0)
 F LP="&;amp","<;lt",">;gt",$C(9)_";nbsp","|TAB|;nbsp" D
"RTN","RGNETWWW",140,0)
 .S VALUE=$$SUBST^RGUT(VALUE,$P(LP,";"),"&"_$P(LP,";",2)_";")
"RTN","RGNETWWW",141,0)
 Q VALUE
"RTN","RGNETWWW",142,0)
 ; Returns true if error condition is set
"RTN","RGNETWWW",143,0)
ISERROR() ;
"RTN","RGNETWWW",144,0)
 Q +$G(RGNETRSP("STATUS"))'<400
"RTN","RGNETWWW",145,0)
 ; Sets http status code
"RTN","RGNETWWW",146,0)
SETSTAT(CODE,TEXT) ;
"RTN","RGNETWWW",147,0)
 S:'$L($G(TEXT)) TEXT=$P(^RGNET(996.51,CODE,0),U,2)
"RTN","RGNETWWW",148,0)
 S RGNETRSP("STATUS")=CODE_" "_TEXT
"RTN","RGNETWWW",149,0)
 D:$$ISERROR RESET
"RTN","RGNETWWW",150,0)
 Q
"RTN","RGNETWWW",151,0)
 ; Sets the content type
"RTN","RGNETWWW",152,0)
SETCTYPE(CTYPE) ;
"RTN","RGNETWWW",153,0)
 S RGNETRSP("CTYPE")=CTYPE
"RTN","RGNETWWW",154,0)
 Q
"RTN","RGNETWWW",155,0)
 ; Finishes a response by adding the necessary headers
"RTN","RGNETWWW",156,0)
ENDRSP D ADDHDR("HTTP/1.1 "_$G(RGNETRSP("STATUS"),"200 OK"),-999)
"RTN","RGNETWWW",157,0)
 D ADDHDR("Date: "_$$WWWDATE,-998)
"RTN","RGNETWWW",158,0)
 D:$D(RGNETRSP("CTYPE"))#2 ADDHDR("Content-Type: "_RGNETRSP("CTYPE")_"; charset=utf-8",-998)
"RTN","RGNETWWW",159,0)
 D ADDHDR("Content-Length: "_+$G(RGNETRSP("LEN")),-998)
"RTN","RGNETWWW",160,0)
 D ADDHDR("",0)
"RTN","RGNETWWW",161,0)
 Q
"RTN","RGNETWWW",162,0)
 ; Add to response buffer
"RTN","RGNETWWW",163,0)
ADD(X) N Y
"RTN","RGNETWWW",164,0)
 S:'$$ISERROR Y=$O(@RGNETRSP@(""),-1)+1,@RGNETRSP@(Y)=X,RGNETRSP("LEN")=RGNETRSP("LEN")+$L(X),RGNETRSP("LAST")=Y
"RTN","RGNETWWW",165,0)
 Q
"RTN","RGNETWWW",166,0)
 ; Add array to output buffer
"RTN","RGNETWWW",167,0)
 ; RT  = Array root
"RTN","RGNETWWW",168,0)
 ; EOL = End of line character(s)
"RTN","RGNETWWW",169,0)
ADDARY(RT,EOL) ;
"RTN","RGNETWWW",170,0)
 N LP
"RTN","RGNETWWW",171,0)
 S EOL=$G(EOL),LP=0
"RTN","RGNETWWW",172,0)
 F  S LP=$O(@RT@(LP)) Q:'LP  D
"RTN","RGNETWWW",173,0)
 .D ADD($G(@RT@(LP))_$G(@RT@(LP,0))_EOL)
"RTN","RGNETWWW",174,0)
 Q
"RTN","RGNETWWW",175,0)
 ; Add HTTP response header to output buffer
"RTN","RGNETWWW",176,0)
 ;  HDR = Properly formatted header
"RTN","RGNETWWW",177,0)
 ;  SB  = Affects the position of the header in the output.  Typically, not specified.
"RTN","RGNETWWW",178,0)
ADDHDR(HDR,SB) ;
"RTN","RGNETWWW",179,0)
 N NXT
"RTN","RGNETWWW",180,0)
 S SB=+$G(SB,-1)
"RTN","RGNETWWW",181,0)
 S:SB>0 SB=-SB
"RTN","RGNETWWW",182,0)
 S NXT=$O(@RGNETRSP@(SB,""),-1)+1,@RGNETRSP@(SB,NXT)=HDR_$C(13,10)
"RTN","RGNETWWW",183,0)
 Q
"RTN","RGNETWWW",184,0)
 ; Replace buffer contents at specified index, adjusting content length accordingly.
"RTN","RGNETWWW",185,0)
REPLACE(IDX,X) ;
"RTN","RGNETWWW",186,0)
 N Y
"RTN","RGNETWWW",187,0)
 S Y=$L(X)-$L(@RGNETRSP@(IDX)),@RGNETRSP@(IDX)=X,RGNETRSP("LEN")=RGNETRSP("LEN")+Y
"RTN","RGNETWWW",188,0)
 Q
"RTN","RGNETWWW",189,0)
 ; Returns the specified query parameter
"RTN","RGNETWWW",190,0)
 ; PN = Parameter name
"RTN","RGNETWWW",191,0)
 ; P1 = Parameter series - for duplicate parameters, specifies which among them (defaults to 1)
"RTN","RGNETWWW",192,0)
 ; P2 = Parameter value  - for multivalued parameters, specifies which value (defaults to 1)
"RTN","RGNETWWW",193,0)
GETPARAM(PN,P1,P2) ;
"RTN","RGNETWWW",194,0)
 Q $G(RGNETREQ("PARAMS",PN,$G(P1,1),$G(P2,1)))
"RTN","RGNETWWW",195,0)
 ; Initialize environment
"RTN","RGNETWWW",196,0)
INIT S:'($D(RGNETRSP)#2) RGNETRSP=$$TMPGBL
"RTN","RGNETWWW",197,0)
 D RESET
"RTN","RGNETWWW",198,0)
 Q
"RTN","RGNETWWW",199,0)
 ; Reset the output buffer
"RTN","RGNETWWW",200,0)
RESET K @RGNETRSP
"RTN","RGNETWWW",201,0)
 S (RGNETRSP("LAST"),RGNETRSP("LEN"))=0
"RTN","RGNETWWW",202,0)
 Q
"RTN","RGNETWWW",203,0)
 ; Returns the host url (e.g., www.xyz.net)
"RTN","RGNETWWW",204,0)
HOST(PATH,DFLT) ;
"RTN","RGNETWWW",205,0)
 N URL
"RTN","RGNETWWW",206,0)
 S URL=$G(PATH)
"RTN","RGNETWWW",207,0)
 S:$E(URL)="*" URL=$G(DFLT)_$E(URL,2,9999)
"RTN","RGNETWWW",208,0)
 Q $$CONCAT(RGNETREQ("HOST"),URL)
"RTN","RGNETWWW",209,0)
 ; Returns host URL including the transport protocol (e.g., http://www.xyz.net)
"RTN","RGNETWWW",210,0)
HOSTURL(PATH) ;
"RTN","RGNETWWW",211,0)
 Q $G(RGNETREQ("HDR","x-forwarded-proto"),"http")_"://"_$$HOST(.PATH)
"RTN","RGNETWWW",212,0)
 ; Prepend local system root to path
"RTN","RGNETWWW",213,0)
LOCALSYS(PATH) ;
"RTN","RGNETWWW",214,0)
 Q $$CONCAT("http://"_$$LOW^XLFSTR($$KSP^XUPARAM("WHERE")),.PATH)
"RTN","RGNETWWW",215,0)
 ; Return UUID for this system
"RTN","RGNETWWW",216,0)
SYSUUID() ;
"RTN","RGNETWWW",217,0)
 S:'$L($G(^RGNET("SYS"))) ^("SYS")=$$UUID^RGUT
"RTN","RGNETWWW",218,0)
 Q ^("SYS")
"RTN","RGNETWWW",219,0)
 ; Concatenate path to url.
"RTN","RGNETWWW",220,0)
CONCAT(URL,PATH) ;
"RTN","RGNETWWW",221,0)
 Q:'$D(PATH) URL
"RTN","RGNETWWW",222,0)
 F  Q:$E(URL,$L(URL))'="/"  S $E(URL,$L(URL))=""
"RTN","RGNETWWW",223,0)
 F  Q:$E(PATH)'="/"  S $E(PATH)=""
"RTN","RGNETWWW",224,0)
 Q URL_"/"_PATH
"RTN","RGNETWWW",225,0)
 ; Date (format per RFC 1123)
"RTN","RGNETWWW",226,0)
WWWDATE(DT) ;
"RTN","RGNETWWW",227,0)
 N TZ,H,M,SN
"RTN","RGNETWWW",228,0)
 S:'$G(DT) DT=$$NOW^XLFDT
"RTN","RGNETWWW",229,0)
 S TZ=$$TZ^XLFDT,H=+$E(TZ,2,3),M=+$E(TZ,4,5),SN=$S(TZ<0:1,1:-1)
"RTN","RGNETWWW",230,0)
 S DT=$$FMADD^XLFDT(DT,0,H*SN,M*SN,0)
"RTN","RGNETWWW",231,0)
 Q $$FMTDATE^RGUTDATF(DT,"EEE, dd MMM YYYY HH:mm:ss 'GMT'")
"RTN","RGNETWWW",232,0)
 ; Returns true if request came from a browser
"RTN","RGNETWWW",233,0)
ISBROWSR() ;
"RTN","RGNETWWW",234,0)
 Q $G(RGNETREQ("HDR","user-agent"))["Mozilla"
"RTN","RGNETWWW",235,0)
 ; Attempt authentication if credentials available
"RTN","RGNETWWW",236,0)
 ; If REQUIRED is true, authentication must succeed.
"RTN","RGNETWWW",237,0)
 ; Returns true if successful
"RTN","RGNETWWW",238,0)
AUTH(TYPE,REQUIRED) ;
"RTN","RGNETWWW",239,0)
 N TP,CRED
"RTN","RGNETWWW",240,0)
 S TP=$G(RGNETREQ("HDR","authorization")),CRED=$P(TP," ",2),TP=$$UP^XLFSTR($P(TP," "))
"RTN","RGNETWWW",241,0)
 I '$L(TP),$G(DUZ) Q 1
"RTN","RGNETWWW",242,0)
 S TYPE=$G(TYPE),REQUIRED=+$G(REQUIRED)
"RTN","RGNETWWW",243,0)
 K RGNETREQ("HDR","authorization"),DUZ
"RTN","RGNETWWW",244,0)
 I $L(TYPE),TP'=TYPE
"RTN","RGNETWWW",245,0)
 .S REQUIRED=1
"RTN","RGNETWWW",246,0)
 E  I TP="BASIC" D
"RTN","RGNETWWW",247,0)
 .N IO,RTN
"RTN","RGNETWWW",248,0)
 .S CRED=$$DECODE^RGUTUU(CRED),CRED=$P(CRED,":")_";"_$P(CRED,":",2,9999),IO=$P
"RTN","RGNETWWW",249,0)
 .D SETUP^XUSRB(),VALIDAV^XUSRB(.RTN,$$ENCRYP^XUSRB1(CRED))
"RTN","RGNETWWW",250,0)
 E  I TP="BEARER" D
"RTN","RGNETWWW",251,0)
 .S DUZ=$$ISVALID^RGSEOAUT(CRED)
"RTN","RGNETWWW",252,0)
 I '$G(DUZ),REQUIRED D  Q 0
"RTN","RGNETWWW",253,0)
 .D SETSTAT(401)
"RTN","RGNETWWW",254,0)
 .D ADDHDR("WWW-Authenticate: "_TYPE)
"RTN","RGNETWWW",255,0)
 S:'$D(DUZ(2)) DUZ(2)=$P(^XTV(8989.3,1,"XUS"),U,17)
"RTN","RGNETWWW",256,0)
 Q 1
"RTN","RGNETWWW",257,0)
 ; Convert to pattern (Used for URL matching)
"RTN","RGNETWWW",258,0)
TOPTRN(NM) ;
"RTN","RGNETWWW",259,0)
 N P,C,X,L
"RTN","RGNETWWW",260,0)
 S (L,P)=""
"RTN","RGNETWWW",261,0)
 F X=1:1:$L(NM) D
"RTN","RGNETWWW",262,0)
 .S C=$E(NM,X)
"RTN","RGNETWWW",263,0)
 .I C="*" D TOPTRN2(".E") Q
"RTN","RGNETWWW",264,0)
 .I C="#" D TOPTRN2("1.N") Q
"RTN","RGNETWWW",265,0)
 .S L=L_C
"RTN","RGNETWWW",266,0)
 D:$L(P) TOPTRN2("")
"RTN","RGNETWWW",267,0)
 Q P
"RTN","RGNETWWW",268,0)
TOPTRN2(X) ;
"RTN","RGNETWWW",269,0)
 S:$L(L) P=P_"1"""_L_"""",L=""
"RTN","RGNETWWW",270,0)
 S P=P_X
"RTN","RGNETWWW",271,0)
 Q
"RTN","RGNETWWW",272,0)
 ; Looks up endpoint for URL
"RTN","RGNETWWW",273,0)
 ; Returns IEN of endpoint
"RTN","RGNETWWW",274,0)
URL2EP(METHOD,URL) ;
"RTN","RGNETWWW",275,0)
 N IEN
"RTN","RGNETWWW",276,0)
 S:'$L(URL) URL="/"
"RTN","RGNETWWW",277,0)
 S IEN=$$URL2EPX(METHOD,URL)
"RTN","RGNETWWW",278,0)
 S:'IEN IEN=$$URL2EPX(METHOD,URL,$E(URL))
"RTN","RGNETWWW",279,0)
 S:'IEN IEN=$$URL2EPX(METHOD,URL,"#")
"RTN","RGNETWWW",280,0)
 S:'IEN IEN=$$URL2EPX(METHOD,URL,"*")
"RTN","RGNETWWW",281,0)
 Q IEN
"RTN","RGNETWWW",282,0)
URL2EPX(METHOD,URL,URLX) ;
"RTN","RGNETWWW",283,0)
 N RT,FND,PTRN,IEN,URL2
"RTN","RGNETWWW",284,0)
 S:$E(URL,$L(URL))'="/" URL2=URL_"/"
"RTN","RGNETWWW",285,0)
 I '$D(URLX) D
"RTN","RGNETWWW",286,0)
 .S FND=$O(^RGNET(996.52,"C",METHOD,URL,0))
"RTN","RGNETWWW",287,0)
 .I 'FND,$D(URL2) S FND=$O(^RGNET(996.52,"C",METHOD,URL2,0))
"RTN","RGNETWWW",288,0)
 E  D
"RTN","RGNETWWW",289,0)
 .S RT=URLX,FND=0
"RTN","RGNETWWW",290,0)
 .F  S URLX=$O(^RGNET(996.52,"C",METHOD,URLX)) Q:$E(URLX)'=RT  D  Q:FND
"RTN","RGNETWWW",291,0)
 ..F IEN=0:0 S IEN=$O(^RGNET(996.52,"C",METHOD,URLX,IEN)) Q:'IEN  S PTRN=^(IEN) D:$L(PTRN)  Q:FND
"RTN","RGNETWWW",292,0)
 ...S:URL?@PTRN FND=IEN
"RTN","RGNETWWW",293,0)
 ...I 'FND,$D(URL2),URL2?@PTRN S FND=IEN
"RTN","RGNETWWW",294,0)
 Q FND
"RTN","RGNETWWW",295,0)
 ; Returns the weighted value if content type matches an accepted type,
"RTN","RGNETWWW",296,0)
 ; or 0 if no match.
"RTN","RGNETWWW",297,0)
ISCTYPE(MTYPE,ACCPT) ;
"RTN","RGNETWWW",298,0)
 N AT,LP,MT,R,X,Q
"RTN","RGNETWWW",299,0)
 S ACCPT=$TR(ACCPT," "),MTYPE=$TR(MTYPE," ")
"RTN","RGNETWWW",300,0)
 F LP=1:1:$L(ACCPT,",") D
"RTN","RGNETWWW",301,0)
 .S X=$P(ACCPT,",",LP),Q=$P(X,";",2),X=$P(X,";")
"RTN","RGNETWWW",302,0)
 .S Q=$S($E(Q,1,2)="q=":+$E(Q,3,99),1:1)
"RTN","RGNETWWW",303,0)
 .S:$L(X) AT(Q,X)=""
"RTN","RGNETWWW",304,0)
 Q:'$D(AT) 1
"RTN","RGNETWWW",305,0)
 S Q=""
"RTN","RGNETWWW",306,0)
 F  S Q=$O(AT(Q),-1) Q:'Q  D  Q:$D(R)
"RTN","RGNETWWW",307,0)
 .S AT=""
"RTN","RGNETWWW",308,0)
 .F  S AT=$O(AT(Q,AT)) Q:'$L(AT)  D  Q:$D(R)
"RTN","RGNETWWW",309,0)
 ..I AT="*/*" S R=Q Q
"RTN","RGNETWWW",310,0)
 ..F LP=1:1:$L(MTYPE,",") D  Q:$D(R)
"RTN","RGNETWWW",311,0)
 ...S MT=$P(MTYPE,",",LP)
"RTN","RGNETWWW",312,0)
 ...I AT=MT S R=Q Q
"RTN","RGNETWWW",313,0)
 ...I AT["/*",$P(AT,"/")=$P(MT,"/") S R=Q Q
"RTN","RGNETWWW",314,0)
 ...I AT["*/",$P(AT,"/",2)=$P(MT,"/",2) S R=Q Q
"RTN","RGNETWWW",315,0)
 Q $S($D(R):R,1:0)
"RTN","RGNETWWW",316,0)
 ; Return unique temp global reference
"RTN","RGNETWWW",317,0)
 ; If X is specified, returns the temp global at that index.
"RTN","RGNETWWW",318,0)
 ; Otherwise, returns the next available global reference.
"RTN","RGNETWWW",319,0)
TMPGBL(X) ;
"RTN","RGNETWWW",320,0)
 Q:$G(X) $NA(^TMP("RGNETWWW",$J,X))
"RTN","RGNETWWW",321,0)
 F  S X=$G(^TMP("RGNETWWW",$J))+1,^($J)=X,X=$NA(^($J,X)) Q:'$D(@X)
"RTN","RGNETWWW",322,0)
 Q X
"RTN","RGNETWWW",323,0)
 ; Cleanup temp globals on completion
"RTN","RGNETWWW",324,0)
CLEANUP N LP,TMP,EXC
"RTN","RGNETWWW",325,0)
 S TMP=$NA(^TMP("RGNETWWW",$J))
"RTN","RGNETWWW",326,0)
 I TMP'=$NA(@RGNETRSP,2) K @TMP Q
"RTN","RGNETWWW",327,0)
 S (@TMP,EXC)=$QS(RGNETRSP,3)
"RTN","RGNETWWW",328,0)
 F LP=0:0 S LP=$O(@TMP@(LP)) Q:'LP  K:LP'=EXC @TMP@(LP)
"RTN","RGNETWWW",329,0)
 Q
"RTN","RGNETWWW",330,0)
 ; Returns description
"RTN","RGNETWWW",331,0)
GREETING D ADDARY($NA(^RGNET(996.52,HANDLER,99)))
"RTN","RGNETWWW",332,0)
 Q
"SEC","^DIC",996.5,996.5,0,"AUDIT")
@
"SEC","^DIC",996.5,996.5,0,"DD")
@
"SEC","^DIC",996.5,996.5,0,"DEL")
@
"SEC","^DIC",996.5,996.5,0,"LAYGO")
@
"SEC","^DIC",996.5,996.5,0,"RD")
@
"SEC","^DIC",996.5,996.5,0,"WR")
@
"SEC","^DIC",996.51,996.51,0,"AUDIT")
@
"SEC","^DIC",996.51,996.51,0,"DD")
@
"SEC","^DIC",996.51,996.51,0,"DEL")
@
"SEC","^DIC",996.51,996.51,0,"LAYGO")
@
"SEC","^DIC",996.51,996.51,0,"RD")
@
"SEC","^DIC",996.51,996.51,0,"WR")
@
"SEC","^DIC",996.52,996.52,0,"AUDIT")
@
"SEC","^DIC",996.52,996.52,0,"DD")
@
"SEC","^DIC",996.52,996.52,0,"DEL")
@
"SEC","^DIC",996.52,996.52,0,"LAYGO")
@
"SEC","^DIC",996.52,996.52,0,"RD")
@
"SEC","^DIC",996.52,996.52,0,"WR")
@
"VER")
8.0^22.0
"^DD",996.5,996.5,0)
FIELD^^4^6
"^DD",996.5,996.5,0,"DDA")
N
"^DD",996.5,996.5,0,"DT")
3150330
"^DD",996.5,996.5,0,"IX","B",996.5,.01)

"^DD",996.5,996.5,0,"NM","NETSERV TCP LISTENER")

"^DD",996.5,996.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",996.5,996.5,.01,1,0)
^.1
"^DD",996.5,996.5,.01,1,1,0)
996.5^B
"^DD",996.5,996.5,.01,1,1,1)
S ^RGNET(996.5,"B",$E(X,1,30),DA)=""
"^DD",996.5,996.5,.01,1,1,2)
K ^RGNET(996.5,"B",$E(X,1,30),DA)
"^DD",996.5,996.5,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",996.5,996.5,.01,21,0)
^^1^1^3150330.090909
"^DD",996.5,996.5,.01,21,1,0)
This is the unique name for the primary listener.
"^DD",996.5,996.5,1,0)
PORT^NJ5,0^^0;2^K:+X'=X!(X>32767)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,1,3)
Enter the TCP port number.
"^DD",996.5,996.5,1,21,0)
^^2^2^3150330.090954
"^DD",996.5,996.5,1,21,1,0)
This is the TCP port that the primary listener uses to service connection
"^DD",996.5,996.5,1,21,2,0)
requests.
"^DD",996.5,996.5,1,"DT")
3150329
"^DD",996.5,996.5,2,0)
UCI^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",996.5,996.5,2,3)
Enter the target UCI (none = current).
"^DD",996.5,996.5,2,21,0)
^^2^2^3150330.091148
"^DD",996.5,996.5,2,21,1,0)
This is the UCI where the primary listener should be spawned.  If not specified,
"^DD",996.5,996.5,2,21,2,0)
the primary listener will reside in the same UCI where it was initially spawned.
"^DD",996.5,996.5,2,"DT")
3150329
"^DD",996.5,996.5,3,0)
DISABLE^S^0:NO;1:YES;^0;4^Q
"^DD",996.5,996.5,3,3)
Enter YES to disable the listener.
"^DD",996.5,996.5,3,21,0)
^^2^2^3150330.091254
"^DD",996.5,996.5,3,21,1,0)
If set to YES, attempts to spawn a primary or secondary listener will fail.
"^DD",996.5,996.5,3,21,2,0)
This has no impact on currently running listeners.
"^DD",996.5,996.5,3,"DT")
3150330
"^DD",996.5,996.5,4,0)
MAXIMUM^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,4,3)
Enter the maximum number of secondary listeners.
"^DD",996.5,996.5,4,21,0)
^.001^3^3^3150330^
"^DD",996.5,996.5,4,21,1,0)
This sets the maximum allowable number of secondary listeners that may be 
"^DD",996.5,996.5,4,21,2,0)
spawned by the primary listener.  When this number is exceeded, additional
"^DD",996.5,996.5,4,21,3,0)
connection requests will be denied.
"^DD",996.5,996.5,4,"DT")
3150330
"^DD",996.5,996.5,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.5,996.5,10,3)
Enter entry point for I/O handler as TAG^ROUTINE.
"^DD",996.5,996.5,10,21,0)
^^7^7^3150330.091725
"^DD",996.5,996.5,10,21,1,0)
This is the entry point (as TAG^ROUTINE) that will service an established
"^DD",996.5,996.5,10,21,2,0)
connection.  The handler should relinquish control back to the caller after
"^DD",996.5,996.5,10,21,3,0)
completing each request/response cycle to allow the caller to determine if
"^DD",996.5,996.5,10,21,4,0)
the connection should be terminated.  The handler may request termination
"^DD",996.5,996.5,10,21,5,0)
by setting RGQUIT to a nonzero value.  Otherwise, unless an external request
"^DD",996.5,996.5,10,21,6,0)
to terminate the connection has been received, the handler will be called
"^DD",996.5,996.5,10,21,7,0)
again.
"^DD",996.5,996.5,10,"DT")
3150330
"^DD",996.51,996.51,0)
FIELD^^1^2
"^DD",996.51,996.51,0,"DDA")
N
"^DD",996.51,996.51,0,"DT")
3150317
"^DD",996.51,996.51,0,"NM","NETSERV HTTP STATUS")

"^DD",996.51,996.51,.01,0)
CODE^RNJ3,0X^^0;1^K:X<100!(X>999)!(X\1'=X) X S:$D(X) DINUM=X
"^DD",996.51,996.51,.01,1,0)
^.1^^0
"^DD",996.51,996.51,.01,3)
Enter the HTTP status code.
"^DD",996.51,996.51,.01,"DT")
3150317
"^DD",996.51,996.51,1,0)
TEXT^F^^0;2^K:$L(X)>80!($L(X)<1) X
"^DD",996.51,996.51,1,3)
Enter the display text for this status code.
"^DD",996.51,996.51,1,"DT")
3150317
"^DD",996.52,996.52,0)
FIELD^^2^5
"^DD",996.52,996.52,0,"DDA")
N
"^DD",996.52,996.52,0,"DT")
3150331
"^DD",996.52,996.52,0,"IX","B",996.52,.01)

"^DD",996.52,996.52,0,"NM","NETSERV HTTP ENDPOINT")

"^DD",996.52,996.52,.01,0)
URL^RF^^0;1^K:$L(X)>150!($L(X)<1) X
"^DD",996.52,996.52,.01,1,0)
^.1
"^DD",996.52,996.52,.01,1,1,0)
996.52^B
"^DD",996.52,996.52,.01,1,1,1)
S ^RGNET(996.52,"B",$E(X,1,30),DA)=""
"^DD",996.52,996.52,.01,1,1,2)
K ^RGNET(996.52,"B",$E(X,1,30),DA)
"^DD",996.52,996.52,.01,3)
Enter URL pattern for this endpoint.
"^DD",996.52,996.52,.01,21,0)
^^6^6^3150330.151834
"^DD",996.52,996.52,.01,21,1,0)
This is the pattern to which a request URL is to be matched.  It may contain
"^DD",996.52,996.52,.01,21,2,0)
the following wildcard characters:
"^DD",996.52,996.52,.01,21,3,0)

"^DD",996.52,996.52,.01,21,4,0)
       * Matches any character sequence.
"^DD",996.52,996.52,.01,21,5,0)
       # Matches any sequence of digits.
"^DD",996.52,996.52,.01,21,6,0)

"^DD",996.52,996.52,.01,"DT")
3150330
"^DD",996.52,996.52,1,0)
METHOD^S^GET:GET;HEAD:HEAD;POST:POST;PUT:PUT;DELETE:DELETE;^0;2^Q
"^DD",996.52,996.52,1,"DT")
3150330
"^DD",996.52,996.52,2,0)
AUTH^S^BASIC:BASIC AUTHENTICATION;BEARER:OAUTH2 AUTHENTICATION;^0;3^Q
"^DD",996.52,996.52,2,3)
Enter authentication type (or no entry for none).
"^DD",996.52,996.52,2,21,0)
^^6^6^3150331.200154
"^DD",996.52,996.52,2,21,1,0)
This determines the type of authentication required for the associated endpoint.
"^DD",996.52,996.52,2,21,2,0)

"^DD",996.52,996.52,2,21,3,0)
       BASIC - Basic authentication (username/password)
"^DD",996.52,996.52,2,21,4,0)
       OAUTH - OAuth2 authentication (bearer)
"^DD",996.52,996.52,2,21,5,0)

"^DD",996.52,996.52,2,21,6,0)
No entry means that no authentication is required.
"^DD",996.52,996.52,2,"DT")
3150331
"^DD",996.52,996.52,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.52,996.52,10,3)
Enter the handler entry point as TAG^ROUTINE.
"^DD",996.52,996.52,10,"DT")
3150330
"^DD",996.52,996.52,99,0)
DESCRIPTION^996.5299^^99;0
"^DD",996.52,996.5299,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",996.52,996.5299,0,"DT")
3150330
"^DD",996.52,996.5299,0,"NM","DESCRIPTION")

"^DD",996.52,996.5299,0,"UP")
996.52
"^DD",996.52,996.5299,.01,0)
DESCRIPTION^WL^^0;1^Q
"^DD",996.52,996.5299,.01,21,0)
^^1^1^3150330.181043
"^DD",996.52,996.5299,.01,21,1,0)
Provides a detailed description of this end point.
"^DD",996.52,996.5299,.01,"DT")
3150330
"^DIC",996.5,996.5,0)
NETSERV TCP LISTENER^996.5
"^DIC",996.5,996.5,0,"GL")
^RGNET(996.5,
"^DIC",996.5,996.5,"%D",0)
^1.001^2^2^3150330^
"^DIC",996.5,996.5,"%D",1,0)
Each entry in this file represents a configuration for a listener that will
"^DIC",996.5,996.5,"%D",2,0)
process requests on a given TCP port via the specified handler.
"^DIC",996.5,"B","NETSERV TCP LISTENER",996.5)

"^DIC",996.51,996.51,0)
NETSERV HTTP STATUS^996.51
"^DIC",996.51,996.51,0,"GL")
^RGNET(996.51,
"^DIC",996.51,996.51,"%D",0)
^1.001^1^1^3150330^^^
"^DIC",996.51,996.51,"%D",1,0)
List of valid HTTP status codes and their default display text.
"^DIC",996.51,"B","NETSERV HTTP STATUS",996.51)

"^DIC",996.52,996.52,0)
NETSERV HTTP ENDPOINT^996.52
"^DIC",996.52,996.52,0,"GL")
^RGNET(996.52,
"^DIC",996.52,996.52,"%",0)
^1.005^^
"^DIC",996.52,996.52,"%D",0)
^^3^3^3150330.180223
"^DIC",996.52,996.52,"%D",1,0)
This file defines execution endpoints for HTTP-based services. A service 
"^DIC",996.52,996.52,"%D",2,0)
request is matched to its respective endpoint by matching the request method 
"^DIC",996.52,996.52,"%D",3,0)
and the request URL to the corresponding entry in this file.
"^DIC",996.52,"B","NETSERV HTTP ENDPOINT",996.52)

**INSTALL NAME**
NETSERV RPC BROKER 1.0
"BLD",8509,0)
NETSERV RPC BROKER 1.0^NETWORK SERVICES^0^3150407^n
"BLD",8509,1,0)
^^3^3^3150401.075336
"BLD",8509,1,1,0)
This is an implementation of a remote procedure call broker that uses the
"BLD",8509,1,2,0)
TCP connection manager.  It supports native asynchronous RPC calls and
"BLD",8509,1,3,0)
event propagation.
"BLD",8509,4,0)
^9.64PA^996.5^5
"BLD",8509,4,996.5,0)
996.5
"BLD",8509,4,996.5,222)
n^y^f^^n^^y^o^n
"BLD",8509,4,996.5,224)
I $G(^RGNET(996.5,Y,10))["^RGNETB"
"BLD",8509,4,996.54,0)
996.54
"BLD",8509,4,996.54,222)
y^y^f^^^^n
"BLD",8509,4,996.55,0)
996.55
"BLD",8509,4,996.55,222)
y^y^f^^^^n
"BLD",8509,4,996.56,0)
996.56
"BLD",8509,4,996.56,222)
y^y^f^^^^n
"BLD",8509,4,996.57,0)
996.57
"BLD",8509,4,996.57,222)
y^y^f^^^^n
"BLD",8509,4,"B",996.5,996.5)

"BLD",8509,4,"B",996.54,996.54)

"BLD",8509,4,"B",996.55,996.55)

"BLD",8509,4,"B",996.56,996.56)

"BLD",8509,4,"B",996.57,996.57)

"BLD",8509,6.3)
52
"BLD",8509,"ABPKG")
n
"BLD",8509,"KRN",0)
^9.67PA^779.2^20
"BLD",8509,"KRN",.4,0)
.4
"BLD",8509,"KRN",.401,0)
.401
"BLD",8509,"KRN",.402,0)
.402
"BLD",8509,"KRN",.403,0)
.403
"BLD",8509,"KRN",.5,0)
.5
"BLD",8509,"KRN",.84,0)
.84
"BLD",8509,"KRN",3.6,0)
3.6
"BLD",8509,"KRN",3.8,0)
3.8
"BLD",8509,"KRN",9.2,0)
9.2
"BLD",8509,"KRN",9.8,0)
9.8
"BLD",8509,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",8509,"KRN",9.8,"NM",1,0)
RGNETBAC^^0^B22970905
"BLD",8509,"KRN",9.8,"NM",2,0)
RGNETBAS^^0^B5690301
"BLD",8509,"KRN",9.8,"NM",3,0)
RGNETBEV^^0^B59524142
"BLD",8509,"KRN",9.8,"NM",4,0)
RGNETBLG^^0^B10138528
"BLD",8509,"KRN",9.8,"NM",5,0)
RGNETBRK^^0^B5377240
"BLD",8509,"KRN",9.8,"NM",6,0)
RGNETBRP^^0^B62124423
"BLD",8509,"KRN",9.8,"NM",7,0)
RGNETBUT^^0^B38250970
"BLD",8509,"KRN",9.8,"NM","B","RGNETBAC",1)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBAS",2)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBEV",3)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBLG",4)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBRK",5)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBRP",6)

"BLD",8509,"KRN",9.8,"NM","B","RGNETBUT",7)

"BLD",8509,"KRN",19,0)
19
"BLD",8509,"KRN",19,"NM",0)
^9.68A^5^4
"BLD",8509,"KRN",19,"NM",1,0)
RGNETB NIGHTLY TASK^^0
"BLD",8509,"KRN",19,"NM",2,0)
RGNETB PURGE EVENT LOG^^0
"BLD",8509,"KRN",19,"NM",4,0)
RGNETB MAIN MENU^^0
"BLD",8509,"KRN",19,"NM",5,0)
RGNETB SITE PARAMETERS^^0
"BLD",8509,"KRN",19,"NM","B","RGNETB MAIN MENU",4)

"BLD",8509,"KRN",19,"NM","B","RGNETB NIGHTLY TASK",1)

"BLD",8509,"KRN",19,"NM","B","RGNETB PURGE EVENT LOG",2)

"BLD",8509,"KRN",19,"NM","B","RGNETB SITE PARAMETERS",5)

"BLD",8509,"KRN",19.1,0)
19.1
"BLD",8509,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",8509,"KRN",101,0)
101
"BLD",8509,"KRN",101,"NM",0)
^9.68A^^
"BLD",8509,"KRN",409.61,0)
409.61
"BLD",8509,"KRN",771,0)
771
"BLD",8509,"KRN",779.2,0)
779.2
"BLD",8509,"KRN",870,0)
870
"BLD",8509,"KRN",8989.51,0)
8989.51
"BLD",8509,"KRN",8989.51,"NM",0)
^9.68A^6^6
"BLD",8509,"KRN",8989.51,"NM",1,0)
RGNETB ACTIVITY LOGGING^^0
"BLD",8509,"KRN",8989.51,"NM",2,0)
RGNETB ACTIVITY RETENTION^^0
"BLD",8509,"KRN",8989.51,"NM",3,0)
RGNETB AUTHENTICATION^^0
"BLD",8509,"KRN",8989.51,"NM",4,0)
RGNETB POLLING INTERVAL^^0
"BLD",8509,"KRN",8989.51,"NM",5,0)
RGNETB RESOURCE DEVICE COUNT^^0
"BLD",8509,"KRN",8989.51,"NM",6,0)
RGNETB RESOURCE DEVICE SLOTS^^0
"BLD",8509,"KRN",8989.51,"NM","B","RGNETB ACTIVITY LOGGING",1)

"BLD",8509,"KRN",8989.51,"NM","B","RGNETB ACTIVITY RETENTION",2)

"BLD",8509,"KRN",8989.51,"NM","B","RGNETB AUTHENTICATION",3)

"BLD",8509,"KRN",8989.51,"NM","B","RGNETB POLLING INTERVAL",4)

"BLD",8509,"KRN",8989.51,"NM","B","RGNETB RESOURCE DEVICE COUNT",5)

"BLD",8509,"KRN",8989.51,"NM","B","RGNETB RESOURCE DEVICE SLOTS",6)

"BLD",8509,"KRN",8989.52,0)
8989.52
"BLD",8509,"KRN",8989.52,"NM",0)
^9.68A^1^1
"BLD",8509,"KRN",8989.52,"NM",1,0)
RGNETB SITE PARAMETERS^^0
"BLD",8509,"KRN",8989.52,"NM","B","RGNETB SITE PARAMETERS",1)

"BLD",8509,"KRN",8994,0)
8994
"BLD",8509,"KRN",8994,"NM",0)
^9.68A^16^16
"BLD",8509,"KRN",8994,"NM",1,0)
RGNETBAS STOP^^0
"BLD",8509,"KRN",8994,"NM",2,0)
RGNETBEV BCAST^^0
"BLD",8509,"KRN",8994,"NM",3,0)
RGNETBEV GETSUBSC^^0
"BLD",8509,"KRN",8994,"NM",4,0)
RGNETBRP AUTH^^0
"BLD",8509,"KRN",8994,"NM",5,0)
RGNETBRP CANRUN^^0
"BLD",8509,"KRN",8994,"NM",6,0)
RGNETBRP CVC^^0
"BLD",8509,"KRN",8994,"NM",7,0)
RGNETBRP DIALOG^^0
"BLD",8509,"KRN",8994,"NM",8,0)
RGNETBRP DIVGET^^0
"BLD",8509,"KRN",8994,"NM",9,0)
RGNETBRP DIVSET^^0
"BLD",8509,"KRN",8994,"NM",10,0)
RGNETBRP GETINFO^^0
"BLD",8509,"KRN",8994,"NM",11,0)
RGNETBRP GETRPCS^^0
"BLD",8509,"KRN",8994,"NM",12,0)
RGNETBRP GETSESSN^^0
"BLD",8509,"KRN",8994,"NM",13,0)
RGNETBRP GETVAR^^0
"BLD",8509,"KRN",8994,"NM",14,0)
RGNETBRP LOCK^^0
"BLD",8509,"KRN",8994,"NM",15,0)
RGNETBRP LOCKRES^^0
"BLD",8509,"KRN",8994,"NM",16,0)
RGNETBRP SETVAR^^0
"BLD",8509,"KRN",8994,"NM","B","RGNETBAS STOP",1)

"BLD",8509,"KRN",8994,"NM","B","RGNETBEV BCAST",2)

"BLD",8509,"KRN",8994,"NM","B","RGNETBEV GETSUBSC",3)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP AUTH",4)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP CANRUN",5)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP CVC",6)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP DIALOG",7)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP DIVGET",8)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP DIVSET",9)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP GETINFO",10)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP GETRPCS",11)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP GETSESSN",12)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP GETVAR",13)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP LOCK",14)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP LOCKRES",15)

"BLD",8509,"KRN",8994,"NM","B","RGNETBRP SETVAR",16)

"BLD",8509,"KRN","B",.4,.4)

"BLD",8509,"KRN","B",.401,.401)

"BLD",8509,"KRN","B",.402,.402)

"BLD",8509,"KRN","B",.403,.403)

"BLD",8509,"KRN","B",.5,.5)

"BLD",8509,"KRN","B",.84,.84)

"BLD",8509,"KRN","B",3.6,3.6)

"BLD",8509,"KRN","B",3.8,3.8)

"BLD",8509,"KRN","B",9.2,9.2)

"BLD",8509,"KRN","B",9.8,9.8)

"BLD",8509,"KRN","B",19,19)

"BLD",8509,"KRN","B",19.1,19.1)

"BLD",8509,"KRN","B",101,101)

"BLD",8509,"KRN","B",409.61,409.61)

"BLD",8509,"KRN","B",771,771)

"BLD",8509,"KRN","B",779.2,779.2)

"BLD",8509,"KRN","B",870,870)

"BLD",8509,"KRN","B",8989.51,8989.51)

"BLD",8509,"KRN","B",8989.52,8989.52)

"BLD",8509,"KRN","B",8994,8994)

"BLD",8509,"QUES",0)
^9.62^^
"BLD",8509,"REQB",0)
^9.611^1^1
"BLD",8509,"REQB",1,0)
NETSERV CONNECTION MANAGER 1.0^2
"BLD",8509,"REQB","B","NETSERV CONNECTION MANAGER 1.0",1)

"DATA",996.5,2,0)
RPC BROKER^9300
"DATA",996.5,2,10)
NETSERV^RGNETBRK
"FIA",996.5)
NETSERV TCP LISTENER
"FIA",996.5,0)
^RGNET(996.5,
"FIA",996.5,0,0)
996.5
"FIA",996.5,0,1)
n^y^f^^n^^y^o^n
"FIA",996.5,0,10)

"FIA",996.5,0,11)
I $G(^RGNET(996.5,Y,10))["^RGNETB"
"FIA",996.5,0,"RLRO")

"FIA",996.5,0,"VR")
1.0^NETSERV RPC BROKER
"FIA",996.5,996.5)
0
"FIA",996.54)
NETSERV BROKER EVENT TYPE
"FIA",996.54,0)
^RGNET(996.54,
"FIA",996.54,0,0)
996.54
"FIA",996.54,0,1)
y^y^f^^^^n
"FIA",996.54,0,10)

"FIA",996.54,0,11)

"FIA",996.54,0,"RLRO")

"FIA",996.54,0,"VR")
1.0^NETSERV RPC BROKER
"FIA",996.54,996.54)
0
"FIA",996.54,996.542)
0
"FIA",996.54,996.5421)
0
"FIA",996.54,996.5499)
0
"FIA",996.55)
NETSERV BROKER EVENT LOG
"FIA",996.55,0)
^RGNET(996.55,
"FIA",996.55,0,0)
996.55DI
"FIA",996.55,0,1)
y^y^f^^^^n
"FIA",996.55,0,10)

"FIA",996.55,0,11)

"FIA",996.55,0,"RLRO")

"FIA",996.55,0,"VR")
1.0^NETSERV RPC BROKER
"FIA",996.55,996.55)
0
"FIA",996.55,996.552)
0
"FIA",996.56)
NETSERV BROKER ACTIVITY LOG
"FIA",996.56,0)
^RGNET(996.56,
"FIA",996.56,0,0)
996.56
"FIA",996.56,0,1)
y^y^f^^^^n
"FIA",996.56,0,10)

"FIA",996.56,0,11)

"FIA",996.56,0,"RLRO")

"FIA",996.56,0,"VR")
1.0^NETSERV RPC BROKER
"FIA",996.56,996.56)
0
"FIA",996.56,996.561)
0
"FIA",996.56,996.562)
0
"FIA",996.57)
NETSERV BROKER AUTHENTICATION
"FIA",996.57,0)
^RGNET(996.57,
"FIA",996.57,0,0)
996.57AI
"FIA",996.57,0,1)
y^y^f^^^^n
"FIA",996.57,0,10)

"FIA",996.57,0,11)

"FIA",996.57,0,"RLRO")

"FIA",996.57,0,"VR")
1.0^NETSERV RPC BROKER
"FIA",996.57,996.57)
0
"KRN",19,11325,-1)
0^4
"KRN",19,11325,0)
RGNETB MAIN MENU^NETSERV Broker Main Menu^^M^^^^^^^^NETWORK SERVICES^^^^^1
"KRN",19,11325,10,0)
^19.01IP^4^2
"KRN",19,11325,10,1,0)
11328^1^10
"KRN",19,11325,10,1,"^")
RGNETB SITE PARAMETERS
"KRN",19,11325,10,4,0)
11326^4^40
"KRN",19,11325,10,4,"^")
RGNETB PURGE EVENT LOG
"KRN",19,11325,15)

"KRN",19,11325,20)

"KRN",19,11325,26)
D MNUHDR^RGUT()
"KRN",19,11325,99)
63643,10563
"KRN",19,11325,"U")
NETSERV BROKER MAIN MENU
"KRN",19,11326,-1)
0^2
"KRN",19,11326,0)
RGNETB PURGE EVENT LOG^Purge Event Log^^A^^^^^^^^^^1^
"KRN",19,11326,1,0)
^^1^1^3030611.123339
"KRN",19,11326,1,1,0)
Tasks the nightly purge of the NETSERV Broker event log file.
"KRN",19,11326,15)

"KRN",19,11326,20)
D MNUEXEC^RGUT("D TASKPRG^RGNETBEV",1)
"KRN",19,11326,25)

"KRN",19,11326,"U")
PURGE EVENT LOG
"KRN",19,11327,-1)
0^1
"KRN",19,11327,0)
RGNETB NIGHTLY TASK^Submit Cleanup Task^^R^^^^^^^^NETWORK SERVICES^^1^
"KRN",19,11327,15)

"KRN",19,11327,20)
D MNUHDR^RGUT()
"KRN",19,11327,25)
NIGHTLY^RGNETBUT
"KRN",19,11327,200.9)
y
"KRN",19,11327,"U")
SUBMIT CLEANUP TASK
"KRN",19,11328,-1)
0^5
"KRN",19,11328,0)
RGNETB SITE PARAMETERS^Edit NETSERV Broker Package Parameters^^A^^^^^^^^^^1
"KRN",19,11328,20)
D MNUTEMPL^RGUT()
"KRN",19,11328,"U")
EDIT NETSERV BROKER PACKAGE PA
"KRN",8989.51,412,-1)
0^3
"KRN",8989.51,412,0)
RGNETB AUTHENTICATION^Authentication method^1^UCI^Authentication method
"KRN",8989.51,412,1)
S^0:Normal;1:Client Cached;2:Server Cached
"KRN",8989.51,412,6)
F
"KRN",8989.51,412,20,0)
^8989.512^5^5^3061024^^^^
"KRN",8989.51,412,20,1,0)
Dictates authentication method used.
"KRN",8989.51,412,20,2,0)

"KRN",8989.51,412,20,3,0)
Normal        - No password caching is used.
"KRN",8989.51,412,20,4,0)
Client Cached - Username and password are encrypted and cached in NT user profile.
"KRN",8989.51,412,20,5,0)
Server Cached - User SID (security identifier) cached on server. 
"KRN",8989.51,412,30,0)
^8989.513I^1^1
"KRN",8989.51,412,30,1,0)
100^4.2
"KRN",8989.51,413,-1)
0^4
"KRN",8989.51,413,0)
RGNETB POLLING INTERVAL^Host polling interval^0^Interval^Host Polling Interval
"KRN",8989.51,413,1)
N^^Number of seconds (1-60) between polls.
"KRN",8989.51,413,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>60 Y=60
"KRN",8989.51,413,20,0)
^8989.512^4^4^3070607^^
"KRN",8989.51,413,20,1,0)
This is the interval in seconds that the client will poll the server for 
"KRN",8989.51,413,20,2,0)
signaled events or asynchronous remote procedure calls.  
"KRN",8989.51,413,20,3,0)

"KRN",8989.51,413,20,4,0)
Range should be 1-60, inclusive.  Typical values are 3-5 seconds.
"KRN",8989.51,413,30,0)
^8989.513I^1^1
"KRN",8989.51,413,30,1,0)
100^4.2
"KRN",8989.51,414,-1)
0^5
"KRN",8989.51,414,0)
RGNETB RESOURCE DEVICE COUNT^Maximum number of resource devices^0^Count^Resource Device Count
"KRN",8989.51,414,1)
N^^The maximum number (1-20) of resource devices that may be created.
"KRN",8989.51,414,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>20 Y=20
"KRN",8989.51,414,20,0)
^8989.512^4^4^3061024^
"KRN",8989.51,414,20,1,0)
This is the maximum number of resource devices that can be used by the package.
"KRN",8989.51,414,20,2,0)
Must be between 1 and 20, inclusive.  Higher values will increase server load,
"KRN",8989.51,414,20,3,0)
but improve application response to asynchronous remote procedure calls and 
"KRN",8989.51,414,20,4,0)
host-signalled events
"KRN",8989.51,414,30,0)
^8989.513I^1^1
"KRN",8989.51,414,30,1,0)
100^4.2
"KRN",8989.51,415,-1)
0^6
"KRN",8989.51,415,0)
RGNETB RESOURCE DEVICE SLOTS^Number of resource slots to allocate^0^Slots^Resource Device Slots
"KRN",8989.51,415,1)
N^^Maximum number (1-20) of slots per resource device.
"KRN",8989.51,415,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>20 Y=20 D SETSLOTS^RGNETBUT(Y)
"KRN",8989.51,415,20,0)
^8989.512^4^4^3061024^
"KRN",8989.51,415,20,1,0)
This is the maximum number of slots that will be allocated to resource devices
"KRN",8989.51,415,20,2,0)
used by the package. Must be between 1 and 20, inclusive.  Higher values will 
"KRN",8989.51,415,20,3,0)
increase server load, but improve application performance for asynchronous 
"KRN",8989.51,415,20,4,0)
remote procedure calls.
"KRN",8989.51,415,30,0)
^8989.513I^1^1
"KRN",8989.51,415,30,1,0)
100^4.2
"KRN",8989.51,416,-1)
0^1
"KRN",8989.51,416,0)
RGNETB ACTIVITY LOGGING^Enable logging of session activities^1^Application^Enable activity logging
"KRN",8989.51,416,1)
Y
"KRN",8989.51,416,6)
P^19
"KRN",8989.51,416,20,0)
^8989.512^3^3^3080104^^
"KRN",8989.51,416,20,1,0)
If activated, results in logging session activities such as remote procedure 
"KRN",8989.51,416,20,2,0)
calls and events to the NETSERV BROKER ACTIVITY LOG file.  Activating this feature may 
"KRN",8989.51,416,20,3,0)
have significant adverse impact on application performance and disk usage. 
"KRN",8989.51,416,30,0)
^8989.513I^3^3
"KRN",8989.51,416,30,1,0)
400^4.2
"KRN",8989.51,416,30,2,0)
200^4
"KRN",8989.51,416,30,3,0)
100^200
"KRN",8989.51,417,-1)
0^2
"KRN",8989.51,417,0)
RGNETB ACTIVITY RETENTION^Retention period for logged activities.^^^Retention period (days)
"KRN",8989.51,417,1)
N^1:9999999^Enter retention period in days for logged activities.
"KRN",8989.51,417,20,0)
^8989.512^1^1^3080104^
"KRN",8989.51,417,20,1,0)
This controls how long entries in the NETSERV BROKER ACTIVITY LOG file are retained.
"KRN",8989.51,417,30,0)
^8989.513I^1^1
"KRN",8989.51,417,30,1,0)
400^4.2
"KRN",8989.52,210,-1)
0^1
"KRN",8989.52,210,0)
RGNETB SITE PARAMETERS^NETSERV RPC Broker Site Parameters^4.2
"KRN",8989.52,210,10,0)
^8989.521IA^7^4
"KRN",8989.52,210,10,3,0)
10.1^RGNETB POLLING INTERVAL
"KRN",8989.52,210,10,5,0)
20.1^RGNETB RESOURCE DEVICE COUNT
"KRN",8989.52,210,10,6,0)
20.2^RGNETB RESOURCE DEVICE SLOTS
"KRN",8989.52,210,10,7,0)
30.1^RGNETB AUTHENTICATION
"KRN",8994,2721,-1)
0^4
"KRN",8994,2721,0)
RGNETBRP AUTH^AUTH^RGNETBRP^2
"KRN",8994,2722,-1)
0^9
"KRN",8994,2722,0)
RGNETBRP DIVSET^DIVSET^RGNETBRP^1
"KRN",8994,2723,-1)
0^8
"KRN",8994,2723,0)
RGNETBRP DIVGET^DIVGET^RGNETBRP^2
"KRN",8994,2724,-1)
0^7
"KRN",8994,2724,0)
RGNETBRP DIALOG^DIALOG^RGNETBRP^2
"KRN",8994,2725,-1)
0^11
"KRN",8994,2725,0)
RGNETBRP GETRPCS^GETRPCS^RGNETBRP^4
"KRN",8994,2726,-1)
0^16
"KRN",8994,2726,0)
RGNETBRP SETVAR^SETVAR^RGNETBRP^1
"KRN",8994,2727,-1)
0^2
"KRN",8994,2727,0)
RGNETBEV BCAST^BCAST^RGNETBEV^1
"KRN",8994,2728,-1)
0^3
"KRN",8994,2728,0)
RGNETBEV GETSUBSC^GETSUBSC^RGNETBEV^4^^^^1
"KRN",8994,2729,-1)
0^12
"KRN",8994,2729,0)
RGNETBRP GETSESSN^GETSESSN^RGNETBRP^4^^^^1
"KRN",8994,2730,-1)
0^1
"KRN",8994,2730,0)
RGNETBAS STOP^STOP^RGNETBAS^1
"KRN",8994,2731,-1)
0^13
"KRN",8994,2731,0)
RGNETBRP GETVAR^GETVAR^RGNETBRP^2^^^^1
"KRN",8994,2732,-1)
0^10
"KRN",8994,2732,0)
RGNETBRP GETINFO^GETINFO^RGNETBRP^4^^^^1
"KRN",8994,2733,-1)
0^5
"KRN",8994,2733,0)
RGNETBRP CANRUN^CANRUN^RGNETBRP^1
"KRN",8994,2734,-1)
0^14
"KRN",8994,2734,0)
RGNETBRP LOCK^LOCK^RGNETBRP^1
"KRN",8994,2735,-1)
0^15
"KRN",8994,2735,0)
RGNETBRP LOCKRES^LOCKRES^RGNETBRP^4^^^^1
"KRN",8994,2736,-1)
0^6
"KRN",8994,2736,0)
RGNETBRP CVC^CVC^RGNETBRP^1^^^^1
"MBREQ")
1
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"ORD",21,8989.52)
8989.52;21;1;;PAR2E1^XPDTA2;PAR2F1^XPDIA3;PAR2E1^XPDIA3;PAR2F2^XPDIA3;;PAR2DEL^XPDIA3(%)
"ORD",21,8989.52,0)
PARAMETER TEMPLATE
"PKG",225,-1)
1^1
"PKG",225,0)
NETWORK SERVICES^RGNE^Network services
"PKG",225,20,0)
^9.402P^^
"PKG",225,22,0)
^9.49I^1^1
"PKG",225,22,1,0)
1.0^3150407
"PKG",225,22,1,1,0)
^^3^3^3150407
"PKG",225,22,1,1,1,0)
This is an implementation of a remote procedure call broker that uses the
"PKG",225,22,1,1,2,0)
TCP connection manager.  It supports native asynchronous RPC calls and
"PKG",225,22,1,1,3,0)
event propagation.
"PKG",225,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","RGNETBAC")
0^1^B22970905
"RTN","RGNETBAC",1,0)
RGNETBAC ;RI/CBMI/DKM - NETSERV RPC Broker Actions;05-Apr-2015 16:19;DKM
"RTN","RGNETBAC",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBAC",3,0)
 ;=================================================================
"RTN","RGNETBAC",4,0)
 ; Connect action
"RTN","RGNETBAC",5,0)
 ; Data is returned to client as:
"RTN","RGNETBAC",6,0)
 ;   debug flag^authentication method^server version^case sensitive^cipher key
"RTN","RGNETBAC",7,0)
ACTC N X,Y,VOL,UCI,VER,AUTH,CAPS
"RTN","RGNETBAC",8,0)
 S Y=$$GETUCI,UCI(0)=Y,UCI=$$UP^XLFSTR($G(RGNETB("UCI"),Y)),VOL=$P(UCI,",",2),VER=$P($T(+2),";",3)
"RTN","RGNETBAC",9,0)
 S:'$L(UCI) UCI=Y
"RTN","RGNETBAC",10,0)
 S:'$L(VOL) VOL=$P(Y,",",2),$P(UCI,",",2)=VOL
"RTN","RGNETBAC",11,0)
 I UCI'=UCI(0),$$ERRCHK(0[$$UCICHECK^%ZOSV(UCI),14,UCI) Q
"RTN","RGNETBAC",12,0)
 Q:$$ERRCHK('$L(VOL),11)
"RTN","RGNETBAC",13,0)
 S AUTH=$$AUTHMETH(UCI),CAPS=(RGMODE=3)_U_AUTH_U_VER_U_$$GET^XPAR("SYS","XU VC CASE SENSITIVE")_U_$E($P($T(Z+1^XUSRB1),";;",2,999),1,4)
"RTN","RGNETBAC",14,0)
 Q:$$ERRCHK('$L(AUTH),24,UCI)
"RTN","RGNETBAC",15,0)
 I $D(^%ZOSF("ACTJ")) D  Q:$$ERRCHK(X'>Y&X,10,Y,X)
"RTN","RGNETBAC",16,0)
 .; Y=# active jobs, X=max active jobs
"RTN","RGNETBAC",17,0)
 .X ^%ZOSF("ACTJ")
"RTN","RGNETBAC",18,0)
 .S X=+$O(^XTV(8989.3,1,4,"B",VOL,0)),X=$S(X:+$P($G(^XTV(8989.3,1,4,X,0)),U,3),1:0)
"RTN","RGNETBAC",19,0)
 D INTRO^XUS1A("RGDATA")
"RTN","RGNETBAC",20,0)
 S RGDATA=CAPS
"RTN","RGNETBAC",21,0)
 Q
"RTN","RGNETBAC",22,0)
 ; Disconnect action
"RTN","RGNETBAC",23,0)
ACTD D RESET^RGNETBRP()
"RTN","RGNETBAC",24,0)
 S RGDATA=1,RGQUIT=1
"RTN","RGNETBAC",25,0)
 Q
"RTN","RGNETBAC",26,0)
 ; Query action
"RTN","RGNETBAC",27,0)
ACTQ Q:$$ASYCHK^RGNETBAS
"RTN","RGNETBAC",28,0)
 Q:$$EVTCHK^RGNETBEV
"RTN","RGNETBAC",29,0)
 ; Ping action
"RTN","RGNETBAC",30,0)
ACTP S DT=$$NOW^XLFDT,RGDATA=$$PARAM^RGNETBUT("RGNETB POLLING INTERVAL",1,60)_U_DT,DT=DT\1
"RTN","RGNETBAC",31,0)
 Q
"RTN","RGNETBAC",32,0)
 ; Subscribe action
"RTN","RGNETBAC",33,0)
ACTS S RGDATA=1
"RTN","RGNETBAC",34,0)
 Q:$$ERRCHK('$$SUBSCR^RGNETBEV(RGNETB("EVT"),1),13,RGNETB("EVT"))
"RTN","RGNETBAC",35,0)
 Q
"RTN","RGNETBAC",36,0)
 ; Unsubscribe action
"RTN","RGNETBAC",37,0)
ACTU S RGDATA=$$SUBSCR^RGNETBEV(RGNETB("EVT"),0)
"RTN","RGNETBAC",38,0)
 Q
"RTN","RGNETBAC",39,0)
 ; RPC action
"RTN","RGNETBAC",40,0)
ACTR N RPC,RTN,RGD,XWBWRAP,XWBPTYPE,I
"RTN","RGNETBAC",41,0)
 I '$D(RGNETB("CTX")) S RGNETB("CTX")=$$GETVAR^RGNETBUT("CTX")
"RTN","RGNETBAC",42,0)
 E  D SETVAR^RGNETBUT("CTX",RGNETB("CTX"))
"RTN","RGNETBAC",43,0)
 S:RGNETB("CTX")="" RGNETB("CTX")=$$GETVAR^RGNETBUT("AID")
"RTN","RGNETBAC",44,0)
 S RPC=$$FIND1^DIC(8994,,"QX",$G(RGNETB("RPC")))
"RTN","RGNETBAC",45,0)
 Q:$$ERRCHK('RPC,3)
"RTN","RGNETBAC",46,0)
 S I=$G(^XWB(8994,RPC,0)),RTN=$P(I,U,2,3),XWBWRAP=+$P(I,U,8),XWBPTYPE=$P(I,U,4)
"RTN","RGNETBAC",47,0)
 Q:$$ERRCHK($S($E($P(RTN,U,2),1,6)="RGNETB":0,1:'$$CANRUN(RPC,RGNETB("CTX"))),4,RGNETB("RPC"),RGNETB("CTX"))
"RTN","RGNETBAC",48,0)
 Q:$$ERRCHK("03"'[$P(I,U,6),5)
"RTN","RGNETBAC",49,0)
 Q:$$ERRCHK(RTN'?.8AN1"^"1.8AN,6)
"RTN","RGNETBAC",50,0)
 Q:$$ERRCHK("^1^2^3^4^5^H^"'[(U_XWBPTYPE_U),6)
"RTN","RGNETBAC",51,0)
 Q:$$ERRCHK(ARG>40,7,,ARG,40)
"RTN","RGNETBAC",52,0)
 I $G(RGNETB("ASY")) D
"RTN","RGNETBAC",53,0)
 .N RD
"RTN","RGNETBAC",54,0)
 .S RD="RGNETB THREAD RESOURCE #"_$$GETVAR^RGNETBUT("RDEV")
"RTN","RGNETBAC",55,0)
 .S RGD=$$QUEUE^RGUTTSK("TASK^RGNETBAS","ASYNC RPC: "_RGNETB("RPC"),,"RTN^XWBWRAP^XWBPTYPE^ARG^ARG(^RGNETB(^XWBOS^P*",RD)
"RTN","RGNETBAC",56,0)
 .Q:$$ERRCHK(RGD<1,8)
"RTN","RGNETBAC",57,0)
 .S ^XTMP("RGNETB",RGNETB("UID"),"T",RGD)=""
"RTN","RGNETBAC",58,0)
 .D REPLY^RGNETBRK(RGD)
"RTN","RGNETBAC",59,0)
 E  D
"RTN","RGNETBAC",60,0)
 .S:XWBPTYPE=4 RGD=$$TMPGBL^RGNETBRP("X")
"RTN","RGNETBAC",61,0)
 .D STREST^RGNETTCP(1),DORPC,DATAOUT
"RTN","RGNETBAC",62,0)
 Q
"RTN","RGNETBAC",63,0)
 ; Builds the RPC entry code and executes it
"RTN","RGNETBAC",64,0)
DORPC N I,P,XWBAPVER,XQY,RGQUIT,ALOG,$ET
"RTN","RGNETBAC",65,0)
 S RTN=RTN_"(.RGD",XWBAPVER=$G(RGNETB("VER")),XQY=$$GETVAR^RGNETBUT("AID0")
"RTN","RGNETBAC",66,0)
 S ALOG=$$ISACTIVE^RGNETBLG,ALOG(0)=$S(ALOG:$$LOG^RGNETBLG(ALOG,1,RGNETB("RPC")),1:0)
"RTN","RGNETBAC",67,0)
 F I=1:1:ARG D
"RTN","RGNETBAC",68,0)
 .S RTN=RTN_","
"RTN","RGNETBAC",69,0)
 .Q:'$D(ARG(I))
"RTN","RGNETBAC",70,0)
 .S P="P"_I,RTN=RTN_"."_P
"RTN","RGNETBAC",71,0)
 .S:$D(@P)=10 @P=""
"RTN","RGNETBAC",72,0)
 .D:ALOG(0) ADD^RGNETBLG(ALOG,ALOG(0),P,1)
"RTN","RGNETBAC",73,0)
 S RTN=RTN_")"
"RTN","RGNETBAC",74,0)
 D
"RTN","RGNETBAC",75,0)
 .N ALOG
"RTN","RGNETBAC",76,0)
 .D @RTN
"RTN","RGNETBAC",77,0)
 I ALOG(0) D
"RTN","RGNETBAC",78,0)
 .N VAL,ARY
"RTN","RGNETBAC",79,0)
 .S VAL=$C(13)_"Return Data:"_$C(13)
"RTN","RGNETBAC",80,0)
 .D ADD^RGNETBLG(ALOG,ALOG(0),"VAL")
"RTN","RGNETBAC",81,0)
 .I XWBPTYPE=1 S VAL=$G(RGD),ARY="VAL"
"RTN","RGNETBAC",82,0)
 .E  I XWBPTYPE=2 S ARY="RGD"
"RTN","RGNETBAC",83,0)
 .E  I XWBPTYPE=3 S ARY="RGD"
"RTN","RGNETBAC",84,0)
 .E  I XWBPTYPE=4 S ARY=RGD
"RTN","RGNETBAC",85,0)
 .E  I XWBPTYPE=5 S VAL=$G(@RGD),ARY="VAL"
"RTN","RGNETBAC",86,0)
 .E  I XWBPTYPE="H" S VAL=RGD,ARY="VAL"
"RTN","RGNETBAC",87,0)
 .E  Q
"RTN","RGNETBAC",88,0)
 .D ADD^RGNETBLG(ALOG,ALOG(0),ARY)
"RTN","RGNETBAC",89,0)
 Q
"RTN","RGNETBAC",90,0)
 ; Test for error condition
"RTN","RGNETBAC",91,0)
 ; TEST = If true, setup the error
"RTN","RGNETBAC",92,0)
 ; ERR  = Error code
"RTN","RGNETBAC",93,0)
 ; Pn   = Optional parameters (up to 3)
"RTN","RGNETBAC",94,0)
ERRCHK(TEST,ERR,P1,P2,P3) ;
"RTN","RGNETBAC",95,0)
 I TEST,'$G(RGERR(0)) D
"RTN","RGNETBAC",96,0)
 .D GETDLG^RGNETBUT(ERR,.RGERR,.P1,.P2,.P3)
"RTN","RGNETBAC",97,0)
 .S RGERR(0)=ERR
"RTN","RGNETBAC",98,0)
 Q:$Q +$G(RGERR(0))
"RTN","RGNETBAC",99,0)
 Q
"RTN","RGNETBAC",100,0)
 ; Writes return data to TCP stream
"RTN","RGNETBAC",101,0)
DATAOUT D TCPWRITE^RGNETTCP($C(0))
"RTN","RGNETBAC",102,0)
 I XWBPTYPE=1 D TCPWRITE^RGNETTCP($G(RGD)) Q
"RTN","RGNETBAC",103,0)
 I XWBPTYPE=2 D ARYOUT^RGNETBRK("RGD",1) Q
"RTN","RGNETBAC",104,0)
 I XWBPTYPE=3 D ARYOUT^RGNETBRK("RGD",XWBWRAP) Q
"RTN","RGNETBAC",105,0)
 I XWBPTYPE=4 D ARYOUT^RGNETBRK(RGD,XWBWRAP) Q
"RTN","RGNETBAC",106,0)
 I XWBPTYPE=5 D TCPWRITE^RGNETTCP($G(@RGD)) Q
"RTN","RGNETBAC",107,0)
 I XWBPTYPE="H" D FILOUT^RGNETTCP(RGD,XWBWRAP) Q
"RTN","RGNETBAC",108,0)
 Q
"RTN","RGNETBAC",109,0)
 ; Returns true if RPC can run in current context
"RTN","RGNETBAC",110,0)
CANRUN(RPC,CTX) ;
"RTN","RGNETBAC",111,0)
 Q:'$G(DUZ)!'RPC 0
"RTN","RGNETBAC",112,0)
 S CTX(0)=$$OPTLKP^RGNETBUT(CTX)
"RTN","RGNETBAC",113,0)
 Q:$$ERRCHK('$L(CTX(0)),2,CTX) 0
"RTN","RGNETBAC",114,0)
 D:'$G(^XTMP("RGNETB",RGNETB("UID"),"C",CTX(0))) BLDCTX(CTX(0))
"RTN","RGNETBAC",115,0)
 Q:$$KCHK^XUSRB("XUPROGMODE") 1
"RTN","RGNETBAC",116,0)
 Q $D(^XTMP("RGNETB",RGNETB("UID"),"C",CTX(0),RPC))
"RTN","RGNETBAC",117,0)
 ; Build RPC context table
"RTN","RGNETBAC",118,0)
BLDCTX(OPT,CTX) ;
"RTN","RGNETBAC",119,0)
 N X
"RTN","RGNETBAC",120,0)
 I '$D(CTX) K ^XTMP("RGNETB",RGNETB("UID"),"C",OPT) S ^(OPT)=1,CTX=OPT
"RTN","RGNETBAC",121,0)
 Q:$D(^XTMP("RGNETB",RGNETB("UID"),"C",CTX,0,OPT))  S ^(OPT)=""
"RTN","RGNETBAC",122,0)
 Q:$$OPTCHK^RGNETBUT(OPT,"B")
"RTN","RGNETBAC",123,0)
 M ^XTMP("RGNETB",RGNETB("UID"),"C",CTX)=^DIC(19,OPT,"RPC","B")
"RTN","RGNETBAC",124,0)
 F X=0:0 S X=$O(^DIC(19,OPT,10,"B",X)) Q:'X  D BLDCTX(X,CTX)
"RTN","RGNETBAC",125,0)
 K:CTX=OPT ^XTMP("RGNETB",RGNETB("UID"),"C",CTX,0)
"RTN","RGNETBAC",126,0)
 Q
"RTN","RGNETBAC",127,0)
 ; Return current UCI
"RTN","RGNETBAC",128,0)
GETUCI() N Y
"RTN","RGNETBAC",129,0)
 D UCI^%ZOSV
"RTN","RGNETBAC",130,0)
 Q Y
"RTN","RGNETBAC",131,0)
 ; Change UCI
"RTN","RGNETBAC",132,0)
SETUCI(X) D SWAP^%XUCI
"RTN","RGNETBAC",133,0)
 Q
"RTN","RGNETBAC",134,0)
 ; Get authentication method for target UCI
"RTN","RGNETBAC",135,0)
AUTHMETH(UCI) ;
"RTN","RGNETBAC",136,0)
 N X,PC
"RTN","RGNETBAC",137,0)
 F PC=2,1 D  Q:$L(X)
"RTN","RGNETBAC",138,0)
 .S X=$$GET^XPAR("ALL","RGNETB AUTHENTICATION",$P(UCI,",",1,PC))
"RTN","RGNETBAC",139,0)
 Q X
"RTN","RGNETBAS")
0^2^B5690301
"RTN","RGNETBAS",1,0)
RGNETBAS ;RI/CBMI/DKM - Asynchronous RPC calls ;05-Apr-2015 16:20;DKM
"RTN","RGNETBAS",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBAS",3,0)
 ;=================================================================
"RTN","RGNETBAS",4,0)
 ; Background task for executing an asynchronous RPC
"RTN","RGNETBAS",5,0)
TASK N RGD,TGT,$ET,$ES
"RTN","RGNETBAS",6,0)
 S $ET="D ERROR^RGNETBAS",ZTREQ="@"
"RTN","RGNETBAS",7,0)
 K ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)
"RTN","RGNETBAS",8,0)
 Q:$$S^%ZTLOAD
"RTN","RGNETBAS",9,0)
 S ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)=0,TGT=$NA(^(ZTSK,0))
"RTN","RGNETBAS",10,0)
 S:XWBPTYPE=4 RGD=TGT
"RTN","RGNETBAS",11,0)
 D DORPC^RGNETBAC
"RTN","RGNETBAS",12,0)
 I XWBPTYPE=1 S @TGT@(0)=RGD
"RTN","RGNETBAS",13,0)
 E  I XWBPTYPE>1,XWBPTYPE<4 M @TGT=RGD S:XWBPTYPE=2 XWBWRAP=1
"RTN","RGNETBAS",14,0)
 E  I XWBPTYPE=4,$L(RGD),RGD'=TGT M @TGT=@RGD K @RGD
"RTN","RGNETBAS",15,0)
 E  I XWBPTYPE=5 S @TGT@(0)=$G(@RGD)
"RTN","RGNETBAS",16,0)
 E  I XWBPTYPE="H" D
"RTN","RGNETBAS",17,0)
 .N X,Y,FIL,DIR
"RTN","RGNETBAS",18,0)
 .S X=$E($$DIRDLM^RGUTOS,3),Y=$L(RGD,X),DIR=$P(RGD,X,1,Y-1),FIL=$P(RGD,X,Y)
"RTN","RGNETBAS",19,0)
 .I '$$FTG^%ZISH(DIR,FIL,$NA(@TGT@(0)),$QL(TGT)+1)
"RTN","RGNETBAS",20,0)
 .D DELETE^RGUTOS(RGD)
"RTN","RGNETBAS",21,0)
 I $$S^%ZTLOAD K ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)
"RTN","RGNETBAS",22,0)
 E  S ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)=ZTSK_"^0^"_XWBWRAP
"RTN","RGNETBAS",23,0)
 Q
"RTN","RGNETBAS",24,0)
ERROR D SETERR(-1,$$EC^%ZOSV)
"RTN","RGNETBAS",25,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","RGNETBAS",26,0)
 Q
"RTN","RGNETBAS",27,0)
 ; Retrieve specified routine line
"RTN","RGNETBAS",28,0)
RTNTEXT(RTN) ;
"RTN","RGNETBAS",29,0)
 N TAG
"RTN","RGNETBAS",30,0)
 S TAG=$P(RTN,U),RTN=$P(RTN,U,2)
"RTN","RGNETBAS",31,0)
 Q $S('$L(RTN):$T(^@TAG),$L(TAG):$T(@TAG^@RTN),1:$T(^@RTN))
"RTN","RGNETBAS",32,0)
 ; Set error info to return to client
"RTN","RGNETBAS",33,0)
SETERR(CODE,TEXT) ;
"RTN","RGNETBAS",34,0)
 K ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK) M ^(ZTSK,0,0)=TEXT
"RTN","RGNETBAS",35,0)
 S ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)=ZTSK_U_CODE_"^1"
"RTN","RGNETBAS",36,0)
 Q
"RTN","RGNETBAS",37,0)
 ; RPC to check for completed tasks
"RTN","RGNETBAS",38,0)
 ; Results[0] at the client end will contain the TaskMan ID of the
"RTN","RGNETBAS",39,0)
 ; completed RPC. The remainder of the Result will be the data
"RTN","RGNETBAS",40,0)
 ; returned by the RPC.
"RTN","RGNETBAS",41,0)
ASYCHK() N ZTSK,RGD,X
"RTN","RGNETBAS",42,0)
 S ZTSK=0
"RTN","RGNETBAS",43,0)
 F  S ZTSK=+$O(^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)) Q:'ZTSK  S X=$G(^(ZTSK)),RGD=$NA(^(ZTSK,0)) I X D  Q
"RTN","RGNETBAS",44,0)
 .D TCPWRITE^RGNETTCP($C(2)_X_$C(13))
"RTN","RGNETBAS",45,0)
 .D ARYOUT^RGNETBRK(RGD,$P(X,U,3))
"RTN","RGNETBAS",46,0)
 .K ^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)
"RTN","RGNETBAS",47,0)
 Q ZTSK
"RTN","RGNETBAS",48,0)
 ; RPC: Stop a task
"RTN","RGNETBAS",49,0)
 ; Signals to a backround task that it should stop running.  Cleans up
"RTN","RGNETBAS",50,0)
 ; any output generated by completed tasks.
"RTN","RGNETBAS",51,0)
STOP(RGD,ZTSK) ;
"RTN","RGNETBAS",52,0)
 S RGD=''$D(^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)) K:RGD ^(ZTSK)
"RTN","RGNETBAS",53,0)
 Q:'$D(^%ZTSK(ZTSK))
"RTN","RGNETBAS",54,0)
 S $P(^%ZTSK(ZTSK,.1),U,10)=$P($G(^VA(200,DUZ,0)),U)
"RTN","RGNETBAS",55,0)
 D DQ^%ZTLOAD
"RTN","RGNETBAS",56,0)
 I $G(ZTSK(0)) D KILL^%ZTLOAD
"RTN","RGNETBAS",57,0)
 Q
"RTN","RGNETBAS",58,0)
 ; Stop all tasks in task list
"RTN","RGNETBAS",59,0)
STOPALL N ZTSK
"RTN","RGNETBAS",60,0)
 S ZTSK=0
"RTN","RGNETBAS",61,0)
 F  S ZTSK=$O(^XTMP("RGNETB",RGNETB("UID"),"T",ZTSK)) Q:'ZTSK  D STOP(,ZTSK)
"RTN","RGNETBAS",62,0)
 K ^XTMP("RGNETB",RGNETB("UID"),"T")
"RTN","RGNETBAS",63,0)
 Q
"RTN","RGNETBEV")
0^3^B59524142
"RTN","RGNETBEV",1,0)
RGNETBEV ;RI/CBMI/DKM - Event Support ;03-Apr-2015 09:57;DKM
"RTN","RGNETBEV",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBEV",3,0)
 ;=================================================================
"RTN","RGNETBEV",4,0)
 ; Check for the occurrence of host events
"RTN","RGNETBEV",5,0)
EVTCHK() ;EP
"RTN","RGNETBEV",6,0)
 N RTN,$ET,X
"RTN","RGNETBEV",7,0)
 S $ET="",X="ERR1^RGNETBEV",@^%ZOSF("TRAP")
"RTN","RGNETBEV",8,0)
 L +^XTMP("RGNETB",RGNETB("UID"),"E"):0
"RTN","RGNETBEV",9,0)
 E  Q 0
"RTN","RGNETBEV",10,0)
 S RTN=+$O(^XTMP("RGNETB",RGNETB("UID"),"E",0)),X=$NA(^(RTN))
"RTN","RGNETBEV",11,0)
 I RTN D
"RTN","RGNETBEV",12,0)
 .D TCPWRITE^RGNETTCP($C(3))
"RTN","RGNETBEV",13,0)
 .D ARYOUT^RGNETBRK(X)
"RTN","RGNETBEV",14,0)
ERR1 L -^XTMP("RGNETB",RGNETB("UID"),"E")
"RTN","RGNETBEV",15,0)
 Q $G(RTN)
"RTN","RGNETBEV",16,0)
 ; Start monitor in background if not already running
"RTN","RGNETBEV",17,0)
MONSTART ;EP
"RTN","RGNETBEV",18,0)
 I '$$MONCHECK,$$QUEUE^RGUTTSK("MONITOR^RGNETBEV","NETSERV Broker Event Monitor")
"RTN","RGNETBEV",19,0)
 Q
"RTN","RGNETBEV",20,0)
 ; Returns true if event monitor is running
"RTN","RGNETBEV",21,0)
 ;   LOCK = If specified and true, do not release lock.
"RTN","RGNETBEV",22,0)
MONCHECK(LOCK) ;EP
"RTN","RGNETBEV",23,0)
 L +^XTMP("RGNETBEV MONITOR"):0
"RTN","RGNETBEV",24,0)
 E  Q 1
"RTN","RGNETBEV",25,0)
 L:'$G(LOCK) -^XTMP("RGNETBEV MONITOR")
"RTN","RGNETBEV",26,0)
 Q 0
"RTN","RGNETBEV",27,0)
 ; Taskman entry point for background event monitor
"RTN","RGNETBEV",28,0)
MONITOR ;EP
"RTN","RGNETBEV",29,0)
 N IEN,TYPE,EXE,IDLE,PMETH,X
"RTN","RGNETBEV",30,0)
 S ZTREQ="@",IDLE=360
"RTN","RGNETBEV",31,0)
 Q:$$MONCHECK(1)
"RTN","RGNETBEV",32,0)
 F  D  Q:IDLE<1!$$S^%ZTLOAD
"RTN","RGNETBEV",33,0)
 .H 5
"RTN","RGNETBEV",34,0)
 .F IEN=0:0 S IEN=$O(^RGNET(996.54,IEN)) Q:'IEN  D
"RTN","RGNETBEV",35,0)
 ..S X=$G(^(IEN,0)),TYPE=$P(X,U),PMETH=$P(X,U,6),EXE=$G(^(1))          ; Note: NR set above
"RTN","RGNETBEV",36,0)
 ..I $L(EXE),'$P(X,U,2),$$CHKINT(+$P(X,U,3)) D
"RTN","RGNETBEV",37,0)
 ...I PMETH D EXEMON Q
"RTN","RGNETBEV",38,0)
 ...N UID
"RTN","RGNETBEV",39,0)
 ...F  Q:'$$NXTUID^RGNETBUT(.UID)  D EXEUID(UID,TYPE)
"RTN","RGNETBEV",40,0)
 .S IDLE=$S($$NXTUID^RGNETBUT:360,1:IDLE-1)
"RTN","RGNETBEV",41,0)
 L -^XTMP("RGNETBEV MONITOR")
"RTN","RGNETBEV",42,0)
 Q
"RTN","RGNETBEV",43,0)
 ; Execute an event monitor in session context
"RTN","RGNETBEV",44,0)
EXEUID(UID,TYPE) ;EP
"RTN","RGNETBEV",45,0)
 Q:'$$ISSUBSCR(UID,TYPE)
"RTN","RGNETBEV",46,0)
 N RG,DUZ
"RTN","RGNETBEV",47,0)
 S RGNETB("UID")=UID,DUZ=$$EXEVAR("DUZ"),DUZ(0)=$$EXEVAR("DUZ0"),DUZ(2)=$$EXEVAR("DUZ2")
"RTN","RGNETBEV",48,0)
 D EXEMON
"RTN","RGNETBEV",49,0)
 Q
"RTN","RGNETBEV",50,0)
 ; Execute the event monitor
"RTN","RGNETBEV",51,0)
EXEMON N X,$ET
"RTN","RGNETBEV",52,0)
 S X="EXEERR^RGNETBEV",@^%ZOSF("TRAP"),$ET=""
"RTN","RGNETBEV",53,0)
 D EXERUN
"RTN","RGNETBEV",54,0)
 Q
"RTN","RGNETBEV",55,0)
EXERUN N IEN,IDLE
"RTN","RGNETBEV",56,0)
 X EXE
"RTN","RGNETBEV",57,0)
 Q
"RTN","RGNETBEV",58,0)
 ; Log any errors
"RTN","RGNETBEV",59,0)
EXEERR N ERT,ERD,X
"RTN","RGNETBEV",60,0)
 S ERT=$TR($$EC^%ZOSV,U,"~"),ERD=$$NOW^XLFDT
"RTN","RGNETBEV",61,0)
 S X=$G(^RGNET(996.54,IEN,100)),^(100)=ERD_U_ERT
"RTN","RGNETBEV",62,0)
 D:(ERD\1'=(X\1))!($P(X,U,2)'=ERT) ^%ZTER
"RTN","RGNETBEV",63,0)
 Q
"RTN","RGNETBEV",64,0)
EXEVAR(VAR) ;
"RTN","RGNETBEV",65,0)
 Q $$GETVAR^RGNETBUT(VAR,,,UID)
"RTN","RGNETBEV",66,0)
 ; Check nominal polling interval.  Return true if event needs to be polled.
"RTN","RGNETBEV",67,0)
CHKINT(INT) ;EP
"RTN","RGNETBEV",68,0)
 Q:'INT 1
"RTN","RGNETBEV",69,0)
 N NXT,NOW,CHK
"RTN","RGNETBEV",70,0)
 S NOW=$H,NOW=NOW*86400+$P(NOW,",",2)
"RTN","RGNETBEV",71,0)
 S NXT=$G(IEN(IEN),NOW),CHK=NOW'<NXT
"RTN","RGNETBEV",72,0)
 S:CHK IEN(IEN)=NOW+INT
"RTN","RGNETBEV",73,0)
 Q CHK
"RTN","RGNETBEV",74,0)
 ; RPC: Broadcast an event to some or all active users
"RTN","RGNETBEV",75,0)
BCAST(DATA,EVENT,STUB,LST,AID) ;
"RTN","RGNETBEV",76,0)
 S DATA=$$BRDCAST(.EVENT,.STUB,.LST,.AID)
"RTN","RGNETBEV",77,0)
 Q
"RTN","RGNETBEV",78,0)
 ; Called by event monitor to signal an event to client
"RTN","RGNETBEV",79,0)
SIGNAL(STUB) ;
"RTN","RGNETBEV",80,0)
 D QUEUE(TYPE,.STUB)
"RTN","RGNETBEV",81,0)
 Q
"RTN","RGNETBEV",82,0)
 ; Add an event to a process event queue
"RTN","RGNETBEV",83,0)
QUEUE(TYPE,STUB,UID) ;EP
"RTN","RGNETBEV",84,0)
 N Q
"RTN","RGNETBEV",85,0)
 S:'$D(UID) UID=$G(RGNETB("UID"))
"RTN","RGNETBEV",86,0)
 I '$$ISSUBSCR(UID,TYPE) Q:$Q 0 Q
"RTN","RGNETBEV",87,0)
 L +^XTMP("RGNETB",UID,"E"):5
"RTN","RGNETBEV",88,0)
 E  Q:$Q 0 Q
"RTN","RGNETBEV",89,0)
 S Q=1+$O(^XTMP("RGNETB",UID,"E",$C(1)),-1),^(Q,0)=TYPE_$C(13) M ^(1)=STUB
"RTN","RGNETBEV",90,0)
 L -^XTMP("RGNETB",UID,"E")
"RTN","RGNETBEV",91,0)
 Q:$Q 1
"RTN","RGNETBEV",92,0)
 Q
"RTN","RGNETBEV",93,0)
 ; Lookup event type, returning IEN
"RTN","RGNETBEV",94,0)
EVENTIEN(TYPE) ;EP
"RTN","RGNETBEV",95,0)
 N X,Y
"RTN","RGNETBEV",96,0)
 Q:TYPE=+TYPE!'$L(TYPE) +TYPE
"RTN","RGNETBEV",97,0)
 S X=$E(TYPE,1,30),Y=0
"RTN","RGNETBEV",98,0)
 F  S Y=+$O(^RGNET(996.54,"B",X,Y)) Q:'Y!($P($G(^RGNET(996.54,Y,0)),U)=TYPE)
"RTN","RGNETBEV",99,0)
 Q $S(Y:Y,1:$$EVENTIEN($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","RGNETBEV",100,0)
 ; Return event name, given IEN
"RTN","RGNETBEV",101,0)
EVENTNAM(IEN) ;EP
"RTN","RGNETBEV",102,0)
 Q $P($G(^RGNET(996.54,+IEN,0)),U)
"RTN","RGNETBEV",103,0)
 ; Check to see if an event type is disabled
"RTN","RGNETBEV",104,0)
DISABLED(TYPE) ;EP
"RTN","RGNETBEV",105,0)
 N X,Y
"RTN","RGNETBEV",106,0)
 S X=$$EVENTIEN(TYPE),Y=$G(^RGNET(996.54,+X,0)),TYPE=$P(Y,U),Y=+$P(Y,U,2)
"RTN","RGNETBEV",107,0)
 S:'Y Y=$$KEYCHECK(X,20)
"RTN","RGNETBEV",108,0)
 Q $S(Y:Y,'X:0,1:$$DISABLED($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","RGNETBEV",109,0)
 ; Check to see if event type is protected by security key(s)
"RTN","RGNETBEV",110,0)
 ; Returns true if user does not have required keys
"RTN","RGNETBEV",111,0)
 ;   SB=20: Publication keys; SB=21: Subscription keys
"RTN","RGNETBEV",112,0)
KEYCHECK(TYPE,SB) ;EP
"RTN","RGNETBEV",113,0)
 N X,Y,Z
"RTN","RGNETBEV",114,0)
 S X=$$EVENTIEN(TYPE),(Y,Z)=0
"RTN","RGNETBEV",115,0)
 F  S Z=$O(^RGNET(996.54,X,SB,"B",Z)) Q:'Z  D  Q:'Y
"RTN","RGNETBEV",116,0)
 .S Y='$$HASKEY(Z)
"RTN","RGNETBEV",117,0)
 Q Y
"RTN","RGNETBEV",118,0)
 ; Return true if user has key
"RTN","RGNETBEV",119,0)
HASKEY(KEY) ;EP
"RTN","RGNETBEV",120,0)
 S:KEY=+KEY KEY=$$LKUP^XPDKEY(KEY)
"RTN","RGNETBEV",121,0)
 Q $S($L(KEY):''$$KCHK^XUSRB(KEY),1:0)
"RTN","RGNETBEV",122,0)
 ; Signal an event to all or selected sessions
"RTN","RGNETBEV",123,0)
 ; If called as extrinsic, returns # of events broadcast
"RTN","RGNETBEV",124,0)
BRDCAST(TYPE,STUB,USR,AID) ;EP
"RTN","RGNETBEV",125,0)
 N X,C
"RTN","RGNETBEV",126,0)
 S C=0
"RTN","RGNETBEV",127,0)
 I '$$DISABLED(TYPE) D
"RTN","RGNETBEV",128,0)
 .I $D(USR("DUZ"))>1 D
"RTN","RGNETBEV",129,0)
 ..F  Q:'$$NXTUID^RGNETBUT(.X,-1,.AID)  D
"RTN","RGNETBEV",130,0)
 ...S:$D(USR("DUZ",+$$GETVAR^RGNETBUT("DUZ",,,X))) USR("UID",X)=""
"RTN","RGNETBEV",131,0)
 .S X=""
"RTN","RGNETBEV",132,0)
 .F  D  Q:'X
"RTN","RGNETBEV",133,0)
 ..I $D(USR)>1 S X=$O(USR("UID",X))
"RTN","RGNETBEV",134,0)
 ..E  D NXTUID^RGNETBUT(.X,-1,.AID)
"RTN","RGNETBEV",135,0)
 ..S:X C=C+$$QUEUE(.TYPE,.STUB,X)
"RTN","RGNETBEV",136,0)
 .D LOG(TYPE,.STUB)
"RTN","RGNETBEV",137,0)
 .D FPRTCOL(TYPE,.STUB)
"RTN","RGNETBEV",138,0)
 Q:$Q C
"RTN","RGNETBEV",139,0)
 Q
"RTN","RGNETBEV",140,0)
 ; Fire Associated Event Protocol
"RTN","RGNETBEV",141,0)
FPRTCOL(TYPE,STUB) ;
"RTN","RGNETBEV",142,0)
 N EVT,X
"RTN","RGNETBEV",143,0)
 S EVT=$$EVENTIEN(TYPE)
"RTN","RGNETBEV",144,0)
 Q:'EVT
"RTN","RGNETBEV",145,0)
 S X=$P($G(^RGNET(996.54,+EVT,0)),U,7)_";ORD(101,"
"RTN","RGNETBEV",146,0)
 Q:'X
"RTN","RGNETBEV",147,0)
 D EN^XQOR
"RTN","RGNETBEV",148,0)
 Q
"RTN","RGNETBEV",149,0)
 ; Subscribe to / unsubscribe from a named event
"RTN","RGNETBEV",150,0)
 ; Returns new subscription state
"RTN","RGNETBEV",151,0)
SUBSCR(TYPE,SUBSCR) ;EP
"RTN","RGNETBEV",152,0)
 I '$L(TYPE) Q:$Q 0 Q
"RTN","RGNETBEV",153,0)
 N CURRNT
"RTN","RGNETBEV",154,0)
 S CURRNT=''$D(^XTMP("RGNETB",RGNETB("UID"),"S",TYPE)),SUBSCR=''$G(SUBSCR)
"RTN","RGNETBEV",155,0)
 I CURRNT'=SUBSCR D
"RTN","RGNETBEV",156,0)
 .I SUBSCR D  Q:'SUBSCR
"RTN","RGNETBEV",157,0)
 ..I $$KEYCHECK(TYPE,21) S SUBSCR=0
"RTN","RGNETBEV",158,0)
 ..E  S ^XTMP("RGNETB",RGNETB("UID"),"S",TYPE)=""
"RTN","RGNETBEV",159,0)
 .E  D
"RTN","RGNETBEV",160,0)
 ..K ^XTMP("RGNETB",RGNETB("UID"),"S",TYPE)
"RTN","RGNETBEV",161,0)
 ..D CLRVAR^RGNETBUT("EVENT."_TYPE)
"RTN","RGNETBEV",162,0)
 .D BRDCAST($S(SUBSCR:"",1:"UN")_"SUBSCRIBE."_TYPE,$$SESSION^RGNETBUT)
"RTN","RGNETBEV",163,0)
 Q:$Q SUBSCR
"RTN","RGNETBEV",164,0)
 Q
"RTN","RGNETBEV",165,0)
 ; Unsubscribe from all events (done at logout)
"RTN","RGNETBEV",166,0)
UNSUBALL ;EP
"RTN","RGNETBEV",167,0)
 N TYPE
"RTN","RGNETBEV",168,0)
 S TYPE=""
"RTN","RGNETBEV",169,0)
 F  S TYPE=$O(^XTMP("RGNETB",RGNETB("UID"),"S",TYPE)) Q:'$L(TYPE)  D
"RTN","RGNETBEV",170,0)
 .D SUBSCR(TYPE,0)
"RTN","RGNETBEV",171,0)
 Q
"RTN","RGNETBEV",172,0)
 ; Returns true if session is a subscriber
"RTN","RGNETBEV",173,0)
ISSUBSCR(UID,TYPE) ;EP
"RTN","RGNETBEV",174,0)
 Q $S('$$ISACTIVE^RGNETBUT(UID):0,1:$$ISSUBX(TYPE))
"RTN","RGNETBEV",175,0)
ISSUBX(TYPE) ;
"RTN","RGNETBEV",176,0)
 Q $S('$L(TYPE):0,$D(^XTMP("RGNETB",UID,"S",TYPE)):1,1:$$ISSUBX($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","RGNETBEV",177,0)
 ; Returns list of subscribers to a given event type
"RTN","RGNETBEV",178,0)
GETSUBSC(DATA,TYPE) ;EP
"RTN","RGNETBEV",179,0)
 N Z
"RTN","RGNETBEV",180,0)
 D GETSESSN^RGNETBRP(.DATA)
"RTN","RGNETBEV",181,0)
 F Z=0:0 S Z=$O(@DATA@(Z)) Q:'Z  K:'$$ISSUBSCR(+@DATA@(Z),TYPE) @DATA@(Z)
"RTN","RGNETBEV",182,0)
 Q
"RTN","RGNETBEV",183,0)
 ; Returns number of days to retain log entries for an event type.
"RTN","RGNETBEV",184,0)
ISLOGGED(TYPE) ;EP
"RTN","RGNETBEV",185,0)
 N X,Y
"RTN","RGNETBEV",186,0)
 S TYPE=$$EVENTIEN(TYPE)
"RTN","RGNETBEV",187,0)
 S:TYPE X=^RGNET(996.54,TYPE,0),Y=$P(X,U,4),X=$P(X,U)
"RTN","RGNETBEV",188,0)
 Q $S('TYPE:0,'$L(Y):$$ISLOGGED($P(X,".",$L(X,".")-1)),1:Y)
"RTN","RGNETBEV",189,0)
 ; Log an event
"RTN","RGNETBEV",190,0)
LOG(TYPE,STUB) ;EP
"RTN","RGNETBEV",191,0)
 N IEN,FDA,ERR,STB,X
"RTN","RGNETBEV",192,0)
 S IEN=$$ISACTIVE^RGNETBLG
"RTN","RGNETBEV",193,0)
 I IEN D
"RTN","RGNETBEV",194,0)
 .S X=$$LOG^RGNETBLG(IEN,2,TYPE)
"RTN","RGNETBEV",195,0)
 .D:X ADD^RGNETBLG(IEN,X,"STUB")
"RTN","RGNETBEV",196,0)
 Q:'$$ISLOGGED(TYPE)
"RTN","RGNETBEV",197,0)
 S FDA=$NA(FDA(996.55,"+1,")),STB="STUB",X=0
"RTN","RGNETBEV",198,0)
 F  D  Q:'$L(STB)
"RTN","RGNETBEV",199,0)
 .S:$D(@STB)#2 X=X+1,STB(X)=@STB
"RTN","RGNETBEV",200,0)
 .S STB=$Q(@STB)
"RTN","RGNETBEV",201,0)
 S @FDA@(.01)=$$NOW^XLFDT
"RTN","RGNETBEV",202,0)
 S @FDA@(1)=TYPE
"RTN","RGNETBEV",203,0)
 S @FDA@(2)=DUZ
"RTN","RGNETBEV",204,0)
 S @FDA@(3)=$$GETUID^RGNETBUT
"RTN","RGNETBEV",205,0)
 S:X @FDA@(10)="STB"
"RTN","RGNETBEV",206,0)
 D UPDATE^DIE("U","FDA",,"ERR")
"RTN","RGNETBEV",207,0)
 Q
"RTN","RGNETBEV",208,0)
 ; Purge event log.  Specify at least one of:
"RTN","RGNETBEV",209,0)
 ;   DATE = Date before which entries will be purged.
"RTN","RGNETBEV",210,0)
 ;   TYPE = Event type to be purged.
"RTN","RGNETBEV",211,0)
 ;   FLAG = If set, purges child events as well.
"RTN","RGNETBEV",212,0)
PURGELOG(DATE,TYPE,FLAG) ;EP
"RTN","RGNETBEV",213,0)
 N IEN,CNT
"RTN","RGNETBEV",214,0)
 S CNT=0,TYPE=$G(TYPE),FLAG=$S($G(FLAG):12,1:1)
"RTN","RGNETBEV",215,0)
 S:TYPE=+TYPE TYPE=$$EVENTNAM(TYPE)
"RTN","RGNETBEV",216,0)
 I $G(DATE) D
"RTN","RGNETBEV",217,0)
 .F  S DATE=$O(^RGNET(996.55,"B",DATE),-1),IEN=0 Q:'DATE  D
"RTN","RGNETBEV",218,0)
 ..F  S IEN=$O(^RGNET(996.55,"B",DATE,IEN)) Q:'IEN  D
"RTN","RGNETBEV",219,0)
 ...I $L(TYPE),FLAG'[$$RELATES(TYPE,$P(^RGNET(996.55,IEN,0),U,2)) Q
"RTN","RGNETBEV",220,0)
 ...S CNT=CNT+$$DELLOG(IEN)
"RTN","RGNETBEV",221,0)
 E  D
"RTN","RGNETBEV",222,0)
 .N TYP
"RTN","RGNETBEV",223,0)
 .S IEN=0,TYP=TYPE
"RTN","RGNETBEV",224,0)
 .F  Q:'$L(TYPE)  D
"RTN","RGNETBEV",225,0)
 ..F  S IEN=$O(^RGNET(996.55,"C",TYPE,IEN)) Q:'IEN  S CNT=CNT+$$DELLOG(IEN)
"RTN","RGNETBEV",226,0)
 ..S TYPE=$O(^RGNET(996.55,"C",TYPE))
"RTN","RGNETBEV",227,0)
 ..S:FLAG'[$$RELATES(TYP,TYPE) TYPE=""
"RTN","RGNETBEV",228,0)
 Q:$Q CNT
"RTN","RGNETBEV",229,0)
 Q
"RTN","RGNETBEV",230,0)
 ; Delete log entry corresponding to IEN
"RTN","RGNETBEV",231,0)
DELLOG(IEN) ;EP
"RTN","RGNETBEV",232,0)
 N FDA,ERR
"RTN","RGNETBEV",233,0)
 S FDA(996.55,IEN_",",.01)="@"
"RTN","RGNETBEV",234,0)
 D FILE^DIE(,"FDA","ERR")
"RTN","RGNETBEV",235,0)
 Q:$Q '$D(ERR)
"RTN","RGNETBEV",236,0)
 Q
"RTN","RGNETBEV",237,0)
 ; Task purge in background
"RTN","RGNETBEV",238,0)
TASKPRG ;EP
"RTN","RGNETBEV",239,0)
 N ZTSK
"RTN","RGNETBEV",240,0)
 S ZTSK=$$QUEUE^RGUTTSK("DOPURGE^RGNETBEV(1)","Purge RG EVENT LOG")
"RTN","RGNETBEV",241,0)
 I ZTSK>0 W !,"RG EVENT LOG purge submitted as task #",ZTSK,!!
"RTN","RGNETBEV",242,0)
 E  W !,"Error submitting RG EVENT LOG purge.",!!
"RTN","RGNETBEV",243,0)
 Q
"RTN","RGNETBEV",244,0)
 ; Purges event log according to retention settings
"RTN","RGNETBEV",245,0)
DOPURGE(SILENT) ;EP
"RTN","RGNETBEV",246,0)
 N IEN,TPNM,TPEN,DATE,CNT,TOT
"RTN","RGNETBEV",247,0)
 S TPNM="",SILENT=+$G(SILENT),TOT=0
"RTN","RGNETBEV",248,0)
 F  S TPNM=$O(^RGNET(996.55,"C",TPNM)) Q:'$L(TPNM)  D
"RTN","RGNETBEV",249,0)
 .S TPEN=$$EVENTIEN(TPNM),DATE=+$P($G(^RGNET(996.54,TPEN,0)),U,5)
"RTN","RGNETBEV",250,0)
 .S DATE=$$FMADD^XLFDT(DT,$S(DATE:1-DATE,1:-13))
"RTN","RGNETBEV",251,0)
 .S CNT=$$PURGELOG(DATE,TPNM),TOT=TOT+CNT
"RTN","RGNETBEV",252,0)
 .I CNT,'SILENT W $$SNGPLR^RGU(CNT,"event")," purged for ",TPNM,!
"RTN","RGNETBEV",253,0)
 W:'SILENT !,"Total events purged: ",TOT,!!
"RTN","RGNETBEV",254,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","RGNETBEV",255,0)
 Q
"RTN","RGNETBEV",256,0)
 ; Returns the relationship between event types
"RTN","RGNETBEV",257,0)
 ;   0 = none
"RTN","RGNETBEV",258,0)
 ;   1 = same
"RTN","RGNETBEV",259,0)
 ;   2 = A is parent of B
"RTN","RGNETBEV",260,0)
 ;   3 = B is parent of A
"RTN","RGNETBEV",261,0)
RELATES(EVA,EVB) ;EP
"RTN","RGNETBEV",262,0)
 N SWP,X
"RTN","RGNETBEV",263,0)
 S:EVA=+EVA EVA=$$EVENTNAM(EVA)
"RTN","RGNETBEV",264,0)
 S:EVB=+EVB EVB=$$EVENTNAM(EVB)
"RTN","RGNETBEV",265,0)
 S:$L(EVA)>$L(EVB) SWP=EVA,EVA=EVB,EVB=SWP
"RTN","RGNETBEV",266,0)
 Q:EVA=EVB 1
"RTN","RGNETBEV",267,0)
 F  D  Q:'$L(EVB)!(EVA=EVB)
"RTN","RGNETBEV",268,0)
 .S EVB=$P(EVB,".",1,$L(EVB,".")-1)
"RTN","RGNETBEV",269,0)
 Q $S(EVA'=EVB:0,$D(SWP):3,1:2)
"RTN","RGNETBLG")
0^4^B10138528
"RTN","RGNETBLG",1,0)
RGNETBLG ;RI/CBMI/DKM - NETSERV RPC Broker Activity Log Support ;03-Apr-2015 09:47;DKM
"RTN","RGNETBLG",2,0)
 ;;1.0;NETWORK SERVICES;;Jan 3, 2008;Build 52
"RTN","RGNETBLG",3,0)
 ;=================================================================
"RTN","RGNETBLG",4,0)
 ; Open a log entry.  The return value is the IEN of the new entry.
"RTN","RGNETBLG",5,0)
 ;   UID  = Unique session id
"RTN","RGNETBLG",6,0)
 ;   USER = User IEN
"RTN","RGNETBLG",7,0)
 ;   WID  = Workstation id
"RTN","RGNETBLG",8,0)
OPEN(UID,USER,WID) ;EP
"RTN","RGNETBLG",9,0)
 N IEN,NOW,X
"RTN","RGNETBLG",10,0)
 S NOW=$$NOW^XLFDT
"RTN","RGNETBLG",11,0)
 S:$G(WID)="" WID="UNKNOWN"
"RTN","RGNETBLG",12,0)
 L +^RGNET(996.56,0):2
"RTN","RGNETBLG",13,0)
 S X=1+$P(^RGNET(996.56,0),U,3),IEN=$O(^($C(1)),-1)+1,$P(^(0),U,3,4)=X_U_IEN,^(IEN,0)=UID_U_USER_U_WID_U_NOW_U_U_DUZ(2)
"RTN","RGNETBLG",14,0)
 L -^RGNET(996.56,0)
"RTN","RGNETBLG",15,0)
 S ^RGNET(996.56,"B",UID,IEN)=""
"RTN","RGNETBLG",16,0)
 S ^RGNET(996.56,"BUSER",USER,IEN)=""
"RTN","RGNETBLG",17,0)
 S ^RGNET(996.56,"BWID",WID,IEN)=""
"RTN","RGNETBLG",18,0)
 S ^RGNET(996.56,"BLOGIN",NOW,IEN)=""
"RTN","RGNETBLG",19,0)
 S ^RGNET(996.56,"BDIV",DUZ(2),IEN)=""
"RTN","RGNETBLG",20,0)
 Q IEN
"RTN","RGNETBLG",21,0)
 ; Close a log entry.
"RTN","RGNETBLG",22,0)
 ;  IEN = IEN of the entry.
"RTN","RGNETBLG",23,0)
CLOSE(IEN) ;EP
"RTN","RGNETBLG",24,0)
 N NOW
"RTN","RGNETBLG",25,0)
 S NOW=$$NOW^XLFDT
"RTN","RGNETBLG",26,0)
 S:$D(^RGNET(996.56,+IEN,0)) $P(^(0),U,5)=NOW,^RGNET(996.56,"BLOGOUT",NOW,IEN)=""
"RTN","RGNETBLG",27,0)
 Q
"RTN","RGNETBLG",28,0)
 ; Log an activity
"RTN","RGNETBLG",29,0)
 ;  IEN  = IEN of log entry
"RTN","RGNETBLG",30,0)
 ;  TYPE = Type of log entry (1=RPC, 2=Event)
"RTN","RGNETBLG",31,0)
 ;  NAME = Text name associated with activity
"RTN","RGNETBLG",32,0)
 ;  Returns subfile IEN
"RTN","RGNETBLG",33,0)
LOG(IEN,TYPE,NAME) ;EP
"RTN","RGNETBLG",34,0)
 N SUB,NOW
"RTN","RGNETBLG",35,0)
 Q:'$D(^RGNET(996.56,IEN)) 0
"RTN","RGNETBLG",36,0)
 S NOW=$$NOW^XLFDT
"RTN","RGNETBLG",37,0)
 S SUB=$O(^RGNET(996.56,IEN,10,$C(1)),-1)+1,^(0)="^996.561D^"_SUB_U_SUB,^(SUB,0)=NOW_U_TYPE_U_NAME
"RTN","RGNETBLG",38,0)
 Q SUB
"RTN","RGNETBLG",39,0)
 ; Add an entry to the specified activity
"RTN","RGNETBLG",40,0)
 ;  IEN = IEN of log entry
"RTN","RGNETBLG",41,0)
 ;  SUB = IEN of subfile entry
"RTN","RGNETBLG",42,0)
 ;  ARY = Array or global root
"RTN","RGNETBLG",43,0)
 ;  INC = Include variable name with output (optional)
"RTN","RGNETBLG",44,0)
ADD(IEN,SUB,ARY,INC) ;EP
"RTN","RGNETBLG",45,0)
 N ROOT,WP,A,L,P,X,Y,Z
"RTN","RGNETBLG",46,0)
 S ROOT=$NA(^RGNET(996.56,IEN,10,SUB,10))
"RTN","RGNETBLG",47,0)
 S WP=$O(@ROOT@($C(1)),-1),WP(0)=WP,INC=+$G(INC),(A,ARY)=$NA(@ARY),L=$QL(ARY)
"RTN","RGNETBLG",48,0)
 F  D:$D(@A)#2  S A=$Q(@A) Q:'$L(A)  Q:$NA(@A,L)'=ARY
"RTN","RGNETBLG",49,0)
 .S X=@A,P=$S(INC:A_" = ",1:"")
"RTN","RGNETBLG",50,0)
 .F  Q:'$L(X)  D
"RTN","RGNETBLG",51,0)
 ..S Y=$F(X,$C(13))
"RTN","RGNETBLG",52,0)
 ..S:'Y!(Y>200) Y=200
"RTN","RGNETBLG",53,0)
 ..S Z=$TR($E(X,1,Y-1),$C(13,10)),X=$E(X,Y,999999)
"RTN","RGNETBLG",54,0)
 ..S WP=WP+1,@ROOT@(WP,0)=P_Z,P=$S(INC:">>> ",1:"")
"RTN","RGNETBLG",55,0)
 S:WP'=WP(0) @ROOT@(0)="^^"_WP_U_WP_U_$$NOW^XLFDT
"RTN","RGNETBLG",56,0)
 Q
"RTN","RGNETBLG",57,0)
 ; Delete a log entry
"RTN","RGNETBLG",58,0)
DELETE(DA) ;
"RTN","RGNETBLG",59,0)
 Q:'$D(^RGNET(996.56,DA))
"RTN","RGNETBLG",60,0)
 N DIK
"RTN","RGNETBLG",61,0)
 S DIK="^RGNET(996.56,"
"RTN","RGNETBLG",62,0)
 D ^DIK
"RTN","RGNETBLG",63,0)
 Q
"RTN","RGNETBLG",64,0)
 ; Task purge in background
"RTN","RGNETBLG",65,0)
TASKPRG N ZTSK
"RTN","RGNETBLG",66,0)
 S ZTSK=$$QUEUE^RGUTTSK("DOPURGE^RGNETBLG","Purge RG ACTIVITY LOG")
"RTN","RGNETBLG",67,0)
 I ZTSK>0 W !,"RG ACTIVITY LOG purge submitted as task #",ZTSK,!!
"RTN","RGNETBLG",68,0)
 E  W !,"Error submitting RG ACTIVITY LOG purge.",!!
"RTN","RGNETBLG",69,0)
 Q
"RTN","RGNETBLG",70,0)
 ; Purge log entries according to retention criteria
"RTN","RGNETBLG",71,0)
DOPURGE N DAYS,LP,IEN
"RTN","RGNETBLG",72,0)
 S DAYS=$$GET^XPAR("ALL","RGNETB ACTIVITY RETENTION")
"RTN","RGNETBLG",73,0)
 Q:'DAYS
"RTN","RGNETBLG",74,0)
 S LP=$$FMADD^XLFDT(DT,-DAYS)
"RTN","RGNETBLG",75,0)
 F  S LP=$O(^RGNET(996.56,"BLOGIN",LP),-1) Q:'LP  D
"RTN","RGNETBLG",76,0)
 .S IEN=0
"RTN","RGNETBLG",77,0)
 .F  S IEN=$O(^RGNET(996.56,"BLOGIN",LP,IEN)) Q:'IEN  D
"RTN","RGNETBLG",78,0)
 ..D DELETE(IEN)
"RTN","RGNETBLG",79,0)
 Q
"RTN","RGNETBLG",80,0)
 ; Returns true if activity logging is active
"RTN","RGNETBLG",81,0)
 ; Creates a log entry if one does not already exist
"RTN","RGNETBLG",82,0)
ISACTIVE() ;
"RTN","RGNETBLG",83,0)
 N RTN,DUZ2
"RTN","RGNETBLG",84,0)
 Q:'$D(RGNETB("UID")) 0
"RTN","RGNETBLG",85,0)
 Q:'RGNETB("UID") 0
"RTN","RGNETBLG",86,0)
 S DUZ2=$$GETVAR^RGNETBUT("DUZ2")
"RTN","RGNETBLG",87,0)
 S RTN=$$GETVAR^RGNETBUT("ALOG"_$S(DUZ2:":"_DUZ2,1:""))
"RTN","RGNETBLG",88,0)
 I RTN="" D
"RTN","RGNETBLG",89,0)
 .S RTN=+$$GET^XPAR("ALL","RGNETB ACTIVITY LOGGING","`"_$$GETVAR^RGNETBUT("AID0"))
"RTN","RGNETBLG",90,0)
 .S:RTN RTN=$$OPEN(RGNETB("UID"),DUZ,$$GETVAR^RGNETBUT("WID"))
"RTN","RGNETBLG",91,0)
 .D SETVAR^RGNETBUT("ALOG"_$S(DUZ2:":"_DUZ2,1:""),RTN)
"RTN","RGNETBLG",92,0)
 Q RTN
"RTN","RGNETBRK")
0^5^B5377240
"RTN","RGNETBRK",1,0)
RGNETBRK ;RI/CBMI/DKM - NETSERV RPC Broker ;05-Apr-2015 16:26;DKM
"RTN","RGNETBRK",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBRK",3,0)
 ;=================================================================
"RTN","RGNETBRK",4,0)
 ; Handler for broker I/O
"RTN","RGNETBRK",5,0)
NETSERV(RGNETB) ;
"RTN","RGNETBRK",6,0)
 S:$$DOACTION($S($D(RGNETB):"DPQRSU",1:"C")) RGRETRY=0
"RTN","RGNETBRK",7,0)
 Q
"RTN","RGNETBRK",8,0)
 ; Read action and params
"RTN","RGNETBRK",9,0)
 ;  VAC = List of valid action codes
"RTN","RGNETBRK",10,0)
 ; Returns true if valid inputs
"RTN","RGNETBRK",11,0)
DOACTION(VAC) ;
"RTN","RGNETBRK",12,0)
 N NM,SB,RT,VL,PR,RG,ACT,SEQ,ARG,RGERR,RGDATA,X
"RTN","RGNETBRK",13,0)
 S RGERR(0)=0
"RTN","RGNETBRK",14,0)
 S X=$$TCPREAD^RGNETTCP(8,10)
"RTN","RGNETBRK",15,0)
 Q:$E(X,1,5)'="{RGN}" 0
"RTN","RGNETBRK",16,0)
 S ARG=0,RGNETB("EOD")=$E(X,6),SEQ=$E(X,7),ACT=$E(X,8)
"RTN","RGNETBRK",17,0)
 F  S NM=$$TCPREADL Q:'$L(NM)  S PR=NM=+NM,RT=$S(PR:"P"_NM,1:"RGNETB("""_NM_"""") N:PR&'$D(ARG(NM)) @RT D
"RTN","RGNETBRK",18,0)
 .S:PR ARG=$S(NM>ARG:NM,1:ARG),ARG(NM)=""
"RTN","RGNETBRK",19,0)
 .S SB=$$TCPREADL,VL=$$TCPREADL
"RTN","RGNETBRK",20,0)
 .I $L(SB) S RT=RT_$S(PR:"(",1:",")_SB_")"
"RTN","RGNETBRK",21,0)
 .E  S:'PR RT=RT_")"
"RTN","RGNETBRK",22,0)
 .S @RT=VL
"RTN","RGNETBRK",23,0)
 D TCPWRITE^RGNETTCP(SEQ)
"RTN","RGNETBRK",24,0)
 I '$$ERRCHK^RGNETBAC(VAC'[ACT,9,ACT) D
"RTN","RGNETBRK",25,0)
 .N $ET,$ES
"RTN","RGNETBRK",26,0)
 .S $ET="D ETRAP2^RGNETBRK"
"RTN","RGNETBRK",27,0)
 .D @("ACT"_ACT_"^RGNETBAC")
"RTN","RGNETBRK",28,0)
 I RGERR(0) D
"RTN","RGNETBRK",29,0)
 .D SNDERR
"RTN","RGNETBRK",30,0)
 E  I $D(RGDATA) D
"RTN","RGNETBRK",31,0)
 .D REPLY(.RGDATA)
"RTN","RGNETBRK",32,0)
 E  D SNDEOD
"RTN","RGNETBRK",33,0)
 Q 1
"RTN","RGNETBRK",34,0)
 ; Read length-prefixed data from input stream
"RTN","RGNETBRK",35,0)
TCPREADL() ;
"RTN","RGNETBRK",36,0)
 N X,L,I,N
"RTN","RGNETBRK",37,0)
 S X=$$TCPREADB^RGNETTCP
"RTN","RGNETBRK",38,0)
 Q:$C(X)=RGNETB("EOD") ""
"RTN","RGNETBRK",39,0)
 S N=X#16,X=$$TCPREAD^RGNETTCP(X\16),L=0
"RTN","RGNETBRK",40,0)
 F I=1:1:$L(X) S L=L*256+$A(X,I)
"RTN","RGNETBRK",41,0)
 Q $$TCPREAD^RGNETTCP(L*16+N)
"RTN","RGNETBRK",42,0)
 ; Raise an exception
"RTN","RGNETBRK",43,0)
RAISE(MSG,P1,P2) ;
"RTN","RGNETBRK",44,0)
 D GETDLG^RGNETBUT(MSG,.MSG,.P1,.P2)
"RTN","RGNETBRK",45,0)
 S $EC=MSG(1)
"RTN","RGNETBRK",46,0)
 Q
"RTN","RGNETBRK",47,0)
 ; Trapped error, send error info to client
"RTN","RGNETBRK",48,0)
ETRAP2 N ECSAV
"RTN","RGNETBRK",49,0)
 S $ET="D UNWIND^RGNETBRK Q:$Q 0 Q",ECSAV=$$EC^%ZOSV,RGRETRY=RGRETRY+1
"RTN","RGNETBRK",50,0)
 D:RGRETRY=1 ^%ZTER,ERRCHK^RGNETBAC(1,1,ECSAV)
"RTN","RGNETBRK",51,0)
 S $EC=ECSAV
"RTN","RGNETBRK",52,0)
 Q
"RTN","RGNETBRK",53,0)
 ; Send a reply
"RTN","RGNETBRK",54,0)
REPLY(DATA,ACK) ;
"RTN","RGNETBRK",55,0)
 N MORE
"RTN","RGNETBRK",56,0)
 S MORE=$D(DATA)\10
"RTN","RGNETBRK",57,0)
 D TCPWRITE^RGNETTCP($C(+$G(ACK))_$G(DATA)_$S(MORE:$C(13),1:""))
"RTN","RGNETBRK",58,0)
 D:MORE ARYOUT("DATA",1)
"RTN","RGNETBRK",59,0)
 D SNDEOD
"RTN","RGNETBRK",60,0)
 K DATA
"RTN","RGNETBRK",61,0)
 Q
"RTN","RGNETBRK",62,0)
 ; Send error information
"RTN","RGNETBRK",63,0)
SNDERR N X
"RTN","RGNETBRK",64,0)
 D TCPWRITE^RGNETTCP($C(1))
"RTN","RGNETBRK",65,0)
 D ARYOUT("RGERR",1),SNDEOD
"RTN","RGNETBRK",66,0)
 S RGERR(0)=0
"RTN","RGNETBRK",67,0)
 Q
"RTN","RGNETBRK",68,0)
SNDEOD D TCPWRITE^RGNETTCP($$CTL("EOD"))
"RTN","RGNETBRK",69,0)
 Q
"RTN","RGNETBRK",70,0)
 ; Send data from an array.
"RTN","RGNETBRK",71,0)
 ;  ARY = Array to send
"RTN","RGNETBRK",72,0)
 ;  EOL = If true, append line terminator
"RTN","RGNETBRK",73,0)
ARYOUT(ARY,EOL) ;
"RTN","RGNETBRK",74,0)
 D ARYOUT^RGNETTCP(ARY,$S($G(EOL):$C(13),1:""))
"RTN","RGNETBRK",75,0)
 Q
"RTN","RGNETBRK",76,0)
 ; Return control byte
"RTN","RGNETBRK",77,0)
CTL(X) I $D(RGNETB(X)) N Y S Y=RGNETB(X) K RGNETB(X) Q Y
"RTN","RGNETBRK",78,0)
 Q ""
"RTN","RGNETBRP")
0^6^B62124423
"RTN","RGNETBRP",1,0)
RGNETBRP ;RI/CBMI/DKM - NETSERV RPC Broker Privileged RPCs;07-Apr-2015 15:13;DKM
"RTN","RGNETBRP",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBRP",3,0)
 ;=================================================================
"RTN","RGNETBRP",4,0)
 ; RPC: User authentication
"RTN","RGNETBRP",5,0)
 ; AID = Application ID
"RTN","RGNETBRP",6,0)
 ; WID = Workstation ID
"RTN","RGNETBRP",7,0)
 ; SID = NT Security ID
"RTN","RGNETBRP",8,0)
 ; AVC = AV Code
"RTN","RGNETBRP",9,0)
 ; WIP = Workstation IP address
"RTN","RGNETBRP",10,0)
 ; DIV = Login division (optional)
"RTN","RGNETBRP",11,0)
 ; Returns:
"RTN","RGNETBRP",12,0)
 ;  DATA(0)=Status code^Status text
"RTN","RGNETBRP",13,0)
 ;  where Status code is one of:
"RTN","RGNETBRP",14,0)
 ;   0 = success                 (Params=UID^net name^div name^DUZ)
"RTN","RGNETBRP",15,0)
 ;   1 = success, verify expired (Params=same as success)
"RTN","RGNETBRP",16,0)
 ;   2 = logins inhibited        (Params=null)
"RTN","RGNETBRP",17,0)
 ;   3 = locked                  (Params=null)
"RTN","RGNETBRP",18,0)
 ;   4 = authentication failure  (Params=server^volume^UCI^port)
"RTN","RGNETBRP",19,0)
 ;   5 = other error             (Params=null)
"RTN","RGNETBRP",20,0)
 ;  DATA(1)=Params
"RTN","RGNETBRP",21,0)
 ;  DATA(2,n)=Greeting message
"RTN","RGNETBRP",22,0)
AUTH(DATA,AID,WID,SID,AVC,WIP,DIV) ;
"RTN","RGNETBRP",23,0)
 N XOPT,XUT,XUTEXT,XOPT,XUEON,XUEOFF,XUTT,XUDEV,XUSER,XUNOW,X
"RTN","RGNETBRP",24,0)
 K DUZ,DATA,^TMP($J),^UTILITY($J)
"RTN","RGNETBRP",25,0)
 D SET1^XUS(0)
"RTN","RGNETBRP",26,0)
 S (DUZ,XUT)=0,DUZ(0)="",XUDEV=0,DATA(0)=4,DATA(1)=""
"RTN","RGNETBRP",27,0)
 S AID(0)=$$OPTLKP^RGNETBUT(.AID),WID=$$ID(.WID),SID=$G(SID),WIP=$G(WIP)
"RTN","RGNETBRP",28,0)
 I '$L(AID(0)),$$CHK(18,5,.AID) Q
"RTN","RGNETBRP",29,0)
 S X=$$OPTMSG^RGNETBUT(AID(0))
"RTN","RGNETBRP",30,0)
 I $L(X),$$CHK(19,2,X) Q
"RTN","RGNETBRP",31,0)
 I '$L($G(AVC)) S DUZ=+$$AUTOLOG(SID),RGXUT=0
"RTN","RGNETBRP",32,0)
 E  D
"RTN","RGNETBRP",33,0)
 .I $E(AVC,1,2)="~1" S DUZ=$$CHKASH^XUSRB4(AVC)
"RTN","RGNETBRP",34,0)
 .S:'DUZ DUZ=$$CHECKAV^XUS($$DECRYP^XUSRB1(AVC)),RGXUT=$G(RGXUT)+1
"RTN","RGNETBRP",35,0)
 .I 'DUZ,RGXUT>$P(XOPT,U,2),$$CHK(-7,3) Q
"RTN","RGNETBRP",36,0)
 .I 'DUZ,$$CHK(-4,4)
"RTN","RGNETBRP",37,0)
 I DUZ D
"RTN","RGNETBRP",38,0)
 .S DATA(0)=0,XUNOW=$$NOW^XLFDT,X=$$OPTCHK^RGNETBUT(AID)
"RTN","RGNETBRP",39,0)
 .Q:$$CHK(+X,2,$P(X,U,2),$P(X,U,3),$P(X,U,4))
"RTN","RGNETBRP",40,0)
 .Q:$$CHK(-$$INHIBIT^XUSRB,2)
"RTN","RGNETBRP",41,0)
 .I XUT>$P(XOPT,U,2),$$CHK(-7,3) Q
"RTN","RGNETBRP",42,0)
 .D USER^XUS(DUZ)
"RTN","RGNETBRP",43,0)
 .Q:$$CHK(-$$UVALID^XUS(),4)
"RTN","RGNETBRP",44,0)
 .Q:$$CHK(-$$USER^XUS1A,4)
"RTN","RGNETBRP",45,0)
 .F X=0:0 S X=$O(XUTEXT(X)) Q:'X  S DATA(2,X)=$E(XUTEXT(X),2,9999)
"RTN","RGNETBRP",46,0)
 .D DUZ^XUS1A,SAVE^XUS1,LOG^XUS1,ABT^XQ12
"RTN","RGNETBRP",47,0)
 .I $$VCVALID^XUSRB,$$CHK(-12,1)
"RTN","RGNETBRP",48,0)
 .I $G(RGNETB("UID")) D
"RTN","RGNETBRP",49,0)
 ..N UID
"RTN","RGNETBRP",50,0)
 ..S UID=RGNETB("UID"),RGNETB("UID")=0
"RTN","RGNETBRP",51,0)
 ..I '$D(^XTMP("RGNETB",UID)),$$CHK(25,5,UID) Q
"RTN","RGNETBRP",52,0)
 ..I $$SESSION^RGNETBUT(UID,"DUZ")'=DUZ,$$CHK(27,4,UID) Q
"RTN","RGNETBRP",53,0)
 ..D:$$ISACTIVE^RGNETBUT(UID) FORCEEX(RGCFG("port")_":"_$$GETVAR^RGNETBUT("JOB"))
"RTN","RGNETBRP",54,0)
 ..I $$ISACTIVE^RGNETBUT(UID,1,60),$$CHK(26,4,UID) Q
"RTN","RGNETBRP",55,0)
 ..S RGNETB("UID")=UID
"RTN","RGNETBRP",56,0)
 ..D RESVAR^RGNETBUT,SETVAR^RGNETBUT("JOB",$J)
"RTN","RGNETBRP",57,0)
 ..D BRDCAST^RGNETBEV("LOGIN",$$SESSION^RGNETBUT)
"RTN","RGNETBRP",58,0)
 .E  D
"RTN","RGNETBRP",59,0)
 ..S RGNETB("UID")=$$UID^RGNETBUT
"RTN","RGNETBRP",60,0)
 ..D:$G(DIV) DIVSET(,DIV)
"RTN","RGNETBRP",61,0)
 ..D RESET(1)
"RTN","RGNETBRP",62,0)
 .S DATA(1)=RGNETB("UID")_U_$G(^XMB("NETNAME"))_U_$$GET1^DIQ(4,DUZ(2),".01")_U_DUZ
"RTN","RGNETBRP",63,0)
 .S:AID(0) ^XUTL("XQ",$J,1)=AID(0)_U_$G(^DIC(19,AID(0),0)),^("T")=1
"RTN","RGNETBRP",64,0)
 .D AUTOSET(SID),STSAVE^RGNETTCP(1)
"RTN","RGNETBRP",65,0)
 I +DATA(0)=4 D
"RTN","RGNETBRP",66,0)
 .S DATA(1)=$P(XUENV,U,3)_U_$P(XUVOL,U)_U_XUCI_U_+RGCFG("port")
"RTN","RGNETBRP",67,0)
 Q
"RTN","RGNETBRP",68,0)
 ; Force exit disconnected broker session
"RTN","RGNETBRP",69,0)
FORCEEX(RGPORT) ;
"RTN","RGNETBRP",70,0)
 S @$$LOCKNODE^RGNETBRK=-1
"RTN","RGNETBRP",71,0)
 Q
"RTN","RGNETBRP",72,0)
 ; Transform ID values
"RTN","RGNETBRP",73,0)
ID(ID) Q $E($TR($G(ID),U,"~"),1,40)
"RTN","RGNETBRP",74,0)
 ; RPC: Change verify code
"RTN","RGNETBRP",75,0)
CVC(DATA,OLD,NEW) ;
"RTN","RGNETBRP",76,0)
 S DATA=$$BRCVC^XUS2($$DECRYP^XUSRB1(OLD),$$DECRYP^XUSRB1(NEW))
"RTN","RGNETBRP",77,0)
 S:'DATA DATA="0^Your verify code has been changed."
"RTN","RGNETBRP",78,0)
 Q
"RTN","RGNETBRP",79,0)
 ; RPC: Get division list
"RTN","RGNETBRP",80,0)
DIVGET(DATA) ;
"RTN","RGNETBRP",81,0)
 N X,P,G
"RTN","RGNETBRP",82,0)
 S X=0,G=$S(DUZ:$NA(^VA(200,DUZ,2)),1:$NA(^DG(40.8,"AD"))),P=0
"RTN","RGNETBRP",83,0)
 F  S X=$O(@G@(X)) Q:'X  S:DUZ P=$P(^(X,0),U,2) D
"RTN","RGNETBRP",84,0)
 .N X0,X99
"RTN","RGNETBRP",85,0)
 .S X0=$G(^DIC(4,X,0)),X99=$G(^(99))
"RTN","RGNETBRP",86,0)
 .S DATA(X)=X_U_$P(X0,U)_U_$P(X99,U)_U_$P(X0,U,5)
"RTN","RGNETBRP",87,0)
 .S:P DATA(0)=X
"RTN","RGNETBRP",88,0)
 S:'$D(DATA(0)) DATA(0)=+$O(DATA(0))
"RTN","RGNETBRP",89,0)
 I 'DATA(0),$G(DUZ(2)) S DATA(0)=DUZ(2),DATA(DUZ(2))=DUZ(2)_U_$$NS^XUAF4(DUZ(2))
"RTN","RGNETBRP",90,0)
 D:DATA(0) DIVSET(,DATA(0))
"RTN","RGNETBRP",91,0)
 Q
"RTN","RGNETBRP",92,0)
 ; RPC: Set division
"RTN","RGNETBRP",93,0)
DIVSET(DATA,DIV) ;
"RTN","RGNETBRP",94,0)
 S DUZ(2)=+DIV,DATA=1
"RTN","RGNETBRP",95,0)
 D SETVAR^RGNETBUT("DUZ2",DUZ(2))
"RTN","RGNETBRP",96,0)
 D SETVAR^RGNETBUT("DUZ(2)",DUZ(2),-1)
"RTN","RGNETBRP",97,0)
 Q
"RTN","RGNETBRP",98,0)
 ; RPC: Get dialog text
"RTN","RGNETBRP",99,0)
DIALOG(DATA,DLG,P1,P2,P3) ;
"RTN","RGNETBRP",100,0)
 D GETDLG^RGNETBUT(DLG,.DATA,.P1,.P2,.P3)
"RTN","RGNETBRP",101,0)
 Q
"RTN","RGNETBRP",102,0)
 ; RPC: Reset session
"RTN","RGNETBRP",103,0)
RESET(LOGIN) ;
"RTN","RGNETBRP",104,0)
 Q:'$G(RGNETB("UID"))
"RTN","RGNETBRP",105,0)
 D STOPALL^RGNETBAS,UNSUBALL^RGNETBEV
"RTN","RGNETBRP",106,0)
 S LOGIN=+$G(LOGIN)
"RTN","RGNETBRP",107,0)
 N DUZ2
"RTN","RGNETBRP",108,0)
 S DUZ2=$$GETVAR^RGNETBUT("DUZ2")
"RTN","RGNETBRP",109,0)
 I 'LOGIN D
"RTN","RGNETBRP",110,0)
 .D CLOSE^RGNETBLG($$GETVAR^RGNETBUT("ALOG"_$S(DUZ2:":"_DUZ2,1:"")))
"RTN","RGNETBRP",111,0)
 .S IO("IP")=$$GETVAR^RGNETBUT("WIP")
"RTN","RGNETBRP",112,0)
 .D BRDCAST^RGNETBEV("LOGOUT",$$SESSION^RGNETBUT)
"RTN","RGNETBRP",113,0)
 .K ^XTMP("RGNETB",RGNETB("UID"))
"RTN","RGNETBRP",114,0)
 .L -^XTMP("RGNETB",RGNETB("UID"),0)
"RTN","RGNETBRP",115,0)
 .D BYE^XUSCLEAN
"RTN","RGNETBRP",116,0)
 E  D
"RTN","RGNETBRP",117,0)
 .N ENV,X,Y,V
"RTN","RGNETBRP",118,0)
 .K ^XTMP("RGNETB",RGNETB("UID"))
"RTN","RGNETBRP",119,0)
 .F ENV=0:1 S X=$P($T(ENVDATA+ENV),";;",2) Q:'$L(X)  D
"RTN","RGNETBRP",120,0)
 ..S V=$P(X,";",2),@("Y="_V)
"RTN","RGNETBRP",121,0)
 ..D SETVAR^RGNETBUT($P(X,";"),Y)
"RTN","RGNETBRP",122,0)
 ..D:$P(X,";",3) SETVAR^RGNETBUT(V,Y,-1)
"RTN","RGNETBRP",123,0)
 .D BRDCAST^RGNETBEV("LOGIN",$$SESSION^RGNETBUT)
"RTN","RGNETBRP",124,0)
 .S IO("IP")=$$GETVAR^RGNETBUT("WIP")
"RTN","RGNETBRP",125,0)
 .I $$ISACTIVE^RGNETBLG
"RTN","RGNETBRP",126,0)
 .D LOG^XUS1                                                           ;creates handle with client agent
"RTN","RGNETBRP",127,0)
 Q
"RTN","RGNETBRP",128,0)
 ; Environment data to save
"RTN","RGNETBRP",129,0)
 ;;Name;Value;Local
"RTN","RGNETBRP",130,0)
ENVDATA ;;DUZ;DUZ
"RTN","RGNETBRP",131,0)
 ;;DUZ0;DUZ(0);1
"RTN","RGNETBRP",132,0)
 ;;DUZ2;DUZ(2);1
"RTN","RGNETBRP",133,0)
 ;;USER;$P($G(^VA(200,DUZ,0)),U)
"RTN","RGNETBRP",134,0)
 ;;RDEV;$$RESDEV^RGNETBUT
"RTN","RGNETBRP",135,0)
 ;;LDT;$H
"RTN","RGNETBRP",136,0)
 ;;JOB;$J
"RTN","RGNETBRP",137,0)
 ;;AID;AID
"RTN","RGNETBRP",138,0)
 ;;AID0;AID(0)
"RTN","RGNETBRP",139,0)
 ;;WID;WID
"RTN","RGNETBRP",140,0)
 ;;WIP;WIP
"RTN","RGNETBRP",141,0)
 ;;UID;RGNETB("UID")
"RTN","RGNETBRP",142,0)
 ;;
"RTN","RGNETBRP",143,0)
 ; Check error code
"RTN","RGNETBRP",144,0)
CHK(ERR,RTN,P1,P2,P3) ;
"RTN","RGNETBRP",145,0)
 I ERR S DATA(0)=RTN_U_$S(ERR<0:$$TXT^XUS3(-ERR),1:$$GETDLG^RGNETBUT(ERR,,.P1,.P2,.P3)) S:RTN>1 DUZ=0
"RTN","RGNETBRP",146,0)
 Q ERR
"RTN","RGNETBRP",147,0)
 ; Attempt autoauthenticate using SID
"RTN","RGNETBRP",148,0)
 ; Returns DUZ if SID has been authenticated, 0 if prohibited from
"RTN","RGNETBRP",149,0)
 ; being authenticated, or null if never been authenticated.
"RTN","RGNETBRP",150,0)
AUTOLOG(SID) ;
"RTN","RGNETBRP",151,0)
 S SID=$S($L($G(SID))<3:"",1:$$DECRYP^XUSRB1(SID))
"RTN","RGNETBRP",152,0)
 Q:$E(SID,1,9)'="S-1-5-21-" 0
"RTN","RGNETBRP",153,0)
 S SID=$E(SID,10,999)
"RTN","RGNETBRP",154,0)
 Q:SID<1000 0
"RTN","RGNETBRP",155,0)
 N X
"RTN","RGNETBRP",156,0)
 S X=$$FIND1^DIC(996.57,"","QX",SID)
"RTN","RGNETBRP",157,0)
 Q $S(X:+$P($G(^RGNET(996.57,X,0)),U,2),1:"")
"RTN","RGNETBRP",158,0)
 ; Cache NT authentication information
"RTN","RGNETBRP",159,0)
AUTOSET(SID) ;
"RTN","RGNETBRP",160,0)
 Q:$$AUTOLOG(.SID)'=""
"RTN","RGNETBRP",161,0)
 N FLD
"RTN","RGNETBRP",162,0)
 S FLD(996.57,"+1,",.01)=SID
"RTN","RGNETBRP",163,0)
 S FLD(996.57,"+1,",1)=DUZ
"RTN","RGNETBRP",164,0)
 S FLD(996.57,"+1,",2)=$$NOW^XLFDT
"RTN","RGNETBRP",165,0)
 D UPDATE^DIE("","FLD")
"RTN","RGNETBRP",166,0)
 Q
"RTN","RGNETBRP",167,0)
 ; RPC: Get list of active RPCs
"RTN","RGNETBRP",168,0)
GETRPCS(DATA) ;
"RTN","RGNETBRP",169,0)
 N X
"RTN","RGNETBRP",170,0)
 D LIST^DIC(8994,,".01","Q",,,,,"I ""03""[$P(^(0),U,6)",,.DATA)
"RTN","RGNETBRP",171,0)
 S X=""
"RTN","RGNETBRP",172,0)
 F  S X=$O(@DATA@(X)) Q:'$L(X)  K:X'="ID" @DATA@(X)
"RTN","RGNETBRP",173,0)
 Q
"RTN","RGNETBRP",174,0)
 ; RPC: Can RPC be executed in current context
"RTN","RGNETBRP",175,0)
CANRUN(DATA,RPC) ;
"RTN","RGNETBRP",176,0)
 S DATA=$$CANRUN^RGNETBAC($$FIND1^DIC(8994,,"QX",RPC),RGNETB("CTX"))
"RTN","RGNETBRP",177,0)
 Q
"RTN","RGNETBRP",178,0)
 ; RPC: Retrieve list of active sessions
"RTN","RGNETBRP",179,0)
GETSESSN(DATA,VAR,AID) ;
"RTN","RGNETBRP",180,0)
 N X,Z,C
"RTN","RGNETBRP",181,0)
 S DATA=$$TMPGBL
"RTN","RGNETBRP",182,0)
 F C=1:1 Q:'$$NXTUID^RGNETBUT(.X,,.AID)  S @DATA@(C)=$$SESSION^RGNETBUT(X,.VAR)
"RTN","RGNETBRP",183,0)
 Q
"RTN","RGNETBRP",184,0)
 ; RPC: Get stored variable(s)
"RTN","RGNETBRP",185,0)
GETVAR(DATA,LIST,NMSP) ;
"RTN","RGNETBRP",186,0)
 N CNT
"RTN","RGNETBRP",187,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGNETBRP",188,0)
 S LIST="",CNT=0
"RTN","RGNETBRP",189,0)
 S:0[$G(NMSP) NMSP="@"
"RTN","RGNETBRP",190,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGNETBRP",191,0)
 .S CNT=CNT+1,DATA(CNT)=LIST(LIST)_"="_$$GETVAR^RGNETBUT(LIST(LIST),,NMSP)
"RTN","RGNETBRP",192,0)
 Q
"RTN","RGNETBRP",193,0)
 ; RPC: Set stored variable(s)
"RTN","RGNETBRP",194,0)
SETVAR(DATA,LIST,NMSP,RESET) ;
"RTN","RGNETBRP",195,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGNETBRP",196,0)
 S LIST="",DATA=0
"RTN","RGNETBRP",197,0)
 S:0[$G(NMSP) NMSP="@"
"RTN","RGNETBRP",198,0)
 D:$G(RESET) CLRVAR^RGNETBUT(NMSP)
"RTN","RGNETBRP",199,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGNETBRP",200,0)
 .S DATA=DATA+1
"RTN","RGNETBRP",201,0)
 .D SETVAR^RGNETBUT($P(LIST(LIST),"="),$P(LIST(LIST),"=",2,9999),NMSP)
"RTN","RGNETBRP",202,0)
 Q
"RTN","RGNETBRP",203,0)
 ; RPC: Get requested session info
"RTN","RGNETBRP",204,0)
 ; TYPE = 0=subscriptions, 1=local vars, 2=session vars, 3=locks, 4=pending async RPCs
"RTN","RGNETBRP",205,0)
 ; UID  = Session ID (defaults to current session)
"RTN","RGNETBRP",206,0)
GETINFO(DATA,TYPE,UID) ;
"RTN","RGNETBRP",207,0)
 S UID=$G(UID,$G(RGNETB("UID")))
"RTN","RGNETBRP",208,0)
 I TYPE=0 D  Q
"RTN","RGNETBRP",209,0)
 .N EV,CN
"RTN","RGNETBRP",210,0)
 .S EV="",CN=0
"RTN","RGNETBRP",211,0)
 .F  S EV=$O(^XTMP("RGNETB",UID,"S",EV)) Q:'$L(EV)  D
"RTN","RGNETBRP",212,0)
 ..S CN=CN+1,@DATA@(CN)=EV
"RTN","RGNETBRP",213,0)
 I TYPE=1 D  Q
"RTN","RGNETBRP",214,0)
 .D CAPTURE^RGUHFS("ZWRITE  N X F X=""$ET"",""$EC"",""$ES"",""$J"",""$ZE"",""$ZT"" W !,X,""="",@X",DATA,99999)
"RTN","RGNETBRP",215,0)
 I TYPE=2 D  Q
"RTN","RGNETBRP",216,0)
 .N NS,VN,VL,CN
"RTN","RGNETBRP",217,0)
 .S NS="",CN=0
"RTN","RGNETBRP",218,0)
 .F  S NS=$O(^XTMP("RGNETB",UID,"V",NS)),VN="" Q:'$L(NS)  D
"RTN","RGNETBRP",219,0)
 ..F  S VN=$O(^XTMP("RGNETB",UID,"V",NS,VN)) Q:'$L(VN)  S VL=$G(^(VN)) D
"RTN","RGNETBRP",220,0)
 ...S CN=CN+1,@DATA@(CN)=$S(NS=0:"<default>",NS=-1:"<mapped>",1:NS)_U_VN_U_VL
"RTN","RGNETBRP",221,0)
 I TYPE=3 D  Q
"RTN","RGNETBRP",222,0)
 .N GBL,CN,VL
"RTN","RGNETBRP",223,0)
 .S GBL="",CN=0
"RTN","RGNETBRP",224,0)
 .F  S GBL=$O(^XTMP("RGNETB",UID,"L",GBL)) Q:'$L(GBL)  S VL=$G(^(GBL)) D
"RTN","RGNETBRP",225,0)
 ..S CN=CN+1,@DATA@(CN)=$TR(GBL,U,"~")_U_VL
"RTN","RGNETBRP",226,0)
 I TYPE=4 D  Q
"RTN","RGNETBRP",227,0)
 .N TSK,CN
"RTN","RGNETBRP",228,0)
 .S (TSK,CN)=0
"RTN","RGNETBRP",229,0)
 .F  S TSK=$O(^XTMP("RGNETB",UID,"T",TSK)) Q:'TSK  D
"RTN","RGNETBRP",230,0)
 ..S CN=CN+1,@DATA@(CN)=TSK_U_$G(^%ZTSK(TSK,.03),"Unknown")
"RTN","RGNETBRP",231,0)
 S @DATA@(1)="Unknown request type: "_TYPE
"RTN","RGNETBRP",232,0)
 Q
"RTN","RGNETBRP",233,0)
 ; Lock/unlock global reference
"RTN","RGNETBRP",234,0)
 ; GBL  = Global reference
"RTN","RGNETBRP",235,0)
 ; OPR  = Operation to perform:
"RTN","RGNETBRP",236,0)
 ;        >=0: Value is timeout for lock operation.  Returns success.
"RTN","RGNETBRP",237,0)
 ;         <0: Returns # of active locks for node.
"RTN","RGNETBRP",238,0)
 ;    missing: Performs unlock operation.  Returns success.
"RTN","RGNETBRP",239,0)
 ; DATA = Returns status according to value of OPR.
"RTN","RGNETBRP",240,0)
LOCK(DATA,GBL,OPR) ;
"RTN","RGNETBRP",241,0)
 N LCK
"RTN","RGNETBRP",242,0)
 S LCK=$D(OPR),OPR=+$G(OPR),GBL=$NA(@GBL)
"RTN","RGNETBRP",243,0)
 I OPR<0 S DATA=$$LOCKCNT(GBL)
"RTN","RGNETBRP",244,0)
 E  I LCK D
"RTN","RGNETBRP",245,0)
 .L +@GBL:OPR
"RTN","RGNETBRP",246,0)
 .S DATA=$T
"RTN","RGNETBRP",247,0)
 .I DATA,$$LOCKCNT(GBL,1)
"RTN","RGNETBRP",248,0)
 E  D
"RTN","RGNETBRP",249,0)
 .S DATA=''$$LOCKCNT(GBL,-1)
"RTN","RGNETBRP",250,0)
 .L:DATA -@GBL
"RTN","RGNETBRP",251,0)
 Q
"RTN","RGNETBRP",252,0)
 ; RPC: Restore locks (after reconnect)
"RTN","RGNETBRP",253,0)
 ; Data returns list of locks that could not be restored.
"RTN","RGNETBRP",254,0)
LOCKRES(DATA) ;
"RTN","RGNETBRP",255,0)
 N GBL,CNT,X
"RTN","RGNETBRP",256,0)
 S GBL="",X=0
"RTN","RGNETBRP",257,0)
 F  S GBL=$O(^XTMP("RGNETB",RGNETB("UID"),"L",GBL)) Q:'$L(GBL)  S CNT=+$G(^(GBL))  D
"RTN","RGNETBRP",258,0)
 .F CNT=CNT:-1:1 L +@GBL:1 E  D  Q
"RTN","RGNETBRP",259,0)
 ..S X=X+1,@DATA@(X)=GBL
"RTN","RGNETBRP",260,0)
 ..K ^XTMP("RGNETB",RGNETB("UID"),"L",GBL)
"RTN","RGNETBRP",261,0)
 Q
"RTN","RGNETBRP",262,0)
 ; Return lock count.  Optionally increment/decrement afterwards.
"RTN","RGNETBRP",263,0)
 ; Note use of naked reference.
"RTN","RGNETBRP",264,0)
LOCKCNT(GBL,INC) ;
"RTN","RGNETBRP",265,0)
 N X,Y
"RTN","RGNETBRP",266,0)
 S X=+$G(^XTMP("RGNETB",RGNETB("UID"),"L",GBL)),Y=X+$G(INC)                  ; Sets naked reference
"RTN","RGNETBRP",267,0)
 I Y>0 S ^(GBL)=Y
"RTN","RGNETBRP",268,0)
 E  K ^(GBL)
"RTN","RGNETBRP",269,0)
 Q X
"RTN","RGNETBRP",270,0)
 ; Get temp global reference
"RTN","RGNETBRP",271,0)
TMPGBL(X) ;
"RTN","RGNETBRP",272,0)
 K ^TMP("RGNETBTMP"_$G(X),$J) Q $NA(^($J))
"RTN","RGNETBUT")
0^7^B38250970
"RTN","RGNETBUT",1,0)
RGNETBUT ;RI/CBMI/DKM - NETSERV RPC Broker Utilities ;01-Apr-2015 14:12;DKM
"RTN","RGNETBUT",2,0)
 ;;1.0;NETWORK SERVICES;;01-Apr-2015;Build 52
"RTN","RGNETBUT",3,0)
 ;=================================================================
"RTN","RGNETBUT",4,0)
 ; Cleanup stray global nodes
"RTN","RGNETBUT",5,0)
CLEANUP ;EP
"RTN","RGNETBUT",6,0)
 N UID
"RTN","RGNETBUT",7,0)
 F  Q:'$$NXTUID(.UID,0)  K ^XTMP("RGNETB",UID)
"RTN","RGNETBUT",8,0)
 Q
"RTN","RGNETBUT",9,0)
 ; Force RPC context tables to be rebuilt for all active sessions
"RTN","RGNETBUT",10,0)
REBLDCTX ;EP
"RTN","RGNETBUT",11,0)
 N UID,CTX
"RTN","RGNETBUT",12,0)
 F  Q:'$$NXTUID(.UID)  D
"RTN","RGNETBUT",13,0)
 .F CTX=0:0 S CTX=$O(^XTMP("RGNETB",UID,"C",CTX)) Q:'CTX  S ^(CTX)=0
"RTN","RGNETBUT",14,0)
 Q
"RTN","RGNETBUT",15,0)
 ; Get globally unique instance ID
"RTN","RGNETBUT",16,0)
UID() N UID,FLG
"RTN","RGNETBUT",17,0)
 L +^XTMP("RGNETB",0):5
"RTN","RGNETBUT",18,0)
 E  Q "-3^Cannot initialize environment"
"RTN","RGNETBUT",19,0)
 S FLG=0
"RTN","RGNETBUT",20,0)
 F UID=$P($G(^XTMP("RGNETB",0)),U,3)+1:1 D  Q:(UID<1)!(FLG=2)
"RTN","RGNETBUT",21,0)
 .I (UID<1)!(UID>999999) D  Q:UID<1
"RTN","RGNETBUT",22,0)
 ..S UID=$S('FLG:1,1:"-4^Lock table is full"),FLG=1
"RTN","RGNETBUT",23,0)
 .S:'$$ISACTIVE(UID,1) FLG=2
"RTN","RGNETBUT",24,0)
 S:UID>0 ^XTMP("RGNETB",0)=(DT+10000)_U_DT_U_UID
"RTN","RGNETBUT",25,0)
 L -^XTMP("RGNETB",0)
"RTN","RGNETBUT",26,0)
 Q UID
"RTN","RGNETBUT",27,0)
 ; Verifies that a session is truly active
"RTN","RGNETBUT",28,0)
 ;   UID = Unique id of session
"RTN","RGNETBUT",29,0)
 ;   LCK = If nonzero, leave lock active (defaults to 0)
"RTN","RGNETBUT",30,0)
 ;   TMO = Optional lock timeout (defaults to 0)
"RTN","RGNETBUT",31,0)
ISACTIVE(UID,LCK,TMO) ;EP
"RTN","RGNETBUT",32,0)
 Q:'$G(UID) 0
"RTN","RGNETBUT",33,0)
 Q:UID=$G(RGNETB("UID")) 1
"RTN","RGNETBUT",34,0)
 L +^XTMP("RGNETB",UID,0):+$G(TMO)
"RTN","RGNETBUT",35,0)
 E  Q 1
"RTN","RGNETBUT",36,0)
 L:'$G(LCK) -^XTMP("RGNETB",UID,0)
"RTN","RGNETBUT",37,0)
 Q 0
"RTN","RGNETBUT",38,0)
 ; Gets the session ID associated with this process
"RTN","RGNETBUT",39,0)
 ; If not in session context, attempt answerback from client
"RTN","RGNETBUT",40,0)
GETUID() ;EP
"RTN","RGNETBUT",41,0)
 I '$D(RGNETB("UID")) D
"RTN","RGNETBUT",42,0)
 .S RGNETB("UID")=""
"RTN","RGNETBUT",43,0)
 .Q:$D(ZTQUEUED)
"RTN","RGNETBUT",44,0)
 .N X,UID,I
"RTN","RGNETBUT",45,0)
 .S I=$I,UID=""
"RTN","RGNETBUT",46,0)
 .U $S($D(IO(0)):IO(0),1:$P)                                           ; Use home device
"RTN","RGNETBUT",47,0)
 .X ^%ZOSF("EOFF")                                                     ; Suppress echo
"RTN","RGNETBUT",48,0)
 .F  R X#1:0 Q:'$T                                                     ; Flush keyboard buffer
"RTN","RGNETBUT",49,0)
 .W $C(5)                                                              ; Send answerback request
"RTN","RGNETBUT",50,0)
 .F  R X:4 Q:'$T&'$L(X)  S UID=UID_X                                   ; Listen for response
"RTN","RGNETBUT",51,0)
 .S UID=$P(UID,"RG#",2)
"RTN","RGNETBUT",52,0)
 .X ^%ZOSF("EON")                                                      ; Restore echo
"RTN","RGNETBUT",53,0)
 .U I                                                                  ; Restore previous device
"RTN","RGNETBUT",54,0)
 .I $$ISACTIVE(UID),$$GETVAR("DUZ",,,UID)=DUZ S RGNETB("UID")=UID
"RTN","RGNETBUT",55,0)
 .E  S RGNETB("UID")=""
"RTN","RGNETBUT",56,0)
 Q:$Q RGNETB("UID")
"RTN","RGNETBUT",57,0)
 Q
"RTN","RGNETBUT",58,0)
 ; Retrieve next session ID from list
"RTN","RGNETBUT",59,0)
 ;   UID passed as last ID processed, returned as next ID or null
"RTN","RGNETBUT",60,0)
 ;   FLT = <0=all; 0=inactive only; >0=active only (default)
"RTN","RGNETBUT",61,0)
 ;   AID = Application ID (optional)
"RTN","RGNETBUT",62,0)
 ;   Return value is true if ID found
"RTN","RGNETBUT",63,0)
NXTUID(UID,FLT,AID) ;EP
"RTN","RGNETBUT",64,0)
 N PFX,FND,ALL,ACT
"RTN","RGNETBUT",65,0)
 S FLT=+$G(FLT,1),FND=0,ALL=FLT<0,ACT=FLT>0,AID=$$OPTLKP(.AID),UID=+$G(UID)
"RTN","RGNETBUT",66,0)
 I $L(AID) F  S UID=$O(^XTMP("RGNETB",UID)) Q:'UID  D  Q:FND
"RTN","RGNETBUT",67,0)
 .I AID,$$GETVAR("AID0",,,UID)'=AID Q
"RTN","RGNETBUT",68,0)
 .I 'ALL,$$ISACTIVE(UID)'=ACT Q
"RTN","RGNETBUT",69,0)
 .S FND=1
"RTN","RGNETBUT",70,0)
 S:'FND UID=""
"RTN","RGNETBUT",71,0)
 Q:$Q FND
"RTN","RGNETBUT",72,0)
 Q
"RTN","RGNETBUT",73,0)
 ; Retrieve a package parameter value
"RTN","RGNETBUT",74,0)
PARAM(PAR,MIN,MAX) ;EP
"RTN","RGNETBUT",75,0)
 S VAL=+$$GET^XPAR("ALL",PAR)
"RTN","RGNETBUT",76,0)
 S:VAL<MIN VAL=MIN
"RTN","RGNETBUT",77,0)
 S:VAL>MAX VAL=MAX
"RTN","RGNETBUT",78,0)
 Q VAL
"RTN","RGNETBUT",79,0)
 ; Return free resource device
"RTN","RGNETBUT",80,0)
RESDEV() ;EP
"RTN","RGNETBUT",81,0)
 N RD,MX,SL,UID,X,C
"RTN","RGNETBUT",82,0)
 S MX=$$PARAM("RGNETB RESOURCE DEVICE COUNT",1,20)
"RTN","RGNETBUT",83,0)
 S SL=$$PARAM("RGNETB RESOURCE DEVICE SLOTS",1,20)
"RTN","RGNETBUT",84,0)
 F  Q:'$$NXTUID(.UID)  D
"RTN","RGNETBUT",85,0)
 .S RD=$$GETVAR("RDEV",,,UID)
"RTN","RGNETBUT",86,0)
 .S:RD RD(RD)=$G(RD(RD))+1
"RTN","RGNETBUT",87,0)
 S RD=1,C=999999
"RTN","RGNETBUT",88,0)
 F X=1:1:MX S:+$G(RD(X))<C RD=X,C=+$G(RD(X))
"RTN","RGNETBUT",89,0)
 S X=$$RES^XUDHSET("RGNETB THREAD RESOURCE #"_RD,,SL,"RG Broker Asynchronous Callbacks")
"RTN","RGNETBUT",90,0)
 Q RD
"RTN","RGNETBUT",91,0)
 ; Set maximum slots for resource devices
"RTN","RGNETBUT",92,0)
SETSLOTS(CNT) ;EP
"RTN","RGNETBUT",93,0)
 N RES,IEN,FDA,X,Y
"RTN","RGNETBUT",94,0)
 Q:CNT<2!(CNT>20)
"RTN","RGNETBUT",95,0)
 D FIND^DIC(3.5,,"@","UP","RGNETB THREAD RESOURCE #",,"B")
"RTN","RGNETBUT",96,0)
 F RES=0:0 S RES=$O(^TMP("DILIST",$J,RES)) Q:'RES  S IEN=+$G(^(RES,0)) D:IEN
"RTN","RGNETBUT",97,0)
 .S FDA(3.5,IEN_",",35)=CNT
"RTN","RGNETBUT",98,0)
 D FILE^DIE("K","FDA")
"RTN","RGNETBUT",99,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","RGNETBUT",100,0)
 Q
"RTN","RGNETBUT",101,0)
 ; Return info for session
"RTN","RGNETBUT",102,0)
SESSION(UID,VAR) ;EP
"RTN","RGNETBUT",103,0)
 N X,Y,Z
"RTN","RGNETBUT",104,0)
 S (X,Y)=""
"RTN","RGNETBUT",105,0)
 S:'$L($G(VAR)) VAR="UID^WID^AID^DUZ^USER^LDT^JOB"
"RTN","RGNETBUT",106,0)
 F Z=1:1:$L(VAR,U) S X=X_Y_$$GETVAR($P(VAR,U,Z),,,.UID),Y=U
"RTN","RGNETBUT",107,0)
 Q X
"RTN","RGNETBUT",108,0)
 ; Show active sessions
"RTN","RGNETBUT",109,0)
 ;   AID = optional application id
"RTN","RGNETBUT",110,0)
 ;   FLT = <0=all; 0=inactive only; >0=active only (default)
"RTN","RGNETBUT",111,0)
SHOWSESS(AID,FLT) ;EP
"RTN","RGNETBUT",112,0)
 N C,X,Z
"RTN","RGNETBUT",113,0)
 F C=0:1 Q:'$$NXTUID(.X,.FLT,.AID)  D
"RTN","RGNETBUT",114,0)
 .W "#",X,?10,$$HTE^XLFDT($$GETVAR("LDT",,,X)),?40,$$GETVAR("WID",,,X),?60,$$GETVAR("USER",,,X),!
"RTN","RGNETBUT",115,0)
 W !,$S('C:"No sessions are",C=1:"One session is",1:C_" sessions are")," ",$S(FLT>0:"active",FLT<0:"present",1:"inactive"),".",!
"RTN","RGNETBUT",116,0)
 Q:$Q C
"RTN","RGNETBUT",117,0)
 Q
"RTN","RGNETBUT",118,0)
 ; Fetch an environment variable
"RTN","RGNETBUT",119,0)
 ;   NAME = Variable name
"RTN","RGNETBUT",120,0)
 ;   DFLT = Optional default value
"RTN","RGNETBUT",121,0)
 ;   NMSP = Optional namespace (defaults to global)
"RTN","RGNETBUT",122,0)
 ;   UID  = Optional session id (default to current)
"RTN","RGNETBUT",123,0)
GETVAR(NAME,DFLT,NMSP,UID) ;EP
"RTN","RGNETBUT",124,0)
 D FMTVAR(.UID,.NMSP,.NAME)
"RTN","RGNETBUT",125,0)
 Q $S('UID:"",1:$G(^XTMP("RGNETB",UID,"V",NMSP,NAME),$G(DFLT)))
"RTN","RGNETBUT",126,0)
 ; Save an environment variable
"RTN","RGNETBUT",127,0)
 ;   NAME = Variable name
"RTN","RGNETBUT",128,0)
 ;   VALUE = Value to be assigned (if not specified, entry is deleted)
"RTN","RGNETBUT",129,0)
 ;   NMSP = Optional namespace (defaults to global)
"RTN","RGNETBUT",130,0)
SETVAR(NAME,VALUE,NMSP,UID) ;EP
"RTN","RGNETBUT",131,0)
 N $ET
"RTN","RGNETBUT",132,0)
 S $ET="S $EC="""" G ERRVAR^RGNETBUT"
"RTN","RGNETBUT",133,0)
 D FMTVAR(.UID,.NMSP,.NAME)
"RTN","RGNETBUT",134,0)
 I 'UID Q:$Q 0 Q
"RTN","RGNETBUT",135,0)
 L +^XTMP("RGNETB",UID,"V",NMSP,NAME):1
"RTN","RGNETBUT",136,0)
 ;E  Q:$Q 0 Q
"RTN","RGNETBUT",137,0)
 I $D(VALUE) S:NMSP=-1 @NAME=VALUE S ^XTMP("RGNETB",UID,"V",NMSP,NAME)=VALUE
"RTN","RGNETBUT",138,0)
 E  K:NMSP=-1 @NAME K ^XTMP("RGNETB",UID,"V",NMSP,NAME)
"RTN","RGNETBUT",139,0)
 L -^XTMP("RGNETB",UID,"V",NMSP,NAME)
"RTN","RGNETBUT",140,0)
 Q:$Q 1
"RTN","RGNETBUT",141,0)
 Q
"RTN","RGNETBUT",142,0)
 ; Clear all variables in a namespace
"RTN","RGNETBUT",143,0)
CLRVAR(NMSP,UID) ;EP
"RTN","RGNETBUT",144,0)
 N NAME,RES
"RTN","RGNETBUT",145,0)
 D FMTVAR(.UID,.NMSP)
"RTN","RGNETBUT",146,0)
 L +^XTMP("RGNETB",UID,"V",NMSP):1
"RTN","RGNETBUT",147,0)
 ;E  Q:$Q 0 Q
"RTN","RGNETBUT",148,0)
 S NAME="",RES=1
"RTN","RGNETBUT",149,0)
 F  S NAME=$O(^XTMP("RGNETB",UID,"V",NMSP,NAME)) Q:'$L(NAME)  S RES=RES&$$SETVAR(NAME,,NMSP,UID)
"RTN","RGNETBUT",150,0)
 L -^XTMP("RGNETB",UID,"V",NMSP)
"RTN","RGNETBUT",151,0)
 Q:$Q RES
"RTN","RGNETBUT",152,0)
 Q
"RTN","RGNETBUT",153,0)
 ; Restore variables from local variable namespace
"RTN","RGNETBUT",154,0)
RESVAR N NAME,UID
"RTN","RGNETBUT",155,0)
 D FMTVAR(.UID)
"RTN","RGNETBUT",156,0)
 S NAME=""
"RTN","RGNETBUT",157,0)
 F  S NAME=$O(^XTMP("RGNETB",UID,"V",-1,NAME)) Q:'$L(NAME)  S @NAME=^(NAME)
"RTN","RGNETBUT",158,0)
 Q
"RTN","RGNETBUT",159,0)
 ; Error handler for var calls
"RTN","RGNETBUT",160,0)
ERRVAR L -^XTMP("RGNETB",UID,"V",NMSP,NAME)
"RTN","RGNETBUT",161,0)
 Q:$Q 0
"RTN","RGNETBUT",162,0)
 Q
"RTN","RGNETBUT",163,0)
 ; Format arguments for var calls
"RTN","RGNETBUT",164,0)
FMTVAR(UID,NMSP,NAME) ;
"RTN","RGNETBUT",165,0)
 S UID=$G(UID,$G(RGNETB("UID")))
"RTN","RGNETBUT",166,0)
 S NMSP=$$UP^XLFSTR($G(NMSP,0))
"RTN","RGNETBUT",167,0)
 S NAME=$$UP^XLFSTR($G(NAME))
"RTN","RGNETBUT",168,0)
 S:NMSP=-1&$L(NAME) NAME=$NA(@NAME)
"RTN","RGNETBUT",169,0)
 Q
"RTN","RGNETBUT",170,0)
 ; Retrieve dialog text
"RTN","RGNETBUT",171,0)
 ;  NUM = Dialog number (relative or absolute)
"RTN","RGNETBUT",172,0)
 ; .DLG = Array to receive text
"RTN","RGNETBUT",173,0)
 ;  Pn  = Optional parameters (up to 3)
"RTN","RGNETBUT",174,0)
GETDLG(NUM,DLG,P1,P2,P3) ;
"RTN","RGNETBUT",175,0)
 N X
"RTN","RGNETBUT",176,0)
 S:NUM<100 NUM=NUM+9965400
"RTN","RGNETBUT",177,0)
 S P1=$G(P1,$G(RGNETB("RPC")))
"RTN","RGNETBUT",178,0)
 S X=$$GETDLG^RGUT(NUM,.DLG,.P1,.P2,.P3)
"RTN","RGNETBUT",179,0)
 Q:$Q X
"RTN","RGNETBUT",180,0)
 Q
"RTN","RGNETBUT",181,0)
 ; Lookup option, returning IEN
"RTN","RGNETBUT",182,0)
OPTLKP(OPT) ;EP
"RTN","RGNETBUT",183,0)
 Q $S('$L($G(OPT)):0,OPT=+OPT:OPT,1:$O(^DIC(19,"B",OPT,0)))
"RTN","RGNETBUT",184,0)
 ; Get/set out-of-order message for option
"RTN","RGNETBUT",185,0)
 ;   MSG = New message (if passed, a set is performed, otherwise a get)
"RTN","RGNETBUT",186,0)
 ;   Returns current message text
"RTN","RGNETBUT",187,0)
OPTMSG(OPT,MSG) ;EP
"RTN","RGNETBUT",188,0)
 S OPT=+$$OPTLKP(.OPT)
"RTN","RGNETBUT",189,0)
 I OPT,$D(^DIC(19,OPT,0)) D                                            ; Sets naked ref
"RTN","RGNETBUT",190,0)
 .I $D(MSG) S $P(^(0),U,3)=MSG
"RTN","RGNETBUT",191,0)
 .E  S MSG=$P(^(0),U,3)
"RTN","RGNETBUT",192,0)
 E  S MSG=""
"RTN","RGNETBUT",193,0)
 Q:$Q MSG
"RTN","RGNETBUT",194,0)
 Q
"RTN","RGNETBUT",195,0)
 ; Check option for valid access
"RTN","RGNETBUT",196,0)
 ;   OPT=Option IEN or name
"RTN","RGNETBUT",197,0)
 ;   TYP=Optional option type to check
"RTN","RGNETBUT",198,0)
 ;   Returns 0 if OK, <err code>^<err param> otherwise
"RTN","RGNETBUT",199,0)
OPTCHK(OPT,TYP) ;EP
"RTN","RGNETBUT",200,0)
 N XQY,X,Y,Z
"RTN","RGNETBUT",201,0)
 S XQY=$S(OPT=+OPT:OPT,1:$$OPTLKP(OPT))
"RTN","RGNETBUT",202,0)
 Q:XQY'>0 "2^"_OPT
"RTN","RGNETBUT",203,0)
 S X=$G(^DIC(19,XQY,0)),Y=$P($G(^(3)),U),Z=$P(X,U,3)
"RTN","RGNETBUT",204,0)
 Q:$L(Z) "19^"_Z
"RTN","RGNETBUT",205,0)
 I $L($G(TYP)),$P(X,U,4)'=TYP Q "20^"_OPT_U_TYP
"RTN","RGNETBUT",206,0)
 I $P(X,U,16),$L(Y),$$KCHK^XUSRB(Y) Q "21^"_OPT_U_Y
"RTN","RGNETBUT",207,0)
 S Y=$P(X,U,6)
"RTN","RGNETBUT",208,0)
 I $L(Y),'$$KCHK^XUSRB(Y) Q "22^"_OPT_U_Y
"RTN","RGNETBUT",209,0)
 S X=$$NOW^XLFDT
"RTN","RGNETBUT",210,0)
 D ENTRY^XQ92
"RTN","RGNETBUT",211,0)
 Q:'X "23^"_OPT
"RTN","RGNETBUT",212,0)
 Q 0
"RTN","RGNETBUT",213,0)
 ; Nightly task to perform various cleanup procedures.
"RTN","RGNETBUT",214,0)
NIGHTLY ;EP
"RTN","RGNETBUT",215,0)
 D CLEANUP
"RTN","RGNETBUT",216,0)
 D DOPURGE^RGNETBEV(1)
"RTN","RGNETBUT",217,0)
 D DOPURGE^RGNETBLG
"RTN","RGNETBUT",218,0)
 Q
"SEC","^DIC",996.5,996.5,0,"AUDIT")
@
"SEC","^DIC",996.5,996.5,0,"DD")
@
"SEC","^DIC",996.5,996.5,0,"DEL")
@
"SEC","^DIC",996.5,996.5,0,"LAYGO")
@
"SEC","^DIC",996.5,996.5,0,"RD")
@
"SEC","^DIC",996.5,996.5,0,"WR")
@
"SEC","^DIC",996.54,996.54,0,"AUDIT")
@
"SEC","^DIC",996.54,996.54,0,"DD")
@
"SEC","^DIC",996.54,996.54,0,"DEL")
@
"SEC","^DIC",996.54,996.54,0,"LAYGO")
@
"SEC","^DIC",996.54,996.54,0,"RD")
@
"SEC","^DIC",996.54,996.54,0,"WR")
@
"SEC","^DIC",996.55,996.55,0,"AUDIT")
@
"SEC","^DIC",996.55,996.55,0,"DD")
@
"SEC","^DIC",996.55,996.55,0,"DEL")
@
"SEC","^DIC",996.55,996.55,0,"LAYGO")
@
"SEC","^DIC",996.55,996.55,0,"RD")
@
"SEC","^DIC",996.55,996.55,0,"WR")
@
"SEC","^DIC",996.56,996.56,0,"AUDIT")
@
"SEC","^DIC",996.56,996.56,0,"DD")
@
"SEC","^DIC",996.56,996.56,0,"DEL")
@
"SEC","^DIC",996.56,996.56,0,"LAYGO")
@
"SEC","^DIC",996.56,996.56,0,"WR")
@
"SEC","^DIC",996.57,996.57,0,"AUDIT")
@
"SEC","^DIC",996.57,996.57,0,"DD")
@
"SEC","^DIC",996.57,996.57,0,"DEL")
@
"SEC","^DIC",996.57,996.57,0,"LAYGO")
@
"SEC","^DIC",996.57,996.57,0,"RD")
@
"SEC","^DIC",996.57,996.57,0,"WR")
@
"VER")
8.0^22.0
"^DD",996.5,996.5,0)
FIELD^^4^6
"^DD",996.5,996.5,0,"DDA")
N
"^DD",996.5,996.5,0,"DT")
3150330
"^DD",996.5,996.5,0,"IX","B",996.5,.01)

"^DD",996.5,996.5,0,"NM","NETSERV TCP LISTENER")

"^DD",996.5,996.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",996.5,996.5,.01,1,0)
^.1
"^DD",996.5,996.5,.01,1,1,0)
996.5^B
"^DD",996.5,996.5,.01,1,1,1)
S ^RGNET(996.5,"B",$E(X,1,30),DA)=""
"^DD",996.5,996.5,.01,1,1,2)
K ^RGNET(996.5,"B",$E(X,1,30),DA)
"^DD",996.5,996.5,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",996.5,996.5,.01,21,0)
^^1^1^3150330.090909
"^DD",996.5,996.5,.01,21,1,0)
This is the unique name for the primary listener.
"^DD",996.5,996.5,1,0)
PORT^NJ5,0^^0;2^K:+X'=X!(X>32767)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,1,3)
Enter the TCP port number.
"^DD",996.5,996.5,1,21,0)
^^2^2^3150330.090954
"^DD",996.5,996.5,1,21,1,0)
This is the TCP port that the primary listener uses to service connection
"^DD",996.5,996.5,1,21,2,0)
requests.
"^DD",996.5,996.5,1,"DT")
3150329
"^DD",996.5,996.5,2,0)
UCI^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",996.5,996.5,2,3)
Enter the target UCI (none = current).
"^DD",996.5,996.5,2,21,0)
^^2^2^3150330.091148
"^DD",996.5,996.5,2,21,1,0)
This is the UCI where the primary listener should be spawned.  If not specified,
"^DD",996.5,996.5,2,21,2,0)
the primary listener will reside in the same UCI where it was initially spawned.
"^DD",996.5,996.5,2,"DT")
3150329
"^DD",996.5,996.5,3,0)
DISABLE^S^0:NO;1:YES;^0;4^Q
"^DD",996.5,996.5,3,3)
Enter YES to disable the listener.
"^DD",996.5,996.5,3,21,0)
^^2^2^3150330.091254
"^DD",996.5,996.5,3,21,1,0)
If set to YES, attempts to spawn a primary or secondary listener will fail.
"^DD",996.5,996.5,3,21,2,0)
This has no impact on currently running listeners.
"^DD",996.5,996.5,3,"DT")
3150330
"^DD",996.5,996.5,4,0)
MAXIMUM^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.5,996.5,4,3)
Enter the maximum number of secondary listeners.
"^DD",996.5,996.5,4,21,0)
^.001^3^3^3150330^
"^DD",996.5,996.5,4,21,1,0)
This sets the maximum allowable number of secondary listeners that may be 
"^DD",996.5,996.5,4,21,2,0)
spawned by the primary listener.  When this number is exceeded, additional
"^DD",996.5,996.5,4,21,3,0)
connection requests will be denied.
"^DD",996.5,996.5,4,"DT")
3150330
"^DD",996.5,996.5,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.5,996.5,10,3)
Enter entry point for I/O handler as TAG^ROUTINE.
"^DD",996.5,996.5,10,21,0)
^^7^7^3150330.091725
"^DD",996.5,996.5,10,21,1,0)
This is the entry point (as TAG^ROUTINE) that will service an established
"^DD",996.5,996.5,10,21,2,0)
connection.  The handler should relinquish control back to the caller after
"^DD",996.5,996.5,10,21,3,0)
completing each request/response cycle to allow the caller to determine if
"^DD",996.5,996.5,10,21,4,0)
the connection should be terminated.  The handler may request termination
"^DD",996.5,996.5,10,21,5,0)
by setting RGQUIT to a nonzero value.  Otherwise, unless an external request
"^DD",996.5,996.5,10,21,6,0)
to terminate the connection has been received, the handler will be called
"^DD",996.5,996.5,10,21,7,0)
again.
"^DD",996.5,996.5,10,"DT")
3150330
"^DD",996.54,996.54,0)
FIELD^^7^14
"^DD",996.54,996.54,0,"DT")
3091007
"^DD",996.54,996.54,0,"IX","B",996.54,.01)

"^DD",996.54,996.54,0,"NM","NETSERV BROKER EVENT TYPE")

"^DD",996.54,996.54,0,"PT",996.55,1)

"^DD",996.54,996.54,0,"PT",999.995,.01)

"^DD",996.54,996.54,0,"PT",19930.995,.01)

"^DD",996.54,996.54,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",996.54,996.54,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",996.54,996.54,.01,1,0)
^.1
"^DD",996.54,996.54,.01,1,1,0)
996.54^B
"^DD",996.54,996.54,.01,1,1,1)
S ^RGNET(996.54,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.54,.01,1,1,2)
K ^RGNET(996.54,"B",$E(X,1,30),DA)
"^DD",996.54,996.54,.01,3)
Answer must be 3-100 characters in length.
"^DD",996.54,996.54,.01,"DT")
3030611
"^DD",996.54,996.54,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",996.54,996.54,1,3)
M code to invoke monitor for this event type
"^DD",996.54,996.54,1,9)
@
"^DD",996.54,996.54,1,"DT")
3021021
"^DD",996.54,996.54,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",996.54,996.54,2,3)
Enter YES to disable this event type.
"^DD",996.54,996.54,2,21,0)
^.001^3^3^3030810^
"^DD",996.54,996.54,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",996.54,996.54,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",996.54,996.54,2,21,3,0)
already in the queue. 
"^DD",996.54,996.54,2,"DT")
3030810
"^DD",996.54,996.54,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",996.54,996.54,3,3)
Enter the nominal polling interval in seconds.
"^DD",996.54,996.54,3,21,0)
^^10^10^3021021.152235
"^DD",996.54,996.54,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",996.54,996.54,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",996.54,996.54,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",996.54,996.54,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",996.54,996.54,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",996.54,996.54,3,21,6,0)
 
"^DD",996.54,996.54,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",996.54,996.54,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",996.54,996.54,3,21,9,0)
mitigate impact on system load. 
"^DD",996.54,996.54,3,21,10,0)

"^DD",996.54,996.54,3,"DT")
3021021
"^DD",996.54,996.54,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",996.54,996.54,4,3)
Enter YES to enable logging of this event.
"^DD",996.54,996.54,4,"DT")
3030611
"^DD",996.54,996.54,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.54,996.54,5,3)
Number of days to retain log entries.
"^DD",996.54,996.54,5,"DT")
3030611
"^DD",996.54,996.54,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",996.54,996.54,6,3)
Determines how a monitored event is polled.
"^DD",996.54,996.54,6,21,0)
^^11^11^3030810.175145
"^DD",996.54,996.54,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",996.54,996.54,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",996.54,996.54,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",996.54,996.54,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",996.54,996.54,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",996.54,996.54,6,21,6,0)
is available to the monitor in this case.
"^DD",996.54,996.54,6,21,7,0)

"^DD",996.54,996.54,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",996.54,996.54,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",996.54,996.54,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",996.54,996.54,6,21,11,0)
the host date/time).
"^DD",996.54,996.54,6,"DT")
3030810
"^DD",996.54,996.54,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""RGNE"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",996.54,996.54,7,12)
Restricts to Extended Action Protocols starting with RGNE
"^DD",996.54,996.54,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""RGNE"",$P(^(0),U,4)=""X"""
"^DD",996.54,996.54,7,"DT")
3091007
"^DD",996.54,996.54,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",996.54,996.54,10,3)
Logic to display stub info in log viewer.
"^DD",996.54,996.54,10,9)
@
"^DD",996.54,996.54,10,"DT")
3030611
"^DD",996.54,996.54,20,0)
PUBLICATION KEY^996.542P^^20;0
"^DD",996.54,996.54,21,0)
SUBSCRIPTION KEY^996.5421P^^21;0
"^DD",996.54,996.54,99,0)
DESCRIPTION^996.5499^^99;0
"^DD",996.54,996.54,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.54,996.54,100,3)
Date and time of last error
"^DD",996.54,996.54,100,"DT")
3061129
"^DD",996.54,996.54,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",996.54,996.54,101,3)
Answer must be 1-240 characters in length.
"^DD",996.54,996.54,101,"DT")
3061129
"^DD",996.54,996.542,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",996.54,996.542,0,"DT")
3021021
"^DD",996.54,996.542,0,"IX","B",996.542,.01)

"^DD",996.54,996.542,0,"NM","PUBLICATION KEY")

"^DD",996.54,996.542,0,"UP")
996.54
"^DD",996.54,996.542,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",996.54,996.542,.01,1,0)
^.1
"^DD",996.54,996.542,.01,1,1,0)
996.542^B
"^DD",996.54,996.542,.01,1,1,1)
S ^RGNET(996.54,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.542,.01,1,1,2)
K ^RGNET(996.54,DA(1),20,"B",$E(X,1,30),DA)
"^DD",996.54,996.542,.01,3)
Security keys required to fire this event.
"^DD",996.54,996.542,.01,21,0)
^^2^2^3021021.152715
"^DD",996.54,996.542,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",996.54,996.542,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",996.54,996.542,.01,"DT")
3040310
"^DD",996.54,996.5421,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",996.54,996.5421,0,"DT")
3021021
"^DD",996.54,996.5421,0,"IX","B",996.5421,.01)

"^DD",996.54,996.5421,0,"NM","SUBSCRIPTION KEY")

"^DD",996.54,996.5421,0,"UP")
996.54
"^DD",996.54,996.5421,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",996.54,996.5421,.01,1,0)
^.1
"^DD",996.54,996.5421,.01,1,1,0)
996.5421^B
"^DD",996.54,996.5421,.01,1,1,1)
S ^RGNET(996.54,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.5421,.01,1,1,2)
K ^RGNET(996.54,DA(1),21,"B",$E(X,1,30),DA)
"^DD",996.54,996.5421,.01,3)
Security keys required to receive this event type.
"^DD",996.54,996.5421,.01,21,0)
^^2^2^3021021.153002
"^DD",996.54,996.5421,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",996.54,996.5421,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",996.54,996.5421,.01,"DT")
3040310
"^DD",996.54,996.5499,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",996.54,996.5499,0,"DT")
3021021
"^DD",996.54,996.5499,0,"NM","DESCRIPTION")

"^DD",996.54,996.5499,0,"UP")
996.54
"^DD",996.54,996.5499,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",996.54,996.5499,.01,3)
Enter a detailed description of this event type.
"^DD",996.54,996.5499,.01,"DT")
3021021
"^DD",996.55,996.55,0)
FIELD^^10^5
"^DD",996.55,996.55,0,"DT")
3030611
"^DD",996.55,996.55,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",996.55,996.55,0,"IX","B",996.55,.01)

"^DD",996.55,996.55,0,"IX","C",996.55,1)

"^DD",996.55,996.55,0,"IX","D",996.55,2)

"^DD",996.55,996.55,0,"IX","E",996.55,3)

"^DD",996.55,996.55,0,"NM","NETSERV BROKER EVENT LOG")

"^DD",996.55,996.55,0,"VRPK")
NETSERV RPC BROKER
"^DD",996.55,996.55,.01,0)
TIMESTAMP^RD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.55,996.55,.01,1,0)
^.1
"^DD",996.55,996.55,.01,1,1,0)
996.55^B
"^DD",996.55,996.55,.01,1,1,1)
S ^RGNET(996.55,"B",$E(X,1,30),DA)=""
"^DD",996.55,996.55,.01,1,1,2)
K ^RGNET(996.55,"B",$E(X,1,30),DA)
"^DD",996.55,996.55,.01,3)
Time event was logged.
"^DD",996.55,996.55,.01,"DT")
3030611
"^DD",996.55,996.55,1,0)
EVENT NAME^RF^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",996.55,996.55,1,1,0)
^.1
"^DD",996.55,996.55,1,1,1,0)
996.55^C
"^DD",996.55,996.55,1,1,1,1)
S ^RGNET(996.55,"C",$E(X,1,30),DA)=""
"^DD",996.55,996.55,1,1,1,2)
K ^RGNET(996.55,"C",$E(X,1,30),DA)
"^DD",996.55,996.55,1,1,1,"DT")
3030611
"^DD",996.55,996.55,1,3)
Name of event.
"^DD",996.55,996.55,1,"DT")
3030611
"^DD",996.55,996.55,2,0)
USER^P200'^VA(200,^0;3^Q
"^DD",996.55,996.55,2,1,0)
^.1
"^DD",996.55,996.55,2,1,1,0)
996.55^D
"^DD",996.55,996.55,2,1,1,1)
S ^RGNET(996.55,"D",$E(X,1,30),DA)=""
"^DD",996.55,996.55,2,1,1,2)
K ^RGNET(996.55,"D",$E(X,1,30),DA)
"^DD",996.55,996.55,2,1,1,"DT")
3030611
"^DD",996.55,996.55,2,3)
User originating the event.
"^DD",996.55,996.55,2,"DT")
3030611
"^DD",996.55,996.55,3,0)
SESSION^NJ15,0^^0;4^K:+X'=X!(X>999999999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.55,996.55,3,1,0)
^.1
"^DD",996.55,996.55,3,1,1,0)
996.55^E
"^DD",996.55,996.55,3,1,1,1)
S ^RGNET(996.55,"E",$E(X,1,30),DA)=""
"^DD",996.55,996.55,3,1,1,2)
K ^RGNET(996.55,"E",$E(X,1,30),DA)
"^DD",996.55,996.55,3,1,1,"DT")
3030611
"^DD",996.55,996.55,3,3)
Session originating the event.
"^DD",996.55,996.55,3,"DT")
3030611
"^DD",996.55,996.55,10,0)
EVENT STUB^996.552^^10;0
"^DD",996.55,996.552,0)
EVENT STUB SUB-FIELD^^.01^1
"^DD",996.55,996.552,0,"DT")
3030611
"^DD",996.55,996.552,0,"NM","EVENT STUB")

"^DD",996.55,996.552,0,"UP")
996.55
"^DD",996.55,996.552,.01,0)
EVENT STUB^WL^^0;1^Q
"^DD",996.55,996.552,.01,3)
Data associated with event.
"^DD",996.55,996.552,.01,"DT")
3030611
"^DD",996.56,996.56,0)
FIELD^^10^7
"^DD",996.56,996.56,0,"DDA")
N
"^DD",996.56,996.56,0,"DT")
3080104
"^DD",996.56,996.56,0,"IX","B",996.56,.01)

"^DD",996.56,996.56,0,"IX","BDIV",996.56,5)

"^DD",996.56,996.56,0,"IX","BLOGIN",996.56,3)

"^DD",996.56,996.56,0,"IX","BLOGOUT",996.56,4)

"^DD",996.56,996.56,0,"IX","BUSER",996.56,1)

"^DD",996.56,996.56,0,"IX","BWKID",996.56,2)

"^DD",996.56,996.56,0,"NM","NETSERV BROKER ACTIVITY LOG")

"^DD",996.56,996.56,0,"VRPK")
NETSERV RPC BROKER
"^DD",996.56,996.56,.01,0)
SESSION ID^RNJ9,0^^0;1^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.56,996.56,.01,1,0)
^.1
"^DD",996.56,996.56,.01,1,1,0)
996.56^B
"^DD",996.56,996.56,.01,1,1,1)
S ^RGNET(996.56,"B",$E(X,1,30),DA)=""
"^DD",996.56,996.56,.01,1,1,2)
K ^RGNET(996.56,"B",$E(X,1,30),DA)
"^DD",996.56,996.56,.01,3)
This is the unique identifier for the session.
"^DD",996.56,996.56,.01,"DT")
3080103
"^DD",996.56,996.56,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",996.56,996.56,1,1,0)
^.1
"^DD",996.56,996.56,1,1,1,0)
996.56^BUSER
"^DD",996.56,996.56,1,1,1,1)
S ^RGNET(996.56,"BUSER",$E(X,1,30),DA)=""
"^DD",996.56,996.56,1,1,1,2)
K ^RGNET(996.56,"BUSER",$E(X,1,30),DA)
"^DD",996.56,996.56,1,1,1,"DT")
3080103
"^DD",996.56,996.56,1,3)
User associated with this session.
"^DD",996.56,996.56,1,"DT")
3080103
"^DD",996.56,996.56,2,0)
WORKSTATION ID^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",996.56,996.56,2,1,0)
^.1
"^DD",996.56,996.56,2,1,1,0)
996.56^BWKID
"^DD",996.56,996.56,2,1,1,1)
S ^RGNET(996.56,"BWKID",$E(X,1,30),DA)=""
"^DD",996.56,996.56,2,1,1,2)
K ^RGNET(996.56,"BWKID",$E(X,1,30),DA)
"^DD",996.56,996.56,2,1,1,"DT")
3080103
"^DD",996.56,996.56,2,3)
Name of the workstation originating this session.
"^DD",996.56,996.56,2,"DT")
3080103
"^DD",996.56,996.56,3,0)
LOGIN TIME^D^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.56,996.56,3,1,0)
^.1
"^DD",996.56,996.56,3,1,1,0)
996.56^BLOGIN
"^DD",996.56,996.56,3,1,1,1)
S ^RGNET(996.56,"BLOGIN",$E(X,1,30),DA)=""
"^DD",996.56,996.56,3,1,1,2)
K ^RGNET(996.56,"BLOGIN",$E(X,1,30),DA)
"^DD",996.56,996.56,3,1,1,"DT")
3080103
"^DD",996.56,996.56,3,3)
Time of initial login.
"^DD",996.56,996.56,3,"DT")
3080103
"^DD",996.56,996.56,4,0)
LOGOUT TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.56,996.56,4,1,0)
^.1
"^DD",996.56,996.56,4,1,1,0)
996.56^BLOGOUT
"^DD",996.56,996.56,4,1,1,1)
S ^RGNET(996.56,"BLOGOUT",$E(X,1,30),DA)=""
"^DD",996.56,996.56,4,1,1,2)
K ^RGNET(996.56,"BLOGOUT",$E(X,1,30),DA)
"^DD",996.56,996.56,4,1,1,"DT")
3080103
"^DD",996.56,996.56,4,3)
Time of final logout.
"^DD",996.56,996.56,4,"DT")
3080103
"^DD",996.56,996.56,5,0)
DIVISION^P4'^DIC(4,^0;6^Q
"^DD",996.56,996.56,5,1,0)
^.1
"^DD",996.56,996.56,5,1,1,0)
996.56^BDIV
"^DD",996.56,996.56,5,1,1,1)
S ^RGNET(996.56,"BDIV",$E(X,1,30),DA)=""
"^DD",996.56,996.56,5,1,1,2)
K ^RGNET(996.56,"BDIV",$E(X,1,30),DA)
"^DD",996.56,996.56,5,1,1,"DT")
3080104
"^DD",996.56,996.56,5,3)
Division user has logged into.
"^DD",996.56,996.56,5,"DT")
3080104
"^DD",996.56,996.56,10,0)
ACTIVITY^996.561D^^10;0
"^DD",996.56,996.561,0)
ACTIVITY SUB-FIELD^^10^4
"^DD",996.56,996.561,0,"DT")
3080103
"^DD",996.56,996.561,0,"IX","B",996.561,.01)

"^DD",996.56,996.561,0,"NM","ACTIVITY")

"^DD",996.56,996.561,0,"UP")
996.56
"^DD",996.56,996.561,.01,0)
DATE/TIME^MD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.56,996.561,.01,1,0)
^.1
"^DD",996.56,996.561,.01,1,1,0)
996.561^B
"^DD",996.56,996.561,.01,1,1,1)
S ^RGNET(996.56,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",996.56,996.561,.01,1,1,2)
K ^RGNET(996.56,DA(1),10,"B",$E(X,1,30),DA)
"^DD",996.56,996.561,.01,"DT")
3080103
"^DD",996.56,996.561,1,0)
TYPE^S^1:RPC;2:EVENT;^0;2^Q
"^DD",996.56,996.561,1,"DT")
3080103
"^DD",996.56,996.561,2,0)
NAME^F^^0;3^K:$L(X)>150!($L(X)<1) X
"^DD",996.56,996.561,2,3)
Answer must be 1-150 characters in length.
"^DD",996.56,996.561,2,"DT")
3080103
"^DD",996.56,996.561,10,0)
LOG^996.562^^10;0
"^DD",996.56,996.562,0)
LOG SUB-FIELD^^.01^1
"^DD",996.56,996.562,0,"DT")
3080103
"^DD",996.56,996.562,0,"NM","LOG")

"^DD",996.56,996.562,0,"UP")
996.561
"^DD",996.56,996.562,.01,0)
LOG^WL^^0;1^Q
"^DD",996.56,996.562,.01,"DT")
3080103
"^DD",996.57,996.57,0)
FIELD^^2^3
"^DD",996.57,996.57,0,"DT")
3021009
"^DD",996.57,996.57,0,"ID",1)
S %I=Y,Y=$S('$D(^(0)):"",$D(^VA(200,+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(200,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",996.57,996.57,0,"IX","B",996.57,.01)

"^DD",996.57,996.57,0,"NM","NETSERV BROKER AUTHENTICATION")

"^DD",996.57,996.57,0,"VRPK")
NETSERV RPC BROKER
"^DD",996.57,996.57,.01,0)
SID^RF^^0;1^K:$L(X)>200!($L(X)<3) X
"^DD",996.57,996.57,.01,1,0)
^.1
"^DD",996.57,996.57,.01,1,1,0)
996.57^B
"^DD",996.57,996.57,.01,1,1,1)
S ^RGNET(996.57,"B",$E(X,1,30),DA)=""
"^DD",996.57,996.57,.01,1,1,2)
K ^RGNET(996.57,"B",$E(X,1,30),DA)
"^DD",996.57,996.57,.01,3)
Answer must be 3-200 characters in length.
"^DD",996.57,996.57,.01,"DT")
3021009
"^DD",996.57,996.57,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",996.57,996.57,1,"DT")
3021009
"^DD",996.57,996.57,2,0)
CREATED^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.57,996.57,2,"DT")
3021009
"^DIC",996.5,996.5,0)
NETSERV TCP LISTENER^996.5
"^DIC",996.5,996.5,0,"GL")
^RGNET(996.5,
"^DIC",996.5,996.5,"%D",0)
^1.001^2^2^3150330^
"^DIC",996.5,996.5,"%D",1,0)
Each entry in this file represents a configuration for a listener that will
"^DIC",996.5,996.5,"%D",2,0)
process requests on a given TCP port via the specified handler.
"^DIC",996.5,"B","NETSERV TCP LISTENER",996.5)

"^DIC",996.54,996.54,0)
NETSERV BROKER EVENT TYPE^996.54
"^DIC",996.54,996.54,0,"GL")
^RGNET(996.54,
"^DIC",996.54,"B","NETSERV BROKER EVENT TYPE",996.54)

"^DIC",996.55,996.55,0)
NETSERV BROKER EVENT LOG^996.55
"^DIC",996.55,996.55,0,"GL")
^RGNET(996.55,
"^DIC",996.55,"B","NETSERV BROKER EVENT LOG",996.55)

"^DIC",996.56,996.56,0)
NETSERV BROKER ACTIVITY LOG^996.56
"^DIC",996.56,996.56,0,"GL")
^RGNET(996.56,
"^DIC",996.56,996.56,"%",0)
^1.005^^0
"^DIC",996.56,996.56,"%D",0)
^^1^1^3080103.095644
"^DIC",996.56,996.56,"%D",1,0)
This file logs session activities such as RPC calls and remote events.
"^DIC",996.56,"B","NETSERV BROKER ACTIVITY LOG",996.56)

"^DIC",996.57,996.57,0)
NETSERV BROKER AUTHENTICATION^996.57
"^DIC",996.57,996.57,0,"GL")
^RGNET(996.57,
"^DIC",996.57,"B","NETSERV BROKER AUTHENTICATION",996.57)

**INSTALL NAME**
NETSERV OAUTH2 SERVICE 1.0
"BLD",8511,0)
NETSERV OAUTH2 SERVICE 1.0^NETWORK SERVICES^0^3150407^n
"BLD",8511,1,0)
^^2^2^3150401.080059
"BLD",8511,1,1,0)
Provides an implementation of the OAuth 2 authentication protocol using the
"BLD",8511,1,2,0)
NETSERV web server.
"BLD",8511,4,0)
^9.64PA^996.52^2
"BLD",8511,4,996.52,0)
996.52
"BLD",8511,4,996.52,222)
n^y^f^^n^^y^o^n
"BLD",8511,4,996.52,224)
I $G(^RGNET(996.52,Y,10))["^RGNETOA"
"BLD",8511,4,996.53,0)
996.53
"BLD",8511,4,996.53,222)
y^y^f^^^^n
"BLD",8511,4,"B",996.52,996.52)

"BLD",8511,4,"B",996.53,996.53)

"BLD",8511,6.3)
51
"BLD",8511,"ABPKG")
n
"BLD",8511,"KRN",0)
^9.67PA^779.2^20
"BLD",8511,"KRN",.4,0)
.4
"BLD",8511,"KRN",.401,0)
.401
"BLD",8511,"KRN",.402,0)
.402
"BLD",8511,"KRN",.403,0)
.403
"BLD",8511,"KRN",.5,0)
.5
"BLD",8511,"KRN",.84,0)
.84
"BLD",8511,"KRN",3.6,0)
3.6
"BLD",8511,"KRN",3.8,0)
3.8
"BLD",8511,"KRN",9.2,0)
9.2
"BLD",8511,"KRN",9.8,0)
9.8
"BLD",8511,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",8511,"KRN",9.8,"NM",1,0)
RGNETOA^^0^B4967294
"BLD",8511,"KRN",9.8,"NM",2,0)
RGNETOAA^^0^B3931337
"BLD",8511,"KRN",9.8,"NM",3,0)
RGNETOAT^^0^B8373286
"BLD",8511,"KRN",9.8,"NM","B","RGNETOA",1)

"BLD",8511,"KRN",9.8,"NM","B","RGNETOAA",2)

"BLD",8511,"KRN",9.8,"NM","B","RGNETOAT",3)

"BLD",8511,"KRN",19,0)
19
"BLD",8511,"KRN",19.1,0)
19.1
"BLD",8511,"KRN",101,0)
101
"BLD",8511,"KRN",409.61,0)
409.61
"BLD",8511,"KRN",771,0)
771
"BLD",8511,"KRN",779.2,0)
779.2
"BLD",8511,"KRN",870,0)
870
"BLD",8511,"KRN",8989.51,0)
8989.51
"BLD",8511,"KRN",8989.52,0)
8989.52
"BLD",8511,"KRN",8994,0)
8994
"BLD",8511,"KRN","B",.4,.4)

"BLD",8511,"KRN","B",.401,.401)

"BLD",8511,"KRN","B",.402,.402)

"BLD",8511,"KRN","B",.403,.403)

"BLD",8511,"KRN","B",.5,.5)

"BLD",8511,"KRN","B",.84,.84)

"BLD",8511,"KRN","B",3.6,3.6)

"BLD",8511,"KRN","B",3.8,3.8)

"BLD",8511,"KRN","B",9.2,9.2)

"BLD",8511,"KRN","B",9.8,9.8)

"BLD",8511,"KRN","B",19,19)

"BLD",8511,"KRN","B",19.1,19.1)

"BLD",8511,"KRN","B",101,101)

"BLD",8511,"KRN","B",409.61,409.61)

"BLD",8511,"KRN","B",771,771)

"BLD",8511,"KRN","B",779.2,779.2)

"BLD",8511,"KRN","B",870,870)

"BLD",8511,"KRN","B",8989.51,8989.51)

"BLD",8511,"KRN","B",8989.52,8989.52)

"BLD",8511,"KRN","B",8994,8994)

"BLD",8511,"QUES",0)
^9.62^^
"BLD",8511,"REQB",0)
^9.611^1^1
"BLD",8511,"REQB",1,0)
NETSERV CONNECTION MANAGER 1.0^2
"BLD",8511,"REQB","B","NETSERV CONNECTION MANAGER 1.0",1)

"DATA",996.52,4,0)
oauth2/authorize^GET
"DATA",996.52,4,10)
MGET^RGNETOAA
"DATA",996.52,5,0)
oauth2/token^POST
"DATA",996.52,5,10)
MPOST^RGNETOAT
"FIA",996.52)
NETSERV HTTP ENDPOINT
"FIA",996.52,0)
^RGNET(996.52,
"FIA",996.52,0,0)
996.52
"FIA",996.52,0,1)
n^y^f^^n^^y^o^n
"FIA",996.52,0,10)

"FIA",996.52,0,11)
I $G(^RGNET(996.52,Y,10))["^RGNETOA"
"FIA",996.52,0,"RLRO")

"FIA",996.52,0,"VR")
1.0^NETSERV OAUTH2 SERVICE
"FIA",996.52,996.52)
0
"FIA",996.52,996.5299)
0
"FIA",996.53)
NETSERV OAUTH CONTROL
"FIA",996.53,0)
^RGNET(996.53,
"FIA",996.53,0,0)
996.53
"FIA",996.53,0,1)
y^y^f^^^^n
"FIA",996.53,0,10)

"FIA",996.53,0,11)

"FIA",996.53,0,"RLRO")

"FIA",996.53,0,"VR")
1.0^NETSERV OAUTH2 SERVICE
"FIA",996.53,996.53)
0
"IX",996.52,996.52,"C",0)
996.52^C^Compound index by METHOD and URL.^MU^^R^IR^I^996.52^^^^^LS
"IX",996.52,996.52,"C",1)
S ^RGNET(996.52,"C",X(1),X(2),DA)=$$TOPTRN^RGNETWWW(X(2))
"IX",996.52,996.52,"C",2)
K ^RGNET(996.52,"C",X(1),X(2),DA)
"IX",996.52,996.52,"C",2.5)
K ^RGNET(996.52,"C")
"IX",996.52,996.52,"C",11.1,0)
^.114IA^2^2
"IX",996.52,996.52,"C",11.1,1,0)
1^F^996.52^1^10^1^F
"IX",996.52,996.52,"C",11.1,2,0)
2^F^996.52^.01^150^2^F
"MBREQ")
1
"PKG",225,-1)
1^1
"PKG",225,0)
NETWORK SERVICES^RGNE^Network services
"PKG",225,20,0)
^9.402P^^
"PKG",225,22,0)
^9.49I^1^1
"PKG",225,22,1,0)
1.0^3150407
"PKG",225,22,1,1,0)
^^2^2^3150407
"PKG",225,22,1,1,1,0)
Provides an implementation of the OAuth 2 authentication protocol using the
"PKG",225,22,1,1,2,0)
NETSERV web server.
"PKG",225,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","RGNETOA")
0^1^B4967294
"RTN","RGNETOA",1,0)
RGNETOA ;RI/CBMI/DKM - OAuth2 Support ;01-Apr-2015 02:02;DKM
"RTN","RGNETOA",2,0)
 ;;1.0;NETWORK SERVICES;;14-March-2014;Build 51
"RTN","RGNETOA",3,0)
 ;=================================================================
"RTN","RGNETOA",4,0)
 ; Register a client application
"RTN","RGNETOA",5,0)
 ; Returns client id^client secret
"RTN","RGNETOA",6,0)
REGAPP(APPNAME,REDIRECT) ;
"RTN","RGNETOA",7,0)
 N IENS,FDA,ID,SECRET
"RTN","RGNETOA",8,0)
 S IENS=$O(^RGNET(996.53,"B",APPNAME,0))
"RTN","RGNETOA",9,0)
 S IENS=$S(IENS:IENS_",",1:"+1,")
"RTN","RGNETOA",10,0)
 S ID=$$UUID^RGUT,SECRET=$$UUID^RGUT
"RTN","RGNETOA",11,0)
 S FDA=$NA(FDA(996.53,IENS))
"RTN","RGNETOA",12,0)
 S @FDA@(.01)=APPNAME
"RTN","RGNETOA",13,0)
 S @FDA@(1)=ID
"RTN","RGNETOA",14,0)
 S @FDA@(2)=SECRET
"RTN","RGNETOA",15,0)
 S @FDA@(3)=3600
"RTN","RGNETOA",16,0)
 S @FDA@(10)=REDIRECT
"RTN","RGNETOA",17,0)
 D UPDATE^DIE("E","FDA")
"RTN","RGNETOA",18,0)
 Q:$Q ID_U_SECRET
"RTN","RGNETOA",19,0)
 Q
"RTN","RGNETOA",20,0)
 ; Lookup client by id
"RTN","RGNETOA",21,0)
 ; Returns true if successful
"RTN","RGNETOA",22,0)
GETCLNT(CLIENT) ;
"RTN","RGNETOA",23,0)
 Q:'$D(CLIENT) 0
"RTN","RGNETOA",24,0)
 Q:$D(CLIENT)=11 1
"RTN","RGNETOA",25,0)
 N IEN,N0,RU
"RTN","RGNETOA",26,0)
 S IEN=$S('$L(CLIENT):0,1:$O(^RGNET(996.53,"C",CLIENT,0)))
"RTN","RGNETOA",27,0)
 Q:'IEN 0
"RTN","RGNETOA",28,0)
 S N0=$G(^RGNET(996.53,IEN,0)),RU=$G(^(10))
"RTN","RGNETOA",29,0)
 S CLIENT=$P(N0,U,2),CLIENT("redirect_uri")=RU,CLIENT("name")=$P(N0,U)
"RTN","RGNETOA",30,0)
 S CLIENT("secret")=$P(N0,U,3),CLIENT("lifespan")=$P(N0,U,4),CLIENT("flow")=$P(N0,U,5)
"RTN","RGNETOA",31,0)
 S:'CLIENT("lifespan") CLIENT("lifespan")=3600
"RTN","RGNETOA",32,0)
 Q 1
"RTN","RGNETOA",33,0)
 ; Get root of OAUTH data store
"RTN","RGNETOA",34,0)
STORE(NODE) ;
"RTN","RGNETOA",35,0)
 N X
"RTN","RGNETOA",36,0)
 S X=$NA(^XTMP("RGNET_OAUTH"))
"RTN","RGNETOA",37,0)
 Q $S($D(NODE):$NA(@X@(NODE)),1:X)
"RTN","RGNETOA",38,0)
 ; Fetches an object of the given type from the data store
"RTN","RGNETOA",39,0)
GETOBJ(OBJ,TYPE,REMOVE) ;
"RTN","RGNETOA",40,0)
 Q:'$L($G(OBJ))
"RTN","RGNETOA",41,0)
 N STORE
"RTN","RGNETOA",42,0)
 S STORE=$$STORE(TYPE)
"RTN","RGNETOA",43,0)
 M OBJ=@STORE@(OBJ)
"RTN","RGNETOA",44,0)
 K:$G(REMOVE) @STORE@(OBJ)
"RTN","RGNETOA",45,0)
 Q
"RTN","RGNETOA",46,0)
 ; Writes an object of the given type to the data store
"RTN","RGNETOA",47,0)
SETOBJ(OBJ,TYPE) ;
"RTN","RGNETOA",48,0)
 N STORE
"RTN","RGNETOA",49,0)
 S STORE=$$STORE(TYPE)
"RTN","RGNETOA",50,0)
 K @STORE@(OBJ)
"RTN","RGNETOA",51,0)
 M @STORE@(OBJ)=OBJ
"RTN","RGNETOA",52,0)
 Q
"RTN","RGNETOA",53,0)
 ; Removes an object of the given type from the data store
"RTN","RGNETOA",54,0)
DELOBJ(OBJ,TYPE) ;
"RTN","RGNETOA",55,0)
 K:$L($G(OBJ)) @$$STORE(TYPE)@(OBJ)
"RTN","RGNETOA",56,0)
 Q
"RTN","RGNETOA",57,0)
 ; Builds a response
"RTN","RGNETOA",58,0)
BLDRSP(ATKN,RTKN) ;
"RTN","RGNETOA",59,0)
 N PF
"RTN","RGNETOA",60,0)
 S PF="{"
"RTN","RGNETOA",61,0)
 D GETATKN(.ATKN)
"RTN","RGNETOA",62,0)
 D PUT("access_token",ATKN,.PF)
"RTN","RGNETOA",63,0)
 D PUT("token_type","bearer",.PF)
"RTN","RGNETOA",64,0)
 D PUT("expires_in",ATKN("lifespan"),.PF)
"RTN","RGNETOA",65,0)
 D PUT("scope",ATKN("scope"),.PF)
"RTN","RGNETOA",66,0)
 D PUT("refresh_token",.RTKN,.PF)
"RTN","RGNETOA",67,0)
 D ADD^RGNETWWW("}")
"RTN","RGNETOA",68,0)
 Q
"RTN","RGNETOA",69,0)
 ; Wrap a value in quotes
"RTN","RGNETOA",70,0)
QT(X) Q """"_X_""""
"RTN","RGNETOA",71,0)
 ; Writes a name / value pair to output buffer
"RTN","RGNETOA",72,0)
PUT(PN,VL,PF) ;
"RTN","RGNETOA",73,0)
 Q:'$L($G(VL))
"RTN","RGNETOA",74,0)
 D ADD^RGNETWWW(PF_$$QT(PN)_":"_$$QT(VL))
"RTN","RGNETOA",75,0)
 S PF=","
"RTN","RGNETOA",76,0)
 Q
"RTN","RGNETOAA")
0^2^B3931337
"RTN","RGNETOAA",1,0)
RGNETOAA ;RI/CBMI/DKM - OAuth2 Authorization Endpoint ;01-Apr-2015 02:02;DKM
"RTN","RGNETOAA",2,0)
 ;;1.0;NETWORK SERVICES;;14-March-2014;Build 51
"RTN","RGNETOAA",3,0)
 ;=================================================================
"RTN","RGNETOAA",4,0)
 ; GET method handler
"RTN","RGNETOAA",5,0)
MGET N RT,GT,FLOW,CLIENT
"RTN","RGNETOAA",6,0)
 S RT=$$GETPARAM^RGNETWWW("response_type")
"RTN","RGNETOAA",7,0)
 S GT=$$GETPARAM^RGNETWWW("grant_type")
"RTN","RGNETOAA",8,0)
 S CLIENT=$$GETPARAM^RGNETWWW("client_id")
"RTN","RGNETOAA",9,0)
 I '$$GETCLNT^RGNETOA(.CLIENT) D SETSTAT^RGNETWWW(404) Q
"RTN","RGNETOAA",10,0)
 S FLOW=$S(RT="code":"W",RT="token":"U",GT="password":"P",GT="client_credentials":"C",1:"?")
"RTN","RGNETOAA",11,0)
 I FLOW'=CLIENT("flow") D SETSTAT^RGNETWWW(403) Q
"RTN","RGNETOAA",12,0)
 D @("AUTH"_FLOW)
"RTN","RGNETOAA",13,0)
 Q
"RTN","RGNETOAA",14,0)
 ; Web server flow: authorization code grant
"RTN","RGNETOAA",15,0)
AUTHW N CODE,LOCATION,STATE
"RTN","RGNETOAA",16,0)
 Q:'$$VALIDRDU
"RTN","RGNETOAA",17,0)
 Q:'$$AUTH^RGNETWWW(1)
"RTN","RGNETOAA",18,0)
 D SETSTAT^RGNETWWW(302)
"RTN","RGNETOAA",19,0)
 S CODE=$$NEWAUTH(.CLIENT,DUZ)
"RTN","RGNETOAA",20,0)
 S STATE=$$GETPARAM^RGNETWWW("state")
"RTN","RGNETOAA",21,0)
 S LOCATION=CLIENT("redirect_uri")_"?code="_CODE
"RTN","RGNETOAA",22,0)
 S:$L(STATE) LOCATION=LOCATION_"&state="_STATE
"RTN","RGNETOAA",23,0)
 D ADDHDR^RGNETWWW("Location: "_LOCATION)
"RTN","RGNETOAA",24,0)
 Q
"RTN","RGNETOAA",25,0)
 ; User-agent flow: implicit grant
"RTN","RGNETOAA",26,0)
AUTHU N ATKN
"RTN","RGNETOAA",27,0)
 Q:'$$VALIDRDU
"RTN","RGNETOAA",28,0)
 Q:'$$AUTH^RGNETWWW(1)
"RTN","RGNETOAA",29,0)
 S ATKN=$$NEWATKN^RGNETOAT(.CLIENT,DUZ,$$GETPARAM^RGNETWWW("scope"))
"RTN","RGNETOAA",30,0)
 D BLDRSP^RGNETOA(ATKN)
"RTN","RGNETOAA",31,0)
 Q
"RTN","RGNETOAA",32,0)
 ; Username and password flow
"RTN","RGNETOAA",33,0)
AUTHP D SETSTAT^RGNETWWW(501)
"RTN","RGNETOAA",34,0)
 Q
"RTN","RGNETOAA",35,0)
 ; Client credentials flow: access token
"RTN","RGNETOAA",36,0)
AUTHC D SETSTAT^RGNETWWW(501)
"RTN","RGNETOAA",37,0)
 Q
"RTN","RGNETOAA",38,0)
 ; Generate a new authorization code
"RTN","RGNETOAA",39,0)
NEWAUTH(CLIENT,USER) ;
"RTN","RGNETOAA",40,0)
 N AUTH
"RTN","RGNETOAA",41,0)
 S AUTH=$$UUID^RGUT,AUTH("user")=USER,AUTH("client")=CLIENT
"RTN","RGNETOAA",42,0)
 D SETOBJ^RGNETOA(.AUTH,"AUTH")
"RTN","RGNETOAA",43,0)
 Q AUTH
"RTN","RGNETOAA",44,0)
 ; Fetches (and removes) an authorization from the data store
"RTN","RGNETOAA",45,0)
GETAUTH(AUTH) ;
"RTN","RGNETOAA",46,0)
 D GETOBJ^RGNETOA(.AUTH,"AUTH",1)
"RTN","RGNETOAA",47,0)
 Q
"RTN","RGNETOAA",48,0)
 ; Validates the redirect uri
"RTN","RGNETOAA",49,0)
VALIDRDU() 
"RTN","RGNETOAA",50,0)
 I CLIENT("redirect_uri")'=$$GETPARAM^RGNETWWW("redirect_uri") D SETSTAT^RGNETWWW(404) Q 0
"RTN","RGNETOAA",51,0)
 Q 1
"RTN","RGNETOAT")
0^3^B8373286
"RTN","RGNETOAT",1,0)
RGNETOAT ;RI/CBMI/DKM - OAuth2 Token Endpoint ;01-Apr-2015 02:02;DKM
"RTN","RGNETOAT",2,0)
 ;;1.0;NETWORK SERVICES;;14-March-2014;Build 51
"RTN","RGNETOAT",3,0)
 ;=================================================================
"RTN","RGNETOAT",4,0)
 ; POST method
"RTN","RGNETOAT",5,0)
MPOST N GT,POST
"RTN","RGNETOAT",6,0)
 D PARSEBD^RGNETWWW(.POST)
"RTN","RGNETOAT",7,0)
 S GT=$G(POST("grant_type",1,1))
"RTN","RGNETOAT",8,0)
 G GTAC:GT="authorization_code",GTRT:GT="refresh_token"
"RTN","RGNETOAT",9,0)
 D SETSTAT^RGNETWWW(501)
"RTN","RGNETOAT",10,0)
 Q
"RTN","RGNETOAT",11,0)
 ; Grant type = authorization_code
"RTN","RGNETOAT",12,0)
GTAC N CLIENT,AUTH,REDIRECT,SECRET,ATKN,RTKN
"RTN","RGNETOAT",13,0)
 S CLIENT=$G(POST("client_id",1,1)),AUTH=$G(POST("code",1,1))
"RTN","RGNETOAT",14,0)
 S REDIRECT=$G(POST("redirect_uri",1,1)),SECRET=$G(POST("client_secret",1,1))
"RTN","RGNETOAT",15,0)
 I '$L(CLIENT)!'$L(AUTH)!'$L(REDIRECT)!'$L(SECRET) D SETSTAT^RGNETWWW(400) Q
"RTN","RGNETOAT",16,0)
 D GETAUTH^RGNETOAA(.AUTH)
"RTN","RGNETOAT",17,0)
 I $D(AUTH)'>1 D SETSTAT^RGNETWWW(404) Q
"RTN","RGNETOAT",18,0)
 I AUTH("secret")'=SECRET D SETSTAT^RGNETWWW(403)
"RTN","RGNETOAT",19,0)
 S RTKN=$$NEWRTKN(.CLIENT,AUTH("user"),AUTH("scope"))
"RTN","RGNETOAT",20,0)
 I '$L(RTKN) D SETSTAT^RGNETWWW(403) Q
"RTN","RGNETOAT",21,0)
 S ATKN=$$REFATKN(.RTKN)
"RTN","RGNETOAT",22,0)
 D BLDRSP^RGNETOA(.ATKN,.RTKN)
"RTN","RGNETOAT",23,0)
 Q
"RTN","RGNETOAT",24,0)
 ; Grant type = refresh_token
"RTN","RGNETOAT",25,0)
GTRT N RTKN,ATKN
"RTN","RGNETOAT",26,0)
 S RTKN=$G(POST("refresh_token",1,1))
"RTN","RGNETOAT",27,0)
 S ATKN=$$REFTKN(RTKN)
"RTN","RGNETOAT",28,0)
 I '$L(ATKN) D SETSTAT^RGNETWWW(404) Q
"RTN","RGNETOAT",29,0)
 D BLDRSP^RGNETOA(.ATKN)
"RTN","RGNETOAT",30,0)
 Q
"RTN","RGNETOAT",31,0)
 ; Fetches an access token from the data store
"RTN","RGNETOAT",32,0)
GETATKN(ATKN) ;
"RTN","RGNETOAT",33,0)
 D GETOBJ^RGNETOA(.ATKN,"ATKN")
"RTN","RGNETOAT",34,0)
 Q
"RTN","RGNETOAT",35,0)
 ; Fetches a refresh token from the data store
"RTN","RGNETOAT",36,0)
GETRTKN(RTKN) ;
"RTN","RGNETOAT",37,0)
 D GETOBJ^RGNETOA(.RTKN,"RTKN")
"RTN","RGNETOAT",38,0)
 Q
"RTN","RGNETOAT",39,0)
 ; Writes an access token to the data store
"RTN","RGNETOAT",40,0)
SETATKN(ATKN) 
"RTN","RGNETOAT",41,0)
 D SETOBJ^RGNETOA(.ATKN,"ATKN")
"RTN","RGNETOAT",42,0)
 Q
"RTN","RGNETOAT",43,0)
 ; Writes a refresh token to the data store
"RTN","RGNETOAT",44,0)
SETRTKN(RTKN) ;
"RTN","RGNETOAT",45,0)
 D SETOBJ^RGNETOA(.RTKN,"RTKN")
"RTN","RGNETOAT",46,0)
 Q
"RTN","RGNETOAT",47,0)
 ; Generate an access token
"RTN","RGNETOAT",48,0)
NEWATKN(CLIENT,USER,SCOPE) ;
"RTN","RGNETOAT",49,0)
 Q:'$$GETCLNT^RGNETOA(.CLIENT) ""
"RTN","RGNETOAT",50,0)
 N ATKN,EXP
"RTN","RGNETOAT",51,0)
 S ATKN=$$UUID^RGUT,EXP=$$FMADD^XLFDT($$NOW^XLFDT,0,0,0,CLIENT("lifespan"))
"RTN","RGNETOAT",52,0)
 S ATKN("user")=USER,ATKN("expiry")=EXP,ATKN("client")=CLIENT
"RTN","RGNETOAT",53,0)
 S ATKN("lifespan")=CLIENT("lifespan"),ATKN("scope")=SCOPE
"RTN","RGNETOAT",54,0)
 D SETATKN(.ATKN)
"RTN","RGNETOAT",55,0)
 Q ATKN
"RTN","RGNETOAT",56,0)
 ; Generate a refresh token
"RTN","RGNETOAT",57,0)
NEWRTKN(CLIENT,USER,SCOPE) ;
"RTN","RGNETOAT",58,0)
 N RTKN
"RTN","RGNETOAT",59,0)
 S RTKN=$$UUID^RGUT,RTKN("client")=CLIENT,RTKN("user")=USER
"RTN","RGNETOAT",60,0)
 S RTKN("scope")=SCOPE,RTKN("access_token")=""
"RTN","RGNETOAT",61,0)
 D SETRTKN(.RTKN)
"RTN","RGNETOAT",62,0)
 Q RTKN
"RTN","RGNETOAT",63,0)
 ; Revoke access token
"RTN","RGNETOAT",64,0)
REVATKN(ATKN) ;
"RTN","RGNETOAT",65,0)
 D DELOBJ^RGNETOA(.ATKN,"ATKN")
"RTN","RGNETOAT",66,0)
 Q
"RTN","RGNETOAT",67,0)
 ; Refresh access token
"RTN","RGNETOAT",68,0)
REFATKN(RTKN) ;
"RTN","RGNETOAT",69,0)
 N ATKN,CLIENT
"RTN","RGNETOAT",70,0)
 D GETRTKN(.RTKN)
"RTN","RGNETOAT",71,0)
 I $D(RTKN)>1 D
"RTN","RGNETOAT",72,0)
 .S ATKN=RTKN("access_token"),CLIENT=RTKN("client")
"RTN","RGNETOAT",73,0)
 .D:$L(ATKN) REVATKN(ATKN)
"RTN","RGNETOAT",74,0)
 .S ATKN=$$NEWATKN(.CLIENT,RTKN("user"),RTKN("scope"))
"RTN","RGNETOAT",75,0)
 .S RTKN("access_token")=ATKN
"RTN","RGNETOAT",76,0)
 .D SETRTKN(.RTKN)
"RTN","RGNETOAT",77,0)
 Q $G(ATKN)
"RTN","RGNETOAT",78,0)
 ; Returns the user DUZ if access token is valid
"RTN","RGNETOAT",79,0)
 ; Revokes any expired tokens
"RTN","RGNETOAT",80,0)
ISVALID(ATKN) ;
"RTN","RGNETOAT",81,0)
 N EXP,VALID
"RTN","RGNETOAT",82,0)
 D GETATKN(.ATKN)
"RTN","RGNETOAT",83,0)
 S EXP=$G(ATKN("expiry")),VALID=$S('EXP:0,1:$$NOW^XLFDT>EXP)
"RTN","RGNETOAT",84,0)
 I EXP,'VALID D REVATKN(ATKN)
"RTN","RGNETOAT",85,0)
 Q $S(VALID:ATKN("user"),1:0)
"SEC","^DIC",996.52,996.52,0,"AUDIT")
@
"SEC","^DIC",996.52,996.52,0,"DD")
@
"SEC","^DIC",996.52,996.52,0,"DEL")
@
"SEC","^DIC",996.52,996.52,0,"LAYGO")
@
"SEC","^DIC",996.52,996.52,0,"RD")
@
"SEC","^DIC",996.52,996.52,0,"WR")
@
"SEC","^DIC",996.53,996.53,0,"AUDIT")
@
"SEC","^DIC",996.53,996.53,0,"DD")
@
"SEC","^DIC",996.53,996.53,0,"DEL")
@
"SEC","^DIC",996.53,996.53,0,"LAYGO")
@
"SEC","^DIC",996.53,996.53,0,"RD")
@
"SEC","^DIC",996.53,996.53,0,"WR")
@
"VER")
8.0^22.0
"^DD",996.52,996.52,0)
FIELD^^2^5
"^DD",996.52,996.52,0,"DDA")
N
"^DD",996.52,996.52,0,"DT")
3150331
"^DD",996.52,996.52,0,"IX","B",996.52,.01)

"^DD",996.52,996.52,0,"NM","NETSERV HTTP ENDPOINT")

"^DD",996.52,996.52,.01,0)
URL^RF^^0;1^K:$L(X)>150!($L(X)<1) X
"^DD",996.52,996.52,.01,1,0)
^.1
"^DD",996.52,996.52,.01,1,1,0)
996.52^B
"^DD",996.52,996.52,.01,1,1,1)
S ^RGNET(996.52,"B",$E(X,1,30),DA)=""
"^DD",996.52,996.52,.01,1,1,2)
K ^RGNET(996.52,"B",$E(X,1,30),DA)
"^DD",996.52,996.52,.01,3)
Enter URL pattern for this endpoint.
"^DD",996.52,996.52,.01,21,0)
^^6^6^3150330.151834
"^DD",996.52,996.52,.01,21,1,0)
This is the pattern to which a request URL is to be matched.  It may contain
"^DD",996.52,996.52,.01,21,2,0)
the following wildcard characters:
"^DD",996.52,996.52,.01,21,3,0)

"^DD",996.52,996.52,.01,21,4,0)
       * Matches any character sequence.
"^DD",996.52,996.52,.01,21,5,0)
       # Matches any sequence of digits.
"^DD",996.52,996.52,.01,21,6,0)

"^DD",996.52,996.52,.01,"DT")
3150330
"^DD",996.52,996.52,1,0)
METHOD^S^GET:GET;HEAD:HEAD;POST:POST;PUT:PUT;DELETE:DELETE;^0;2^Q
"^DD",996.52,996.52,1,"DT")
3150330
"^DD",996.52,996.52,2,0)
AUTH^S^BASIC:BASIC AUTHENTICATION;BEARER:OAUTH2 AUTHENTICATION;^0;3^Q
"^DD",996.52,996.52,2,3)
Enter authentication type (or no entry for none).
"^DD",996.52,996.52,2,21,0)
^^6^6^3150331.200154
"^DD",996.52,996.52,2,21,1,0)
This determines the type of authentication required for the associated endpoint.
"^DD",996.52,996.52,2,21,2,0)

"^DD",996.52,996.52,2,21,3,0)
       BASIC - Basic authentication (username/password)
"^DD",996.52,996.52,2,21,4,0)
       OAUTH - OAuth2 authentication (bearer)
"^DD",996.52,996.52,2,21,5,0)

"^DD",996.52,996.52,2,21,6,0)
No entry means that no authentication is required.
"^DD",996.52,996.52,2,"DT")
3150331
"^DD",996.52,996.52,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.52,996.52,10,3)
Enter the handler entry point as TAG^ROUTINE.
"^DD",996.52,996.52,10,"DT")
3150330
"^DD",996.52,996.52,99,0)
DESCRIPTION^996.5299^^99;0
"^DD",996.52,996.5299,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",996.52,996.5299,0,"DT")
3150330
"^DD",996.52,996.5299,0,"NM","DESCRIPTION")

"^DD",996.52,996.5299,0,"UP")
996.52
"^DD",996.52,996.5299,.01,0)
DESCRIPTION^WL^^0;1^Q
"^DD",996.52,996.5299,.01,21,0)
^^1^1^3150330.181043
"^DD",996.52,996.5299,.01,21,1,0)
Provides a detailed description of this end point.
"^DD",996.52,996.5299,.01,"DT")
3150330
"^DD",996.53,996.53,0)
FIELD^^4^6
"^DD",996.53,996.53,0,"DDA")
N
"^DD",996.53,996.53,0,"DT")
3150327
"^DD",996.53,996.53,0,"IX","B",996.53,.01)

"^DD",996.53,996.53,0,"IX","C",996.53,1)

"^DD",996.53,996.53,0,"NM","NETSERV OAUTH CONTROL")

"^DD",996.53,996.53,.01,0)
APPLICATION NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",996.53,996.53,.01,1,0)
^.1
"^DD",996.53,996.53,.01,1,1,0)
996.53^B^MUMPS
"^DD",996.53,996.53,.01,1,1,1)
S ^RGNET(996.53,"B",X,DA)=""
"^DD",996.53,996.53,.01,1,1,2)
K ^RGNET(996.53,"B",X,DA)
"^DD",996.53,996.53,.01,1,1,"DT")
3150326
"^DD",996.53,996.53,.01,3)
Answer must be 3-30 characters in length.
"^DD",996.53,996.53,.01,"DT")
3150326
"^DD",996.53,996.53,1,0)
CLIENT ID^F^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",996.53,996.53,1,1,0)
^.1
"^DD",996.53,996.53,1,1,1,0)
996.53^C^MUMPS
"^DD",996.53,996.53,1,1,1,1)
S ^RGNET(996.53,"C",X,DA)=""
"^DD",996.53,996.53,1,1,1,2)
K ^RGNET(996.53,"C",X,DA)
"^DD",996.53,996.53,1,1,1,"DT")
3150326
"^DD",996.53,996.53,1,3)
Answer must be 1-100 characters in length.
"^DD",996.53,996.53,1,"DT")
3150326
"^DD",996.53,996.53,2,0)
CLIENT SECRET^F^^0;3^K:$L(X)>100!($L(X)<1) X
"^DD",996.53,996.53,2,3)
Answer must be 1-100 characters in length.
"^DD",996.53,996.53,2,"DT")
3150326
"^DD",996.53,996.53,3,0)
ACCESS TOKEN LIFESPAN^NJ9,0^^0;4^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.53,996.53,3,3)
Enter lifespan (in seconds) of an issued access token.
"^DD",996.53,996.53,3,"DT")
3150326
"^DD",996.53,996.53,4,0)
FLOW TYPE^S^U:User agent flow;W:Web server flow;P:Username and password flow;C:Client credentials;^0;5^Q
"^DD",996.53,996.53,4,3)
Enter OAuth flow supported for this client.
"^DD",996.53,996.53,4,21,0)
^^25^25^3150327.111709
"^DD",996.53,996.53,4,21,1,0)
The OAuth flow allowed for this client.  Supported flows are:
"^DD",996.53,996.53,4,21,2,0)

"^DD",996.53,996.53,4,21,3,0)
U - User-Agent Flow : Suitable for clients typically implemented in user-
"^DD",996.53,996.53,4,21,4,0)
agents (for example, clients running inside a web browser) using a scripting 
"^DD",996.53,996.53,4,21,5,0)
language such as JavaScript. Mostly used by native applications for mobile or 
"^DD",996.53,996.53,4,21,6,0)
desktop, leveraging the embedded or external browser as the user-agent for 
"^DD",996.53,996.53,4,21,7,0)
authorization and it uses the Implicit Grant authorization.
"^DD",996.53,996.53,4,21,8,0)

"^DD",996.53,996.53,4,21,9,0)
W - Web Server Flow : This makes use of the Authorization Code grant and is a 
"^DD",996.53,996.53,4,21,10,0)
redirection-based flow which requires interaction with the end-user's user-
"^DD",996.53,996.53,4,21,11,0)
agent. Thus, it is most suitable for clients which are a part of web-server 
"^DD",996.53,996.53,4,21,12,0)
based applications, that are typically accessed via a web browser.
"^DD",996.53,996.53,4,21,13,0)

"^DD",996.53,996.53,4,21,14,0)
P - Username and Password Flow : Used only when there is a high trust between 
"^DD",996.53,996.53,4,21,15,0)
the client and the resource owner and when other flows are not viable, as it 
"^DD",996.53,996.53,4,21,16,0)
involves the transfer of the resource owner's credentials. Examples of 
"^DD",996.53,996.53,4,21,17,0)
clients can be a device operating system or a highly privileged application. 
"^DD",996.53,996.53,4,21,18,0)
This can also be used to migrate existing clients using HTTP Basic or Digest 
"^DD",996.53,996.53,4,21,19,0)
Authentication schemes to OAuth by converting the stored credentials to an 
"^DD",996.53,996.53,4,21,20,0)
access token.
"^DD",996.53,996.53,4,21,21,0)

"^DD",996.53,996.53,4,21,22,0)
C - Client Credentials Flow : OAuth is mainly used for delegated access, but 
"^DD",996.53,996.53,4,21,23,0)
there are cases when the client owns the resource or already has been granted 
"^DD",996.53,996.53,4,21,24,0)
the delegated access outside of a typical OAuth flow. Here you just exchange 
"^DD",996.53,996.53,4,21,25,0)
client credentials for an access token. 
"^DD",996.53,996.53,4,"DT")
3150327
"^DD",996.53,996.53,10,0)
REDIRECT URL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",996.53,996.53,10,3)
Answer must be 1-250 characters in length.
"^DD",996.53,996.53,10,"DT")
3150326
"^DIC",996.52,996.52,0)
NETSERV HTTP ENDPOINT^996.52
"^DIC",996.52,996.52,0,"GL")
^RGNET(996.52,
"^DIC",996.52,996.52,"%",0)
^1.005^^
"^DIC",996.52,996.52,"%D",0)
^^3^3^3150330.180223
"^DIC",996.52,996.52,"%D",1,0)
This file defines execution endpoints for HTTP-based services. A service 
"^DIC",996.52,996.52,"%D",2,0)
request is matched to its respective endpoint by matching the request method 
"^DIC",996.52,996.52,"%D",3,0)
and the request URL to the corresponding entry in this file.
"^DIC",996.52,"B","NETSERV HTTP ENDPOINT",996.52)

"^DIC",996.53,996.53,0)
NETSERV OAUTH CONTROL^996.53
"^DIC",996.53,996.53,0,"GL")
^RGNET(996.53,
"^DIC",996.53,996.53,"%",0)
^1.005^^0
"^DIC",996.53,"B","NETSERV OAUTH CONTROL",996.53)

**INSTALL NAME**
SERIALIZATION FRAMEWORK 1.0
"BLD",8505,0)
SERIALIZATION FRAMEWORK 1.0^SERIALIZATION FRAMEWORK^0^3150407^n
"BLD",8505,1,0)
^^2^2^3150301.07231
"BLD",8505,1,1,0)
Framework for serializing and deserializing data for transport to and from
"BLD",8505,1,2,0)
external systems.
"BLD",8505,4,0)
^9.64PA^996.52^2
"BLD",8505,4,996.52,0)
996.52
"BLD",8505,4,996.52,222)
n^y^f^^n^^y^o^n
"BLD",8505,4,996.52,224)
I $G(^RGNET(996.52,Y,10))["^RGSE"
"BLD",8505,4,998.1,0)
998.1
"BLD",8505,4,998.1,222)
y^y^f^^n^^y^r^n
"BLD",8505,4,"B",996.52,996.52)

"BLD",8505,4,"B",998.1,998.1)

"BLD",8505,6.3)
303
"BLD",8505,"ABPKG")
n
"BLD",8505,"INI")
PRE^RGSEINIT
"BLD",8505,"INIT")
POST^RGSEINIT
"BLD",8505,"KRN",0)
^9.67PA^779.2^20
"BLD",8505,"KRN",.4,0)
.4
"BLD",8505,"KRN",.401,0)
.401
"BLD",8505,"KRN",.402,0)
.402
"BLD",8505,"KRN",.403,0)
.403
"BLD",8505,"KRN",.5,0)
.5
"BLD",8505,"KRN",.84,0)
.84
"BLD",8505,"KRN",3.6,0)
3.6
"BLD",8505,"KRN",3.8,0)
3.8
"BLD",8505,"KRN",9.2,0)
9.2
"BLD",8505,"KRN",9.8,0)
9.8
"BLD",8505,"KRN",9.8,"NM",0)
^9.68A^17^15
"BLD",8505,"KRN",9.8,"NM",1,0)
RGSEFHIR^^0^B6178925
"BLD",8505,"KRN",9.8,"NM",2,0)
RGSEJSON^^0^B23526211
"BLD",8505,"KRN",9.8,"NM",3,0)
RGSER^^0^B14460964
"BLD",8505,"KRN",9.8,"NM",4,0)
RGSERENC^^0^B1699892
"BLD",8505,"KRN",9.8,"NM",6,0)
RGSERLAB^^0^B13473128
"BLD",8505,"KRN",9.8,"NM",7,0)
RGSEROBS^^0^B16358628
"BLD",8505,"KRN",9.8,"NM",8,0)
RGSERPAT^^0^B269044
"BLD",8505,"KRN",9.8,"NM",9,0)
RGSERVIT^^0^B12413990
"BLD",8505,"KRN",9.8,"NM",10,0)
RGSEXML^^0^B12652617
"BLD",8505,"KRN",9.8,"NM",11,0)
RGSERGET^^0^B157637908
"BLD",8505,"KRN",9.8,"NM",12,0)
RGSERDD^^0^B831280
"BLD",8505,"KRN",9.8,"NM",13,0)
RGSERPER^^0^B151306
"BLD",8505,"KRN",9.8,"NM",14,0)
RGSEFHIJ^^0^B29852409
"BLD",8505,"KRN",9.8,"NM",15,0)
RGSEFHIX^^0^B37554674
"BLD",8505,"KRN",9.8,"NM",17,0)
RGSERDOC^^0^B340683
"BLD",8505,"KRN",9.8,"NM","B","RGSEFHIJ",14)

"BLD",8505,"KRN",9.8,"NM","B","RGSEFHIR",1)

"BLD",8505,"KRN",9.8,"NM","B","RGSEFHIX",15)

"BLD",8505,"KRN",9.8,"NM","B","RGSEJSON",2)

"BLD",8505,"KRN",9.8,"NM","B","RGSER",3)

"BLD",8505,"KRN",9.8,"NM","B","RGSERDD",12)

"BLD",8505,"KRN",9.8,"NM","B","RGSERDOC",17)

"BLD",8505,"KRN",9.8,"NM","B","RGSERENC",4)

"BLD",8505,"KRN",9.8,"NM","B","RGSERGET",11)

"BLD",8505,"KRN",9.8,"NM","B","RGSERLAB",6)

"BLD",8505,"KRN",9.8,"NM","B","RGSEROBS",7)

"BLD",8505,"KRN",9.8,"NM","B","RGSERPAT",8)

"BLD",8505,"KRN",9.8,"NM","B","RGSERPER",13)

"BLD",8505,"KRN",9.8,"NM","B","RGSERVIT",9)

"BLD",8505,"KRN",9.8,"NM","B","RGSEXML",10)

"BLD",8505,"KRN",19,0)
19
"BLD",8505,"KRN",19.1,0)
19.1
"BLD",8505,"KRN",101,0)
101
"BLD",8505,"KRN",409.61,0)
409.61
"BLD",8505,"KRN",771,0)
771
"BLD",8505,"KRN",779.2,0)
779.2
"BLD",8505,"KRN",870,0)
870
"BLD",8505,"KRN",8989.51,0)
8989.51
"BLD",8505,"KRN",8989.52,0)
8989.52
"BLD",8505,"KRN",8994,0)
8994
"BLD",8505,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",8505,"KRN",8994,"NM",1,0)
RGSER FETCH^^0
"BLD",8505,"KRN",8994,"NM",2,0)
RGSER REST^^0
"BLD",8505,"KRN",8994,"NM","B","RGSER FETCH",1)

"BLD",8505,"KRN",8994,"NM","B","RGSER REST",2)

"BLD",8505,"KRN","B",.4,.4)

"BLD",8505,"KRN","B",.401,.401)

"BLD",8505,"KRN","B",.402,.402)

"BLD",8505,"KRN","B",.403,.403)

"BLD",8505,"KRN","B",.5,.5)

"BLD",8505,"KRN","B",.84,.84)

"BLD",8505,"KRN","B",3.6,3.6)

"BLD",8505,"KRN","B",3.8,3.8)

"BLD",8505,"KRN","B",9.2,9.2)

"BLD",8505,"KRN","B",9.8,9.8)

"BLD",8505,"KRN","B",19,19)

"BLD",8505,"KRN","B",19.1,19.1)

"BLD",8505,"KRN","B",101,101)

"BLD",8505,"KRN","B",409.61,409.61)

"BLD",8505,"KRN","B",771,771)

"BLD",8505,"KRN","B",779.2,779.2)

"BLD",8505,"KRN","B",870,870)

"BLD",8505,"KRN","B",8989.51,8989.51)

"BLD",8505,"KRN","B",8989.52,8989.52)

"BLD",8505,"KRN","B",8994,8994)

"BLD",8505,"PRET")
PRETRANS^RGSEINIT
"BLD",8505,"QUES",0)
^9.62^^
"BLD",8505,"REQB",0)
^9.611^2^2
"BLD",8505,"REQB",1,0)
RG UTILITIES 3.0^2
"BLD",8505,"REQB",2,0)
NETSERV WEB SERVER 1.0^2
"BLD",8505,"REQB","B","NETSERV WEB SERVER 1.0",2)

"BLD",8505,"REQB","B","RG UTILITIES 3.0",1)

"DATA",996.52,1,0)
CWF/*^GET
"DATA",996.52,1,10)
MGET^RGSER
"DATA",996.52,2,0)
DSTU#/*^GET
"DATA",996.52,2,10)
MGET^RGSER
"DATA",998.1,1,0)
CWF^application/json,text/json^RGSEJSON^1.0
"DATA",998.1,1,10,0)
^998.11^1^1
"DATA",998.1,1,10,1,0)
PropDefinition^^8989.51
"DATA",998.1,1,10,1,30,0)
^998.12I^6^6
"DATA",998.1,1,10,1,30,1,0)
name^.01^F^10
"DATA",998.1,1,10,1,30,2,0)
displayName^.02^F^20
"DATA",998.1,1,10,1,30,3,0)
multiValued^.03^B^30
"DATA",998.1,1,10,1,30,4,0)
readOnly^.06^B^40
"DATA",998.1,1,10,1,30,5,0)
dataType^1.1^R^50
"DATA",998.1,1,10,1,30,6,0)
description^20^W^60
"DATA",998.1,1,10,1,40,0)
^998.13I^1^1
"DATA",998.1,1,10,1,40,1,0)
_id^@ien^T^10
"DATA",998.1,1,99,0)
^^24^24^3150316.173836
"DATA",998.1,1,99,1,0)
This is the base URL for the JSON-based serialization format used by 
"DATA",998.1,1,99,2,0)
the <a href="http://www.carewebframework.org" _target="_blank">
"DATA",998.1,1,99,3,0)
CareWeb Framework</a>.
"DATA",998.1,1,99,4,0)

"DATA",998.1,1,99,5,0)
<hr> 
"DATA",998.1,1,99,6,0)

"DATA",998.1,1,99,7,0)
This service is supported by the <b>VistA Serialization Framework</b>, 
"DATA",998.1,1,99,8,0)
developed by Doug Martin of the <a href="http://www.regenstrief.org"
"DATA",998.1,1,99,9,0)
target="_blank">Regenstrief Institute.<a>
"DATA",998.1,1,99,10,0)

"DATA",998.1,1,99,11,0)
<p>
"DATA",998.1,1,99,12,0)

"DATA",998.1,1,99,13,0)
It is freely available as open source under the 
"DATA",998.1,1,99,14,0)
<a href="https://www.mozilla.org/MPL/2.0/" target="_blank">MPL 2.0 license</a>:
"DATA",998.1,1,99,15,0)

"DATA",998.1,1,99,16,0)
<ul> 
"DATA",998.1,1,99,17,0)
<li> The complete source may be downloaded 
"DATA",998.1,1,99,18,0)
  <a href="https://github.com/mdgeek/VistA-Serialization-Framework" 
"DATA",998.1,1,99,19,0)
     target="_blank">here.</a>
"DATA",998.1,1,99,20,0)
</li>
"DATA",998.1,1,99,21,0)
<li> A working virtual machine may be built from this
"DATA",998.1,1,99,22,0)
  <a href="https://github.com/mdgeek/VistA-FHIR-CWF"
"DATA",998.1,1,99,23,0)
     target="_blank">source.</a>
"DATA",998.1,1,99,24,0)
</ul>
"DATA",998.1,2,0)
DSTU1^application/xml+fhir,application/xml,text/xml,xml^RGSEFHIX^0.0.82-3059
"DATA",998.1,2,10,0)
^998.11^46^46
"DATA",998.1,2,10,1,0)
Binary
"DATA",998.1,2,10,1,10)
D COMPID^RGSERGET
"DATA",998.1,2,10,2,0)
Binary_8925^1^8925
"DATA",998.1,2,10,2,30,0)
^998.12I^2^2
"DATA",998.1,2,10,2,30,1,0)
@content^^C^10
"DATA",998.1,2,10,2,30,1,10)
D TOBINARY^RGSERDOC(IEN)
"DATA",998.1,2,10,2,30,2,0)
attr:contentType^^N^1
"DATA",998.1,2,10,2,30,2,10)
text/plain
"DATA",998.1,2,10,3,0)
Condition^^9000011
"DATA",998.1,2,10,3,30,0)
^998.12I^8^8
"DATA",998.1,2,10,3,30,1,0)
subject^.02^C^10
"DATA",998.1,2,10,3,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,3,30,2,0)
code!start^^C^20
"DATA",998.1,2,10,3,30,2,10)
D NEWTAG(PN)
"DATA",998.1,2,10,3,30,3,0)
coding^.01^O^20.1
"DATA",998.1,2,10,3,30,3,10)
*/ICD9
"DATA",998.1,2,10,3,30,4,0)
code!end^.05^C^20.2
"DATA",998.1,2,10,3,30,4,10)
D PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,2,10,3,30,5,0)
category^^N^30
"DATA",998.1,2,10,3,30,6,0)
status^^S^40
"DATA",998.1,2,10,3,30,6,10)
confirmed
"DATA",998.1,2,10,3,30,7,0)
onsetDate^.13^D^50
"DATA",998.1,2,10,3,30,8,0)
abatementDate^1.07^D^60
"DATA",998.1,2,10,3,40,0)
^998.13I^4^4
"DATA",998.1,2,10,3,40,1,0)
subject^.02^R^10
"DATA",998.1,2,10,3,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,2,10,3,40,2,0)
onset^.13^D^20
"DATA",998.1,2,10,3,40,3,0)
subject:Patient^.02^R^10
"DATA",998.1,2,10,3,40,3,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,2,10,3,40,4,0)
_id^@ien^T^30
"DATA",998.1,2,10,4,0)
DocumentReference^^8925
"DATA",998.1,2,10,4,30,0)
^998.12I^24^22
"DATA",998.1,2,10,4,30,1,0)
description^1701^F^140
"DATA",998.1,2,10,4,30,2,0)
type^.01^C^40
"DATA",998.1,2,10,4,30,2,10)
D CODING(PN,"#8925.1",VL("I"),VL("E"))
"DATA",998.1,2,10,4,30,3,0)
subject^.02^C^30
"DATA",998.1,2,10,4,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,4,30,4,0)
author^1202^C^60
"DATA",998.1,2,10,4,30,4,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,4,30,5,0)
mimeType^^S^170
"DATA",998.1,2,10,4,30,5,10)
text/plain
"DATA",998.1,2,10,4,30,6,0)
created^1201^D^100
"DATA",998.1,2,10,4,30,7,0)
context^.07,.08^C^110
"DATA",998.1,2,10,4,30,7,10)
D NEWTAG(PN),PERIOD(VL("I"),VL(2,"I")),ENDTAG(PN)
"DATA",998.1,2,10,4,30,9,0)
location^@ien^C^210
"DATA",998.1,2,10,4,30,9,10)
D PUT(PN,$$HOST^RGNETWWW("*/Binary/8925-"_VL("I")))
"DATA",998.1,2,10,4,30,10,0)
masterIdentifier^@ien^C^10
"DATA",998.1,2,10,4,30,10,10)
D NEWTAG(PN),PUT("value",$$SYSUUID^RGNETWWW_"/Document/"_VL("I")),ENDTAG(PN)
"DATA",998.1,2,10,4,30,11,0)
status^.05~.02^C^120
"DATA",998.1,2,10,4,30,11,10)
N X S X=VL("I") D PUT(PN,$S("rd"[X:"entered in error",1:"current"))
"DATA",998.1,2,10,4,30,13,0)
identifier^^N^20
"DATA",998.1,2,10,4,30,14,0)
class^^N^50
"DATA",998.1,2,10,4,30,15,0)
custodian^^N^70
"DATA",998.1,2,10,4,30,16,0)
policyManager^^N^80
"DATA",998.1,2,10,4,30,17,0)
authenticator^^N^90
"DATA",998.1,2,10,4,30,18,0)
indexed^1201^D^110
"DATA",998.1,2,10,4,30,19,0)
docStatus^^N^130
"DATA",998.1,2,10,4,30,20,0)
confidentiality^^N^150
"DATA",998.1,2,10,4,30,21,0)
primaryLanguage^^N^160
"DATA",998.1,2,10,4,30,22,0)
format^^N^180
"DATA",998.1,2,10,4,30,23,0)
size^^N^190
"DATA",998.1,2,10,4,30,24,0)
hash^^N^200
"DATA",998.1,2,10,4,40,0)
^998.13I^6^6
"DATA",998.1,2,10,4,40,1,0)
subject:Patient^.02^R^10
"DATA",998.1,2,10,4,40,1,20)
S X=$$COHORT(PN,$NA(^TIU(8925,"C")))
"DATA",998.1,2,10,4,40,2,0)
period^1301^D^20
"DATA",998.1,2,10,4,40,3,0)
type^.01^T^30
"DATA",998.1,2,10,4,40,4,0)
author^1202^R^40
"DATA",998.1,2,10,4,40,5,0)
_id^@ien^T^50
"DATA",998.1,2,10,4,40,6,0)
indexed^1301^D^60
"DATA",998.1,2,10,5,0)
Encounter^^9000010
"DATA",998.1,2,10,5,30,0)
^998.12I^9^8
"DATA",998.1,2,10,5,30,1,0)
status^^C^10
"DATA",998.1,2,10,5,30,1,10)
D PUT(PN,$$GETSTAT^RGSERENC(IEN))
"DATA",998.1,2,10,5,30,2,0)
class^.07^C^20
"DATA",998.1,2,10,5,30,2,10)
N X S X=VL("I") D PUT(PN,$S(X="H":"inpatient",X="A":"ambulatory",1:"virtual"))
"DATA",998.1,2,10,5,30,3,0)
subject^.05^C^30
"DATA",998.1,2,10,5,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,5,30,4,0)
period^.01,.18^C^40
"DATA",998.1,2,10,5,30,4,10)
D PERIOD(VL("I"),VL(2,"I"))
"DATA",998.1,2,10,5,30,6,0)
location^.01,.18,.22^C^60
"DATA",998.1,2,10,5,30,6,10)
D:VL(3) NEWTAG(PN),REF2(PN,"Location",VL(3,"I"),VL(3,"E")),PERIOD(VL("I"),VL(2,"I")),ENDTAG(PN)
"DATA",998.1,2,10,5,30,7,0)
identifier!visitid^15001^C^70
"DATA",998.1,2,10,5,30,7,10)
D IDENT("@identifiers/visits",VL("I"),PN(0),"official")
"DATA",998.1,2,10,5,30,8,0)
type^.07^C^80
"DATA",998.1,2,10,5,30,8,10)
D CODING(PN,"@types/visits",VL("I"),VL("E"))
"DATA",998.1,2,10,5,30,9,0)
participant^^C^90
"DATA",998.1,2,10,5,30,9,10)
D GET^RGSERGET(.RGSER,"*/Encounter_Participant",$NA(^AUPNVPRV("AD",IEN)),PN)
"DATA",998.1,2,10,5,40,0)
^998.13I^5^5
"DATA",998.1,2,10,5,40,1,0)
subject^.05^R^10
"DATA",998.1,2,10,5,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,2,10,5,40,2,0)
type^.07^T^20
"DATA",998.1,2,10,5,40,3,0)
date^.01,.18^D^20
"DATA",998.1,2,10,5,40,4,0)
subject:Patient^.05^R^10
"DATA",998.1,2,10,5,40,4,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,2,10,5,40,5,0)
_id^@ien^T^30
"DATA",998.1,2,10,6,0)
Encounter_Participant^1^9000010.06
"DATA",998.1,2,10,6,30,0)
^998.12I^3^3
"DATA",998.1,2,10,6,30,1,0)
type^.04^C^10
"DATA",998.1,2,10,6,30,1,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",VL("I")_"PRF",VL("E"))
"DATA",998.1,2,10,6,30,2,0)
individual^.01^C^20
"DATA",998.1,2,10,6,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,6,30,3,0)
type^.05^C^10.1
"DATA",998.1,2,10,6,30,3,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",$S(VL("I")="A":"ATND",1:"PRF"),VL("E"))
"DATA",998.1,2,10,7,0)
ICD9^1^80
"DATA",998.1,2,10,7,30,0)
^998.12I^3^3
"DATA",998.1,2,10,7,30,1,0)
system^^C^20
"DATA",998.1,2,10,7,30,1,10)
D PUT("system","http://hl7.org/fhir/sid/icd-9")
"DATA",998.1,2,10,7,30,2,0)
code^.01^F^30
"DATA",998.1,2,10,7,30,3,0)
display^@ien^C^40
"DATA",998.1,2,10,7,30,3,10)
D PUT(PN,$$VSTD^ICDCODE(IEN))
"DATA",998.1,2,10,8,0)
Location^^44
"DATA",998.1,2,10,8,30,0)
^998.12I^4^4
"DATA",998.1,2,10,8,30,1,0)
name^.01^F^10
"DATA",998.1,2,10,8,30,2,0)
description^10^F^20
"DATA",998.1,2,10,8,30,3,0)
managingOrganization^3^C^30
"DATA",998.1,2,10,8,30,3,10)
D REF(PN,"Organization",.VL)
"DATA",998.1,2,10,8,30,4,0)
telecom!phone:work^99^C^40
"DATA",998.1,2,10,8,30,4,10)
D TELECOM
"DATA",998.1,2,10,8,40,0)
^998.13I^1^1
"DATA",998.1,2,10,8,40,1,0)
_id^@ien^T^10
"DATA",998.1,2,10,9,0)
Observation
"DATA",998.1,2,10,9,20)
D RETRIEVE^RGSEROBS
"DATA",998.1,2,10,9,30,0)
^998.12I^20^17
"DATA",998.1,2,10,9,30,1,0)
issued^issued^D^60
"DATA",998.1,2,10,9,30,2,0)
status^status^F^70
"DATA",998.1,2,10,9,30,3,0)
reliability^reliability^F^80
"DATA",998.1,2,10,9,30,4,0)
subject^patient^C^120
"DATA",998.1,2,10,9,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,9,30,5,0)
referenceRange^low,high^C^150
"DATA",998.1,2,10,9,30,5,10)
D RANGEXML^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,2,10,9,30,7,0)
comments^comments^F^40
"DATA",998.1,2,10,9,30,8,0)
appliesDateTime^collected^D^50
"DATA",998.1,2,10,9,30,9,0)
identifier^id^C^110
"DATA",998.1,2,10,9,30,9,10)
D IDENT("@observation",VL("I"))
"DATA",998.1,2,10,9,30,10,0)
name^code,code_system^C^10
"DATA",998.1,2,10,9,30,10,10)
D CODING(PN,VL(2,"E"),VL("I"),VL("E"))
"DATA",998.1,2,10,9,30,11,0)
value^value,units^C^20
"DATA",998.1,2,10,9,30,11,10)
D VALUEXML^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,2,10,9,30,12,0)
interpretation^interpretation^C^30
"DATA",998.1,2,10,9,30,12,10)
D:VL NEWTAG(PN),PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,2,10,9,30,13,0)
bodySite^^N^90
"DATA",998.1,2,10,9,30,14,0)
method^^N^100
"DATA",998.1,2,10,9,30,15,0)
specimen^^N^130
"DATA",998.1,2,10,9,30,16,0)
performer^^N^140
"DATA",998.1,2,10,9,30,19,0)
@id^id^N^1
"DATA",998.1,2,10,9,30,20,0)
related^related^C^160
"DATA",998.1,2,10,9,30,20,10)
D:VL RELXML^RGSEROBS(VL("I"))
"DATA",998.1,2,10,9,40,0)
^998.13I^3^3
"DATA",998.1,2,10,9,40,1,0)
subject:Patient^patient^R^10
"DATA",998.1,2,10,9,40,1,20)
S X=$$OBS^RGSEROBS(PARAMS("subject:Patient",1,1))
"DATA",998.1,2,10,9,40,2,0)
name^code^T^10
"DATA",998.1,2,10,9,40,3,0)
_id^@id^T^10
"DATA",998.1,2,10,10,0)
Organization^^4
"DATA",998.1,2,10,10,30,0)
^998.12I^3^3
"DATA",998.1,2,10,10,30,1,0)
name^.01^F^20
"DATA",998.1,2,10,10,30,2,0)
active^^S^10
"DATA",998.1,2,10,10,30,2,10)
true
"DATA",998.1,2,10,10,30,3,0)
address^@ien^O^40
"DATA",998.1,2,10,10,30,3,10)
*/Organization_Address
"DATA",998.1,2,10,11,0)
Organization_Address^1^4
"DATA",998.1,2,10,11,30,0)
^998.12I^6^6
"DATA",998.1,2,10,11,30,1,0)
use^^S^10
"DATA",998.1,2,10,11,30,1,10)
work
"DATA",998.1,2,10,11,30,2,0)
line^1.01^F^20
"DATA",998.1,2,10,11,30,3,0)
line^1.02^F^20.1
"DATA",998.1,2,10,11,30,4,0)
city^1.03^F^50
"DATA",998.1,2,10,11,30,5,0)
state^.02^F^60
"DATA",998.1,2,10,11,30,6,0)
zip^1.04^F^80
"DATA",998.1,2,10,12,0)
Organization_Reference^1^4
"DATA",998.1,2,10,12,30,0)
^998.12I^2^2
"DATA",998.1,2,10,12,30,1,0)
reference^^C^10
"DATA",998.1,2,10,12,30,1,10)
D PUT(PN,"Organization/"_IEN)
"DATA",998.1,2,10,12,30,2,0)
display^.01^F^20
"DATA",998.1,2,10,13,0)
Patient^^2
"DATA",998.1,2,10,13,30,0)
^998.12I^15^15
"DATA",998.1,2,10,13,30,1,0)
name^.01^C^10
"DATA",998.1,2,10,13,30,1,10)
D NAME(VL("I"))
"DATA",998.1,2,10,13,30,2,0)
gender^.02^C^20
"DATA",998.1,2,10,13,30,2,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/AdministrativeGender",VL("I"),VL("E"))
"DATA",998.1,2,10,13,30,3,0)
birthDate^.03^D^30
"DATA",998.1,2,10,13,30,4,0)
deceasedDateTime^.351^D^50
"DATA",998.1,2,10,13,30,5,0)
identifier!MRN^^C^60
"DATA",998.1,2,10,13,30,5,10)
D IDENT("@identifiers/patients",$$HRN^RGSERPAT(IEN),PN(0))
"DATA",998.1,2,10,13,30,6,0)
managingOrganization^^C^80
"DATA",998.1,2,10,13,30,6,10)
D GET^RGSERGET(.RGSER,"*/Organization_Reference",DUZ(2),PN)
"DATA",998.1,2,10,13,30,7,0)
photo^^C^80
"DATA",998.1,2,10,13,30,7,10)
Q:'$L($T(^MAGGTIG))  N X,Y D PHOTOS^MAGGTIG(.X,IEN) F Y=0:0 S Y=$O(X(Y)) Q:'Y  S X=$P(X(Y),U,3) I $E(X,1,4)="http" D NEWTAG(PN),PUT("contentType","image/"_$P(X,".",$L(X,"."))),PUT("url",X),ENDTAG(PN)
"DATA",998.1,2,10,13,30,8,0)
telecom!phone:home^.131^C^100
"DATA",998.1,2,10,13,30,8,10)
D TELECOM
"DATA",998.1,2,10,13,30,9,0)
telecom!phone:mobile^.134^C^110
"DATA",998.1,2,10,13,30,9,10)
D TELECOM
"DATA",998.1,2,10,13,30,10,0)
telecom!phone:work^.132^C^120
"DATA",998.1,2,10,13,30,10,10)
D TELECOM
"DATA",998.1,2,10,13,30,11,0)
address^@ien^O^130
"DATA",998.1,2,10,13,30,11,10)
*/Patient_Address_Home
"DATA",998.1,2,10,13,30,12,0)
telecom!fax:home^.136^C^140
"DATA",998.1,2,10,13,30,12,10)
D TELECOM
"DATA",998.1,2,10,13,30,13,0)
extension!race^2^M^21
"DATA",998.1,2,10,13,30,13,10)
*/Patient_Race
"DATA",998.1,2,10,13,30,14,0)
identifier!SSN^.09^C^60
"DATA",998.1,2,10,13,30,14,10)
D IDENT("http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,2,10,13,30,15,0)
text^^T^1
"DATA",998.1,2,10,13,30,15,10)
TEXT
"DATA",998.1,2,10,13,40,0)
^998.13I^6^6
"DATA",998.1,2,10,13,40,1,0)
_id^@ien^T^10
"DATA",998.1,2,10,13,40,2,0)
family^.01^S^20
"DATA",998.1,2,10,13,40,2,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,2,10,13,40,2,20)
S X="$$NAMEITER^RGSERPAT"
"DATA",998.1,2,10,13,40,3,0)
given^.01^S^30
"DATA",998.1,2,10,13,40,3,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,2,10,13,40,4,0)
gender^.02^T^40
"DATA",998.1,2,10,13,40,5,0)
birthdate^.03^D^15
"DATA",998.1,2,10,13,40,6,0)
identifier^.09^T^5
"DATA",998.1,2,10,13,40,6,10)
S MATCH=PVAL=$$HRN^RGSERPAT(IEN),PVAL=$TR(PVAL,"-") S:MATCH TP=""
"DATA",998.1,2,10,13,50,0)
^998.15^1^1
"DATA",998.1,2,10,13,50,1,0)
TEXT
"DATA",998.1,2,10,13,50,1,1,0)
^998.151^6^6^3150309^
"DATA",998.1,2,10,13,50,1,1,1,0)
<text>
"DATA",998.1,2,10,13,50,1,1,2,0)
<status value="generated"/>
"DATA",998.1,2,10,13,50,1,1,3,0)
<div xmlns="http://www.w3.org/1999/xhtml">
"DATA",998.1,2,10,13,50,1,1,4,0)
NAME: |.01|
"DATA",998.1,2,10,13,50,1,1,5,0)
</div>
"DATA",998.1,2,10,13,50,1,1,6,0)
</text> 
"DATA",998.1,2,10,14,0)
Patient/#/Condition
"DATA",998.1,2,10,14,10)
D COMPRT($NA(^AUPNPROB("AC")))
"DATA",998.1,2,10,15,0)
Patient/#/DocumentReference
"DATA",998.1,2,10,15,10)
D COMPRT($NA(^TIU(8925,"C")))
"DATA",998.1,2,10,16,0)
Patient/#/Encounter
"DATA",998.1,2,10,16,10)
D COMPRT($NA(^AUPNVSIT("C")))
"DATA",998.1,2,10,17,0)
Patient/#/Observation
"DATA",998.1,2,10,17,10)
D COMPRT($$OBS^RGSEROBS($P(PATH,"/",3)),1)
"DATA",998.1,2,10,18,0)
Patient_Address_Home^1^2
"DATA",998.1,2,10,18,30,0)
^998.12I^9^9
"DATA",998.1,2,10,18,30,1,0)
use^^S^10
"DATA",998.1,2,10,18,30,1,10)
home
"DATA",998.1,2,10,18,30,2,0)
line!1^.111^F^20
"DATA",998.1,2,10,18,30,3,0)
line!2^.112^F^20.1
"DATA",998.1,2,10,18,30,4,0)
line!3^.113^F^20.2
"DATA",998.1,2,10,18,30,5,0)
city^.114^F^50
"DATA",998.1,2,10,18,30,6,0)
state^.115^F^60
"DATA",998.1,2,10,18,30,7,0)
state!province^.1171^F^60.1
"DATA",998.1,2,10,18,30,8,0)
zip^.116^F^80
"DATA",998.1,2,10,18,30,9,0)
country^.1173^F^90
"DATA",998.1,2,10,19,0)
Patient_Race^1^2.02
"DATA",998.1,2,10,19,30,0)
^998.12I^2^2
"DATA",998.1,2,10,19,30,1,0)
valueCodeableConcept^.01^C^10
"DATA",998.1,2,10,19,30,1,10)
D:VL NEWTAG(PN),PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,2,10,19,30,2,0)
attr:url^^N^1
"DATA",998.1,2,10,19,30,2,10)
http://hl7.org/fhir/Profile/us-core#race
"DATA",998.1,2,10,20,0)
Practitioner^^200
"DATA",998.1,2,10,20,30,0)
^998.12I^8^8
"DATA",998.1,2,10,20,30,1,0)
name^.01^C^10
"DATA",998.1,2,10,20,30,1,10)
D NAME(VL("I"))
"DATA",998.1,2,10,20,30,2,0)
telecom!phone:home^.132^C^20
"DATA",998.1,2,10,20,30,2,10)
D TELECOM
"DATA",998.1,2,10,20,30,3,0)
telecom!phone:work^.131^C^30
"DATA",998.1,2,10,20,30,3,10)
D TELECOM
"DATA",998.1,2,10,20,30,4,0)
telecom!fax:work^.136^C^40
"DATA",998.1,2,10,20,30,4,10)
D TELECOM
"DATA",998.1,2,10,20,30,5,0)
identifier!DEA^53.2^C^50
"DATA",998.1,2,10,20,30,5,10)
D IDENT("",VL("E"),PN(0),"official")
"DATA",998.1,2,10,20,30,6,0)
gender^4^C^40
"DATA",998.1,2,10,20,30,6,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/AdministrativeGender",VL("I"),VL("E"))
"DATA",998.1,2,10,20,30,7,0)
identifier!SSN^9^C^50
"DATA",998.1,2,10,20,30,7,10)
D IDENT("http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,2,10,20,30,8,0)
identifier!NPI^41.99^C^50
"DATA",998.1,2,10,20,30,8,10)
D IDENT("urn:oid:2.16.840.1.113883.4.6",VL("E"),PN(0))
"DATA",998.1,2,10,20,40,0)
^998.13I^3^3
"DATA",998.1,2,10,20,40,1,0)
family^.01^S^20
"DATA",998.1,2,10,20,40,1,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,2,10,20,40,1,20)
S X="$$NAMEITER^RGSERPER"
"DATA",998.1,2,10,20,40,2,0)
given^.01^S^30
"DATA",998.1,2,10,20,40,2,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,2,10,20,40,3,0)
_id^@ien^T^40
"DATA",998.1,2,10,21,0)
User^^200
"DATA",998.1,2,10,21,30,0)
^998.12I^6^6
"DATA",998.1,2,10,21,30,1,0)
name^.01^C^10
"DATA",998.1,2,10,21,30,1,10)
D NAME(VL("I"))
"DATA",998.1,2,10,21,30,2,0)
birthDate^5^D^20
"DATA",998.1,2,10,21,30,3,0)
extension!organization^^T^30
"DATA",998.1,2,10,21,30,3,10)
ORGANIZATION
"DATA",998.1,2,10,21,30,4,0)
telecom!phone:work^.132^C^40
"DATA",998.1,2,10,21,30,4,10)
D TELECOM
"DATA",998.1,2,10,21,30,5,0)
telecom!phone:home^.131^C^50
"DATA",998.1,2,10,21,30,5,10)
D TELECOM
"DATA",998.1,2,10,21,30,6,0)
telecom!fax:work^.136^C^60
"DATA",998.1,2,10,21,30,6,10)
D TELECOM
"DATA",998.1,2,10,21,40,0)
^998.13I^1^1
"DATA",998.1,2,10,21,40,1,0)
_id^@ien^T^10
"DATA",998.1,2,10,21,50,0)
^998.15^1^1
"DATA",998.1,2,10,21,50,1,0)
ORGANIZATION
"DATA",998.1,2,10,21,50,1,1,0)
^^6^6^3150311.205633
"DATA",998.1,2,10,21,50,1,1,1,0)
<extension url="http://www.carewebframework.org/fhir/extension/user/organization">
"DATA",998.1,2,10,21,50,1,1,2,0)
<valueResource>
"DATA",998.1,2,10,21,50,1,1,3,0)
<reference value="Organization/|@DUZ(2)|"/>
"DATA",998.1,2,10,21,50,1,1,4,0)
<display value="|@$P(^DIC(4,DUZ(2),0),U)|"/>
"DATA",998.1,2,10,21,50,1,1,5,0)
</valueResource>
"DATA",998.1,2,10,21,50,1,1,6,0)
</extension>
"DATA",998.1,2,10,22,0)
ValueSet^^998.11
"DATA",998.1,2,10,22,20)
S IENS=IENS_RGSER("SER")_","
"DATA",998.1,2,10,22,30,0)
^998.12I^5^5
"DATA",998.1,2,10,22,30,1,0)
define^.01^C^100
"DATA",998.1,2,10,22,30,1,10)
D NEWTAG(PN),PUT("system",$$SYSTEM^RGSER("@"_VL("E"))),GET^RGSERGET(.RGSER,"*/"_VL("E"),,"concept"),ENDTAG(PN)
"DATA",998.1,2,10,22,30,2,0)
identifier^.01^C^10
"DATA",998.1,2,10,22,30,2,10)
D PUT(PN,$$SYSTEM^RGSER("@vs/"_$P(VL("E"),"_",2,99)))
"DATA",998.1,2,10,22,30,3,0)
name^.01^C^20
"DATA",998.1,2,10,22,30,3,10)
D PUT(PN,$P(VL("E"),"_",2,99))
"DATA",998.1,2,10,22,30,4,0)
description^99^F^30
"DATA",998.1,2,10,22,30,5,0)
status^^S^40
"DATA",998.1,2,10,22,30,5,10)
active
"DATA",998.1,2,10,22,40,0)
^998.13I^3^3
"DATA",998.1,2,10,22,40,1,0)
_id^@ien^T^1
"DATA",998.1,2,10,22,40,2,0)
name^.01^S^10
"DATA",998.1,2,10,22,40,2,10)
S PVAL=$S(PVAL("OPR")="s":"VALUESET_",1:"ValueSet_")_PVAL
"DATA",998.1,2,10,22,40,3,0)
@selector^.01^T^1
"DATA",998.1,2,10,22,40,3,10)
S MATCH="ValueSet_"=$E(VL("E"),1,9)
"DATA",998.1,2,10,22,40,3,20)
S X="$$ITERVS^RGSEFHIR"
"DATA",998.1,2,10,23,0)
ValueSet_DocumentType^1^8925.1
"DATA",998.1,2,10,23,30,0)
^998.12I^2^2
"DATA",998.1,2,10,23,30,1,0)
code^@ien^R^20
"DATA",998.1,2,10,23,30,2,0)
display^.01^F^30
"DATA",998.1,2,10,23,99)
List of document categories by which documents may be classified.
"DATA",998.1,2,10,24,0)
ValueSet_EncounterType^1
"DATA",998.1,2,10,24,10)
K XSER D GETTYPES^RGSERENC
"DATA",998.1,2,10,24,20)
D RETRIEVE^RGSERENC(IEN)
"DATA",998.1,2,10,24,30,0)
^998.12I^3^3
"DATA",998.1,2,10,24,30,1,0)
display^2^R^20
"DATA",998.1,2,10,24,30,2,0)
code^1^R^30
"DATA",998.1,2,10,24,30,3,0)
definition^3^R^40
"DATA",998.1,2,10,24,99)
List of recognized encounter types (service codes).
"DATA",998.1,2,10,25,0)
Medication^^50
"DATA",998.1,2,10,25,30,0)
^998.12I^7^7
"DATA",998.1,2,10,25,30,1,0)
name^.01^F^10
"DATA",998.1,2,10,25,30,2,0)
code!start^^C^20
"DATA",998.1,2,10,25,30,2,10)
D NEWTAG(PN)
"DATA",998.1,2,10,25,30,3,0)
code!end^^C^20.9
"DATA",998.1,2,10,25,30,3,10)
D ENDTAG(PN)
"DATA",998.1,2,10,25,30,4,0)
coding!ndc^31^C^20.1
"DATA",998.1,2,10,25,30,4,10)
D:VL CODING(,"http://www.fda.gov/ndc",VL("E"))
"DATA",998.1,2,10,25,30,5,0)
product!start^^C^30
"DATA",998.1,2,10,25,30,5,10)
D NEWTAG(PN)
"DATA",998.1,2,10,25,30,6,0)
product!end^^C^30.9
"DATA",998.1,2,10,25,30,6,10)
D ENDTAG(PN)
"DATA",998.1,2,10,25,30,7,0)
form^14.5^C^30.1
"DATA",998.1,2,10,25,30,7,10)
D:VL CODING(PN,"dispense_unit",,VL("E"))
"DATA",998.1,2,10,25,40,0)
^998.13I^3^3
"DATA",998.1,2,10,25,40,1,0)
code^31^T^10
"DATA",998.1,2,10,25,40,2,0)
name^.01^S^20
"DATA",998.1,2,10,25,40,3,0)
_id^@ien^T^30
"DATA",998.1,2,10,26,0)
MedicationPrescription^^52
"DATA",998.1,2,10,26,30,0)
^998.12I^8^8
"DATA",998.1,2,10,26,30,1,0)
patient^2^C^40
"DATA",998.1,2,10,26,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,26,30,2,0)
prescriber^4^C^50
"DATA",998.1,2,10,26,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,26,30,3,0)
medication^6^C^80
"DATA",998.1,2,10,26,30,3,10)
D REF(PN,"Medication",.VL)
"DATA",998.1,2,10,26,30,4,0)
dateWritten^1^D^20
"DATA",998.1,2,10,26,30,5,0)
dosageInstruction!start^^C^90
"DATA",998.1,2,10,26,30,5,10)
D NEWTAG(PN)
"DATA",998.1,2,10,26,30,6,0)
dosageInstruction!end^^C^90.9
"DATA",998.1,2,10,26,30,6,10)
D ENDTAG(PN)
"DATA",998.1,2,10,26,30,7,0)
@text^10.2^M^90.001
"DATA",998.1,2,10,26,30,7,10)
*/MedicationPrescription_Sig
"DATA",998.1,2,10,26,30,8,0)
@dosing^113^M^90.002
"DATA",998.1,2,10,26,30,8,10)
*/MedicationPrescription_Dosing
"DATA",998.1,2,10,26,40,0)
^998.13I^2^2
"DATA",998.1,2,10,26,40,1,0)
patient^2^R^10
"DATA",998.1,2,10,26,40,1,20)
S X=$$COHORT(PN,$NA(^PS(55,"*","P","A")),1)
"DATA",998.1,2,10,26,40,2,0)
_id^@ien^T^20
"DATA",998.1,2,10,27,0)
MedicationPrescription_Sig^1^52.04
"DATA",998.1,2,10,27,30,0)
^998.12I^1^1
"DATA",998.1,2,10,27,30,1,0)
text^.01^F^10
"DATA",998.1,2,10,28,0)
MedicationPrescription_Dosing^1^52.0113
"DATA",998.1,2,10,28,30,0)
^998.12I^1^1
"DATA",998.1,2,10,28,30,1,0)
route^6^C^10
"DATA",998.1,2,10,28,30,1,10)
D:VL CODING(PN,"@medication_route",VL("E"))
"DATA",998.1,2,10,29,0)
Patient/#/MedicationPrescription
"DATA",998.1,2,10,29,10)
D COMPRT($$COHORT2($P(PATH,"/",3),$NA(^PS(55,"*","P","A")),1),1)
"DATA",998.1,2,10,30,0)
AdverseReaction^^120.8
"DATA",998.1,2,10,30,30,0)
^998.12I^9^7
"DATA",998.1,2,10,30,30,1,0)
identifier^^N^10
"DATA",998.1,2,10,30,30,2,0)
date^4^D^20
"DATA",998.1,2,10,30,30,3,0)
subject^.01^C^30
"DATA",998.1,2,10,30,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,30,30,4,0)
didNotOccurFlag^^S^40
"DATA",998.1,2,10,30,30,4,10)
false
"DATA",998.1,2,10,30,30,5,0)
recorder^5^C^50
"DATA",998.1,2,10,30,30,5,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,30,30,6,0)
symptom^10^M^60
"DATA",998.1,2,10,30,30,6,10)
*/AdverseReaction_Symptom
"DATA",998.1,2,10,30,30,9,0)
exposure^1,.02^C^70.2
"DATA",998.1,2,10,30,30,9,10)
S:'VL VL("E")=VL(2,"E") S VL("I")=$$VP2ID(VL("I")) D NEWTAG(PN),REF("substance","Substance",.VL),ENDTAG(PN)
"DATA",998.1,2,10,30,40,0)
^998.13I^3^3
"DATA",998.1,2,10,30,40,1,0)
subject^.01^R^10
"DATA",998.1,2,10,30,40,1,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,2,10,30,40,2,0)
subject:Patient^.01^R^10
"DATA",998.1,2,10,30,40,2,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,2,10,30,40,3,0)
_id^@ien^T^20
"DATA",998.1,2,10,31,0)
AdverseReaction_Symptom^1^120.81
"DATA",998.1,2,10,31,30,0)
^998.12I^2^2
"DATA",998.1,2,10,31,30,1,0)
code^.01^C^10
"DATA",998.1,2,10,31,30,1,10)
D CODING(PN,"#120.83",VL("I"),VL("E"))
"DATA",998.1,2,10,31,30,2,0)
severity^^N^20
"DATA",998.1,2,10,32,0)
AdverseReaction_Ingredient^1^120.802
"DATA",998.1,2,10,32,30,0)
^998.12I^4^4
"DATA",998.1,2,10,32,30,1,0)
date^^D^10
"DATA",998.1,2,10,32,30,2,0)
type^^S^20
"DATA",998.1,2,10,32,30,2,10)
drugadmin
"DATA",998.1,2,10,32,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,2,10,32,30,4,0)
substance^.01^C^40
"DATA",998.1,2,10,32,30,4,10)
D REF(PN,"Substance",.VL,"50.416:")
"DATA",998.1,2,10,33,0)
AdverseReaction_Class^1^120.803
"DATA",998.1,2,10,33,30,0)
^998.12I^4^4
"DATA",998.1,2,10,33,30,1,0)
date^^D^10
"DATA",998.1,2,10,33,30,2,0)
type^^S^20
"DATA",998.1,2,10,33,30,2,10)
drugadmin
"DATA",998.1,2,10,33,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,2,10,33,30,4,0)
substance^.01^C^40
"DATA",998.1,2,10,33,30,4,10)
D REF(PN,"Substance",.VL,"50.605:")
"DATA",998.1,2,10,34,0)
Substance
"DATA",998.1,2,10,34,10)
D COMPID^RGSERGET
"DATA",998.1,2,10,35,0)
Patient/#/AdverseReaction
"DATA",998.1,2,10,35,10)
D COMPRT($NA(^GMR(120.8,"B")))
"DATA",998.1,2,10,36,0)
Substance_50^1^50
"DATA",998.1,2,10,36,30,0)
^998.12I^4^4
"DATA",998.1,2,10,36,30,1,0)
type^.01^C^10
"DATA",998.1,2,10,36,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,2,10,36,30,2,0)
description^^W^20
"DATA",998.1,2,10,36,30,3,0)
instance^^N^30
"DATA",998.1,2,10,36,30,4,0)
ingredient^^N^40
"DATA",998.1,2,10,37,0)
Substance_50.416^1^50.416
"DATA",998.1,2,10,37,30,0)
^998.12I^4^4
"DATA",998.1,2,10,37,30,1,0)
type^.01^C^10
"DATA",998.1,2,10,37,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,2,10,37,30,2,0)
description^^W^20
"DATA",998.1,2,10,37,30,3,0)
instance^^N^30
"DATA",998.1,2,10,37,30,4,0)
ingredient^^N^40
"DATA",998.1,2,10,38,0)
Substance_50.6^1^50.6
"DATA",998.1,2,10,38,30,0)
^998.12I^4^4
"DATA",998.1,2,10,38,30,1,0)
type^.01^C^10
"DATA",998.1,2,10,38,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,2,10,38,30,2,0)
description^^W^20
"DATA",998.1,2,10,38,30,3,0)
instance^^N^30
"DATA",998.1,2,10,38,30,4,0)
ingredient^^N^40
"DATA",998.1,2,10,39,0)
Substance_50.605^1^50.605
"DATA",998.1,2,10,39,30,0)
^998.12I^4^4
"DATA",998.1,2,10,39,30,1,0)
type^.01^C^10
"DATA",998.1,2,10,39,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,2,10,39,30,2,0)
description^^W^20
"DATA",998.1,2,10,39,30,3,0)
instance^^N^30
"DATA",998.1,2,10,39,30,4,0)
ingredient^^N^40
"DATA",998.1,2,10,40,0)
Substance_120.82^1^120.82
"DATA",998.1,2,10,40,30,0)
^998.12I^4^4
"DATA",998.1,2,10,40,30,1,0)
type^.01^C^10
"DATA",998.1,2,10,40,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,2,10,40,30,2,0)
description^^W^20
"DATA",998.1,2,10,40,30,3,0)
instance^^N^30
"DATA",998.1,2,10,40,30,4,0)
ingredient^^N^40
"DATA",998.1,2,10,41,0)
Immunization^^9000010.11
"DATA",998.1,2,10,41,30,0)
^998.12I^18^18
"DATA",998.1,2,10,41,30,1,0)
identifier^^N^10
"DATA",998.1,2,10,41,30,2,0)
date^1201,.03~.01^C^20
"DATA",998.1,2,10,41,30,2,10)
D PUTDT(PN,$S(VL:VL("I"),1:VL(2,"I")))
"DATA",998.1,2,10,41,30,3,0)
vaccineType^.01^C^30
"DATA",998.1,2,10,41,30,3,10)
D CODING(PN,"#9999999.14",VL("I"),VL("E"))
"DATA",998.1,2,10,41,30,4,0)
subject^.02^C^40
"DATA",998.1,2,10,41,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,41,30,5,0)
refusedIndicator^^B^50
"DATA",998.1,2,10,41,30,6,0)
reported^^B^60
"DATA",998.1,2,10,41,30,7,0)
performer^1204^C^70
"DATA",998.1,2,10,41,30,7,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,41,30,8,0)
requester^1202^C^80
"DATA",998.1,2,10,41,30,8,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,41,30,9,0)
manufacturer^^N^90
"DATA",998.1,2,10,41,30,10,0)
location^.03~.22^C^100
"DATA",998.1,2,10,41,30,10,10)
D REF(PN,"Location",.VL)
"DATA",998.1,2,10,41,30,11,0)
lotNumber^^N^110
"DATA",998.1,2,10,41,30,12,0)
expirationDate^^D^120
"DATA",998.1,2,10,41,30,13,0)
site^^N^130
"DATA",998.1,2,10,41,30,14,0)
route^^N^140
"DATA",998.1,2,10,41,30,15,0)
doseQuantity^^N^150
"DATA",998.1,2,10,41,30,16,0)
explanation^^N^160
"DATA",998.1,2,10,41,30,17,0)
reaction^^N^170
"DATA",998.1,2,10,41,30,18,0)
vaccinationProtocol^^N^180
"DATA",998.1,2,10,41,40,0)
^998.13I^3^3
"DATA",998.1,2,10,41,40,1,0)
subject^.02^R^10
"DATA",998.1,2,10,41,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,2,10,41,40,2,0)
subject:Patient^.02^R^10
"DATA",998.1,2,10,41,40,2,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,2,10,41,40,3,0)
_id^@ien^T^30
"DATA",998.1,2,10,42,0)
Patient/#/Immunization
"DATA",998.1,2,10,42,10)
D COMPRT($NA(^AUPNVIMM("C")))
"DATA",998.1,2,10,43,0)
Alert^^26.13
"DATA",998.1,2,10,43,30,0)
^998.12I^6^6
"DATA",998.1,2,10,43,30,1,0)
identifier^^N^10
"DATA",998.1,2,10,43,30,2,0)
category^.02^C^20
"DATA",998.1,2,10,43,30,2,10)
D CODING(PN,"#26.13",$$VP2ID(VL("I")),VL("E"))
"DATA",998.1,2,10,43,30,3,0)
status^.03^C^30
"DATA",998.1,2,10,43,30,3,10)
D PUT(PN,$$LOW^XLFSTR(VL("E")))
"DATA",998.1,2,10,43,30,4,0)
subject^.01^C^40
"DATA",998.1,2,10,43,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,2,10,43,30,5,0)
author^^N^50
"DATA",998.1,2,10,43,30,6,0)
note^1^W^60
"DATA",998.1,2,10,43,30,6,10)
  
"DATA",998.1,2,10,43,40,0)
^998.13I^3^3
"DATA",998.1,2,10,43,40,1,0)
_id^@ien^T^10
"DATA",998.1,2,10,43,40,2,0)
subject^.01^R^20
"DATA",998.1,2,10,43,40,2,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,2,10,43,40,3,0)
subject:Patient^.01^R^20
"DATA",998.1,2,10,43,40,3,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,2,10,44,0)
Patient/#/Alert
"DATA",998.1,2,10,44,10)
D COMPRT($NA(^DGPF(26.13,"B")))
"DATA",998.1,2,10,45,0)
metadata
"DATA",998.1,2,10,45,10)
D TEMPLATE^RGSERGET("CONFORMANCE")
"DATA",998.1,2,10,45,50,0)
^998.15^3^3
"DATA",998.1,2,10,45,50,1,0)
CONFORMANCE
"DATA",998.1,2,10,45,50,1,1,0)
^998.151^28^28^3150327^^
"DATA",998.1,2,10,45,50,1,1,1,0)
<Conformance>
"DATA",998.1,2,10,45,50,1,1,2,0)
  <text>
"DATA",998.1,2,10,45,50,1,1,3,0)
    <status value="generated"/>
"DATA",998.1,2,10,45,50,1,1,4,0)
  </text>
"DATA",998.1,2,10,45,50,1,1,5,0)
  <publisher value="|@$P($$SITE^VASITE,U,2)|"/>
"DATA",998.1,2,10,45,50,1,1,6,0)
  <date value="|@$$FMTDATE^RGSER|"/>
"DATA",998.1,2,10,45,50,1,1,7,0)
  <software>
"DATA",998.1,2,10,45,50,1,1,8,0)
    <name value="VistA Serialization Framework"/>
"DATA",998.1,2,10,45,50,1,1,9,0)
    <version value="|@$$VERSION^XPDUTL("RGSE")|"/>
"DATA",998.1,2,10,45,50,1,1,10,0)
  </software>
"DATA",998.1,2,10,45,50,1,1,11,0)
  <implementation>
"DATA",998.1,2,10,45,50,1,1,12,0)
    <description value="VistA (|@RGSER("SERNM")|)"/>
"DATA",998.1,2,10,45,50,1,1,13,0)
  </implementation>
"DATA",998.1,2,10,45,50,1,1,14,0)
  <fhirVersion value="|@RGSER("VER")|"/>
"DATA",998.1,2,10,45,50,1,1,15,0)
  <acceptUnknown value="false"/>
"DATA",998.1,2,10,45,50,1,1,16,0)
  <format value="application/xml+fhir"/> 
"DATA",998.1,2,10,45,50,1,1,17,0)
  <rest>
"DATA",998.1,2,10,45,50,1,1,18,0)
    <mode value="server"/>
"DATA",998.1,2,10,45,50,1,1,19,0)
    <security>
"DATA",998.1,2,10,45,50,1,1,20,0)
      <extension url="http://fhir-registry.smarthealthit.org/Profile/oauth-uris#authorize">
"DATA",998.1,2,10,45,50,1,1,21,0)
        <valueUri value="|@$$HOSTURL^RGNETWWW("oauth2/authorize")|" />
"DATA",998.1,2,10,45,50,1,1,22,0)
      </extension>
"DATA",998.1,2,10,45,50,1,1,23,0)
      <extension url="http://fhir-registry.smarthealthit.org/Profile/oauth-uris#token">
"DATA",998.1,2,10,45,50,1,1,24,0)
        <valueUri value="|@$$HOSTURL^RGNETWWW("oauth2/token")|" />
"DATA",998.1,2,10,45,50,1,1,25,0)
      </extension>
"DATA",998.1,2,10,45,50,1,1,26,0)
    </security>
"DATA",998.1,2,10,45,50,1,1,27,0)
|#$$RESCONF^RGSEFHIR|  </rest>
"DATA",998.1,2,10,45,50,1,1,28,0)
</Conformance> 
"DATA",998.1,2,10,45,50,2,0)
CONFORMANCE_RESOURCE
"DATA",998.1,2,10,45,50,2,1,0)
^998.151^6^6^3150327^
"DATA",998.1,2,10,45,50,2,1,1,0)
    <resource>
"DATA",998.1,2,10,45,50,2,1,2,0)
      <type value="|@RESNAME|"/>
"DATA",998.1,2,10,45,50,2,1,3,0)
      <operation>
"DATA",998.1,2,10,45,50,2,1,4,0)
       <code value="read"/>
"DATA",998.1,2,10,45,50,2,1,5,0)
      </operation>
"DATA",998.1,2,10,45,50,2,1,6,0)
|#$$SRPCONF^RGSEFHIR|    </resource>
"DATA",998.1,2,10,45,50,3,0)
CONFORMANCE_PARAMETER
"DATA",998.1,2,10,45,50,3,1,0)
^998.151^4^4^3150327^
"DATA",998.1,2,10,45,50,3,1,1,0)
        <searchParam>
"DATA",998.1,2,10,45,50,3,1,2,0)
          <name value="|@SRPNAME|"/>
"DATA",998.1,2,10,45,50,3,1,3,0)
          <type value="|@SRPTYPE|"/>
"DATA",998.1,2,10,45,50,3,1,4,0)
        </searchParam>
"DATA",998.1,2,10,46,0)
Order^^100
"DATA",998.1,2,10,46,30,0)
^998.12I^9^9
"DATA",998.1,2,10,46,30,1,0)
identifier^^N^10
"DATA",998.1,2,10,46,30,2,0)
date^4^D^20
"DATA",998.1,2,10,46,30,3,0)
subject^.02^C^30
"DATA",998.1,2,10,46,30,3,10)
D:VL("I")["DPT" REF2(PN,"Patient",+VL("I"),VL("E"))
"DATA",998.1,2,10,46,30,4,0)
source^1^C^40
"DATA",998.1,2,10,46,30,4,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,2,10,46,30,5,0)
target^^N^50
"DATA",998.1,2,10,46,30,6,0)
reason^^N^60
"DATA",998.1,2,10,46,30,7,0)
authority^^N^70
"DATA",998.1,2,10,46,30,8,0)
when^^N^80
"DATA",998.1,2,10,46,30,9,0)
detail:reference^@ien^C^90
"DATA",998.1,2,10,46,30,9,10)
D PUT(PN,"DiagnosticOrder/"_VL("I"))
"DATA",998.1,2,20,0)
^998.14^5^5^3150407^^^^
"DATA",998.1,2,20,1,0)
Access-Control-Allow-Credentials: true
"DATA",998.1,2,20,2,0)
Access-Control-Allow-Headers: origin, authorization, accept, content-type, x-requested-with
"DATA",998.1,2,20,3,0)
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS
"DATA",998.1,2,20,4,0)
Access-Control-Allow-Origin: *
"DATA",998.1,2,20,5,0)
Cache-Control: max-age=0
"DATA",998.1,2,99,0)
^998.199^25^25^3150407^^^^
"DATA",998.1,2,99,1,0)
This is the base URL for the DSTU1 XML FHIR endpoint. 
"DATA",998.1,2,99,2,0)

"DATA",998.1,2,99,3,0)
<hr> 
"DATA",998.1,2,99,4,0)

"DATA",998.1,2,99,5,0)
This service is supported by the <b>VistA Serialization Framework</b>, 
"DATA",998.1,2,99,6,0)
developed by Doug Martin of the <a href="http://www.regenstrief.org"
"DATA",998.1,2,99,7,0)
target="_blank">Regenstrief Institute.<a>
"DATA",998.1,2,99,8,0)

"DATA",998.1,2,99,9,0)
<p>
"DATA",998.1,2,99,10,0)

"DATA",998.1,2,99,11,0)
It is freely available as open source under the 
"DATA",998.1,2,99,12,0)
<a href="https://www.mozilla.org/MPL/2.0/" target="_blank">MPL 2.0 license</a>:
"DATA",998.1,2,99,13,0)

"DATA",998.1,2,99,14,0)
<ul> 
"DATA",998.1,2,99,15,0)
<li> The FHIR conformance document is available
"DATA",998.1,2,99,16,0)
  <a href="/DSTU1/metadata" target="_blank">here</a>
"DATA",998.1,2,99,17,0)
</li>
"DATA",998.1,2,99,18,0)
<li> The complete source may be downloaded 
"DATA",998.1,2,99,19,0)
  <a href="https://github.com/mdgeek/VistA-Serialization-Framework" 
"DATA",998.1,2,99,20,0)
     target="_blank">here.</a>
"DATA",998.1,2,99,21,0)
</li>
"DATA",998.1,2,99,22,0)
<li> A working virtual machine may be built from this
"DATA",998.1,2,99,23,0)
  <a href="https://github.com/mdgeek/VistA-FHIR-CWF"
"DATA",998.1,2,99,24,0)
     target="_blank">source.</a>
"DATA",998.1,2,99,25,0)
</ul>
"DATA",998.1,3,0)
DSTU2^application/xml+fhir,application/xml,text/xml,xml^RGSEFHIX^0.4.0
"DATA",998.1,3,10,0)
^998.11^49^49
"DATA",998.1,3,10,1,0)
Binary
"DATA",998.1,3,10,1,10)
D COMPID^RGSERGET
"DATA",998.1,3,10,2,0)
Binary_8925^1^8925
"DATA",998.1,3,10,2,30,0)
^998.12I^3^3
"DATA",998.1,3,10,2,30,1,0)
@content^^C^10
"DATA",998.1,3,10,2,30,1,10)
D TOBINARY^RGSERDOC(IEN)
"DATA",998.1,3,10,2,30,2,0)
id^@ienx^R^1
"DATA",998.1,3,10,2,30,3,0)
attr:contentType^^N^1
"DATA",998.1,3,10,2,30,3,10)
text/plain
"DATA",998.1,3,10,3,0)
Condition^^9000011
"DATA",998.1,3,10,3,30,0)
^998.12I^9^9
"DATA",998.1,3,10,3,30,1,0)
subject^.02^C^10
"DATA",998.1,3,10,3,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,3,30,2,0)
code!start^^C^20
"DATA",998.1,3,10,3,30,2,10)
D NEWTAG(PN)
"DATA",998.1,3,10,3,30,3,0)
coding^.01^O^20.1
"DATA",998.1,3,10,3,30,3,10)
*/ICD9
"DATA",998.1,3,10,3,30,4,0)
code!end^.05^C^20.2
"DATA",998.1,3,10,3,30,4,10)
D PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,3,10,3,30,5,0)
category^^N^30
"DATA",998.1,3,10,3,30,6,0)
status^^S^40
"DATA",998.1,3,10,3,30,6,10)
confirmed
"DATA",998.1,3,10,3,30,7,0)
onsetDate^.13^D^50
"DATA",998.1,3,10,3,30,8,0)
abatementDate^1.07^D^60
"DATA",998.1,3,10,3,30,9,0)
id^@id^R^1
"DATA",998.1,3,10,3,40,0)
^998.13I^4^4
"DATA",998.1,3,10,3,40,1,0)
subject^.02^R^10
"DATA",998.1,3,10,3,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,3,10,3,40,2,0)
onset^.13^D^20
"DATA",998.1,3,10,3,40,3,0)
subject:Patient^.02^R^10
"DATA",998.1,3,10,3,40,3,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,3,10,3,40,4,0)
_id^@ien^T^30
"DATA",998.1,3,10,4,0)
DocumentReference^^8925
"DATA",998.1,3,10,4,30,0)
^998.12I^24^23
"DATA",998.1,3,10,4,30,1,0)
description^1701^F^140
"DATA",998.1,3,10,4,30,2,0)
type^.01^C^40
"DATA",998.1,3,10,4,30,2,10)
D CODING(PN,"#8925.1",VL("I"),VL("E"))
"DATA",998.1,3,10,4,30,3,0)
subject^.02^C^30
"DATA",998.1,3,10,4,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,4,30,4,0)
author^1202^C^60
"DATA",998.1,3,10,4,30,4,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,4,30,5,0)
mimeType^^S^170
"DATA",998.1,3,10,4,30,5,10)
text/plain
"DATA",998.1,3,10,4,30,6,0)
created^1201^D^100
"DATA",998.1,3,10,4,30,7,0)
context^.07,.08^C^110
"DATA",998.1,3,10,4,30,7,10)
D NEWTAG(PN),PERIOD(VL("I"),VL(2,"I")),ENDTAG(PN)
"DATA",998.1,3,10,4,30,9,0)
content^@ien^C^210
"DATA",998.1,3,10,4,30,9,10)
D PUT(PN,$$HOST^RGNETWWW("*/Binary/8925-"_VL("I")))
"DATA",998.1,3,10,4,30,10,0)
masterIdentifier^@ien^C^10
"DATA",998.1,3,10,4,30,10,10)
D NEWTAG(PN),PUT("value",$$SYSUUID^RGNETWWW_"/Document/"_VL("I")),ENDTAG(PN)
"DATA",998.1,3,10,4,30,11,0)
status^.05~.02^C^120
"DATA",998.1,3,10,4,30,11,10)
N X S X=VL("I") D PUT(PN,$S("rd"[X:"entered-in-error",1:"current"))
"DATA",998.1,3,10,4,30,12,0)
id^@id^R^1
"DATA",998.1,3,10,4,30,13,0)
identifier^^N^20
"DATA",998.1,3,10,4,30,14,0)
class^^N^50
"DATA",998.1,3,10,4,30,15,0)
custodian^^N^70
"DATA",998.1,3,10,4,30,16,0)
policyManager^^N^80
"DATA",998.1,3,10,4,30,17,0)
authenticator^^N^90
"DATA",998.1,3,10,4,30,18,0)
indexed^1201^D^110
"DATA",998.1,3,10,4,30,19,0)
docStatus^^N^130
"DATA",998.1,3,10,4,30,20,0)
confidentiality^^N^150
"DATA",998.1,3,10,4,30,21,0)
primaryLanguage^^N^160
"DATA",998.1,3,10,4,30,22,0)
format^^N^180
"DATA",998.1,3,10,4,30,23,0)
size^^N^190
"DATA",998.1,3,10,4,30,24,0)
hash^^N^200
"DATA",998.1,3,10,4,40,0)
^998.13I^6^6
"DATA",998.1,3,10,4,40,1,0)
subject:Patient^.02^R^10
"DATA",998.1,3,10,4,40,1,20)
S X=$$COHORT(PN,$NA(^TIU(8925,"C")))
"DATA",998.1,3,10,4,40,2,0)
period^1301^D^20
"DATA",998.1,3,10,4,40,3,0)
type^.01^T^30
"DATA",998.1,3,10,4,40,4,0)
author^1202^R^40
"DATA",998.1,3,10,4,40,5,0)
_id^@ien^T^50
"DATA",998.1,3,10,4,40,6,0)
indexed^1301^D^60
"DATA",998.1,3,10,5,0)
Encounter^^9000010
"DATA",998.1,3,10,5,30,0)
^998.12I^10^9
"DATA",998.1,3,10,5,30,1,0)
status^^C^10
"DATA",998.1,3,10,5,30,1,10)
D PUT(PN,$$GETSTAT^RGSERENC(IEN))
"DATA",998.1,3,10,5,30,2,0)
class^.07^C^20
"DATA",998.1,3,10,5,30,2,10)
N X S X=VL("I") D PUT(PN,$S(X="H":"inpatient",X="A":"ambulatory",1:"virtual"))
"DATA",998.1,3,10,5,30,3,0)
subject^.05^C^30
"DATA",998.1,3,10,5,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,5,30,4,0)
period^.01,.18^C^40
"DATA",998.1,3,10,5,30,4,10)
D PERIOD(VL("I"),VL(2,"I"))
"DATA",998.1,3,10,5,30,6,0)
location^.01,.18,.22^C^60
"DATA",998.1,3,10,5,30,6,10)
D:VL(3) NEWTAG(PN),REF2(PN,"Location",VL(3,"I"),VL(3,"E")),PERIOD(VL("I"),VL(2,"I")),ENDTAG(PN)
"DATA",998.1,3,10,5,30,7,0)
identifier!visitid^15001^C^70
"DATA",998.1,3,10,5,30,7,10)
D IDENT("@identifiers/visits",VL("I"),PN(0),"official")
"DATA",998.1,3,10,5,30,8,0)
type^.07^C^80
"DATA",998.1,3,10,5,30,8,10)
D CODING(PN,"@types/visits",VL("I"),VL("E"))
"DATA",998.1,3,10,5,30,9,0)
participant^^C^90
"DATA",998.1,3,10,5,30,9,10)
D GET^RGSERGET(.RGSER,"*/Encounter_Participant",$NA(^AUPNVPRV("AD",IEN)),PN)
"DATA",998.1,3,10,5,30,10,0)
id^@id^R^1
"DATA",998.1,3,10,5,40,0)
^998.13I^5^5
"DATA",998.1,3,10,5,40,1,0)
subject^.05^R^10
"DATA",998.1,3,10,5,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,3,10,5,40,2,0)
type^.07^T^20
"DATA",998.1,3,10,5,40,3,0)
date^.01,.18^D^20
"DATA",998.1,3,10,5,40,4,0)
subject:Patient^.05^R^10
"DATA",998.1,3,10,5,40,4,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,3,10,5,40,5,0)
_id^@ien^T^30
"DATA",998.1,3,10,6,0)
Encounter_Participant^1^9000010.06
"DATA",998.1,3,10,6,30,0)
^998.12I^3^3
"DATA",998.1,3,10,6,30,1,0)
type^.04^C^10
"DATA",998.1,3,10,6,30,1,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",VL("I")_"PRF",VL("E"))
"DATA",998.1,3,10,6,30,2,0)
individual^.01^C^20
"DATA",998.1,3,10,6,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,6,30,3,0)
type^.05^C^10.1
"DATA",998.1,3,10,6,30,3,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",$S(VL("I")="A":"ATND",1:"PRF"),VL("E"))
"DATA",998.1,3,10,7,0)
ICD9^1^80
"DATA",998.1,3,10,7,30,0)
^998.12I^3^3
"DATA",998.1,3,10,7,30,1,0)
system^^C^20
"DATA",998.1,3,10,7,30,1,10)
D PUT("system","http://hl7.org/fhir/sid/icd-9")
"DATA",998.1,3,10,7,30,2,0)
code^.01^F^30
"DATA",998.1,3,10,7,30,3,0)
display^@ien^C^40
"DATA",998.1,3,10,7,30,3,10)
D PUT(PN,$$VSTD^ICDCODE(IEN))
"DATA",998.1,3,10,8,0)
Location^^44
"DATA",998.1,3,10,8,30,0)
^998.12I^5^5
"DATA",998.1,3,10,8,30,1,0)
name^.01^F^10
"DATA",998.1,3,10,8,30,2,0)
description^10^F^20
"DATA",998.1,3,10,8,30,3,0)
managingOrganization^3^C^30
"DATA",998.1,3,10,8,30,3,10)
D REF(PN,"Organization",.VL)
"DATA",998.1,3,10,8,30,4,0)
telecom!phone:work^99^C^40
"DATA",998.1,3,10,8,30,4,10)
D TELECOM
"DATA",998.1,3,10,8,30,5,0)
id^@id^R^1
"DATA",998.1,3,10,8,40,0)
^998.13I^1^1
"DATA",998.1,3,10,8,40,1,0)
_id^@ien^T^10
"DATA",998.1,3,10,9,0)
Observation
"DATA",998.1,3,10,9,20)
D RETRIEVE^RGSEROBS
"DATA",998.1,3,10,9,30,0)
^998.12I^20^17
"DATA",998.1,3,10,9,30,1,0)
issued^issued^D^60
"DATA",998.1,3,10,9,30,2,0)
status^status^F^70
"DATA",998.1,3,10,9,30,3,0)
reliability^reliability^F^80
"DATA",998.1,3,10,9,30,4,0)
subject^patient^C^120
"DATA",998.1,3,10,9,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,9,30,5,0)
referenceRange^low,high^C^150
"DATA",998.1,3,10,9,30,5,10)
D RANGEXML^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,3,10,9,30,7,0)
comments^comments^F^40
"DATA",998.1,3,10,9,30,8,0)
appliesDateTime^collected^D^50
"DATA",998.1,3,10,9,30,9,0)
identifier^id^C^110
"DATA",998.1,3,10,9,30,9,10)
D IDENT("@observation",VL("I"))
"DATA",998.1,3,10,9,30,10,0)
code^code,code_system^C^10
"DATA",998.1,3,10,9,30,10,10)
D CODING(PN,VL(2,"E"),VL("I"),VL("E"))
"DATA",998.1,3,10,9,30,11,0)
value^value,units^C^20
"DATA",998.1,3,10,9,30,11,10)
D VALUEXML^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,3,10,9,30,12,0)
interpretation^interpretation^C^30
"DATA",998.1,3,10,9,30,12,10)
D:VL NEWTAG(PN),PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,3,10,9,30,13,0)
bodySite^^N^90
"DATA",998.1,3,10,9,30,14,0)
method^^N^100
"DATA",998.1,3,10,9,30,15,0)
specimen^^N^130
"DATA",998.1,3,10,9,30,16,0)
performer^^N^140
"DATA",998.1,3,10,9,30,19,0)
id^id^R^1
"DATA",998.1,3,10,9,30,20,0)
related^related^C^160
"DATA",998.1,3,10,9,30,20,10)
D:VL RELXML^RGSEROBS(VL("I"))
"DATA",998.1,3,10,9,40,0)
^998.13I^3^3
"DATA",998.1,3,10,9,40,1,0)
subject:Patient^patient^R^10
"DATA",998.1,3,10,9,40,1,20)
S X=$$OBS^RGSEROBS(PARAMS("subject:Patient",1,1))
"DATA",998.1,3,10,9,40,2,0)
code^code^T^10
"DATA",998.1,3,10,9,40,3,0)
_id^@id^T^10
"DATA",998.1,3,10,10,0)
Organization^^4
"DATA",998.1,3,10,10,30,0)
^998.12I^4^4
"DATA",998.1,3,10,10,30,1,0)
name^.01^F^20
"DATA",998.1,3,10,10,30,2,0)
active^^S^10
"DATA",998.1,3,10,10,30,2,10)
true
"DATA",998.1,3,10,10,30,3,0)
address^@ien^O^40
"DATA",998.1,3,10,10,30,3,10)
*/Organization_Address
"DATA",998.1,3,10,10,30,4,0)
id^@id^R^1
"DATA",998.1,3,10,11,0)
Organization_Address^1^4
"DATA",998.1,3,10,11,30,0)
^998.12I^6^6
"DATA",998.1,3,10,11,30,1,0)
use^^S^10
"DATA",998.1,3,10,11,30,1,10)
work
"DATA",998.1,3,10,11,30,2,0)
line^1.01^F^20
"DATA",998.1,3,10,11,30,3,0)
line^1.02^F^20.1
"DATA",998.1,3,10,11,30,4,0)
city^1.03^F^50
"DATA",998.1,3,10,11,30,5,0)
state^.02^F^60
"DATA",998.1,3,10,11,30,6,0)
postCode^1.04^F^80
"DATA",998.1,3,10,12,0)
Organization_Reference^1^4
"DATA",998.1,3,10,12,30,0)
^998.12I^2^2
"DATA",998.1,3,10,12,30,1,0)
reference^^C^10
"DATA",998.1,3,10,12,30,1,10)
D PUT(PN,"Organization/"_IEN)
"DATA",998.1,3,10,12,30,2,0)
display^.01^F^20
"DATA",998.1,3,10,13,0)
Patient^^2
"DATA",998.1,3,10,13,30,0)
^998.12I^16^16
"DATA",998.1,3,10,13,30,1,0)
name^.01^C^10
"DATA",998.1,3,10,13,30,1,10)
D NAME(VL("I"))
"DATA",998.1,3,10,13,30,2,0)
gender^.02^C^20
"DATA",998.1,3,10,13,30,2,10)
D PUT(PN,$$LOW^XLFSTR(VL("E")))
"DATA",998.1,3,10,13,30,3,0)
birthDate^.03^D^30
"DATA",998.1,3,10,13,30,4,0)
deceasedDateTime^.351^D^50
"DATA",998.1,3,10,13,30,5,0)
identifier!MRN^^C^60
"DATA",998.1,3,10,13,30,5,10)
D IDENT("@identifiers/patients",$$HRN^RGSERPAT(IEN),PN(0))
"DATA",998.1,3,10,13,30,6,0)
managingOrganization^^C^80
"DATA",998.1,3,10,13,30,6,10)
D GET^RGSERGET(.RGSER,"*/Organization_Reference",DUZ(2),PN)
"DATA",998.1,3,10,13,30,7,0)
photo^^C^80
"DATA",998.1,3,10,13,30,7,10)
Q:'$L($T(^MAGGTIG))  N X,Y D PHOTOS^MAGGTIG(.X,IEN) F Y=0:0 S Y=$O(X(Y)) Q:'Y  S X=$P(X(Y),U,3) I $E(X,1,4)="http" D NEWTAG(PN),PUT("contentType","image/"_$P(X,".",$L(X,"."))),PUT("url",X),ENDTAG(PN)
"DATA",998.1,3,10,13,30,8,0)
telecom!phone:home^.131^C^100
"DATA",998.1,3,10,13,30,8,10)
D TELECOM
"DATA",998.1,3,10,13,30,9,0)
telecom!phone:mobile^.134^C^110
"DATA",998.1,3,10,13,30,9,10)
D TELECOM
"DATA",998.1,3,10,13,30,10,0)
telecom!phone:work^.132^C^120
"DATA",998.1,3,10,13,30,10,10)
D TELECOM
"DATA",998.1,3,10,13,30,11,0)
address^@ien^O^130
"DATA",998.1,3,10,13,30,11,10)
*/Patient_Address_Home
"DATA",998.1,3,10,13,30,12,0)
telecom!fax:home^.136^C^140
"DATA",998.1,3,10,13,30,12,10)
D TELECOM
"DATA",998.1,3,10,13,30,13,0)
extension^2^M^21
"DATA",998.1,3,10,13,30,13,10)
*/Patient_Race
"DATA",998.1,3,10,13,30,14,0)
identifier!SSN^.09^C^60
"DATA",998.1,3,10,13,30,14,10)
D IDENT("http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,3,10,13,30,15,0)
id^@id^R^1
"DATA",998.1,3,10,13,30,16,0)
text^^T^1.1
"DATA",998.1,3,10,13,30,16,10)
TEXT
"DATA",998.1,3,10,13,40,0)
^998.13I^6^6
"DATA",998.1,3,10,13,40,1,0)
_id^@ien^T^10
"DATA",998.1,3,10,13,40,2,0)
family^.01^S^20
"DATA",998.1,3,10,13,40,2,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,3,10,13,40,2,20)
S X="$$NAMEITER^RGSERPAT"
"DATA",998.1,3,10,13,40,3,0)
given^.01^S^30
"DATA",998.1,3,10,13,40,3,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,3,10,13,40,4,0)
gender^.02^T^40
"DATA",998.1,3,10,13,40,5,0)
birthdate^.03^D^15
"DATA",998.1,3,10,13,40,6,0)
identifier^.09^T^5
"DATA",998.1,3,10,13,40,6,10)
S MATCH=PVAL=$$HRN^RGSERPAT(IEN),PVAL=$TR(PVAL,"-") S:MATCH TP=""
"DATA",998.1,3,10,13,50,0)
^998.15^1^1
"DATA",998.1,3,10,13,50,1,0)
TEXT
"DATA",998.1,3,10,13,50,1,1,0)
^998.151^6^6^3150309^
"DATA",998.1,3,10,13,50,1,1,1,0)
<text>
"DATA",998.1,3,10,13,50,1,1,2,0)
<status value="generated"/>
"DATA",998.1,3,10,13,50,1,1,3,0)
<div xmlns="http://www.w3.org/1999/xhtml">
"DATA",998.1,3,10,13,50,1,1,4,0)
NAME: |.01|
"DATA",998.1,3,10,13,50,1,1,5,0)
</div>
"DATA",998.1,3,10,13,50,1,1,6,0)
</text>
"DATA",998.1,3,10,14,0)
Patient/#/Condition
"DATA",998.1,3,10,14,10)
D COMPRT($NA(^AUPNPROB("AC")))
"DATA",998.1,3,10,15,0)
Patient/#/DocumentReference
"DATA",998.1,3,10,15,10)
D COMPRT($NA(^TIU(8925,"C")))
"DATA",998.1,3,10,16,0)
Patient/#/Encounter
"DATA",998.1,3,10,16,10)
D COMPRT($NA(^AUPNVSIT("C")))
"DATA",998.1,3,10,17,0)
Patient/#/Observation
"DATA",998.1,3,10,17,10)
D COMPRT($$OBS^RGSEROBS($P(PATH,"/",3)),1)
"DATA",998.1,3,10,18,0)
Patient_Address_Home^1^2
"DATA",998.1,3,10,18,30,0)
^998.12I^9^9
"DATA",998.1,3,10,18,30,1,0)
use^^S^10
"DATA",998.1,3,10,18,30,1,10)
home
"DATA",998.1,3,10,18,30,2,0)
line!1^.111^F^20
"DATA",998.1,3,10,18,30,3,0)
line!2^.112^F^20.1
"DATA",998.1,3,10,18,30,4,0)
line!3^.113^F^20.2
"DATA",998.1,3,10,18,30,5,0)
city^.114^F^50
"DATA",998.1,3,10,18,30,6,0)
state^.115^F^60
"DATA",998.1,3,10,18,30,7,0)
state!province^.1171^F^60.1
"DATA",998.1,3,10,18,30,8,0)
postCode^.116^F^80
"DATA",998.1,3,10,18,30,9,0)
country^.1173^F^90
"DATA",998.1,3,10,19,0)
Patient_Race^1^2.02
"DATA",998.1,3,10,19,30,0)
^998.12I^2^2
"DATA",998.1,3,10,19,30,1,0)
valueCodeableConcept^.01^C^10
"DATA",998.1,3,10,19,30,1,10)
D:VL NEWTAG(PN),PUT("text",VL("E")),ENDTAG(PN)
"DATA",998.1,3,10,19,30,2,0)
attr:url^^N^1
"DATA",998.1,3,10,19,30,2,10)
http://hl7.org/fhir/Profile/us-core#race
"DATA",998.1,3,10,20,0)
Practitioner^^200
"DATA",998.1,3,10,20,30,0)
^998.12I^9^9
"DATA",998.1,3,10,20,30,1,0)
name^.01^C^10
"DATA",998.1,3,10,20,30,1,10)
D NAME(VL("I"))
"DATA",998.1,3,10,20,30,2,0)
telecom!phone:home^.132^C^20
"DATA",998.1,3,10,20,30,2,10)
D TELECOM
"DATA",998.1,3,10,20,30,3,0)
telecom!phone:work^.131^C^30
"DATA",998.1,3,10,20,30,3,10)
D TELECOM
"DATA",998.1,3,10,20,30,4,0)
telecom!fax:work^.136^C^40
"DATA",998.1,3,10,20,30,4,10)
D TELECOM
"DATA",998.1,3,10,20,30,5,0)
identifier!DEA^53.2^C^50
"DATA",998.1,3,10,20,30,5,10)
D IDENT("",VL("E"),PN(0),"official")
"DATA",998.1,3,10,20,30,6,0)
gender^4^C^40
"DATA",998.1,3,10,20,30,6,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/AdministrativeGender",VL("I"),VL("E"))
"DATA",998.1,3,10,20,30,7,0)
identifier!SSN^9^C^50
"DATA",998.1,3,10,20,30,7,10)
D IDENT("http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,3,10,20,30,8,0)
identifier!NPI^41.99^C^50
"DATA",998.1,3,10,20,30,8,10)
D IDENT("urn:oid:2.16.840.1.113883.4.6",VL("E"),PN(0))
"DATA",998.1,3,10,20,30,9,0)
id^@id^R^1
"DATA",998.1,3,10,20,40,0)
^998.13I^3^3
"DATA",998.1,3,10,20,40,1,0)
family^.01^S^20
"DATA",998.1,3,10,20,40,1,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,3,10,20,40,1,20)
S X="$$NAMEITER^RGSERPER"
"DATA",998.1,3,10,20,40,2,0)
given^.01^S^30
"DATA",998.1,3,10,20,40,2,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,3,10,20,40,3,0)
_id^@ien^T^40
"DATA",998.1,3,10,21,0)
Person^^200
"DATA",998.1,3,10,21,30,0)
^998.12I^14^14
"DATA",998.1,3,10,21,30,1,0)
name^.01^C^20
"DATA",998.1,3,10,21,30,1,10)
D NAME(VL("I"))
"DATA",998.1,3,10,21,30,2,0)
birthDate^5^D^50
"DATA",998.1,3,10,21,30,3,0)
managingOrganization^^C^80
"DATA",998.1,3,10,21,30,3,10)
D REF2(PN,"Organization",DUZ(2),$P(^DIC(4,DUZ(2),0),U))
"DATA",998.1,3,10,21,30,4,0)
telecom!phone:work^.132^C^30
"DATA",998.1,3,10,21,30,4,10)
D TELECOM
"DATA",998.1,3,10,21,30,5,0)
telecom!phone:home^.131^C^30.1
"DATA",998.1,3,10,21,30,5,10)
D TELECOM
"DATA",998.1,3,10,21,30,6,0)
telecom!fax:work^.136^C^30.2
"DATA",998.1,3,10,21,30,6,10)
D TELECOM
"DATA",998.1,3,10,21,30,7,0)
id^@id^R^1
"DATA",998.1,3,10,21,30,8,0)
nickname^13^C^10.1
"DATA",998.1,3,10,21,30,8,10)
D:VL NAME(","_VL("I"),PN)
"DATA",998.1,3,10,21,30,9,0)
address^@ien^O^60
"DATA",998.1,3,10,21,30,9,10)
*/Person_Address
"DATA",998.1,3,10,21,30,10,0)
active^7^C^90
"DATA",998.1,3,10,21,30,10,10)
D PUTBL^RGSEXML(PN,'VL("I"))
"DATA",998.1,3,10,21,30,11,0)
identifier^^N^10
"DATA",998.1,3,10,21,30,12,0)
gender^^N^40
"DATA",998.1,3,10,21,30,13,0)
photo^^N^70
"DATA",998.1,3,10,21,30,14,0)
link^^N^90
"DATA",998.1,3,10,21,40,0)
^998.13I^1^1
"DATA",998.1,3,10,21,40,1,0)
_id^@ien^T^10
"DATA",998.1,3,10,22,0)
ValueSet^^998.11
"DATA",998.1,3,10,22,20)
S IENS=IENS_RGSER("SER")_","
"DATA",998.1,3,10,22,30,0)
^998.12I^6^6
"DATA",998.1,3,10,22,30,1,0)
define^.01^C^100
"DATA",998.1,3,10,22,30,1,10)
D NEWTAG(PN),PUT("system",$$SYSTEM^RGSER("@"_VL("E"))),GET^RGSERGET(.RGSER,"*/"_VL("E"),,"concept"),ENDTAG(PN)
"DATA",998.1,3,10,22,30,2,0)
identifier^.01^C^10
"DATA",998.1,3,10,22,30,2,10)
D PUT(PN,$$SYSTEM^RGSER("@vs/"_$P(VL("E"),"_",2,99)))
"DATA",998.1,3,10,22,30,3,0)
name^.01^C^20
"DATA",998.1,3,10,22,30,3,10)
D PUT(PN,$P(VL("E"),"_",2,99))
"DATA",998.1,3,10,22,30,4,0)
description^99^F^30
"DATA",998.1,3,10,22,30,5,0)
status^^S^40
"DATA",998.1,3,10,22,30,5,10)
active
"DATA",998.1,3,10,22,30,6,0)
id^@ienx^R^1
"DATA",998.1,3,10,22,40,0)
^998.13I^3^3
"DATA",998.1,3,10,22,40,1,0)
_id^@ien^T^1
"DATA",998.1,3,10,22,40,2,0)
name^.01^S^10
"DATA",998.1,3,10,22,40,2,10)
S PVAL=$S(PVAL("OPR")="s":"VALUESET_",1:"ValueSet_")_PVAL
"DATA",998.1,3,10,22,40,3,0)
@selector^.01^T^1
"DATA",998.1,3,10,22,40,3,10)
S MATCH="ValueSet_"=$E(VL("E"),1,9)
"DATA",998.1,3,10,22,40,3,20)
S X="$$ITERVS^RGSEFHIR"
"DATA",998.1,3,10,23,0)
ValueSet_DocumentType^1^8925.1
"DATA",998.1,3,10,23,30,0)
^998.12I^2^2
"DATA",998.1,3,10,23,30,1,0)
code^@ien^R^20
"DATA",998.1,3,10,23,30,2,0)
display^.01^F^30
"DATA",998.1,3,10,23,99)
List of document categories by which documents may be classified.
"DATA",998.1,3,10,24,0)
ValueSet_EncounterType^1
"DATA",998.1,3,10,24,10)
K XSER D GETTYPES^RGSERENC
"DATA",998.1,3,10,24,20)
D RETRIEVE^RGSERENC(IEN)
"DATA",998.1,3,10,24,30,0)
^998.12I^3^3
"DATA",998.1,3,10,24,30,1,0)
display^2^R^20
"DATA",998.1,3,10,24,30,2,0)
code^1^R^30
"DATA",998.1,3,10,24,30,3,0)
definition^3^R^40
"DATA",998.1,3,10,24,99)
List of recognized encounter types (service codes).
"DATA",998.1,3,10,25,0)
Medication^^50
"DATA",998.1,3,10,25,30,0)
^998.12I^8^8
"DATA",998.1,3,10,25,30,1,0)
name^.01^F^10
"DATA",998.1,3,10,25,30,2,0)
code!start^^C^20
"DATA",998.1,3,10,25,30,2,10)
D NEWTAG(PN)
"DATA",998.1,3,10,25,30,3,0)
code!end^^C^20.9
"DATA",998.1,3,10,25,30,3,10)
D ENDTAG(PN)
"DATA",998.1,3,10,25,30,4,0)
coding!ndc^31^C^20.1
"DATA",998.1,3,10,25,30,4,10)
D:VL CODING(,"http://www.fda.gov/ndc",VL("E"))
"DATA",998.1,3,10,25,30,5,0)
product!start^^C^30
"DATA",998.1,3,10,25,30,5,10)
D NEWTAG(PN)
"DATA",998.1,3,10,25,30,6,0)
product!end^^C^30.9
"DATA",998.1,3,10,25,30,6,10)
D ENDTAG(PN)
"DATA",998.1,3,10,25,30,7,0)
form^14.5^C^30.1
"DATA",998.1,3,10,25,30,7,10)
D:VL CODING(PN,"dispense_unit",,VL("E"))
"DATA",998.1,3,10,25,30,8,0)
id^@id^R^1
"DATA",998.1,3,10,25,40,0)
^998.13I^3^3
"DATA",998.1,3,10,25,40,1,0)
code^31^T^10
"DATA",998.1,3,10,25,40,2,0)
name^.01^S^20
"DATA",998.1,3,10,25,40,3,0)
_id^@ien^T^30
"DATA",998.1,3,10,26,0)
MedicationPrescription^^52
"DATA",998.1,3,10,26,30,0)
^998.12I^9^9
"DATA",998.1,3,10,26,30,1,0)
patient^2^C^40
"DATA",998.1,3,10,26,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,26,30,2,0)
prescriber^4^C^50
"DATA",998.1,3,10,26,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,26,30,3,0)
medication^6^C^80
"DATA",998.1,3,10,26,30,3,10)
D REF(PN,"Medication",.VL)
"DATA",998.1,3,10,26,30,4,0)
dateWritten^1^D^20
"DATA",998.1,3,10,26,30,5,0)
dosageInstruction!start^^C^90
"DATA",998.1,3,10,26,30,5,10)
D NEWTAG(PN)
"DATA",998.1,3,10,26,30,6,0)
dosageInstruction!end^^C^90.9
"DATA",998.1,3,10,26,30,6,10)
D ENDTAG(PN)
"DATA",998.1,3,10,26,30,7,0)
@text^10.2^M^90.001
"DATA",998.1,3,10,26,30,7,10)
*/MedicationPrescription_Sig
"DATA",998.1,3,10,26,30,8,0)
@dosing^113^M^90.002
"DATA",998.1,3,10,26,30,8,10)
*/MedicationPrescription_Dosing
"DATA",998.1,3,10,26,30,9,0)
id^@id^R^1
"DATA",998.1,3,10,26,40,0)
^998.13I^2^2
"DATA",998.1,3,10,26,40,1,0)
patient^2^R^10
"DATA",998.1,3,10,26,40,1,20)
S X=$$COHORT(PN,$NA(^PS(55,"*","P","A")),1)
"DATA",998.1,3,10,26,40,2,0)
_id^@ien^T^20
"DATA",998.1,3,10,27,0)
MedicationPrescription_Sig^1^52.04
"DATA",998.1,3,10,27,30,0)
^998.12I^1^1
"DATA",998.1,3,10,27,30,1,0)
text^.01^F^10
"DATA",998.1,3,10,28,0)
MedicationPrescription_Dosing^1^52.0113
"DATA",998.1,3,10,28,30,0)
^998.12I^1^1
"DATA",998.1,3,10,28,30,1,0)
route^6^C^10
"DATA",998.1,3,10,28,30,1,10)
D:VL CODING(PN,"@medication_route",VL("E"))
"DATA",998.1,3,10,29,0)
Patient/#/MedicationPrescription
"DATA",998.1,3,10,29,10)
D COMPRT($$COHORT2($P(PATH,"/",3),$NA(^PS(55,"*","P","A")),1),1)
"DATA",998.1,3,10,30,0)
AdverseReaction^^120.8
"DATA",998.1,3,10,30,30,0)
^998.12I^10^8
"DATA",998.1,3,10,30,30,1,0)
identifier^^N^10
"DATA",998.1,3,10,30,30,2,0)
date^4^D^20
"DATA",998.1,3,10,30,30,3,0)
subject^.01^C^30
"DATA",998.1,3,10,30,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,30,30,4,0)
didNotOccurFlag^^S^40
"DATA",998.1,3,10,30,30,4,10)
false
"DATA",998.1,3,10,30,30,5,0)
recorder^5^C^50
"DATA",998.1,3,10,30,30,5,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,30,30,6,0)
symptom^10^M^60
"DATA",998.1,3,10,30,30,6,10)
*/AdverseReaction_Symptom
"DATA",998.1,3,10,30,30,9,0)
exposure^1,.02^C^70.2
"DATA",998.1,3,10,30,30,9,10)
S:'VL VL("E")=VL(2,"E") S VL("I")=$$VP2ID(VL("I")) D NEWTAG(PN),REF("substance","Substance",.VL),ENDTAG(PN)
"DATA",998.1,3,10,30,30,10,0)
id^@id^R^1
"DATA",998.1,3,10,30,40,0)
^998.13I^3^3
"DATA",998.1,3,10,30,40,1,0)
subject^.01^R^10
"DATA",998.1,3,10,30,40,1,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,3,10,30,40,2,0)
subject:Patient^.01^R^10
"DATA",998.1,3,10,30,40,2,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,3,10,30,40,3,0)
_id^@ien^T^20
"DATA",998.1,3,10,31,0)
AdverseReaction_Symptom^1^120.81
"DATA",998.1,3,10,31,30,0)
^998.12I^2^2
"DATA",998.1,3,10,31,30,1,0)
code^.01^C^10
"DATA",998.1,3,10,31,30,1,10)
D CODING(PN,"#120.83",VL("I"),VL("E"))
"DATA",998.1,3,10,31,30,2,0)
severity^^N^20
"DATA",998.1,3,10,32,0)
AdverseReaction_Ingredient^1^120.802
"DATA",998.1,3,10,32,30,0)
^998.12I^4^4
"DATA",998.1,3,10,32,30,1,0)
date^^D^10
"DATA",998.1,3,10,32,30,2,0)
type^^S^20
"DATA",998.1,3,10,32,30,2,10)
drugadmin
"DATA",998.1,3,10,32,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,3,10,32,30,4,0)
substance^.01^C^40
"DATA",998.1,3,10,32,30,4,10)
D REF(PN,"Substance",.VL,"50.416:")
"DATA",998.1,3,10,33,0)
AdverseReaction_Class^1^120.803
"DATA",998.1,3,10,33,30,0)
^998.12I^4^4
"DATA",998.1,3,10,33,30,1,0)
date^^D^10
"DATA",998.1,3,10,33,30,2,0)
type^^S^20
"DATA",998.1,3,10,33,30,2,10)
drugadmin
"DATA",998.1,3,10,33,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,3,10,33,30,4,0)
substance^.01^C^40
"DATA",998.1,3,10,33,30,4,10)
D REF(PN,"Substance",.VL,"50.605:")
"DATA",998.1,3,10,34,0)
Substance
"DATA",998.1,3,10,34,10)
D COMPID^RGSERGET
"DATA",998.1,3,10,34,30,0)
^998.12I^1^1
"DATA",998.1,3,10,34,30,1,0)
id^@id^R^1
"DATA",998.1,3,10,35,0)
Patient/#/AdverseReaction
"DATA",998.1,3,10,35,10)
D COMPRT($NA(^GMR(120.8,"B")))
"DATA",998.1,3,10,36,0)
Substance_50^1^50
"DATA",998.1,3,10,36,30,0)
^998.12I^4^4
"DATA",998.1,3,10,36,30,1,0)
type^.01^C^10
"DATA",998.1,3,10,36,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,3,10,36,30,2,0)
description^^W^20
"DATA",998.1,3,10,36,30,3,0)
instance^^N^30
"DATA",998.1,3,10,36,30,4,0)
ingredient^^N^40
"DATA",998.1,3,10,37,0)
Substance_50.416^1^50.416
"DATA",998.1,3,10,37,30,0)
^998.12I^4^4
"DATA",998.1,3,10,37,30,1,0)
type^.01^C^10
"DATA",998.1,3,10,37,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,3,10,37,30,2,0)
description^^W^20
"DATA",998.1,3,10,37,30,3,0)
instance^^N^30
"DATA",998.1,3,10,37,30,4,0)
ingredient^^N^40
"DATA",998.1,3,10,38,0)
Substance_50.6^1^50.6
"DATA",998.1,3,10,38,30,0)
^998.12I^4^4
"DATA",998.1,3,10,38,30,1,0)
type^.01^C^10
"DATA",998.1,3,10,38,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,3,10,38,30,2,0)
description^^W^20
"DATA",998.1,3,10,38,30,3,0)
instance^^N^30
"DATA",998.1,3,10,38,30,4,0)
ingredient^^N^40
"DATA",998.1,3,10,39,0)
Substance_50.605^1^50.605
"DATA",998.1,3,10,39,30,0)
^998.12I^4^4
"DATA",998.1,3,10,39,30,1,0)
type^.01^C^10
"DATA",998.1,3,10,39,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,3,10,39,30,2,0)
description^^W^20
"DATA",998.1,3,10,39,30,3,0)
instance^^N^30
"DATA",998.1,3,10,39,30,4,0)
ingredient^^N^40
"DATA",998.1,3,10,40,0)
Substance_120.82^1^120.82
"DATA",998.1,3,10,40,30,0)
^998.12I^4^4
"DATA",998.1,3,10,40,30,1,0)
type^.01^C^10
"DATA",998.1,3,10,40,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,3,10,40,30,2,0)
description^^W^20
"DATA",998.1,3,10,40,30,3,0)
instance^^N^30
"DATA",998.1,3,10,40,30,4,0)
ingredient^^N^40
"DATA",998.1,3,10,41,0)
Immunization^^9000010.11
"DATA",998.1,3,10,41,30,0)
^998.12I^19^19
"DATA",998.1,3,10,41,30,1,0)
identifier^^N^10
"DATA",998.1,3,10,41,30,2,0)
date^1201,.03~.01^C^20
"DATA",998.1,3,10,41,30,2,10)
D PUTDT(PN,$S(VL:VL("I"),1:VL(2,"I")))
"DATA",998.1,3,10,41,30,3,0)
vaccineType^.01^C^30
"DATA",998.1,3,10,41,30,3,10)
D CODING(PN,"#9999999.14",VL("I"),VL("E"))
"DATA",998.1,3,10,41,30,4,0)
patient^.02^C^40
"DATA",998.1,3,10,41,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,41,30,5,0)
wasNotGiven^^S^50
"DATA",998.1,3,10,41,30,5,10)
false
"DATA",998.1,3,10,41,30,6,0)
reported^^S^60
"DATA",998.1,3,10,41,30,6,10)
false
"DATA",998.1,3,10,41,30,7,0)
performer^1204^C^70
"DATA",998.1,3,10,41,30,7,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,41,30,8,0)
requester^1202^C^80
"DATA",998.1,3,10,41,30,8,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,41,30,9,0)
manufacturer^^N^90
"DATA",998.1,3,10,41,30,10,0)
location^.03~.22^C^100
"DATA",998.1,3,10,41,30,10,10)
D REF(PN,"Location",.VL)
"DATA",998.1,3,10,41,30,11,0)
lotNumber^^N^110
"DATA",998.1,3,10,41,30,12,0)
expirationDate^^D^120
"DATA",998.1,3,10,41,30,13,0)
site^^N^130
"DATA",998.1,3,10,41,30,14,0)
route^^N^140
"DATA",998.1,3,10,41,30,15,0)
doseQuantity^^N^150
"DATA",998.1,3,10,41,30,16,0)
explanation^^N^160
"DATA",998.1,3,10,41,30,17,0)
reaction^^N^170
"DATA",998.1,3,10,41,30,18,0)
vaccinationProtocol^^N^180
"DATA",998.1,3,10,41,30,19,0)
id^@id^R^1
"DATA",998.1,3,10,41,40,0)
^998.13I^3^3
"DATA",998.1,3,10,41,40,1,0)
subject^.02^R^10
"DATA",998.1,3,10,41,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,3,10,41,40,2,0)
subject:Patient^.02^R^10
"DATA",998.1,3,10,41,40,2,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,3,10,41,40,3,0)
_id^@ien^T^30
"DATA",998.1,3,10,42,0)
Patient/#/Immunization
"DATA",998.1,3,10,42,10)
D COMPRT($NA(^AUPNVIMM("C")))
"DATA",998.1,3,10,43,0)
Flag^^26.13
"DATA",998.1,3,10,43,30,0)
^998.12I^7^7
"DATA",998.1,3,10,43,30,1,0)
identifier^^N^10
"DATA",998.1,3,10,43,30,2,0)
category^.02^C^20
"DATA",998.1,3,10,43,30,2,10)
D CODING(PN,"#26.13",$$VP2ID(VL("I")),VL("E"))
"DATA",998.1,3,10,43,30,3,0)
status^.03^C^30
"DATA",998.1,3,10,43,30,3,10)
D PUT(PN,$$LOW^XLFSTR(VL("E")))
"DATA",998.1,3,10,43,30,4,0)
subject^.01^C^40
"DATA",998.1,3,10,43,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,43,30,5,0)
author^^N^50
"DATA",998.1,3,10,43,30,6,0)
note^1^W^60
"DATA",998.1,3,10,43,30,6,10)
  
"DATA",998.1,3,10,43,30,7,0)
id^@id^R^1
"DATA",998.1,3,10,43,40,0)
^998.13I^3^3
"DATA",998.1,3,10,43,40,1,0)
_id^@ien^T^10
"DATA",998.1,3,10,43,40,2,0)
subject^.01^R^20
"DATA",998.1,3,10,43,40,2,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,3,10,43,40,3,0)
subject:Patient^.01^R^20
"DATA",998.1,3,10,43,40,3,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,3,10,44,0)
Patient/#/Flag
"DATA",998.1,3,10,44,10)
D COMPRT($NA(^DGPF(26.13,"B")))
"DATA",998.1,3,10,45,0)
Communication^^8992.1
"DATA",998.1,3,10,45,20)
S:ID'=+ID IENS=$O(^XTV(8992.1,"B",ID,0))_","
"DATA",998.1,3,10,45,30,0)
^998.12I^15^15
"DATA",998.1,3,10,45,30,1,0)
identifier^^N^10
"DATA",998.1,3,10,45,30,2,0)
category^^N^20
"DATA",998.1,3,10,45,30,3,0)
status^^N^70
"DATA",998.1,3,10,45,30,4,0)
subject^.04^C^120
"DATA",998.1,3,10,45,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,3,10,45,30,5,0)
sender^.05^C^30
"DATA",998.1,3,10,45,30,5,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,45,30,6,0)
payload:contentString^1.01^F^50
"DATA",998.1,3,10,45,30,7,0)
@id^.01^N^1
"DATA",998.1,3,10,45,30,8,0)
recipient^20^M^40
"DATA",998.1,3,10,45,30,8,10)
*/Communication_Recipient
"DATA",998.1,3,10,45,30,9,0)
medium^^N^60
"DATA",998.1,3,10,45,30,10,0)
encounter^^N^80
"DATA",998.1,3,10,45,30,11,0)
sent^^D^90
"DATA",998.1,3,10,45,30,12,0)
received^^D^100
"DATA",998.1,3,10,45,30,13,0)
reason^^N^110
"DATA",998.1,3,10,45,30,14,0)
payload:contentString^4^W^50.1
"DATA",998.1,3,10,45,30,14,10)
%0D%0A
"DATA",998.1,3,10,45,30,15,0)
id^@id^R^1
"DATA",998.1,3,10,45,40,0)
^998.13I^4^4
"DATA",998.1,3,10,45,40,1,0)
_id^.01^T^10
"DATA",998.1,3,10,45,40,1,20)
S X=$NA(^XTV(8992.1,"B",PARAMS(PN,1,1)))
"DATA",998.1,3,10,45,40,2,0)
subject^.04^R^20
"DATA",998.1,3,10,45,40,2,20)
S X=$NA(^XTV(8992.1,"C",PARAMS(PN,1,1)))
"DATA",998.1,3,10,45,40,3,0)
subject:Patient^.04^R^20
"DATA",998.1,3,10,45,40,3,20)
S X=$NA(^XTV(8992.1,"C",PARAMS(PN,1,1)))
"DATA",998.1,3,10,45,40,4,0)
@selector^^S^100
"DATA",998.1,3,10,45,40,4,20)
S X=$NA(^XTV(8992.1,"R",DUZ))
"DATA",998.1,3,10,46,0)
Patient/#/Communication
"DATA",998.1,3,10,46,10)
D COMPRT($NA(^XTV(8992.1,"C")))
"DATA",998.1,3,10,47,0)
Communication_Recipient^1^8992.11
"DATA",998.1,3,10,47,30,0)
^998.12I^1^1
"DATA",998.1,3,10,47,30,1,0)
contentReference^.01^C^10
"DATA",998.1,3,10,47,30,1,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,3,10,48,0)
metadata
"DATA",998.1,3,10,48,10)
D TEMPLATE^RGSERGET("CONFORMANCE")
"DATA",998.1,3,10,48,50,0)
^998.15^3^3
"DATA",998.1,3,10,48,50,1,0)
CONFORMANCE
"DATA",998.1,3,10,48,50,1,1,0)
^^28^28^3150327.15024
"DATA",998.1,3,10,48,50,1,1,1,0)
<Conformance>
"DATA",998.1,3,10,48,50,1,1,2,0)
  <text>
"DATA",998.1,3,10,48,50,1,1,3,0)
    <status value="generated"/>
"DATA",998.1,3,10,48,50,1,1,4,0)
  </text>
"DATA",998.1,3,10,48,50,1,1,5,0)
  <publisher value="|@$P($$SITE^VASITE,U,2)|"/>
"DATA",998.1,3,10,48,50,1,1,6,0)
  <date value="|@$$FMTDATE^RGSER|"/>
"DATA",998.1,3,10,48,50,1,1,7,0)
  <software>
"DATA",998.1,3,10,48,50,1,1,8,0)
    <name value="VistA Serialization Framework"/>
"DATA",998.1,3,10,48,50,1,1,9,0)
    <version value="|@$$VERSION^XPDUTL("RGSE")|"/>
"DATA",998.1,3,10,48,50,1,1,10,0)
  </software>
"DATA",998.1,3,10,48,50,1,1,11,0)
  <implementation>
"DATA",998.1,3,10,48,50,1,1,12,0)
    <description value="VistA (|@RGSER("SERNM")|)"/>
"DATA",998.1,3,10,48,50,1,1,13,0)
  </implementation>
"DATA",998.1,3,10,48,50,1,1,14,0)
  <fhirVersion value="|@RGSER("VER")|"/>
"DATA",998.1,3,10,48,50,1,1,15,0)
  <acceptUnknown value="false"/>
"DATA",998.1,3,10,48,50,1,1,16,0)
  <format value="application/xml+fhir"/> 
"DATA",998.1,3,10,48,50,1,1,17,0)
  <rest>
"DATA",998.1,3,10,48,50,1,1,18,0)
    <mode value="server"/>
"DATA",998.1,3,10,48,50,1,1,19,0)
    <security>
"DATA",998.1,3,10,48,50,1,1,20,0)
      <extension url="http://fhir-registry.smarthealthit.org/Profile/oauth-uris#authorize">
"DATA",998.1,3,10,48,50,1,1,21,0)
        <valueUri value="|@$$HOSTURL^RGNETWWW("oauth2/authorize")|" />
"DATA",998.1,3,10,48,50,1,1,22,0)
      </extension>
"DATA",998.1,3,10,48,50,1,1,23,0)
      <extension url="http://fhir-registry.smarthealthit.org/Profile/oauth-uris#token">
"DATA",998.1,3,10,48,50,1,1,24,0)
        <valueUri value="|@$$HOSTURL^RGNETWWW("oauth2/token")|" />
"DATA",998.1,3,10,48,50,1,1,25,0)
      </extension>
"DATA",998.1,3,10,48,50,1,1,26,0)
    </security>
"DATA",998.1,3,10,48,50,1,1,27,0)
|#$$RESCONF^RGSEFHIR|  </rest>
"DATA",998.1,3,10,48,50,1,1,28,0)
</Conformance> 
"DATA",998.1,3,10,48,50,2,0)
CONFORMANCE_RESOURCE
"DATA",998.1,3,10,48,50,2,1,0)
^^6^6^3150315.095021
"DATA",998.1,3,10,48,50,2,1,1,0)
    <resource>
"DATA",998.1,3,10,48,50,2,1,2,0)
      <type value="|@RESNAME|"/>
"DATA",998.1,3,10,48,50,2,1,3,0)
      <operation>
"DATA",998.1,3,10,48,50,2,1,4,0)
       <code value="read"/>
"DATA",998.1,3,10,48,50,2,1,5,0)
      </operation>
"DATA",998.1,3,10,48,50,2,1,6,0)
|#$$SRPCONF^RGSEFHIR|    </resource> 
"DATA",998.1,3,10,48,50,3,0)
CONFORMANCE_PARAMETER
"DATA",998.1,3,10,48,50,3,1,0)
^^4^4^3150315.101141
"DATA",998.1,3,10,48,50,3,1,1,0)
        <searchParam>
"DATA",998.1,3,10,48,50,3,1,2,0)
          <name value="|@SRPNAME|"/>
"DATA",998.1,3,10,48,50,3,1,3,0)
          <type value="|@SRPTYPE|"/>
"DATA",998.1,3,10,48,50,3,1,4,0)
        </searchParam>
"DATA",998.1,3,10,49,0)
Person_Address^1^200
"DATA",998.1,3,10,49,30,0)
^998.12I^8^7
"DATA",998.1,3,10,49,30,1,0)
use^^S^10
"DATA",998.1,3,10,49,30,1,10)
home
"DATA",998.1,3,10,49,30,2,0)
line!1^.111^F^20
"DATA",998.1,3,10,49,30,3,0)
line!2^.112^F^20.1
"DATA",998.1,3,10,49,30,4,0)
line!3^.113^F^20.2
"DATA",998.1,3,10,49,30,5,0)
city^.114^F^50
"DATA",998.1,3,10,49,30,6,0)
state^.115^F^60
"DATA",998.1,3,10,49,30,8,0)
postCode^.116^F^80
"DATA",998.1,3,20,0)
^998.14^5^5^3150323^^^^
"DATA",998.1,3,20,1,0)
Access-Control-Allow-Credentials: true
"DATA",998.1,3,20,2,0)
Access-Control-Allow-Headers: origin, authorization, accept, content-type, x-requested-with
"DATA",998.1,3,20,3,0)
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS
"DATA",998.1,3,20,4,0)
Access-Control-Allow-Origin: *
"DATA",998.1,3,20,5,0)
Cache-Control: max-age=0
"DATA",998.1,3,99,0)
^998.199^29^29^3150323^^^^
"DATA",998.1,3,99,1,0)
This is the base URL for the DSTU2 XML FHIR endpoint. 
"DATA",998.1,3,99,2,0)

"DATA",998.1,3,99,3,0)
<p><em>Note:</em> as DSTU2 is undergoing constant revision, resources returned 
"DATA",998.1,3,99,4,0)
from this endpoint may or may not comply with the most current DSTU2 
"DATA",998.1,3,99,5,0)
specification.
"DATA",998.1,3,99,6,0)

"DATA",998.1,3,99,7,0)
<hr> 
"DATA",998.1,3,99,8,0)

"DATA",998.1,3,99,9,0)
This service is supported by the <b>VistA Serialization Framework</b>, 
"DATA",998.1,3,99,10,0)
developed by Doug Martin of the <a href="http://www.regenstrief.org"
"DATA",998.1,3,99,11,0)
target="_blank">Regenstrief Institute.<a>
"DATA",998.1,3,99,12,0)

"DATA",998.1,3,99,13,0)
<p>
"DATA",998.1,3,99,14,0)

"DATA",998.1,3,99,15,0)
It is freely available as open source under the 
"DATA",998.1,3,99,16,0)
<a href="https://www.mozilla.org/MPL/2.0/" target="_blank">MPL 2.0 license</a>:
"DATA",998.1,3,99,17,0)

"DATA",998.1,3,99,18,0)
<ul> 
"DATA",998.1,3,99,19,0)
<li> The FHIR conformance document is available
"DATA",998.1,3,99,20,0)
  <a href="/DSTU2/metadata" target="_blank">here</a>
"DATA",998.1,3,99,21,0)
</li>
"DATA",998.1,3,99,22,0)
<li> The complete source may be downloaded 
"DATA",998.1,3,99,23,0)
  <a href="https://github.com/mdgeek/VistA-Serialization-Framework" 
"DATA",998.1,3,99,24,0)
     target="_blank">here.</a>
"DATA",998.1,3,99,25,0)
</li>
"DATA",998.1,3,99,26,0)
<li> A working virtual machine may be built from this
"DATA",998.1,3,99,27,0)
  <a href="https://github.com/mdgeek/VistA-FHIR-CWF"
"DATA",998.1,3,99,28,0)
     target="_blank">source.</a>
"DATA",998.1,3,99,29,0)
</ul>
"DATA",998.1,4,0)
DSTU1^application/json+fhir,application/json,text/json,json^RGSEFHIJ^0.0.82-3059
"DATA",998.1,4,10,0)
^998.11^46^46
"DATA",998.1,4,10,1,0)
Binary
"DATA",998.1,4,10,1,10)
D COMPID^RGSERGET
"DATA",998.1,4,10,2,0)
Binary_8925^1^8925
"DATA",998.1,4,10,2,30,0)
^998.12I^2^2
"DATA",998.1,4,10,2,30,1,0)
@content^^C^10
"DATA",998.1,4,10,2,30,1,10)
D TOBINARY^RGSERDOC(IEN,",""content"":""","""")
"DATA",998.1,4,10,2,30,2,0)
attr:contentType^^N^1
"DATA",998.1,4,10,2,30,2,10)
text/plain
"DATA",998.1,4,10,3,0)
Condition^^9000011
"DATA",998.1,4,10,3,30,0)
^998.12I^8^8
"DATA",998.1,4,10,3,30,1,0)
subject^.02^C^10
"DATA",998.1,4,10,3,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,3,30,2,0)
code!start^^C^20
"DATA",998.1,4,10,3,30,2,10)
D NEWOBJ(PN),NEWARY("coding")
"DATA",998.1,4,10,3,30,3,0)
coding^.01^O^20.1
"DATA",998.1,4,10,3,30,3,10)
*/ICD9
"DATA",998.1,4,10,3,30,4,0)
code!end^.05^C^20.2
"DATA",998.1,4,10,3,30,4,10)
D ENDARY("coding"),PUT("text",VL("E")),ENDOBJ(PN)
"DATA",998.1,4,10,3,30,5,0)
category^^N^30
"DATA",998.1,4,10,3,30,6,0)
status^^S^40
"DATA",998.1,4,10,3,30,6,10)
confirmed
"DATA",998.1,4,10,3,30,7,0)
onsetDate^.13^D^50
"DATA",998.1,4,10,3,30,8,0)
abatementDate^1.07^D^60
"DATA",998.1,4,10,3,40,0)
^998.13I^4^4
"DATA",998.1,4,10,3,40,1,0)
subject^.02^R^10
"DATA",998.1,4,10,3,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,4,10,3,40,2,0)
onset^.13^D^20
"DATA",998.1,4,10,3,40,3,0)
subject:Patient^.02^R^10
"DATA",998.1,4,10,3,40,3,20)
S X=$$COHORT(PN,$NA(^AUPNPROB("AC")))
"DATA",998.1,4,10,3,40,4,0)
_id^@ien^T^30
"DATA",998.1,4,10,4,0)
DocumentReference^^8925
"DATA",998.1,4,10,4,30,0)
^998.12I^24^22
"DATA",998.1,4,10,4,30,1,0)
description^1701^F^140
"DATA",998.1,4,10,4,30,2,0)
type^.01^C^40
"DATA",998.1,4,10,4,30,2,10)
D CODING(PN,"#8925.1",VL("I"),VL("E"))
"DATA",998.1,4,10,4,30,3,0)
subject^.02^C^30
"DATA",998.1,4,10,4,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,4,30,4,0)
author^1202^C^60
"DATA",998.1,4,10,4,30,4,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,4,30,5,0)
mimeType^^S^170
"DATA",998.1,4,10,4,30,5,10)
text/plain
"DATA",998.1,4,10,4,30,6,0)
created^1201^D^100
"DATA",998.1,4,10,4,30,7,0)
context^.07,.08^C^110
"DATA",998.1,4,10,4,30,7,10)
D NEWOBJ(PN),PERIOD(VL("I"),VL(2,"I")),ENDOBJ(PN)
"DATA",998.1,4,10,4,30,9,0)
location^@ien^C^210
"DATA",998.1,4,10,4,30,9,10)
D PUT(PN,$$HOST^RGNETWWW("*/Binary/8925-"_VL("I")))
"DATA",998.1,4,10,4,30,10,0)
masterIdentifier^@ien^C^10
"DATA",998.1,4,10,4,30,10,10)
D NEWOBJ(PN),PUT("value",$$SYSUUID^RGNETWWW_"/Document/"_VL("I")),ENDOBJ(PN)
"DATA",998.1,4,10,4,30,11,0)
status^.05~.02^C^120
"DATA",998.1,4,10,4,30,11,10)
N X S X=VL("I") D PUT(PN,$S("rd"[X:"entered in error",1:"current"))
"DATA",998.1,4,10,4,30,13,0)
identifier^^N^20
"DATA",998.1,4,10,4,30,14,0)
class^^N^50
"DATA",998.1,4,10,4,30,15,0)
custodian^^N^70
"DATA",998.1,4,10,4,30,16,0)
policyManager^^N^80
"DATA",998.1,4,10,4,30,17,0)
authenticator^^N^90
"DATA",998.1,4,10,4,30,18,0)
indexed^1201^D^110
"DATA",998.1,4,10,4,30,19,0)
docStatus^^N^130
"DATA",998.1,4,10,4,30,20,0)
confidentiality^^N^150
"DATA",998.1,4,10,4,30,21,0)
primaryLanguage^^N^160
"DATA",998.1,4,10,4,30,22,0)
format^^N^180
"DATA",998.1,4,10,4,30,23,0)
size^^N^190
"DATA",998.1,4,10,4,30,24,0)
hash^^N^200
"DATA",998.1,4,10,4,40,0)
^998.13I^6^6
"DATA",998.1,4,10,4,40,1,0)
subject:Patient^.02^R^10
"DATA",998.1,4,10,4,40,1,20)
S X=$$COHORT(PN,$NA(^TIU(8925,"C")))
"DATA",998.1,4,10,4,40,2,0)
period^1301^D^20
"DATA",998.1,4,10,4,40,3,0)
type^.01^T^30
"DATA",998.1,4,10,4,40,4,0)
author^1202^R^40
"DATA",998.1,4,10,4,40,5,0)
_id^@ien^T^50
"DATA",998.1,4,10,4,40,6,0)
indexed^1301^D^60
"DATA",998.1,4,10,5,0)
Encounter^^9000010
"DATA",998.1,4,10,5,30,0)
^998.12I^9^8
"DATA",998.1,4,10,5,30,1,0)
status^^C^10
"DATA",998.1,4,10,5,30,1,10)
D PUT(PN,$$GETSTAT^RGSERENC(IEN))
"DATA",998.1,4,10,5,30,2,0)
class^.07^C^20
"DATA",998.1,4,10,5,30,2,10)
N X S X=VL("I") D PUT(PN,$S(X="H":"inpatient",X="A":"ambulatory",1:"virtual"))
"DATA",998.1,4,10,5,30,3,0)
subject^.05^C^30
"DATA",998.1,4,10,5,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,5,30,4,0)
period^.01,.18^C^70
"DATA",998.1,4,10,5,30,4,10)
D PERIOD(VL("I"),VL(2,"I"))
"DATA",998.1,4,10,5,30,6,0)
location^.01,.18,.22^C^60
"DATA",998.1,4,10,5,30,6,10)
D:VL(3) NEWARY(PN),NEWOBJ,REF2(,"Location",VL(3,"I"),VL(3,"E")),ENDARY(PN)
"DATA",998.1,4,10,5,30,7,0)
identifier!visitid^15001^C^40
"DATA",998.1,4,10,5,30,7,10)
D NEWARY(PN),IDENT(PN,"@identifiers/visits",VL("I"),PN(0),"official"),ENDARY(PN)
"DATA",998.1,4,10,5,30,8,0)
type^.07^C^80
"DATA",998.1,4,10,5,30,8,10)
D NEWARY(PN),CODING(PN,"@types/visits",VL("I"),VL("E")),ENDARY(PN)
"DATA",998.1,4,10,5,30,9,0)
participant^^C^90
"DATA",998.1,4,10,5,30,9,10)
D GET^RGSERGET(.RGSER,"*/Encounter_Participant",$NA(^AUPNVPRV("AD",IEN)),PN)
"DATA",998.1,4,10,5,40,0)
^998.13I^5^5
"DATA",998.1,4,10,5,40,1,0)
subject^.05^R^10
"DATA",998.1,4,10,5,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,4,10,5,40,2,0)
type^.07^T^20
"DATA",998.1,4,10,5,40,3,0)
date^.01,.18^D^20
"DATA",998.1,4,10,5,40,4,0)
subject:Patient^.05^R^10
"DATA",998.1,4,10,5,40,4,20)
S X=$$COHORT(PN,$NA(^AUPNVSIT("C")))
"DATA",998.1,4,10,5,40,5,0)
_id^@ien^T^30
"DATA",998.1,4,10,6,0)
Encounter_Participant^1^9000010.06
"DATA",998.1,4,10,6,30,0)
^998.12I^3^3
"DATA",998.1,4,10,6,30,1,0)
type^.04^C^10
"DATA",998.1,4,10,6,30,1,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",VL("I")_"PRF",VL("E"))
"DATA",998.1,4,10,6,30,2,0)
individual^.01^C^20
"DATA",998.1,4,10,6,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,6,30,3,0)
type^.05^C^10.1
"DATA",998.1,4,10,6,30,3,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/ParticipationType",$S(VL("I")="A":"ATND",1:"PRF"),VL("E"))
"DATA",998.1,4,10,7,0)
ICD9^1^80
"DATA",998.1,4,10,7,30,0)
^998.12I^3^3
"DATA",998.1,4,10,7,30,1,0)
system^^C^20
"DATA",998.1,4,10,7,30,1,10)
D PUT("system","http://hl7.org/fhir/sid/icd-9")
"DATA",998.1,4,10,7,30,2,0)
code^.01^F^30
"DATA",998.1,4,10,7,30,3,0)
display^@ien^C^40
"DATA",998.1,4,10,7,30,3,10)
D PUT(PN,$$VSTD^ICDCODE(IEN))
"DATA",998.1,4,10,8,0)
Location^^44
"DATA",998.1,4,10,8,30,0)
^998.12I^6^6
"DATA",998.1,4,10,8,30,1,0)
name^.01^F^10
"DATA",998.1,4,10,8,30,2,0)
description^10^F^20
"DATA",998.1,4,10,8,30,3,0)
managingOrganization^3^C^30
"DATA",998.1,4,10,8,30,3,10)
D REF(PN,"Organization",.VL)
"DATA",998.1,4,10,8,30,4,0)
telecom!phone:work^99^C^40.1
"DATA",998.1,4,10,8,30,4,10)
D TELECOM
"DATA",998.1,4,10,8,30,5,0)
telecom!start^^C^40
"DATA",998.1,4,10,8,30,5,10)
D NEWARY(PN)
"DATA",998.1,4,10,8,30,6,0)
telecom!end^^C^40.9
"DATA",998.1,4,10,8,30,6,10)
D ENDARY(PN)
"DATA",998.1,4,10,8,40,0)
^998.13I^1^1
"DATA",998.1,4,10,8,40,1,0)
_id^@ien^T^10
"DATA",998.1,4,10,9,0)
Observation
"DATA",998.1,4,10,9,20)
D RETRIEVE^RGSEROBS
"DATA",998.1,4,10,9,30,0)
^998.12I^20^17
"DATA",998.1,4,10,9,30,1,0)
issued^issued^D^60
"DATA",998.1,4,10,9,30,2,0)
status^status^F^70
"DATA",998.1,4,10,9,30,3,0)
reliability^reliability^F^80
"DATA",998.1,4,10,9,30,4,0)
subject^patient^C^120
"DATA",998.1,4,10,9,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,9,30,5,0)
referenceRange^low,high^C^150
"DATA",998.1,4,10,9,30,5,10)
D RANGEJSN^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,4,10,9,30,7,0)
comments^comments^F^40
"DATA",998.1,4,10,9,30,8,0)
appliesDateTime^collected^D^50
"DATA",998.1,4,10,9,30,9,0)
identifier^id^C^110
"DATA",998.1,4,10,9,30,9,10)
D IDENT(PN,"@observation",VL("I"))
"DATA",998.1,4,10,9,30,10,0)
name^code,code_system^C^10
"DATA",998.1,4,10,9,30,10,10)
D CODING(PN,VL(2,"E"),VL("I"),VL("E"))
"DATA",998.1,4,10,9,30,11,0)
value^value,units^C^20
"DATA",998.1,4,10,9,30,11,10)
D VALUEJSN^RGSEROBS($G(VL("I")),$G(VL(2,"I")))
"DATA",998.1,4,10,9,30,12,0)
interpretation^interpretation^C^30
"DATA",998.1,4,10,9,30,12,10)
D:VL NEWOBJ(PN),PUT("text",VL("E")),ENDOBJ(PN)
"DATA",998.1,4,10,9,30,13,0)
bodySite^^N^90
"DATA",998.1,4,10,9,30,14,0)
method^^N^100
"DATA",998.1,4,10,9,30,15,0)
specimen^^N^130
"DATA",998.1,4,10,9,30,16,0)
performer^^N^140
"DATA",998.1,4,10,9,30,19,0)
@id^id^N^1
"DATA",998.1,4,10,9,30,20,0)
related^related^C^160
"DATA",998.1,4,10,9,30,20,10)
D:VL RELJSN^RGSEROBS(VL("I"))
"DATA",998.1,4,10,9,40,0)
^998.13I^3^3
"DATA",998.1,4,10,9,40,1,0)
subject:Patient^patient^R^10
"DATA",998.1,4,10,9,40,1,20)
S X=$$OBS^RGSEROBS(PARAMS("subject:Patient",1,1))
"DATA",998.1,4,10,9,40,2,0)
name^code^T^10
"DATA",998.1,4,10,9,40,3,0)
_id^@id^T^10
"DATA",998.1,4,10,10,0)
Organization^^4
"DATA",998.1,4,10,10,30,0)
^998.12I^5^5
"DATA",998.1,4,10,10,30,1,0)
name^.01^F^20
"DATA",998.1,4,10,10,30,2,0)
active^^S^10
"DATA",998.1,4,10,10,30,2,10)
true
"DATA",998.1,4,10,10,30,3,0)
address^@ien^O^40.1
"DATA",998.1,4,10,10,30,3,10)
*/Organization_Address
"DATA",998.1,4,10,10,30,4,0)
address!start^^C^40
"DATA",998.1,4,10,10,30,4,10)
D NEWARY(PN)
"DATA",998.1,4,10,10,30,5,0)
address!end^^C^40.9
"DATA",998.1,4,10,10,30,5,10)
D ENDARY(PN)
"DATA",998.1,4,10,11,0)
Organization_Address^1^4
"DATA",998.1,4,10,11,30,0)
^998.12I^6^6
"DATA",998.1,4,10,11,30,1,0)
use^^S^10
"DATA",998.1,4,10,11,30,1,10)
work
"DATA",998.1,4,10,11,30,2,0)
line^1.01^F^20
"DATA",998.1,4,10,11,30,3,0)
line^1.02^F^20.1
"DATA",998.1,4,10,11,30,4,0)
city^1.03^F^50
"DATA",998.1,4,10,11,30,5,0)
state^.02^F^60
"DATA",998.1,4,10,11,30,6,0)
zip^1.04^F^80
"DATA",998.1,4,10,12,0)
Organization_Reference^1^4
"DATA",998.1,4,10,12,30,0)
^998.12I^2^2
"DATA",998.1,4,10,12,30,1,0)
reference^^C^10
"DATA",998.1,4,10,12,30,1,10)
D PUT(PN,"Organization/"_IEN)
"DATA",998.1,4,10,12,30,2,0)
display^.01^F^20
"DATA",998.1,4,10,13,0)
Patient^^2
"DATA",998.1,4,10,13,30,0)
^998.12I^21^21
"DATA",998.1,4,10,13,30,1,0)
name^.01^C^10
"DATA",998.1,4,10,13,30,1,10)
D NAME(PN,VL("I"))
"DATA",998.1,4,10,13,30,2,0)
gender^.02^C^20
"DATA",998.1,4,10,13,30,2,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/AdministrativeGender",VL("I"),VL("E"))
"DATA",998.1,4,10,13,30,3,0)
birthDate^.03^D^30
"DATA",998.1,4,10,13,30,4,0)
deceasedDateTime^.351^D^50
"DATA",998.1,4,10,13,30,5,0)
identifier!MRN^^C^60.1
"DATA",998.1,4,10,13,30,5,10)
D IDENT(PN,"@identifiers/patients",$$HRN^RGSERPAT(IEN),PN(0))
"DATA",998.1,4,10,13,30,6,0)
managingOrganization^^C^80
"DATA",998.1,4,10,13,30,6,10)
D GET^RGSERGET(.RGSER,"*/Organization_Reference",DUZ(2),PN)
"DATA",998.1,4,10,13,30,7,0)
photo^^C^80
"DATA",998.1,4,10,13,30,7,10)
Q:'$L($T(^MAGGTIG))  N X,Y D PHOTOS^MAGGTIG(.X,IEN) F Y=0:0 S Y=$O(X(Y)) Q:'Y  S X=$P(X(Y),U,3) I $E(X,1,4)="http" D NEWTAG(PN),PUT("contentType","image/"_$P(X,".",$L(X,"."))),PUT("url",X),ENDTAG(PN)
"DATA",998.1,4,10,13,30,8,0)
telecom!phone:home^.131^C^100.2
"DATA",998.1,4,10,13,30,8,10)
D TELECOM
"DATA",998.1,4,10,13,30,9,0)
telecom!phone:mobile^.134^C^100.3
"DATA",998.1,4,10,13,30,9,10)
D TELECOM
"DATA",998.1,4,10,13,30,10,0)
telecom!phone:work^.132^C^100.4
"DATA",998.1,4,10,13,30,10,10)
D TELECOM
"DATA",998.1,4,10,13,30,11,0)
address^@ien^O^130.1
"DATA",998.1,4,10,13,30,11,10)
*/Patient_Address_Home
"DATA",998.1,4,10,13,30,12,0)
telecom!fax:home^.136^C^100.1
"DATA",998.1,4,10,13,30,12,10)
D TELECOM
"DATA",998.1,4,10,13,30,13,0)
extension!race^2^M^21
"DATA",998.1,4,10,13,30,13,10)
*/Patient_Race
"DATA",998.1,4,10,13,30,14,0)
identifier!SSN^.09^C^60.2
"DATA",998.1,4,10,13,30,14,10)
D IDENT(PN,"http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,4,10,13,30,15,0)
text^^T^1
"DATA",998.1,4,10,13,30,15,10)
TEXT
"DATA",998.1,4,10,13,30,16,0)
identifier!start^^C^60
"DATA",998.1,4,10,13,30,16,10)
D NEWARY(PN)
"DATA",998.1,4,10,13,30,17,0)
identifier!end^^C^60.9
"DATA",998.1,4,10,13,30,17,10)
D ENDARY(PN)
"DATA",998.1,4,10,13,30,18,0)
telecom!start^^C^100
"DATA",998.1,4,10,13,30,18,10)
D NEWARY(PN)
"DATA",998.1,4,10,13,30,19,0)
telecom!end^^C^100.9
"DATA",998.1,4,10,13,30,19,10)
D ENDARY(PN)
"DATA",998.1,4,10,13,30,20,0)
address!start^^C^130
"DATA",998.1,4,10,13,30,20,10)
D NEWARY(PN)
"DATA",998.1,4,10,13,30,21,0)
address!end^^C^130.9
"DATA",998.1,4,10,13,30,21,10)
D ENDARY(PN)
"DATA",998.1,4,10,13,40,0)
^998.13I^6^6
"DATA",998.1,4,10,13,40,1,0)
_id^@ien^T^10
"DATA",998.1,4,10,13,40,2,0)
family^.01^S^20
"DATA",998.1,4,10,13,40,2,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,4,10,13,40,2,20)
S X="$$NAMEITER^RGSERPAT"
"DATA",998.1,4,10,13,40,3,0)
given^.01^S^30
"DATA",998.1,4,10,13,40,3,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,4,10,13,40,4,0)
gender^.02^T^40
"DATA",998.1,4,10,13,40,5,0)
birthdate^.03^D^15
"DATA",998.1,4,10,13,40,6,0)
identifier^.09^T^5
"DATA",998.1,4,10,13,40,6,10)
S MATCH=PVAL=$$HRN^RGSERPAT(IEN),PVAL=$TR(PVAL,"-") S:MATCH TP=""
"DATA",998.1,4,10,13,50,0)
^998.15^1^1
"DATA",998.1,4,10,13,50,1,0)
TEXT
"DATA",998.1,4,10,13,50,1,1,0)
^^4^4^3150320.151051
"DATA",998.1,4,10,13,50,1,1,1,0)
,"text": {
"DATA",998.1,4,10,13,50,1,1,2,0)
"status": "generated",
"DATA",998.1,4,10,13,50,1,1,3,0)
"div": "NAME: |.01|"
"DATA",998.1,4,10,13,50,1,1,4,0)
}
"DATA",998.1,4,10,14,0)
Patient/#/Condition
"DATA",998.1,4,10,14,10)
D COMPRT($NA(^AUPNPROB("AC")))
"DATA",998.1,4,10,15,0)
Patient/#/DocumentReference
"DATA",998.1,4,10,15,10)
D COMPRT($NA(^TIU(8925,"C")))
"DATA",998.1,4,10,16,0)
Patient/#/Encounter
"DATA",998.1,4,10,16,10)
D COMPRT($NA(^AUPNVSIT("C")))
"DATA",998.1,4,10,17,0)
Patient/#/Observation
"DATA",998.1,4,10,17,10)
D COMPRT($$OBS^RGSEROBS($P(PATH,"/",3)),1)
"DATA",998.1,4,10,18,0)
Patient_Address_Home^1^2
"DATA",998.1,4,10,18,30,0)
^998.12I^11^11
"DATA",998.1,4,10,18,30,1,0)
use^^S^10
"DATA",998.1,4,10,18,30,1,10)
home
"DATA",998.1,4,10,18,30,2,0)
line!1^.111^F^20.1
"DATA",998.1,4,10,18,30,3,0)
line!2^.112^F^20.2
"DATA",998.1,4,10,18,30,4,0)
line!3^.113^F^20.3
"DATA",998.1,4,10,18,30,5,0)
city^.114^F^50
"DATA",998.1,4,10,18,30,6,0)
state^.115^F^60
"DATA",998.1,4,10,18,30,7,0)
state!province^.1171^F^60.1
"DATA",998.1,4,10,18,30,8,0)
zip^.116^F^80
"DATA",998.1,4,10,18,30,9,0)
country^.1173^F^90
"DATA",998.1,4,10,18,30,10,0)
line!start^c^C^20
"DATA",998.1,4,10,18,30,10,10)
D NEWARY(PN)
"DATA",998.1,4,10,18,30,11,0)
line!end^^C^20.9
"DATA",998.1,4,10,18,30,11,10)
D ENDARY(PN)
"DATA",998.1,4,10,19,0)
Patient_Race^1^2.02
"DATA",998.1,4,10,19,30,0)
^998.12I^2^2
"DATA",998.1,4,10,19,30,1,0)
valueCodeableConcept^.01^C^10
"DATA",998.1,4,10,19,30,1,10)
D:VL NEWOBJ(PN),PUT("text",VL("E")),ENDOBJ(PN)
"DATA",998.1,4,10,19,30,2,0)
attr:url^^N^1
"DATA",998.1,4,10,19,30,2,10)
http://hl7.org/fhir/Profile/us-core#race
"DATA",998.1,4,10,20,0)
Practitioner^^200
"DATA",998.1,4,10,20,30,0)
^998.12I^12^12
"DATA",998.1,4,10,20,30,1,0)
name^.01^C^10
"DATA",998.1,4,10,20,30,1,10)
D NAME(PN,VL("I"))
"DATA",998.1,4,10,20,30,2,0)
telecom!phone:home^.132^C^20.1
"DATA",998.1,4,10,20,30,2,10)
D TELECOM
"DATA",998.1,4,10,20,30,3,0)
telecom!phone:work^.131^C^20.2
"DATA",998.1,4,10,20,30,3,10)
D TELECOM
"DATA",998.1,4,10,20,30,4,0)
telecom!fax:work^.136^C^20.3
"DATA",998.1,4,10,20,30,4,10)
D TELECOM
"DATA",998.1,4,10,20,30,5,0)
identifier!DEA^53.2^C^50.1
"DATA",998.1,4,10,20,30,5,10)
D IDENT(PN,"",VL("E"),PN(0),"official")
"DATA",998.1,4,10,20,30,6,0)
gender^4^C^40
"DATA",998.1,4,10,20,30,6,10)
D:VL CODING(PN,"http://hl7.org/fhir/v3/AdministrativeGender",VL("I"),VL("E"))
"DATA",998.1,4,10,20,30,7,0)
identifier!SSN^9^C^50.3
"DATA",998.1,4,10,20,30,7,10)
D IDENT(PN,"http://hl7.org/fhir/sid/us-ssn",VL("E"),PN(0))
"DATA",998.1,4,10,20,30,8,0)
identifier!NPI^41.99^C^50.2
"DATA",998.1,4,10,20,30,8,10)
D IDENT(PN,"urn:oid:2.16.840.1.113883.4.6",VL("E"),PN(0))
"DATA",998.1,4,10,20,30,9,0)
identifier!start^^C^50
"DATA",998.1,4,10,20,30,9,10)
D NEWARY(PN)
"DATA",998.1,4,10,20,30,10,0)
identifier!end^^C^50.9
"DATA",998.1,4,10,20,30,10,10)
D ENDARY(PN)
"DATA",998.1,4,10,20,30,11,0)
telecom!start^^C^20
"DATA",998.1,4,10,20,30,11,10)
D NEWARY(PN)
"DATA",998.1,4,10,20,30,12,0)
telecom!end^^C^20.9
"DATA",998.1,4,10,20,30,12,10)
D ENDARY(PN)
"DATA",998.1,4,10,20,40,0)
^998.13I^3^3
"DATA",998.1,4,10,20,40,1,0)
family^.01^S^20
"DATA",998.1,4,10,20,40,1,10)
D OPRNAME(VL("E"),1) K PVAL
"DATA",998.1,4,10,20,40,1,20)
S X="$$NAMEITER^RGSERPER"
"DATA",998.1,4,10,20,40,2,0)
given^.01^S^30
"DATA",998.1,4,10,20,40,2,10)
D OPRNAME(VL("E"),2) K PVAL
"DATA",998.1,4,10,20,40,3,0)
_id^@ien^T^40
"DATA",998.1,4,10,21,0)
User^^200
"DATA",998.1,4,10,21,30,0)
^998.12I^6^6
"DATA",998.1,4,10,21,30,1,0)
name^.01^C^10
"DATA",998.1,4,10,21,30,1,10)
D NAME(PN,VL("I"))
"DATA",998.1,4,10,21,30,2,0)
birthDate^5^D^20
"DATA",998.1,4,10,21,30,3,0)
extension!organization^^T^30
"DATA",998.1,4,10,21,30,3,10)
ORGANIZATION
"DATA",998.1,4,10,21,30,4,0)
telecom!phone:work^.132^C^40
"DATA",998.1,4,10,21,30,4,10)
D TELECOM
"DATA",998.1,4,10,21,30,5,0)
telecom!phone:home^.131^C^50
"DATA",998.1,4,10,21,30,5,10)
D TELECOM
"DATA",998.1,4,10,21,30,6,0)
telecom!fax:work^.136^C^60
"DATA",998.1,4,10,21,30,6,10)
D TELECOM
"DATA",998.1,4,10,21,40,0)
^998.13I^1^1
"DATA",998.1,4,10,21,40,1,0)
_id^@ien^T^10
"DATA",998.1,4,10,21,50,0)
^998.15^1^1
"DATA",998.1,4,10,21,50,1,0)
ORGANIZATION
"DATA",998.1,4,10,21,50,1,1,0)
^^8^8^3150321.115125
"DATA",998.1,4,10,21,50,1,1,1,0)
,"extension": [
"DATA",998.1,4,10,21,50,1,1,2,0)
  { "url": "http://www.carewebframework.org/fhir/extension/user/organization",
"DATA",998.1,4,10,21,50,1,1,3,0)
    "valueResource": {
"DATA",998.1,4,10,21,50,1,1,4,0)
      "reference": "Organization/|@DUZ(2)|",
"DATA",998.1,4,10,21,50,1,1,5,0)
      "display": "|@$P(^DIC(4,DUZ(2),0),U)|"
"DATA",998.1,4,10,21,50,1,1,6,0)
    }
"DATA",998.1,4,10,21,50,1,1,7,0)
  }
"DATA",998.1,4,10,21,50,1,1,8,0)
]
"DATA",998.1,4,10,22,0)
ValueSet^^998.11
"DATA",998.1,4,10,22,20)
S IENS=IENS_RGSER("SER")_","
"DATA",998.1,4,10,22,30,0)
^998.12I^5^5
"DATA",998.1,4,10,22,30,1,0)
define^.01^C^100
"DATA",998.1,4,10,22,30,1,10)
D NEWOBJ(PN),PUT("system",$$SYSTEM^RGSER("@"_VL("E"))),GET^RGSERGET(.RGSER,"*/"_VL("E"),,"concept"),ENDOBJ(PN)
"DATA",998.1,4,10,22,30,2,0)
identifier^.01^C^10
"DATA",998.1,4,10,22,30,2,10)
D PUT(PN,$$SYSTEM^RGSER("@vs/"_$P(VL("E"),"_",2,99)))
"DATA",998.1,4,10,22,30,3,0)
name^.01^C^20
"DATA",998.1,4,10,22,30,3,10)
D PUT(PN,$P(VL("E"),"_",2,99))
"DATA",998.1,4,10,22,30,4,0)
description^99^F^30
"DATA",998.1,4,10,22,30,5,0)
status^^S^40
"DATA",998.1,4,10,22,30,5,10)
active
"DATA",998.1,4,10,22,40,0)
^998.13I^3^3
"DATA",998.1,4,10,22,40,1,0)
_id^@ien^T^1
"DATA",998.1,4,10,22,40,2,0)
name^.01^S^10
"DATA",998.1,4,10,22,40,2,10)
S PVAL=$S(PVAL("OPR")="s":"VALUESET_",1:"ValueSet_")_PVAL
"DATA",998.1,4,10,22,40,3,0)
@selector^.01^T^1
"DATA",998.1,4,10,22,40,3,10)
S MATCH="ValueSet_"=$E(VL("E"),1,9)
"DATA",998.1,4,10,22,40,3,20)
S X="$$ITERVS^RGSEFHIR"
"DATA",998.1,4,10,23,0)
ValueSet_DocumentType^1^8925.1
"DATA",998.1,4,10,23,30,0)
^998.12I^2^2
"DATA",998.1,4,10,23,30,1,0)
code^@ien^R^20
"DATA",998.1,4,10,23,30,2,0)
display^.01^F^30
"DATA",998.1,4,10,23,99)
List of document categories by which documents may be classified.
"DATA",998.1,4,10,24,0)
ValueSet_EncounterType^1
"DATA",998.1,4,10,24,10)
K XSER D GETTYPES^RGSERENC
"DATA",998.1,4,10,24,20)
D RETRIEVE^RGSERENC(IEN)
"DATA",998.1,4,10,24,30,0)
^998.12I^3^3
"DATA",998.1,4,10,24,30,1,0)
display^2^R^20
"DATA",998.1,4,10,24,30,2,0)
code^1^R^30
"DATA",998.1,4,10,24,30,3,0)
definition^3^R^40
"DATA",998.1,4,10,24,99)
List of recognized encounter types (service codes).
"DATA",998.1,4,10,25,0)
Medication^^50
"DATA",998.1,4,10,25,30,0)
^998.12I^7^7
"DATA",998.1,4,10,25,30,1,0)
name^.01^F^10
"DATA",998.1,4,10,25,30,2,0)
code!start^^C^20
"DATA",998.1,4,10,25,30,2,10)
D NEWARY(PN)
"DATA",998.1,4,10,25,30,3,0)
code!end^^C^20.9
"DATA",998.1,4,10,25,30,3,10)
D ENDARY(PN)
"DATA",998.1,4,10,25,30,4,0)
coding!ndc^31^C^20.1
"DATA",998.1,4,10,25,30,4,10)
D:VL CODING(,"http://www.fda.gov/ndc",VL("E"))
"DATA",998.1,4,10,25,30,5,0)
product!start^^C^30
"DATA",998.1,4,10,25,30,5,10)
D NEWOBJ(PN)
"DATA",998.1,4,10,25,30,6,0)
product!end^^C^30.9
"DATA",998.1,4,10,25,30,6,10)
D ENDOBJ(PN)
"DATA",998.1,4,10,25,30,7,0)
form^14.5^C^30.1
"DATA",998.1,4,10,25,30,7,10)
D:VL CODING(PN,"dispense_unit",,VL("E"))
"DATA",998.1,4,10,25,40,0)
^998.13I^3^3
"DATA",998.1,4,10,25,40,1,0)
code^31^T^10
"DATA",998.1,4,10,25,40,2,0)
name^.01^S^20
"DATA",998.1,4,10,25,40,3,0)
_id^@ien^T^30
"DATA",998.1,4,10,26,0)
MedicationPrescription^^52
"DATA",998.1,4,10,26,30,0)
^998.12I^8^8
"DATA",998.1,4,10,26,30,1,0)
patient^2^C^40
"DATA",998.1,4,10,26,30,1,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,26,30,2,0)
prescriber^4^C^50
"DATA",998.1,4,10,26,30,2,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,26,30,3,0)
medication^6^C^80
"DATA",998.1,4,10,26,30,3,10)
D REF(PN,"Medication",.VL)
"DATA",998.1,4,10,26,30,4,0)
dateWritten^1^D^20
"DATA",998.1,4,10,26,30,5,0)
dosageInstruction!start^^C^90
"DATA",998.1,4,10,26,30,5,10)
D NEWARY(PN)
"DATA",998.1,4,10,26,30,6,0)
dosageInstruction!end^^C^90.9
"DATA",998.1,4,10,26,30,6,10)
D ENDARY(PN)
"DATA",998.1,4,10,26,30,7,0)
@text^10.2^M^90.001
"DATA",998.1,4,10,26,30,7,10)
*/MedicationPrescription_Sig
"DATA",998.1,4,10,26,30,8,0)
@dosing^113^M^90.002
"DATA",998.1,4,10,26,30,8,10)
*/MedicationPrescription_Dosing
"DATA",998.1,4,10,26,40,0)
^998.13I^2^2
"DATA",998.1,4,10,26,40,1,0)
patient^2^R^10
"DATA",998.1,4,10,26,40,1,20)
S X=$$COHORT(PN,$NA(^PS(55,"*","P","A")),1)
"DATA",998.1,4,10,26,40,2,0)
_id^@ien^T^20
"DATA",998.1,4,10,27,0)
MedicationPrescription_Sig^1^52.04
"DATA",998.1,4,10,27,30,0)
^998.12I^1^1
"DATA",998.1,4,10,27,30,1,0)
text^.01^F^10
"DATA",998.1,4,10,28,0)
MedicationPrescription_Dosing^1^52.0113
"DATA",998.1,4,10,28,30,0)
^998.12I^1^1
"DATA",998.1,4,10,28,30,1,0)
route^6^C^10
"DATA",998.1,4,10,28,30,1,10)
D:VL CODING(PN,"@medication_route",VL("E"))
"DATA",998.1,4,10,29,0)
Patient/#/MedicationPrescription
"DATA",998.1,4,10,29,10)
D COMPRT($$COHORT2($P(PATH,"/",3),$NA(^PS(55,"*","P","A")),1),1)
"DATA",998.1,4,10,30,0)
AdverseReaction^^120.8
"DATA",998.1,4,10,30,30,0)
^998.12I^9^7
"DATA",998.1,4,10,30,30,1,0)
identifier^^N^10
"DATA",998.1,4,10,30,30,2,0)
date^4^D^20
"DATA",998.1,4,10,30,30,3,0)
subject^.01^C^30
"DATA",998.1,4,10,30,30,3,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,30,30,4,0)
didNotOccurFlag^^S^40
"DATA",998.1,4,10,30,30,4,10)
false
"DATA",998.1,4,10,30,30,5,0)
recorder^5^C^50
"DATA",998.1,4,10,30,30,5,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,30,30,6,0)
symptom^10^M^60
"DATA",998.1,4,10,30,30,6,10)
*/AdverseReaction_Symptom
"DATA",998.1,4,10,30,30,9,0)
exposure^1,.02^C^70.2
"DATA",998.1,4,10,30,30,9,10)
S:'VL VL("E")=VL(2,"E") S VL("I")=$$VP2ID(VL("I")) D NEWARY(PN),REF("substance","Substance",.VL),ENDARY(PN)
"DATA",998.1,4,10,30,40,0)
^998.13I^3^3
"DATA",998.1,4,10,30,40,1,0)
subject^.01^R^10
"DATA",998.1,4,10,30,40,1,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,4,10,30,40,2,0)
subject:Patient^.01^R^10
"DATA",998.1,4,10,30,40,2,20)
S X=$$COHORT(PN,$NA(^GMR(120.8,"B")))
"DATA",998.1,4,10,30,40,3,0)
_id^@ien^T^20
"DATA",998.1,4,10,31,0)
AdverseReaction_Symptom^1^120.81
"DATA",998.1,4,10,31,30,0)
^998.12I^2^2
"DATA",998.1,4,10,31,30,1,0)
code^.01^C^10
"DATA",998.1,4,10,31,30,1,10)
D CODING(PN,"#120.83",VL("I"),VL("E"))
"DATA",998.1,4,10,31,30,2,0)
severity^^N^20
"DATA",998.1,4,10,32,0)
AdverseReaction_Ingredient^1^120.802
"DATA",998.1,4,10,32,30,0)
^998.12I^4^4
"DATA",998.1,4,10,32,30,1,0)
date^^D^10
"DATA",998.1,4,10,32,30,2,0)
type^^S^20
"DATA",998.1,4,10,32,30,2,10)
drugadmin
"DATA",998.1,4,10,32,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,4,10,32,30,4,0)
substance^.01^C^40
"DATA",998.1,4,10,32,30,4,10)
D REF(PN,"Substance",.VL,"50.416:")
"DATA",998.1,4,10,33,0)
AdverseReaction_Class^1^120.803
"DATA",998.1,4,10,33,30,0)
^998.12I^4^4
"DATA",998.1,4,10,33,30,1,0)
date^^D^10
"DATA",998.1,4,10,33,30,2,0)
type^^S^20
"DATA",998.1,4,10,33,30,2,10)
drugadmin
"DATA",998.1,4,10,33,30,3,0)
causalityExpectation^^N^30
"DATA",998.1,4,10,33,30,4,0)
substance^.01^C^40
"DATA",998.1,4,10,33,30,4,10)
D REF(PN,"Substance",.VL,"50.605:")
"DATA",998.1,4,10,34,0)
Substance
"DATA",998.1,4,10,34,10)
D COMPID^RGSERGET
"DATA",998.1,4,10,35,0)
Patient/#/AdverseReaction
"DATA",998.1,4,10,35,10)
D COMPRT($NA(^GMR(120.8,"B")))
"DATA",998.1,4,10,36,0)
Substance_50^1^50
"DATA",998.1,4,10,36,30,0)
^998.12I^4^4
"DATA",998.1,4,10,36,30,1,0)
type^.01^C^10
"DATA",998.1,4,10,36,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,4,10,36,30,2,0)
description^^W^20
"DATA",998.1,4,10,36,30,3,0)
instance^^N^30
"DATA",998.1,4,10,36,30,4,0)
ingredient^^N^40
"DATA",998.1,4,10,37,0)
Substance_50.416^1^50.416
"DATA",998.1,4,10,37,30,0)
^998.12I^4^4
"DATA",998.1,4,10,37,30,1,0)
type^.01^C^10
"DATA",998.1,4,10,37,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,4,10,37,30,2,0)
description^^W^20
"DATA",998.1,4,10,37,30,3,0)
instance^^N^30
"DATA",998.1,4,10,37,30,4,0)
ingredient^^N^40
"DATA",998.1,4,10,38,0)
Substance_50.6^1^50.6
"DATA",998.1,4,10,38,30,0)
^998.12I^4^4
"DATA",998.1,4,10,38,30,1,0)
type^.01^C^10
"DATA",998.1,4,10,38,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,4,10,38,30,2,0)
description^^W^20
"DATA",998.1,4,10,38,30,3,0)
instance^^N^30
"DATA",998.1,4,10,38,30,4,0)
ingredient^^N^40
"DATA",998.1,4,10,39,0)
Substance_50.605^1^50.605
"DATA",998.1,4,10,39,30,0)
^998.12I^4^4
"DATA",998.1,4,10,39,30,1,0)
type^.01^C^10
"DATA",998.1,4,10,39,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,4,10,39,30,2,0)
description^^W^20
"DATA",998.1,4,10,39,30,3,0)
instance^^N^30
"DATA",998.1,4,10,39,30,4,0)
ingredient^^N^40
"DATA",998.1,4,10,40,0)
Substance_120.82^1^120.82
"DATA",998.1,4,10,40,30,0)
^998.12I^4^4
"DATA",998.1,4,10,40,30,1,0)
type^.01^C^10
"DATA",998.1,4,10,40,30,1,10)
D CODING(PN,"#"_FILE,IEN,VL("E"))
"DATA",998.1,4,10,40,30,2,0)
description^^W^20
"DATA",998.1,4,10,40,30,3,0)
instance^^N^30
"DATA",998.1,4,10,40,30,4,0)
ingredient^^N^40
"DATA",998.1,4,10,41,0)
Immunization^^9000010.11
"DATA",998.1,4,10,41,30,0)
^998.12I^18^18
"DATA",998.1,4,10,41,30,1,0)
identifier^^N^10
"DATA",998.1,4,10,41,30,2,0)
date^1201,.03~.01^C^20
"DATA",998.1,4,10,41,30,2,10)
D PUTDT(PN,$S(VL:VL("I"),1:VL(2,"I")))
"DATA",998.1,4,10,41,30,3,0)
vaccineType^.01^C^30
"DATA",998.1,4,10,41,30,3,10)
D CODING(PN,"#9999999.14",VL("I"),VL("E"))
"DATA",998.1,4,10,41,30,4,0)
subject^.02^C^40
"DATA",998.1,4,10,41,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,41,30,5,0)
refusedIndicator^^B^50
"DATA",998.1,4,10,41,30,6,0)
reported^^B^60
"DATA",998.1,4,10,41,30,7,0)
performer^1204^C^70
"DATA",998.1,4,10,41,30,7,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,41,30,8,0)
requester^1202^C^80
"DATA",998.1,4,10,41,30,8,10)
D:VL REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,41,30,9,0)
manufacturer^^N^90
"DATA",998.1,4,10,41,30,10,0)
location^.03~.22^C^100
"DATA",998.1,4,10,41,30,10,10)
D REF(PN,"Location",.VL)
"DATA",998.1,4,10,41,30,11,0)
lotNumber^^N^110
"DATA",998.1,4,10,41,30,12,0)
expirationDate^^D^120
"DATA",998.1,4,10,41,30,13,0)
site^^N^130
"DATA",998.1,4,10,41,30,14,0)
route^^N^140
"DATA",998.1,4,10,41,30,15,0)
doseQuantity^^N^150
"DATA",998.1,4,10,41,30,16,0)
explanation^^N^160
"DATA",998.1,4,10,41,30,17,0)
reaction^^N^170
"DATA",998.1,4,10,41,30,18,0)
vaccinationProtocol^^N^180
"DATA",998.1,4,10,41,40,0)
^998.13I^3^3
"DATA",998.1,4,10,41,40,1,0)
subject^.02^R^10
"DATA",998.1,4,10,41,40,1,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,4,10,41,40,2,0)
subject:Patient^.02^R^10
"DATA",998.1,4,10,41,40,2,20)
S X=$$COHORT(PN,$NA(^AUPNVIMM("C")))
"DATA",998.1,4,10,41,40,3,0)
_id^@ien^T^30
"DATA",998.1,4,10,42,0)
Patient/#/Immunization
"DATA",998.1,4,10,42,10)
D COMPRT($NA(^AUPNVIMM("C")))
"DATA",998.1,4,10,43,0)
Alert^^26.13
"DATA",998.1,4,10,43,30,0)
^998.12I^6^6
"DATA",998.1,4,10,43,30,1,0)
identifier^^N^10
"DATA",998.1,4,10,43,30,2,0)
category^.02^C^20
"DATA",998.1,4,10,43,30,2,10)
D CODING(PN,"#26.13",$$VP2ID(VL("I")),VL("E"))
"DATA",998.1,4,10,43,30,3,0)
status^.03^C^30
"DATA",998.1,4,10,43,30,3,10)
D PUT(PN,$$LOW^XLFSTR(VL("E")))
"DATA",998.1,4,10,43,30,4,0)
subject^.01^C^40
"DATA",998.1,4,10,43,30,4,10)
D REF(PN,"Patient",.VL)
"DATA",998.1,4,10,43,30,5,0)
author^^N^50
"DATA",998.1,4,10,43,30,6,0)
note^1^W^60
"DATA",998.1,4,10,43,30,6,10)
  
"DATA",998.1,4,10,43,40,0)
^998.13I^3^3
"DATA",998.1,4,10,43,40,1,0)
_id^@ien^T^10
"DATA",998.1,4,10,43,40,2,0)
subject^.01^R^20
"DATA",998.1,4,10,43,40,2,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,4,10,43,40,3,0)
subject:Patient^.01^R^20
"DATA",998.1,4,10,43,40,3,20)
S X=$NA(^DGPF(26.13,"B",PARAMS(PN,1,1)))
"DATA",998.1,4,10,44,0)
Patient/#/Alert
"DATA",998.1,4,10,44,10)
D COMPRT($NA(^DGPF(26.13,"B")))
"DATA",998.1,4,10,45,0)
metadata
"DATA",998.1,4,10,45,10)
D TEMPLATE^RGSERGET("CONFORMANCE")
"DATA",998.1,4,10,45,50,0)
^998.15^3^3
"DATA",998.1,4,10,45,50,1,0)
CONFORMANCE
"DATA",998.1,4,10,45,50,1,1,0)
^^35^35^3150327.004518
"DATA",998.1,4,10,45,50,1,1,1,0)
{
"DATA",998.1,4,10,45,50,1,1,2,0)
  "resourceType": "Conformance",
"DATA",998.1,4,10,45,50,1,1,3,0)
  "text": {
"DATA",998.1,4,10,45,50,1,1,4,0)
    "status": "generated"
"DATA",998.1,4,10,45,50,1,1,5,0)
  },
"DATA",998.1,4,10,45,50,1,1,6,0)
  "publisher": "|@$P($$SITE^VASITE,U,2)|",
"DATA",998.1,4,10,45,50,1,1,7,0)
  "date": "|@$$FMTDATE^RGSER|",
"DATA",998.1,4,10,45,50,1,1,8,0)
  "software": {
"DATA",998.1,4,10,45,50,1,1,9,0)
    "name": "VistA Serialization Framework",
"DATA",998.1,4,10,45,50,1,1,10,0)
    "version": "|@$$VERSION^XPDUTL("RGSE")|"
"DATA",998.1,4,10,45,50,1,1,11,0)
  },
"DATA",998.1,4,10,45,50,1,1,12,0)
  "implementation": {
"DATA",998.1,4,10,45,50,1,1,13,0)
    "description": "VistA (|@RGSER("SERNM")|)"
"DATA",998.1,4,10,45,50,1,1,14,0)
  },
"DATA",998.1,4,10,45,50,1,1,15,0)
  "fhirVersion": "|@RGSER("VER")|",
"DATA",998.1,4,10,45,50,1,1,16,0)
  "acceptUnknown": "false",
"DATA",998.1,4,10,45,50,1,1,17,0)
  "format": "application/json+fhir",
"DATA",998.1,4,10,45,50,1,1,18,0)
  "rest": {
"DATA",998.1,4,10,45,50,1,1,19,0)
    "mode": "server",
"DATA",998.1,4,10,45,50,1,1,20,0)
    "security": {
"DATA",998.1,4,10,45,50,1,1,21,0)
      "extension": [
"DATA",998.1,4,10,45,50,1,1,22,0)
        {
"DATA",998.1,4,10,45,50,1,1,23,0)
          "url": "http://fhir-registry.smarthealthit.org/Profile/oauth-uris#authorize",
"DATA",998.1,4,10,45,50,1,1,24,0)
          "valueUri": "|@$$HOSTURL^RGNETWWW("oauth2/authorize")|"
"DATA",998.1,4,10,45,50,1,1,25,0)
        },
"DATA",998.1,4,10,45,50,1,1,26,0)
        {
"DATA",998.1,4,10,45,50,1,1,27,0)
          "url": "http://fhir-registry.smarthealthit.org/Profile/oauth-uris#token",
"DATA",998.1,4,10,45,50,1,1,28,0)
          "valueUri": "|@$$HOSTURL^RGNETWWW("oauth2/token")|"
"DATA",998.1,4,10,45,50,1,1,29,0)
        }
"DATA",998.1,4,10,45,50,1,1,30,0)
      ]
"DATA",998.1,4,10,45,50,1,1,31,0)
    },
"DATA",998.1,4,10,45,50,1,1,32,0)
    "resource": [
"DATA",998.1,4,10,45,50,1,1,33,0)
|#$$RESCONF^RGSEFHIR|]
"DATA",998.1,4,10,45,50,1,1,34,0)
  }
"DATA",998.1,4,10,45,50,1,1,35,0)
}
"DATA",998.1,4,10,45,50,2,0)
CONFORMANCE_RESOURCE
"DATA",998.1,4,10,45,50,2,1,0)
^^8^8^3150320.095215
"DATA",998.1,4,10,45,50,2,1,1,0)
    |#$S(RESNUM:",",1:"")| {
"DATA",998.1,4,10,45,50,2,1,2,0)
      "type": "|@RESNAME|",
"DATA",998.1,4,10,45,50,2,1,3,0)
      "operation": {
"DATA",998.1,4,10,45,50,2,1,4,0)
        "code": "read"
"DATA",998.1,4,10,45,50,2,1,5,0)
      },
"DATA",998.1,4,10,45,50,2,1,6,0)
      "searchParam": [
"DATA",998.1,4,10,45,50,2,1,7,0)
|#$$SRPCONF^RGSEFHIR|]
"DATA",998.1,4,10,45,50,2,1,8,0)
    }
"DATA",998.1,4,10,45,50,3,0)
CONFORMANCE_PARAMETER
"DATA",998.1,4,10,45,50,3,1,0)
^^4^4^3150320.095235
"DATA",998.1,4,10,45,50,3,1,1,0)
        |#$S(SRPNUM:",",1:"")| {
"DATA",998.1,4,10,45,50,3,1,2,0)
          "name": "|@SRPNAME|",
"DATA",998.1,4,10,45,50,3,1,3,0)
          "type": "|@SRPTYPE|"
"DATA",998.1,4,10,45,50,3,1,4,0)
        }
"DATA",998.1,4,10,46,0)
Order^^100
"DATA",998.1,4,10,46,30,0)
^998.12I^9^9
"DATA",998.1,4,10,46,30,1,0)
identifier^^N^10
"DATA",998.1,4,10,46,30,2,0)
date^4^D^20
"DATA",998.1,4,10,46,30,3,0)
subject^.02^C^30
"DATA",998.1,4,10,46,30,3,10)
D:VL("I")["DPT" REF2(PN,"Patient",+VL("I"),VL("E"))
"DATA",998.1,4,10,46,30,4,0)
source^1^C^40
"DATA",998.1,4,10,46,30,4,10)
D REF(PN,"Practitioner",.VL)
"DATA",998.1,4,10,46,30,5,0)
target^^N^50
"DATA",998.1,4,10,46,30,6,0)
reason^^N^60
"DATA",998.1,4,10,46,30,7,0)
authority^^N^70
"DATA",998.1,4,10,46,30,8,0)
when^^N^80
"DATA",998.1,4,10,46,30,9,0)
detail:reference^@ien^C^90
"DATA",998.1,4,10,46,30,9,10)
D PUT(PN,"DiagnosticOrder/"_VL("I"))
"DATA",998.1,4,20,0)
^998.14^5^5^3150322^^^^
"DATA",998.1,4,20,1,0)
Access-Control-Allow-Credentials: true
"DATA",998.1,4,20,2,0)
Access-Control-Allow-Headers: origin, authorization, accept, content-type, x-requested-with
"DATA",998.1,4,20,3,0)
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS
"DATA",998.1,4,20,4,0)
Access-Control-Allow-Origin: *
"DATA",998.1,4,20,5,0)
Cache-Control: max-age=0
"DATA",998.1,4,99,0)
^998.199^25^25^3150322^^^^
"DATA",998.1,4,99,1,0)
This is the base URL for the DSTU1 JSON FHIR endpoint. 
"DATA",998.1,4,99,2,0)

"DATA",998.1,4,99,3,0)
<hr> 
"DATA",998.1,4,99,4,0)

"DATA",998.1,4,99,5,0)
This service is supported by the <b>VistA Serialization Framework</b>, 
"DATA",998.1,4,99,6,0)
developed by Doug Martin of the <a href="http://www.regenstrief.org"
"DATA",998.1,4,99,7,0)
target="_blank">Regenstrief Institute.<a>
"DATA",998.1,4,99,8,0)

"DATA",998.1,4,99,9,0)
<p>
"DATA",998.1,4,99,10,0)

"DATA",998.1,4,99,11,0)
It is freely available as open source under the 
"DATA",998.1,4,99,12,0)
<a href="https://www.mozilla.org/MPL/2.0/" target="_blank">MPL 2.0 license</a>:
"DATA",998.1,4,99,13,0)

"DATA",998.1,4,99,14,0)
<ul> 
"DATA",998.1,4,99,15,0)
<li> The FHIR conformance document is available
"DATA",998.1,4,99,16,0)
  <a href="/DSTU1/metadata?_format=json" target="_blank">here</a>
"DATA",998.1,4,99,17,0)
</li>
"DATA",998.1,4,99,18,0)
<li> The complete source may be downloaded 
"DATA",998.1,4,99,19,0)
  <a href="https://github.com/mdgeek/VistA-Serialization-Framework" 
"DATA",998.1,4,99,20,0)
     target="_blank">here.</a>
"DATA",998.1,4,99,21,0)
</li>
"DATA",998.1,4,99,22,0)
<li> A working virtual machine may be built from this
"DATA",998.1,4,99,23,0)
  <a href="https://github.com/mdgeek/VistA-FHIR-CWF"
"DATA",998.1,4,99,24,0)
     target="_blank">source.</a>
"DATA",998.1,4,99,25,0)
</ul>
"DATA",998.1,5,0)
DSTU2^application/json+fhir,application/json,text/json,json^RGSEFHIJ^0.4.0
"DATA",998.1,5,10,0)
^998.11
"FIA",996.52)
NETSERV HTTP ENDPOINT
"FIA",996.52,0)
^RGNET(996.52,
"FIA",996.52,0,0)
996.52
"FIA",996.52,0,1)
n^y^f^^n^^y^o^n
"FIA",996.52,0,10)

"FIA",996.52,0,11)
I $G(^RGNET(996.52,Y,10))["^RGSE"
"FIA",996.52,0,"RLRO")

"FIA",996.52,0,"VR")
1.0^SERIALIZATION FRAMEWORK
"FIA",996.52,996.52)
0
"FIA",996.52,996.5299)
0
"FIA",998.1)
SERIALIZATION CONTROL
"FIA",998.1,0)
^RGSER(998.1,
"FIA",998.1,0,0)
998.1I
"FIA",998.1,0,1)
y^y^f^^n^^y^r^n
"FIA",998.1,0,10)

"FIA",998.1,0,11)

"FIA",998.1,0,"RLRO")

"FIA",998.1,0,"VR")
1.0^SERIALIZATION FRAMEWORK
"FIA",998.1,998.1)
0
"FIA",998.1,998.11)
0
"FIA",998.1,998.12)
0
"FIA",998.1,998.13)
0
"FIA",998.1,998.14)
0
"FIA",998.1,998.15)
0
"FIA",998.1,998.151)
0
"FIA",998.1,998.199)
0
"INI")
PRE^RGSEINIT
"INIT")
POST^RGSEINIT
"IX",996.52,996.52,"C",0)
996.52^C^Compound index by METHOD and URL.^MU^^R^IR^I^996.52^^^^^LS
"IX",996.52,996.52,"C",1)
S ^RGNET(996.52,"C",X(1),X(2),DA)=$$TOPTRN^RGNETWWW(X(2))
"IX",996.52,996.52,"C",2)
K ^RGNET(996.52,"C",X(1),X(2),DA)
"IX",996.52,996.52,"C",2.5)
K ^RGNET(996.52,"C")
"IX",996.52,996.52,"C",11.1,0)
^.114IA^2^2
"IX",996.52,996.52,"C",11.1,1,0)
1^F^996.52^1^10^1^F
"IX",996.52,996.52,"C",11.1,2,0)
2^F^996.52^.01^150^2^F
"KRN",8994,2719,-1)
0^1
"KRN",8994,2719,0)
RGSER FETCH^FETCH^RGSER^4^^^^0
"KRN",8994,2720,-1)
0^2
"KRN",8994,2720,0)
RGSER REST^REST^RGSER^4^^^^0
"MBREQ")
1
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",224,-1)
1^1
"PKG",224,0)
SERIALIZATION FRAMEWORK^RGSE^Serialization framework
"PKG",224,20,0)
^9.402P^^
"PKG",224,22,0)
^9.49I^1^1
"PKG",224,22,1,0)
1.0^3150407
"PKG",224,22,1,1,0)
^^2^2^3150407
"PKG",224,22,1,1,1,0)
Framework for serializing and deserializing data for transport to and from
"PKG",224,22,1,1,2,0)
external systems.
"PKG",224,"DEV")
DKM/RI/CBMI
"PKG",224,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","RGSEFHIJ")
0^14^B29852409
"RTN","RGSEFHIJ",1,0)
RGSEFHIJ ;RI/CBMI/DKM - JSON FHIR Support ;31-Mar-2015 22:48;DKM
"RTN","RGSEFHIJ",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSEFHIJ",3,0)
 ;=================================================================
"RTN","RGSEFHIJ",4,0)
 ; Implements Serializer interface
"RTN","RGSEFHIJ",5,0)
 ; Serializer.PREINIT - Preinitialization
"RTN","RGSEFHIJ",6,0)
PREINIT D PREINIT^RGSEJSON
"RTN","RGSEFHIJ",7,0)
 S RGSER("FHIR.VERSION")=$P(PATH,"/")
"RTN","RGSEFHIJ",8,0)
 D:$$ISBROWSR^RGNETWWW SETCTYPE^RGNETWWW("text/json")
"RTN","RGSEFHIJ",9,0)
 Q
"RTN","RGSEFHIJ",10,0)
 ; Serializer.PSTINIT - Postinitialization
"RTN","RGSEFHIJ",11,0)
PSTINIT D PSTINIT^RGSEJSON
"RTN","RGSEFHIJ",12,0)
 Q
"RTN","RGSEFHIJ",13,0)
 ; Serializer.PRELIST - List preprocessing
"RTN","RGSEFHIJ",14,0)
PRELIST I TOP,'$$INBUNDLE D NEWBNDL("Search results for resource type "_PATH) Q
"RTN","RGSEFHIJ",15,0)
 D NEWARY(PNAME)
"RTN","RGSEFHIJ",16,0)
 Q
"RTN","RGSEFHIJ",17,0)
 ; Serializer.PSTLIST - List postprocessing
"RTN","RGSEFHIJ",18,0)
PSTLIST I TOP,$$INBUNDLE,'$$ISERROR^RGNETWWW D ENDBNDL Q
"RTN","RGSEFHIJ",19,0)
 D ENDARY(PNAME)
"RTN","RGSEFHIJ",20,0)
 Q
"RTN","RGSEFHIJ",21,0)
 ; Serializer.COMPOSE - Compose an entry
"RTN","RGSEFHIJ",22,0)
COMPOSE N ENTRY,RTYPE,ATR
"RTN","RGSEFHIJ",23,0)
 S RTYPE=$$GETRTYPE^RGSERGET(PATH,PNAME)
"RTN","RGSEFHIJ",24,0)
 S ENTRY='$L($G(PNAME))&$$INBUNDLE&'$$HASFLAG^RGSER("S")
"RTN","RGSEFHIJ",25,0)
 D:ENTRY NEWENTRY(RTYPE,ID)
"RTN","RGSEFHIJ",26,0)
 S:$$HASFLAG^RGSER("I") ATR(1,"id")=ID
"RTN","RGSEFHIJ",27,0)
 D PROP2ATR^RGSEFHIR(.PROP,.ATR)
"RTN","RGSEFHIJ",28,0)
 S:$L(PNAME) RTYPE=""
"RTN","RGSEFHIJ",29,0)
 D COMPOSEX^RGSEJSON($S(ENTRY:"content",1:PNAME),"resourceType",RTYPE,.ATR)
"RTN","RGSEFHIJ",30,0)
 D:ENTRY ENDENTRY
"RTN","RGSEFHIJ",31,0)
 Q
"RTN","RGSEFHIJ",32,0)
 ; Serializer.FMTDATE - Serialize a date
"RTN","RGSEFHIJ",33,0)
FMTDATE(DT) ;
"RTN","RGSEFHIJ",34,0)
 Q $$FMTDATE^RGSEXML(.DT)
"RTN","RGSEFHIJ",35,0)
 ; Serializer.ESCMAP - Location of escape map
"RTN","RGSEFHIJ",36,0)
ESCMAP() Q $$ESCMAP^RGSEJSON
"RTN","RGSEFHIJ",37,0)
 ; Serializer.PROPF - Free text property
"RTN","RGSEFHIJ",38,0)
PROPF G PROPF^RGSEJSON
"RTN","RGSEFHIJ",39,0)
 ; Serializer.PROPB - Boolean property
"RTN","RGSEFHIJ",40,0)
PROPB G PROPB^RGSEJSON
"RTN","RGSEFHIJ",41,0)
 ; Serializer.PROPD - Date property
"RTN","RGSEFHIJ",42,0)
PROPD G PROPD^RGSEJSON
"RTN","RGSEFHIJ",43,0)
 ; Serializer.PROPR - Raw value property
"RTN","RGSEFHIJ",44,0)
PROPR G PROPR^RGSEJSON
"RTN","RGSEFHIJ",45,0)
 ; Serializer.PROPW - Word processing property
"RTN","RGSEFHIJ",46,0)
PROPW G PROPW^RGSEJSON
"RTN","RGSEFHIJ",47,0)
 ; Serializer.PROPC - Custom property
"RTN","RGSEFHIJ",48,0)
PROPC X CTL
"RTN","RGSEFHIJ",49,0)
 Q
"RTN","RGSEFHIJ",50,0)
 ; Serializer.PROPO - Object property
"RTN","RGSEFHIJ",51,0)
PROPO G PROPO^RGSEJSON
"RTN","RGSEFHIJ",52,0)
 ; Serializer.PROPI - Inline property
"RTN","RGSEFHIJ",53,0)
PROPI G PROPI^RGSEJSON
"RTN","RGSEFHIJ",54,0)
 ; Serializer.PROPS - Static property
"RTN","RGSEFHIJ",55,0)
PROPS G PROPS^RGSEJSON
"RTN","RGSEFHIJ",56,0)
 ; Create a new bundle.
"RTN","RGSEFHIJ",57,0)
NEWBNDL(TITLE,ID,LINK) ;
"RTN","RGSEFHIJ",58,0)
 N OBJ
"RTN","RGSEFHIJ",59,0)
 S:'$D(ID) ID="urn:uuid:"_$$UUID^RGUT
"RTN","RGSEFHIJ",60,0)
 D NEWOBJ("@Bundle")
"RTN","RGSEFHIJ",61,0)
 D PUT("resourceType","Bundle")
"RTN","RGSEFHIJ",62,0)
 D PUT("title",$G(TITLE,"Query Results"))
"RTN","RGSEFHIJ",63,0)
 D PUTDT("updated",$$NOW^XLFDT)
"RTN","RGSEFHIJ",64,0)
 D PUT("id",ID)
"RTN","RGSEFHIJ",65,0)
 D NEWARY("link")
"RTN","RGSEFHIJ",66,0)
 I $D(LINK)#2 D
"RTN","RGSEFHIJ",67,0)
 .S OBJ(1,"rel")="self",OBJ(2,"href")=LINK
"RTN","RGSEFHIJ",68,0)
 .D PUTOBJ^RGSEJSON(,.OBJ)
"RTN","RGSEFHIJ",69,0)
 S OBJ(1,"rel")="fhir-base",OBJ(2,"href")=$$HOSTURL^RGNETWWW("*")
"RTN","RGSEFHIJ",70,0)
 D PUTOBJ^RGSEJSON(,.OBJ)
"RTN","RGSEFHIJ",71,0)
 D ENDARY("link")
"RTN","RGSEFHIJ",72,0)
 D PUT("totalResults",0)
"RTN","RGSEFHIJ",73,0)
 S RGSER("FHIR.BUNDLE")=RGNETRSP("LAST")
"RTN","RGSEFHIJ",74,0)
 D NEWARY("entry")
"RTN","RGSEFHIJ",75,0)
 ;D NEWOBJ("author"),NEWOBJ("name",$P($G(^DIC(4,+$G(DUZ(2)),0),"Unknown"),U),1),ENDOBJ("author")
"RTN","RGSEFHIJ",76,0)
 ;D NEWOBJ("meta"),PUT("versionId",1),PUT("lastUpdated",$$FMTDATE),ENDOBJ("meta")
"RTN","RGSEFHIJ",77,0)
 ;D PUT("type","searchset")
"RTN","RGSEFHIJ",78,0)
 ;D PUT("base",$$HOSTURL^RGNETWWW)
"RTN","RGSEFHIJ",79,0)
 S RGSER("FHIR.COUNT")=0
"RTN","RGSEFHIJ",80,0)
 Q
"RTN","RGSEFHIJ",81,0)
 ; Close current bundle.
"RTN","RGSEFHIJ",82,0)
ENDBNDL N POS
"RTN","RGSEFHIJ",83,0)
 S POS=$$INBUNDLE
"RTN","RGSEFHIJ",84,0)
 Q:'POS
"RTN","RGSEFHIJ",85,0)
 D ENDOBJ("@Bundle"),REPLACE^RGNETWWW(POS,$$SUBST^RGUT(@RGNETRSP@(POS),"0",RGSER("FHIR.COUNT")))
"RTN","RGSEFHIJ",86,0)
 K RGSER("FHIR.BUNDLE"),RGSER("FHIR.COUNT")
"RTN","RGSEFHIJ",87,0)
 Q
"RTN","RGSEFHIJ",88,0)
 ; Returns true if in a bundle.
"RTN","RGSEFHIJ",89,0)
INBUNDLE() Q $G(RGSER("FHIR.BUNDLE"))
"RTN","RGSEFHIJ",90,0)
 ; Creates a new bundle entry.
"RTN","RGSEFHIJ",91,0)
NEWENTRY(RTYP,IEN) ;
"RTN","RGSEFHIJ",92,0)
 N ATR
"RTN","RGSEFHIJ",93,0)
 S:IEN'["/" IEN=RTYP_"/"_IEN
"RTN","RGSEFHIJ",94,0)
 D NEWOBJ("@entry")
"RTN","RGSEFHIJ",95,0)
 D PUT("id",IEN)
"RTN","RGSEFHIJ",96,0)
 D PUT("updated",$$FMTDATE)
"RTN","RGSEFHIJ",97,0)
 S RGSER("FHIR.COUNT")=RGSER("FHIR.COUNT")+1
"RTN","RGSEFHIJ",98,0)
 Q
"RTN","RGSEFHIJ",99,0)
 ; Closes current bundle entry.
"RTN","RGSEFHIJ",100,0)
ENDENTRY() ;
"RTN","RGSEFHIJ",101,0)
 D ENDOBJ("@entry")
"RTN","RGSEFHIJ",102,0)
 Q
"RTN","RGSEFHIJ",103,0)
NEWARY(NM) ;
"RTN","RGSEFHIJ",104,0)
 D NEWARY^RGSEJSON(.NM)
"RTN","RGSEFHIJ",105,0)
 Q
"RTN","RGSEFHIJ",106,0)
ENDARY(NM) ;
"RTN","RGSEFHIJ",107,0)
 D ENDARY^RGSEJSON(.NM)
"RTN","RGSEFHIJ",108,0)
 Q
"RTN","RGSEFHIJ",109,0)
NEWOBJ(NM) ;
"RTN","RGSEFHIJ",110,0)
 D NEWOBJ^RGSEJSON(.NM)
"RTN","RGSEFHIJ",111,0)
 Q
"RTN","RGSEFHIJ",112,0)
ENDOBJ(NM) ;
"RTN","RGSEFHIJ",113,0)
 D ENDOBJ^RGSEJSON(.NM)
"RTN","RGSEFHIJ",114,0)
 Q
"RTN","RGSEFHIJ",115,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEFHIJ",116,0)
PUT(NM,VL) ;
"RTN","RGSEFHIJ",117,0)
 D PUT^RGSEJSON(.NM,.VL) Q
"RTN","RGSEFHIJ",118,0)
 ; Put an array to output buffer
"RTN","RGSEFHIJ",119,0)
PUTARY(NM,ARY,LT,CT) ;
"RTN","RGSEFHIJ",120,0)
 D PUTARY^RGSEJSON(.NM,.ARY,.LT,.CT)
"RTN","RGSEFHIJ",121,0)
 Q
"RTN","RGSEFHIJ",122,0)
 ; Put a date value to output buffer
"RTN","RGSEFHIJ",123,0)
PUTDT(NM,DT) ;
"RTN","RGSEFHIJ",124,0)
 D PUTDT^RGSEJSON(.NM,.DT) Q
"RTN","RGSEFHIJ",125,0)
 ; Write the text section
"RTN","RGSEFHIJ",126,0)
 ; TXT = Scalar value (will be escaped) or
"RTN","RGSEFHIJ",127,0)
 ;       array (will not be escaped)
"RTN","RGSEFHIJ",128,0)
TEXT(TXT) ;
"RTN","RGSEFHIJ",129,0)
 N ATR,LP
"RTN","RGSEFHIJ",130,0)
 D NEWOBJ("text"),PUT("status","generated")
"RTN","RGSEFHIJ",131,0)
 I $D(TXT)=1 D
"RTN","RGSEFHIJ",132,0)
 .D PUT("div",TXT)
"RTN","RGSEFHIJ",133,0)
 E  D PUTARY("div",.TXT,,1)
"RTN","RGSEFHIJ",134,0)
 D ENDOBJ("text")
"RTN","RGSEFHIJ",135,0)
 Q
"RTN","RGSEFHIJ",136,0)
 ; Reformats a variable pointer for use as a resource id.
"RTN","RGSEFHIJ",137,0)
VP2ID(VP) ;
"RTN","RGSEFHIJ",138,0)
 Q $$VP2ID^RGSEFHIR(.VP)
"RTN","RGSEFHIJ",139,0)
 ; Identifier
"RTN","RGSEFHIJ",140,0)
IDENT(PN,SYSTEM,VALUE,LABEL,USE) ;
"RTN","RGSEFHIJ",141,0)
 Q:'$L(VALUE)
"RTN","RGSEFHIJ",142,0)
 D NEWOBJ(.PN)
"RTN","RGSEFHIJ",143,0)
 D PUT("use",.USE)
"RTN","RGSEFHIJ",144,0)
 D PUT("label",.LABEL)
"RTN","RGSEFHIJ",145,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIJ",146,0)
 D PUT("value",VALUE)
"RTN","RGSEFHIJ",147,0)
 D ENDOBJ(.PN)
"RTN","RGSEFHIJ",148,0)
 Q
"RTN","RGSEFHIJ",149,0)
 ; Reference
"RTN","RGSEFHIJ",150,0)
REF(TAG,RES,VL,PFX) ;
"RTN","RGSEFHIJ",151,0)
 D REF2(.TAG,RES,VL("I"),VL("E"),.PFX)
"RTN","RGSEFHIJ",152,0)
 Q
"RTN","RGSEFHIJ",153,0)
 ; Reference
"RTN","RGSEFHIJ",154,0)
REF2(TAG,RES,VLI,VLE,PFX) ;
"RTN","RGSEFHIJ",155,0)
 I $L(VLI)!$L(VLE) D
"RTN","RGSEFHIJ",156,0)
 .D:$D(TAG) NEWOBJ(TAG)
"RTN","RGSEFHIJ",157,0)
 .D:$L(VLI) PUT("reference",RES_"/"_$G(PFX)_VLI)
"RTN","RGSEFHIJ",158,0)
 .D:$L(VLE) PUT("display",VLE)
"RTN","RGSEFHIJ",159,0)
 .D:$D(TAG) ENDOBJ(TAG)
"RTN","RGSEFHIJ",160,0)
 Q
"RTN","RGSEFHIJ",161,0)
 ; Codeable concept
"RTN","RGSEFHIJ",162,0)
CODING(TAG,SYSTEM,CODE,DISPLAY) ;
"RTN","RGSEFHIJ",163,0)
 D:$L($G(TAG)) NEWOBJ(TAG),NEWARY("coding")
"RTN","RGSEFHIJ",164,0)
 D NEWOBJ("@coding")
"RTN","RGSEFHIJ",165,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIJ",166,0)
 D PUT("code",.CODE)
"RTN","RGSEFHIJ",167,0)
 D PUT("display",.DISPLAY)
"RTN","RGSEFHIJ",168,0)
 D ENDOBJ("@coding")
"RTN","RGSEFHIJ",169,0)
 D:$L($G(TAG)) ENDOBJ(TAG)
"RTN","RGSEFHIJ",170,0)
 Q
"RTN","RGSEFHIJ",171,0)
 ; Contact
"RTN","RGSEFHIJ",172,0)
CONTACT(SYSTEM,VALUE,USE,START,END) ;
"RTN","RGSEFHIJ",173,0)
 Q:'$L(VALUE)
"RTN","RGSEFHIJ",174,0)
 D NEWOBJ("@contact")
"RTN","RGSEFHIJ",175,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIJ",176,0)
 D PUT("use",.USE)
"RTN","RGSEFHIJ",177,0)
 D PUT("value",VALUE)
"RTN","RGSEFHIJ",178,0)
 D PERIOD(.START,.END)
"RTN","RGSEFHIJ",179,0)
 D ENDOBJ("@contact")
"RTN","RGSEFHIJ",180,0)
 Q
"RTN","RGSEFHIJ",181,0)
 ; Telecom
"RTN","RGSEFHIJ",182,0)
TELECOM D:VL CONTACT($P(PN(0),":"),VL("E"),$P(PN(0),":",2))
"RTN","RGSEFHIJ",183,0)
 Q
"RTN","RGSEFHIJ",184,0)
 ; Period
"RTN","RGSEFHIJ",185,0)
PERIOD(START,END) ;
"RTN","RGSEFHIJ",186,0)
 I $G(START)!$G(END) D
"RTN","RGSEFHIJ",187,0)
 .D NEWOBJ("period")
"RTN","RGSEFHIJ",188,0)
 .D:$G(START) PUTDT("start",START)
"RTN","RGSEFHIJ",189,0)
 .D:$G(END) PUTDT("end",END)
"RTN","RGSEFHIJ",190,0)
 .D ENDOBJ("period")
"RTN","RGSEFHIJ",191,0)
 Q
"RTN","RGSEFHIJ",192,0)
NAME(PN,NAME,USE) ;
"RTN","RGSEFHIJ",193,0)
 N X
"RTN","RGSEFHIJ",194,0)
 D:$L($G(PN)) NEWARY(PN)
"RTN","RGSEFHIJ",195,0)
 D NEWOBJ("@name")
"RTN","RGSEFHIJ",196,0)
 D PUT("use",$G(USE,"usual"))
"RTN","RGSEFHIJ",197,0)
 D PUT("text",$S($E(NAME)=",":$E(NAME,2,99),1:NAME))
"RTN","RGSEFHIJ",198,0)
 S X(1)=$P(NAME,","),NAME=$P(NAME,",",2,99)
"RTN","RGSEFHIJ",199,0)
 D PUTARY("family",.X)
"RTN","RGSEFHIJ",200,0)
 K X
"RTN","RGSEFHIJ",201,0)
 F X=1:1:$L(NAME," ") S X(X)=$P(NAME," ",X)
"RTN","RGSEFHIJ",202,0)
 D PUTARY("given",.X)
"RTN","RGSEFHIJ",203,0)
 D ENDOBJ("@name")
"RTN","RGSEFHIJ",204,0)
 D:$L($G(PN)) ENDARY(PN)
"RTN","RGSEFHIJ",205,0)
 Q
"RTN","RGSEFHIR")
0^1^B6178925
"RTN","RGSEFHIR",1,0)
RGSEFHIR ;RI/CBMI/DKM - Generic FHIR Support ;01-Apr-2015 16:50;DKM
"RTN","RGSEFHIR",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSEFHIR",3,0)
 ;=================================================================
"RTN","RGSEFHIR",4,0)
 ; Process any attribute properties
"RTN","RGSEFHIR",5,0)
PROP2ATR(PROP,ATR) 
"RTN","RGSEFHIR",6,0)
 N NM,LP,X,Y
"RTN","RGSEFHIR",7,0)
 S NM="attr:"
"RTN","RGSEFHIR",8,0)
 F  S NM=$O(PROP("B",NM)) Q:$P(NM,":")'="attr"  D
"RTN","RGSEFHIR",9,0)
 .F LP=0:0 S LP=$O(PROP("B",NM,LP)) Q:'LP  D
"RTN","RGSEFHIR",10,0)
 ..S X=PROP(LP,0),Y=$G(PROP(LP,10))
"RTN","RGSEFHIR",11,0)
 ..Q:$P(X,U,3)'="N"!'$L(Y)
"RTN","RGSEFHIR",12,0)
 ..S X=$P(X,U),ATR(99,$P(X,":",2))=Y
"RTN","RGSEFHIR",13,0)
 Q
"RTN","RGSEFHIR",14,0)
 ; Reformats a variable pointer for use as a resource id.
"RTN","RGSEFHIR",15,0)
VP2ID(VP) ;
"RTN","RGSEFHIR",16,0)
 Q:'$L(VP) ""
"RTN","RGSEFHIR",17,0)
 N X
"RTN","RGSEFHIR",18,0)
 S X=$P(VP,";",2)
"RTN","RGSEFHIR",19,0)
 S:X'["(" X=X_"("
"RTN","RGSEFHIR",20,0)
 S X=+$P($G(@(U_X_"0)")),U,2)
"RTN","RGSEFHIR",21,0)
 Q $S(X:X_"-"_+VP,1:"")
"RTN","RGSEFHIR",22,0)
 ; Value set iterator
"RTN","RGSEFHIR",23,0)
ITERVS(CTX) ;
"RTN","RGSEFHIR",24,0)
 I '$Q D ITER(CTX,"ValueSet_") Q
"RTN","RGSEFHIR",25,0)
 Q $$ITER(CTX)
"RTN","RGSEFHIR",26,0)
 ; Serialization file iterator
"RTN","RGSEFHIR",27,0)
ITER(CTX,ROOT) ;
"RTN","RGSEFHIR",28,0)
 N TMP,LAST,IEN,SER
"RTN","RGSEFHIR",29,0)
 S TMP=$$TMPGBL^RGNETWWW(CTX)
"RTN","RGSEFHIR",30,0)
 I '$Q D  Q
"RTN","RGSEFHIR",31,0)
 .S @TMP@("IEN")=0,^("SER")=RGSER("SER"),(^("LAST"),^("ROOT"))=ROOT
"RTN","RGSEFHIR",32,0)
 S LAST=@TMP@("LAST"),IEN=^("IEN"),SER=^("SER"),ROOT=^("ROOT")
"RTN","RGSEFHIR",33,0)
 F  D  Q:IEN
"RTN","RGSEFHIR",34,0)
 .I 'IEN D  Q:IEN
"RTN","RGSEFHIR",35,0)
 ..S LAST=$O(^RGSER(998.1,SER,10,"B",LAST))
"RTN","RGSEFHIR",36,0)
 ..I $E(LAST,1,$L(ROOT))=ROOT S @TMP@("LAST")=LAST
"RTN","RGSEFHIR",37,0)
 ..E  S IEN=-1
"RTN","RGSEFHIR",38,0)
 .S IEN=+$O(^RGSER(998.1,SER,10,"B",LAST,IEN)),@TMP@("IEN")=IEN
"RTN","RGSEFHIR",39,0)
 Q $S(IEN=-1:0,1:IEN)
"RTN","RGSEFHIR",40,0)
 ; List resources for conformance document.
"RTN","RGSEFHIR",41,0)
 ; Referenced within metadata.CONFORMANCE template to dynamically
"RTN","RGSEFHIR",42,0)
 ; generate supported resources.
"RTN","RGSEFHIR",43,0)
RESCONF() ;
"RTN","RGSEFHIR",44,0)
 N RESNAME,RESIEN,RESNUM
"RTN","RGSEFHIR",45,0)
 S RESNAME="",RESNUM=0
"RTN","RGSEFHIR",46,0)
 F  S RESNAME=$O(^RGSER(998.1,RGSER("SER"),10,"B",RESNAME)) Q:'$L(RESNAME)  S RESIEN=$O(^(RESNAME,0)) D
"RTN","RGSEFHIR",47,0)
 .Q:RESNAME="metadata"!(RESNAME["/")
"RTN","RGSEFHIR",48,0)
 .Q:$P(^RGSER(998.1,RGSER("SER"),10,RESIEN,0),U,2)
"RTN","RGSEFHIR",49,0)
 .D TEMPLATE^RGSERGET("CONFORMANCE_RESOURCE")
"RTN","RGSEFHIR",50,0)
 .S RESNUM=RESNUM+1
"RTN","RGSEFHIR",51,0)
 Q:$Q ""
"RTN","RGSEFHIR",52,0)
 Q
"RTN","RGSEFHIR",53,0)
 ; List search parameter conformance for a resource.
"RTN","RGSEFHIR",54,0)
 ; Referenced within metadata.CONFORMANCE_RESOURCE template.
"RTN","RGSEFHIR",55,0)
SRPCONF() ;
"RTN","RGSEFHIR",56,0)
 N SRPNAME,SRPIEN,SRPTYPE,SRPNUM
"RTN","RGSEFHIR",57,0)
 S SRPNAME="",SRPNUM=0
"RTN","RGSEFHIR",58,0)
 F  S SRPNAME=$O(^RGSER(998.1,RGSER("SER"),10,RESIEN,40,"B",SRPNAME)) Q:'$L(SRPNAME)  S SRPIEN=$O(^(SRPNAME,0)) D
"RTN","RGSEFHIR",59,0)
 .Q:$E(SRPNAME)="@"
"RTN","RGSEFHIR",60,0)
 .S SRPTYPE=$P(^RGSER(998.1,RGSER("SER"),10,RESIEN,40,SRPIEN,0),U,3)
"RTN","RGSEFHIR",61,0)
 .S SRPTYPE=$$LOW^XLFSTR($$EXTERNAL^DILFD(998.13,2,,SRPTYPE))
"RTN","RGSEFHIR",62,0)
 .I $L(SRPTYPE) D
"RTN","RGSEFHIR",63,0)
 ..D TEMPLATE^RGSERGET("CONFORMANCE_PARAMETER")
"RTN","RGSEFHIR",64,0)
 ..S SRPNUM=SRPNUM+1
"RTN","RGSEFHIR",65,0)
 Q:$Q ""
"RTN","RGSEFHIR",66,0)
 Q
"RTN","RGSEFHIX")
0^15^B37554674
"RTN","RGSEFHIX",1,0)
RGSEFHIX ;RI/CBMI/DKM - XML FHIR Support ;31-Mar-2015 22:48;DKM
"RTN","RGSEFHIX",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSEFHIX",3,0)
 ;=================================================================
"RTN","RGSEFHIX",4,0)
 ; Implements Serializer interface
"RTN","RGSEFHIX",5,0)
 ; Serializer.PREINIT - Preinitialization
"RTN","RGSEFHIX",6,0)
PREINIT D PREINIT^RGSEXML
"RTN","RGSEFHIX",7,0)
 S RGSER("FHIR.VERSION")=$P(PATH,"/")
"RTN","RGSEFHIX",8,0)
 D:$$ISBROWSR^RGNETWWW SETCTYPE^RGNETWWW("text/xml")
"RTN","RGSEFHIX",9,0)
 Q
"RTN","RGSEFHIX",10,0)
 ; Serializer.PSTINIT - Postinitialization
"RTN","RGSEFHIX",11,0)
PSTINIT D PSTINIT^RGSEXML
"RTN","RGSEFHIX",12,0)
 Q
"RTN","RGSEFHIX",13,0)
 ; Serializer.PRELIST - List preprocessing
"RTN","RGSEFHIX",14,0)
PRELIST I TOP,'$$INBUNDLE D NEWBNDL("Search results for resource type "_PATH)
"RTN","RGSEFHIX",15,0)
 Q
"RTN","RGSEFHIX",16,0)
 ; Serializer.PSTLIST - List postprocessing
"RTN","RGSEFHIX",17,0)
PSTLIST I TOP,$$INBUNDLE,'$$ISERROR^RGNETWWW D ENDBNDL
"RTN","RGSEFHIX",18,0)
 Q
"RTN","RGSEFHIX",19,0)
 ; Serializer.COMPOSE - Compose an entry
"RTN","RGSEFHIX",20,0)
COMPOSE N ENTRY,TAG,ATR
"RTN","RGSEFHIX",21,0)
 S TAG=$$GETRTYPE^RGSERGET(PATH,PNAME)
"RTN","RGSEFHIX",22,0)
 S ENTRY='$L($G(PNAME))&$$INBUNDLE&'$$HASFLAG^RGSER("S")
"RTN","RGSEFHIX",23,0)
 D:ENTRY NEWENTRY(TAG,ID)
"RTN","RGSEFHIX",24,0)
 S:'$L(PNAME) ATR(0,"xmlns")="http://hl7.org/fhir"
"RTN","RGSEFHIX",25,0)
 S:$$HASFLAG^RGSER("I") ATR(1,"id")=ID
"RTN","RGSEFHIX",26,0)
 D PROP2ATR^RGSEFHIR(.PROP,.ATR)
"RTN","RGSEFHIX",27,0)
 S:$E(TAG)="@" TAG=""
"RTN","RGSEFHIX",28,0)
 D NEWTAG(TAG,.ATR):$L(TAG),PROCPROP^RGSERGET,ENDTAG(TAG):$L(TAG)
"RTN","RGSEFHIX",29,0)
 D:ENTRY ENDENTRY
"RTN","RGSEFHIX",30,0)
 Q
"RTN","RGSEFHIX",31,0)
 ; Serializer.FMTDATE - Serialize a date
"RTN","RGSEFHIX",32,0)
FMTDATE(DT) ;
"RTN","RGSEFHIX",33,0)
 Q $$FMTDATE^RGSEXML(.DT)
"RTN","RGSEFHIX",34,0)
 ; Serializer.ESCMAP - Location of escape map
"RTN","RGSEFHIX",35,0)
ESCMAP() Q $$ESCMAP^RGSEXML
"RTN","RGSEFHIX",36,0)
 ; Serializer.PROPF - Free text property
"RTN","RGSEFHIX",37,0)
PROPF G PROPF^RGSEXML
"RTN","RGSEFHIX",38,0)
 ; Serializer.PROPB - Boolean property
"RTN","RGSEFHIX",39,0)
PROPB G PROPB^RGSEXML
"RTN","RGSEFHIX",40,0)
 ; Serializer.PROPD - Date property
"RTN","RGSEFHIX",41,0)
PROPD G PROPD^RGSEXML
"RTN","RGSEFHIX",42,0)
 ; Serializer.PROPR - Raw value property
"RTN","RGSEFHIX",43,0)
PROPR G PROPR^RGSEXML
"RTN","RGSEFHIX",44,0)
 ; Serializer.PROPW - Word processing property
"RTN","RGSEFHIX",45,0)
PROPW G PROPW^RGSEXML
"RTN","RGSEFHIX",46,0)
 ; Serializer.PROPC - Custom property
"RTN","RGSEFHIX",47,0)
PROPC X CTL
"RTN","RGSEFHIX",48,0)
 Q
"RTN","RGSEFHIX",49,0)
 ; Serializer.PROPO - Object property
"RTN","RGSEFHIX",50,0)
PROPO G PROPO^RGSEXML
"RTN","RGSEFHIX",51,0)
 ; Serializer.PROPI - Inline property
"RTN","RGSEFHIX",52,0)
PROPI G PROPI^RGSEXML
"RTN","RGSEFHIX",53,0)
 ; Serializer.PROPS - Static property
"RTN","RGSEFHIX",54,0)
PROPS G PROPS^RGSEXML
"RTN","RGSEFHIX",55,0)
 ; Create a new bundle.
"RTN","RGSEFHIX",56,0)
NEWBNDL(TITLE,ID,LINK) ;
"RTN","RGSEFHIX",57,0)
 N ATR
"RTN","RGSEFHIX",58,0)
 I RGSER("FHIR.VERSION")="DSTU1" D
"RTN","RGSEFHIX",59,0)
 .D:'$$ISBROWSR^RGNETWWW SETCTYPE^RGNETWWW("application/atom+xml")
"RTN","RGSEFHIX",60,0)
 .S:'$D(ID) ID="urn:uuid:"_$$UUID^RGUT
"RTN","RGSEFHIX",61,0)
 .S ATR("xmlns")="http://www.w3.org/2005/Atom"
"RTN","RGSEFHIX",62,0)
 .D NEWTAG("feed",.ATR)
"RTN","RGSEFHIX",63,0)
 .D NEWTAG("title",$G(TITLE,"Query Results"),1)
"RTN","RGSEFHIX",64,0)
 .D NEWTAG("id",ID,1)
"RTN","RGSEFHIX",65,0)
 .S:$D(LINK)#2 ATR(1,"rel")="self",ATR(2,"href")=LINK
"RTN","RGSEFHIX",66,0)
 .D:$D(ATR) NEWTAG("link",.ATR,1)
"RTN","RGSEFHIX",67,0)
 .S ATR(1,"rel")="fhir-base",ATR(2,"href")=$$HOSTURL^RGNETWWW("*")
"RTN","RGSEFHIX",68,0)
 .D NEWTAG("link",.ATR,1)
"RTN","RGSEFHIX",69,0)
 .D NEWTAG("updated",$$FMTDATE,1)
"RTN","RGSEFHIX",70,0)
 .D NEWTAG("author"),NEWTAG("name",$P($G(^DIC(4,+$G(DUZ(2)),0),"Unknown"),U),1),ENDTAG("author")
"RTN","RGSEFHIX",71,0)
 .S ATR=0,ATR("xmlns")="http://a9.com/-/spec/opensearch/1.1/"
"RTN","RGSEFHIX",72,0)
 .D NEWTAG("totalResults",.ATR,1)
"RTN","RGSEFHIX",73,0)
 .S RGSER("FHIR.BUNDLE")=RGNETRSP("LAST")-1
"RTN","RGSEFHIX",74,0)
 E  D
"RTN","RGSEFHIX",75,0)
 .S:'$D(ID) ID=$$UUID^RGUT
"RTN","RGSEFHIX",76,0)
 .S ATR("xmlns")="http://hl7.org/fhir"
"RTN","RGSEFHIX",77,0)
 .D NEWTAG("Bundle",.ATR)
"RTN","RGSEFHIX",78,0)
 .D PUT("id",ID)
"RTN","RGSEFHIX",79,0)
 .D NEWTAG("meta"),PUT("versionId",1),PUT("lastUpdated",$$FMTDATE),ENDTAG("meta")
"RTN","RGSEFHIX",80,0)
 .D PUT("type","searchset")
"RTN","RGSEFHIX",81,0)
 .D PUT("base",$$HOSTURL^RGNETWWW("*"))
"RTN","RGSEFHIX",82,0)
 .D PUT("total",0)
"RTN","RGSEFHIX",83,0)
 .S RGSER("FHIR.BUNDLE")=RGNETRSP("LAST")
"RTN","RGSEFHIX",84,0)
 .D:$D(LINK)#2 NEWTAG("link"),PUT("relation","self"),PUT("url",LINK),ENDTAG("link")
"RTN","RGSEFHIX",85,0)
 S RGSER("FHIR.COUNT")=0
"RTN","RGSEFHIX",86,0)
 Q
"RTN","RGSEFHIX",87,0)
 ; Close current bundle.
"RTN","RGSEFHIX",88,0)
ENDBNDL N POS
"RTN","RGSEFHIX",89,0)
 S POS=$$INBUNDLE
"RTN","RGSEFHIX",90,0)
 Q:'POS
"RTN","RGSEFHIX",91,0)
 I RGSER("FHIR.VERSION")="DSTU1" D
"RTN","RGSEFHIX",92,0)
 .D ENDTAG("feed")
"RTN","RGSEFHIX",93,0)
 .D REPLACE^RGNETWWW(POS,RGSER("FHIR.COUNT"))
"RTN","RGSEFHIX",94,0)
 E  D
"RTN","RGSEFHIX",95,0)
 .D ENDTAG("Bundle")
"RTN","RGSEFHIX",96,0)
 .D REPLACE^RGNETWWW(POS,"<total value="""_RGSER("FHIR.COUNT")_"""/>")
"RTN","RGSEFHIX",97,0)
 K RGSER("FHIR.BUNDLE"),RGSER("FHIR.COUNT")
"RTN","RGSEFHIX",98,0)
 Q
"RTN","RGSEFHIX",99,0)
 ; Returns true if in a bundle.
"RTN","RGSEFHIX",100,0)
INBUNDLE() Q $G(RGSER("FHIR.BUNDLE"))
"RTN","RGSEFHIX",101,0)
 ; Creates a new bundle entry.
"RTN","RGSEFHIX",102,0)
NEWENTRY(RTYP,IEN) ;
"RTN","RGSEFHIX",103,0)
 N ATR
"RTN","RGSEFHIX",104,0)
 S:IEN'["/" IEN=RTYP_"/"_IEN
"RTN","RGSEFHIX",105,0)
 D NEWTAG("entry")
"RTN","RGSEFHIX",106,0)
 I RGSER("FHIR.VERSION")="DSTU1" D
"RTN","RGSEFHIX",107,0)
 .D NEWTAG("id",IEN,1)
"RTN","RGSEFHIX",108,0)
 .D NEWTAG("updated",$$FMTDATE,1)
"RTN","RGSEFHIX",109,0)
 .S ATR("type")="text/xml"
"RTN","RGSEFHIX",110,0)
 .D NEWTAG("content",.ATR)
"RTN","RGSEFHIX",111,0)
 E  D
"RTN","RGSEFHIX",112,0)
 .;D PUT("status","match")
"RTN","RGSEFHIX",113,0)
 .D NEWTAG("resource")
"RTN","RGSEFHIX",114,0)
 S RGSER("FHIR.COUNT")=RGSER("FHIR.COUNT")+1
"RTN","RGSEFHIX",115,0)
 Q
"RTN","RGSEFHIX",116,0)
 ; Closes current bundle entry.
"RTN","RGSEFHIX",117,0)
ENDENTRY() ;
"RTN","RGSEFHIX",118,0)
 D ENDTAG("entry")
"RTN","RGSEFHIX",119,0)
 Q
"RTN","RGSEFHIX",120,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEFHIX",121,0)
PUT(NM,VL) ;
"RTN","RGSEFHIX",122,0)
 D PUT^RGSEXML(.NM,.VL) Q
"RTN","RGSEFHIX",123,0)
 ; Put a date value to output buffer
"RTN","RGSEFHIX",124,0)
PUTDT(NM,DT) ;
"RTN","RGSEFHIX",125,0)
 D PUTDT^RGSEXML(.NM,.DT) Q
"RTN","RGSEFHIX",126,0)
 ; Write the text section
"RTN","RGSEFHIX",127,0)
 ; TXT = Scalar value (will be escaped) or
"RTN","RGSEFHIX",128,0)
 ;       array (will not be escaped)
"RTN","RGSEFHIX",129,0)
TEXT(TXT) ;
"RTN","RGSEFHIX",130,0)
 N ATR,LP
"RTN","RGSEFHIX",131,0)
 S ATR("xmlns")="http://www.w3.org/1999/xhtml"
"RTN","RGSEFHIX",132,0)
 D NEWTAG("text"),PUT("status","generated"),NEWTAG("div",.ATR)
"RTN","RGSEFHIX",133,0)
 I $D(TXT)=1 D
"RTN","RGSEFHIX",134,0)
 .D ADD^RGNETWWW($$ESCAPE^RGSER(TXT))
"RTN","RGSEFHIX",135,0)
 E  D
"RTN","RGSEFHIX",136,0)
 .S LP=""
"RTN","RGSEFHIX",137,0)
 .F  S LP=$O(TXT(LP)) Q:'$L(LP)  D ADD^RGNETWWW(TXT(LP))
"RTN","RGSEFHIX",138,0)
 D ENDTAG("text")
"RTN","RGSEFHIX",139,0)
 Q
"RTN","RGSEFHIX",140,0)
 ;Add opening tag (with optional attributes)
"RTN","RGSEFHIX",141,0)
 ; TAG = tag name
"RTN","RGSEFHIX",142,0)
 ; ATR = optional array of attributes and/or content
"RTN","RGSEFHIX",143,0)
 ; CLS = if true, tag is self-closing
"RTN","RGSEFHIX",144,0)
NEWTAG(TAG,ATR,CLS) ;
"RTN","RGSEFHIX",145,0)
 D NEWTAG^RGSEXML(.TAG,.ATR,.CLS) Q
"RTN","RGSEFHIX",146,0)
 ; Write closing tag
"RTN","RGSEFHIX",147,0)
 ;  TAG = If specified, write closing tags up to and including
"RTN","RGSEFHIX",148,0)
 ;    this one.  Otherwise, just write last pending closing tag.
"RTN","RGSEFHIX",149,0)
 ;  Returns true if there are more pending tag closures.
"RTN","RGSEFHIX",150,0)
ENDTAG(TAG) ;
"RTN","RGSEFHIX",151,0)
 D ENDTAG^RGSEXML(.TAG) Q
"RTN","RGSEFHIX",152,0)
 ; Reformats a variable pointer for use as a resource id.
"RTN","RGSEFHIX",153,0)
VP2ID(VP) ;
"RTN","RGSEFHIX",154,0)
 Q $$VP2ID^RGSEFHIR(.VP)
"RTN","RGSEFHIX",155,0)
 ; Identifier
"RTN","RGSEFHIX",156,0)
IDENT(SYSTEM,VALUE,LABEL,USE) ;
"RTN","RGSEFHIX",157,0)
 Q:'$L(VALUE)
"RTN","RGSEFHIX",158,0)
 D NEWTAG("identifier")
"RTN","RGSEFHIX",159,0)
 D PUT("use",.USE)
"RTN","RGSEFHIX",160,0)
 D PUT("label",.LABEL)
"RTN","RGSEFHIX",161,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIX",162,0)
 D PUT("value",VALUE)
"RTN","RGSEFHIX",163,0)
 D ENDTAG("identifier")
"RTN","RGSEFHIX",164,0)
 Q
"RTN","RGSEFHIX",165,0)
 ; Reference
"RTN","RGSEFHIX",166,0)
REF(TAG,RES,VL,PFX) ;
"RTN","RGSEFHIX",167,0)
 D REF2(TAG,RES,VL("I"),VL("E"),.PFX)
"RTN","RGSEFHIX",168,0)
 Q
"RTN","RGSEFHIX",169,0)
 ; Reference
"RTN","RGSEFHIX",170,0)
REF2(TAG,RES,VLI,VLE,PFX) ;
"RTN","RGSEFHIX",171,0)
 I $L(VLI)!$L(VLE) D
"RTN","RGSEFHIX",172,0)
 .D NEWTAG(TAG)
"RTN","RGSEFHIX",173,0)
 .D:$L(VLI) PUT("reference",RES_"/"_$G(PFX)_VLI)
"RTN","RGSEFHIX",174,0)
 .D:$L(VLE) PUT("display",VLE)
"RTN","RGSEFHIX",175,0)
 .D ENDTAG(TAG)
"RTN","RGSEFHIX",176,0)
 Q
"RTN","RGSEFHIX",177,0)
 ; Codeable concept
"RTN","RGSEFHIX",178,0)
CODING(TAG,SYSTEM,CODE,DISPLAY) ;
"RTN","RGSEFHIX",179,0)
 D:$D(TAG) NEWTAG(TAG)
"RTN","RGSEFHIX",180,0)
 D NEWTAG("coding")
"RTN","RGSEFHIX",181,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIX",182,0)
 D PUT("code",.CODE)
"RTN","RGSEFHIX",183,0)
 D PUT("display",.DISPLAY)
"RTN","RGSEFHIX",184,0)
 D ENDTAG("coding")
"RTN","RGSEFHIX",185,0)
 D:$D(TAG) ENDTAG(TAG)
"RTN","RGSEFHIX",186,0)
 Q
"RTN","RGSEFHIX",187,0)
 ; Contact
"RTN","RGSEFHIX",188,0)
CONTACT(TAG,SYSTEM,VALUE,USE,START,END) ;
"RTN","RGSEFHIX",189,0)
 Q:'$L(VALUE)
"RTN","RGSEFHIX",190,0)
 D NEWTAG(TAG)
"RTN","RGSEFHIX",191,0)
 D PUT("system",$$SYSTEM^RGSER(.SYSTEM))
"RTN","RGSEFHIX",192,0)
 D PUT("use",.USE)
"RTN","RGSEFHIX",193,0)
 D PUT("value",VALUE)
"RTN","RGSEFHIX",194,0)
 D PERIOD(.START,.END)
"RTN","RGSEFHIX",195,0)
 D ENDTAG(TAG)
"RTN","RGSEFHIX",196,0)
 Q
"RTN","RGSEFHIX",197,0)
 ; Telecom
"RTN","RGSEFHIX",198,0)
TELECOM D:VL CONTACT(PN,$P(PN(0),":"),VL("E"),$P(PN(0),":",2))
"RTN","RGSEFHIX",199,0)
 Q
"RTN","RGSEFHIX",200,0)
 ; Period
"RTN","RGSEFHIX",201,0)
PERIOD(START,END) ;
"RTN","RGSEFHIX",202,0)
 I $G(START)!$G(END) D
"RTN","RGSEFHIX",203,0)
 .D NEWTAG("period")
"RTN","RGSEFHIX",204,0)
 .D:$G(START) PUTDT("start",START)
"RTN","RGSEFHIX",205,0)
 .D:$G(END) PUTDT("end",END)
"RTN","RGSEFHIX",206,0)
 .D ENDTAG("period")
"RTN","RGSEFHIX",207,0)
 Q
"RTN","RGSEFHIX",208,0)
NAME(NAME,USE) ;
"RTN","RGSEFHIX",209,0)
 N X
"RTN","RGSEFHIX",210,0)
 D NEWTAG("name")
"RTN","RGSEFHIX",211,0)
 D PUT("use",$G(USE,"usual"))
"RTN","RGSEFHIX",212,0)
 D PUT("text",$S($E(NAME)=",":$E(NAME,2,99),1:NAME))
"RTN","RGSEFHIX",213,0)
 S X=$P(NAME,","),NAME=$P(NAME,",",2,99)
"RTN","RGSEFHIX",214,0)
 D PUT("family",X)
"RTN","RGSEFHIX",215,0)
 F X=1:1:$L(NAME," ") D PUT("given",$P(NAME," ",X))
"RTN","RGSEFHIX",216,0)
 D ENDTAG("name")
"RTN","RGSEFHIX",217,0)
 Q
"RTN","RGSEINIT")
0^^B542163
"RTN","RGSEINIT",1,0)
RGSEINIT ;RI/CBMI/DKM - Installation Support ;19-Mar-2015 13:31;DKM
"RTN","RGSEINIT",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSEINIT",3,0)
 ;=================================================================
"RTN","RGSEINIT",4,0)
 Q
"RTN","RGSEINIT",5,0)
 ; Pretransportation
"RTN","RGSEINIT",6,0)
 ; Save SERIALIZATION CONTROL names being transported.
"RTN","RGSEINIT",7,0)
PRETRANS N X,Y
"RTN","RGSEINIT",8,0)
 F X=0:0 S X=$O(^RGSER(998.1,X)) Q:'X  S Y=^(X,0) D
"RTN","RGSEINIT",9,0)
 .S @XPDGREF@(998.1,$P(Y,U))=""
"RTN","RGSEINIT",10,0)
 Q
"RTN","RGSEINIT",11,0)
 ; Pre-init
"RTN","RGSEINIT",12,0)
 ; Remove all SERIALIZATION CONTROL entries present in this transport.
"RTN","RGSEINIT",13,0)
PRE N SER,DIK,DA
"RTN","RGSEINIT",14,0)
 S SER="",DIK=$$ROOT^DILFD(998.1)
"RTN","RGSEINIT",15,0)
 F  S SER=$O(@XPDGREF@(998.1,SER)),DA=0 Q:'$L(SER)  D
"RTN","RGSEINIT",16,0)
 .F DA=0:0 S DA=$O(^RGSER(998.1,"B",SER,DA)) Q:'DA  D ^DIK
"RTN","RGSEINIT",17,0)
 Q
"RTN","RGSEINIT",18,0)
 ; Post-init
"RTN","RGSEINIT",19,0)
POST Q
"RTN","RGSEJSON")
0^2^B23526211
"RTN","RGSEJSON",1,0)
RGSEJSON ;RI/CBMI/DKM - JSON Serialization Support ;07-Apr-2015 14:09;DKM
"RTN","RGSEJSON",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 303
"RTN","RGSEJSON",3,0)
 ;=================================================================
"RTN","RGSEJSON",4,0)
 ; Implements Serializer interface
"RTN","RGSEJSON",5,0)
 ; Serializer.PREINIT - Preinitialization
"RTN","RGSEJSON",6,0)
PREINIT Q
"RTN","RGSEJSON",7,0)
 ; Serializer.PSTINIT - Postinitialization
"RTN","RGSEJSON",8,0)
PSTINIT Q
"RTN","RGSEJSON",9,0)
 ; Serializer.PRELIST - List preprocessing
"RTN","RGSEJSON",10,0)
PRELIST D NEWARY
"RTN","RGSEJSON",11,0)
 Q
"RTN","RGSEJSON",12,0)
 ; Serializer.PSTLIST - List postprocessing
"RTN","RGSEJSON",13,0)
PSTLIST D ENDARY
"RTN","RGSEJSON",14,0)
 Q
"RTN","RGSEJSON",15,0)
 ; Serializer.COMPOSE - Compose an entry
"RTN","RGSEJSON",16,0)
COMPOSE N ATR
"RTN","RGSEJSON",17,0)
 S ATR("id")=ID
"RTN","RGSEJSON",18,0)
 D COMPOSEX("@compose","@class",$$GETRTYPE^RGSERGET(PATH,PNAME),.ATR)
"RTN","RGSEJSON",19,0)
 Q
"RTN","RGSEJSON",20,0)
COMPOSEX(OLABEL,RLABEL,RTYPE,ATR) ;
"RTN","RGSEJSON",21,0)
 D NEWOBJ(OLABEL)
"RTN","RGSEJSON",22,0)
 S:$E(RTYPE)="@" RTYPE=""
"RTN","RGSEJSON",23,0)
 D:$L(RTYPE) PUT(RLABEL,RTYPE)
"RTN","RGSEJSON",24,0)
 D PUTATR(.ATR)
"RTN","RGSEJSON",25,0)
 D PROCPROP^RGSERGET
"RTN","RGSEJSON",26,0)
 D ENDOBJ(OLABEL)
"RTN","RGSEJSON",27,0)
 Q
"RTN","RGSEJSON",28,0)
 ; Serializer.FMTDATE - Serialize a date
"RTN","RGSEJSON",29,0)
FMTDATE(DT) ;
"RTN","RGSEJSON",30,0)
 Q $S($D(DT):DT,1:$$NOW^XLFDT)
"RTN","RGSEJSON",31,0)
 ; Serializer.ESCMAP - Location of escape map
"RTN","RGSEJSON",32,0)
ESCMAP() Q "ESCMAPX^RGSEJSON"
"RTN","RGSEJSON",33,0)
ESCMAPX ;;Table of escape mappings
"RTN","RGSEJSON",34,0)
 ;;\;\\
"RTN","RGSEJSON",35,0)
 ;;/;\/
"RTN","RGSEJSON",36,0)
 ;;";\"
"RTN","RGSEJSON",37,0)
 ;;#8;\b
"RTN","RGSEJSON",38,0)
 ;;#12;\f
"RTN","RGSEJSON",39,0)
 ;;#10;\n
"RTN","RGSEJSON",40,0)
 ;;#13;\r
"RTN","RGSEJSON",41,0)
 ;;#9;\t
"RTN","RGSEJSON",42,0)
 ;;
"RTN","RGSEJSON",43,0)
 ; Serializer.PROPF - Free text property
"RTN","RGSEJSON",44,0)
PROPF D PUT(PN,$G(VL("E")))
"RTN","RGSEJSON",45,0)
 Q
"RTN","RGSEJSON",46,0)
 ; Serializer.PROPB - Boolean property
"RTN","RGSEJSON",47,0)
PROPB D PUTBL(PN,$G(VL("I")))
"RTN","RGSEJSON",48,0)
 Q
"RTN","RGSEJSON",49,0)
 ; Serializer.PROPD - Date property
"RTN","RGSEJSON",50,0)
PROPD D PUTDT(PN,$G(VL("I")))
"RTN","RGSEJSON",51,0)
 Q
"RTN","RGSEJSON",52,0)
 ; Serializer.PROPR - Raw value property
"RTN","RGSEJSON",53,0)
PROPR D PUT(PN,$G(VL("I")))
"RTN","RGSEJSON",54,0)
 Q
"RTN","RGSEJSON",55,0)
 ; Serializer.PROPW - Word processing property
"RTN","RGSEJSON",56,0)
PROPW K VL("E"),VL("I")
"RTN","RGSEJSON",57,0)
 D PUTARY(PN,.VL)
"RTN","RGSEJSON",58,0)
 Q
"RTN","RGSEJSON",59,0)
 ; Serializer.PROPC - Custom property
"RTN","RGSEJSON",60,0)
PROPC X CTL
"RTN","RGSEJSON",61,0)
 Q
"RTN","RGSEJSON",62,0)
 ; Serializer.PROPO - Object property
"RTN","RGSEJSON",63,0)
PROPO D:$G(VL("I")) GET^RGSERGET(.RGSER,CTL,$G(VL("I")),PN)
"RTN","RGSEJSON",64,0)
 Q
"RTN","RGSEJSON",65,0)
 ; Serializer.PROPI - Inline property
"RTN","RGSEJSON",66,0)
PROPI D:$G(VL("I")) NEWARY(PN),GET^RGSERGET(.RGSER,CTL,VL("I"),,"S"),ENDARY(PN)
"RTN","RGSEJSON",67,0)
 Q
"RTN","RGSEJSON",68,0)
 ; Serializer.PROPS - Static property
"RTN","RGSEJSON",69,0)
PROPS D PUT(PN,$G(CTL))
"RTN","RGSEJSON",70,0)
 Q
"RTN","RGSEJSON",71,0)
 ; Format attribute name for output
"RTN","RGSEJSON",72,0)
NM(NM) Q $S($L($G(NM)):$$QT(NM)_":",1:"")
"RTN","RGSEJSON",73,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEJSON",74,0)
 ; Value will be quoted
"RTN","RGSEJSON",75,0)
PUT(NM,VL) ;
"RTN","RGSEJSON",76,0)
 D:$L($G(VL)) PUTRAW(.NM,$$QT(.VL))
"RTN","RGSEJSON",77,0)
 Q
"RTN","RGSEJSON",78,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEJSON",79,0)
 ; Value will be stored in raw form
"RTN","RGSEJSON",80,0)
PUTRAW(NM,VL) ;
"RTN","RGSEJSON",81,0)
 Q:'$L($G(VL))
"RTN","RGSEJSON",82,0)
 I $G(NM)[":" D  Q
"RTN","RGSEJSON",83,0)
 .N LP,LN,ATR
"RTN","RGSEJSON",84,0)
 .S LN=$L(NM,":")
"RTN","RGSEJSON",85,0)
 .F LP=1:1:LN-1 D NEWARY($P(NM,":",LP))
"RTN","RGSEJSON",86,0)
 .S ATR($P(NM,":",LN))=VL
"RTN","RGSEJSON",87,0)
 .D PUTOBJ(,.ATR,0)
"RTN","RGSEJSON",88,0)
 .F LP=LN-1:-1:1 D ENDARY($P(NM,":",LP))
"RTN","RGSEJSON",89,0)
 K:$$INARY NM
"RTN","RGSEJSON",90,0)
 S:$E(VL)="." VL="0"_VL
"RTN","RGSEJSON",91,0)
 D PUTELE($$NM(.NM)_VL)
"RTN","RGSEJSON",92,0)
 Q
"RTN","RGSEJSON",93,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEJSON",94,0)
 ; Auto detect value type (or specify QT to force)
"RTN","RGSEJSON",95,0)
PUTAUTO(NM,VL,QT) ;
"RTN","RGSEJSON",96,0)
 S:$S($D(QT):QT,1:'$$ISNUM^RGUT(VL)) VL=$$QT(VL)
"RTN","RGSEJSON",97,0)
 D PUTRAW(NM,VL)
"RTN","RGSEJSON",98,0)
 Q
"RTN","RGSEJSON",99,0)
 ; Put an element in output buffer
"RTN","RGSEJSON",100,0)
PUTELE(X) ;
"RTN","RGSEJSON",101,0)
 N L,I
"RTN","RGSEJSON",102,0)
 S L=+$O(RGSER("L",""),-1),I=0
"RTN","RGSEJSON",103,0)
 S:L I=RGSER("L",L),RGSER("L",L)=I+1
"RTN","RGSEJSON",104,0)
 D ADD($S(I:",",1:"")_X)
"RTN","RGSEJSON",105,0)
 Q
"RTN","RGSEJSON",106,0)
 ; Put a date value to output buffer
"RTN","RGSEJSON",107,0)
PUTDT(NM,DT) ;
"RTN","RGSEJSON",108,0)
 D:DT PUT(NM,$$FMTDATE^RGSER(DT))
"RTN","RGSEJSON",109,0)
 Q
"RTN","RGSEJSON",110,0)
 ; Put a boolean value to output buffer
"RTN","RGSEJSON",111,0)
PUTBL(NM,BL) ;
"RTN","RGSEJSON",112,0)
 D PUTRAW(NM,$S(BL:"true",1:"false"))
"RTN","RGSEJSON",113,0)
 Q
"RTN","RGSEJSON",114,0)
 ; Put a set value to output buffer
"RTN","RGSEJSON",115,0)
PUTST(NM,VL,ST) ;
"RTN","RGSEJSON",116,0)
 D PUT(NM,$$SET^RGUT(VL,ST))
"RTN","RGSEJSON",117,0)
 Q
"RTN","RGSEJSON",118,0)
 ; Put an object to output buffer
"RTN","RGSEJSON",119,0)
PUTOBJ(NM,OBJ,RAW) ;
"RTN","RGSEJSON",120,0)
 N LP,LP1
"RTN","RGSEJSON",121,0)
 D NEWOBJ(.NM),PUTATR(.OBJ,.RAW),ENDOBJ(.NM)
"RTN","RGSEJSON",122,0)
 Q
"RTN","RGSEJSON",123,0)
 ; Put object attributes to output buffer
"RTN","RGSEJSON",124,0)
PUTATR(OBJ,RAW) ;
"RTN","RGSEJSON",125,0)
 N LP,LP1
"RTN","RGSEJSON",126,0)
 S LP=""
"RTN","RGSEJSON",127,0)
 F  S LP=$O(OBJ(LP)) Q:'$L(LP)  D
"RTN","RGSEJSON",128,0)
 .I $D(OBJ(LP))>1 D
"RTN","RGSEJSON",129,0)
 ..S LP1=""
"RTN","RGSEJSON",130,0)
 ..F  S LP1=$O(OBJ(LP,LP1)) Q:'$L(LP1)  D
"RTN","RGSEJSON",131,0)
 ...D PUTAUTO(LP1,OBJ(LP,LP1),.RAW)
"RTN","RGSEJSON",132,0)
 .E  D PUTAUTO(LP,OBJ(LP),.RAW)
"RTN","RGSEJSON",133,0)
 K OBJ
"RTN","RGSEJSON",134,0)
 Q
"RTN","RGSEJSON",135,0)
 ; Put an array to output buffer
"RTN","RGSEJSON",136,0)
 ; LT = Line terminator to append
"RTN","RGSEJSON",137,0)
 ; CT = Concatenate as single value
"RTN","RGSEJSON",138,0)
PUTARY(NM,ARY,LT,CT) ;
"RTN","RGSEJSON",139,0)
 N LP,X
"RTN","RGSEJSON",140,0)
 S LP=$NA(ARY),LT=$G(LT),CT=$G(CT)
"RTN","RGSEJSON",141,0)
 I CT D
"RTN","RGSEJSON",142,0)
 .D ADD($$NM(.NM)_"""")
"RTN","RGSEJSON",143,0)
 E  D NEWARY(.NM)
"RTN","RGSEJSON",144,0)
 F  S LP=$Q(@LP) Q:'$L(LP)  D
"RTN","RGSEJSON",145,0)
 .S X=@LP_LT
"RTN","RGSEJSON",146,0)
 .D:'CT PUTELE($$QT(X))
"RTN","RGSEJSON",147,0)
 .D:CT PUT($$ESCAPE^RGSER(X))
"RTN","RGSEJSON",148,0)
 I CT D
"RTN","RGSEJSON",149,0)
 .D ADD("""")
"RTN","RGSEJSON",150,0)
 E  D ENDARY(.NM)
"RTN","RGSEJSON",151,0)
 Q
"RTN","RGSEJSON",152,0)
 ; Start an array level
"RTN","RGSEJSON",153,0)
NEWARY(NM) ;
"RTN","RGSEJSON",154,0)
 D NEWLVL(.NM,0)
"RTN","RGSEJSON",155,0)
 Q
"RTN","RGSEJSON",156,0)
 ; End an array level
"RTN","RGSEJSON",157,0)
ENDARY(NM) ;
"RTN","RGSEJSON",158,0)
 D ENDLVL(.NM,0)
"RTN","RGSEJSON",159,0)
 Q
"RTN","RGSEJSON",160,0)
 ; Returns true if inside an array
"RTN","RGSEJSON",161,0)
INARY() N LVL
"RTN","RGSEJSON",162,0)
 S LVL=$$GETLVL
"RTN","RGSEJSON",163,0)
 Q $S('LVL:0,1:'RGSER("L",LVL,0))
"RTN","RGSEJSON",164,0)
 ; Start an object level
"RTN","RGSEJSON",165,0)
NEWOBJ(NM) ;
"RTN","RGSEJSON",166,0)
 D NEWLVL(.NM,1)
"RTN","RGSEJSON",167,0)
 Q
"RTN","RGSEJSON",168,0)
 ; End an object level
"RTN","RGSEJSON",169,0)
ENDOBJ(NM) ;
"RTN","RGSEJSON",170,0)
 D ENDLVL(.NM,1)
"RTN","RGSEJSON",171,0)
 Q
"RTN","RGSEJSON",172,0)
 ; Start a new level
"RTN","RGSEJSON",173,0)
 ; TP: 0 = array; 1 = object
"RTN","RGSEJSON",174,0)
 ; The level stack is at RGSER("L"):
"RTN","RGSEJSON",175,0)
 ;   RGSER("L",LVL)   = # of elements at this level
"RTN","RGSEJSON",176,0)
 ;   RGSER("L",LVL,0) = 0 if array, 1 if object
"RTN","RGSEJSON",177,0)
 ;   RGSER("L",LVL,1) = Tag associated with level
"RTN","RGSEJSON",178,0)
 ;   RGSER("L",LVL,2) = Position of level in output stream
"RTN","RGSEJSON",179,0)
NEWLVL(NM,TP) ;
"RTN","RGSEJSON",180,0)
 N LVL,OUT,CNT,ARY
"RTN","RGSEJSON",181,0)
 S ARY=$$INARY,LVL=$$GETLVL,OUT=""
"RTN","RGSEJSON",182,0)
 I LVL S CNT=RGSER("L",LVL),OUT=$S(CNT:",",1:""),RGSER("L",LVL)=CNT+1
"RTN","RGSEJSON",183,0)
 S LVL=LVL+1,RGSER("L",LVL)=0,RGSER("L",LVL,0)=TP,RGSER("L",LVL,1)=$G(NM)
"RTN","RGSEJSON",184,0)
 I 'ARY,$L($G(NM)),$E(NM)'="@" S OUT=OUT_$$NM(NM)
"RTN","RGSEJSON",185,0)
 D ADD(OUT_$S(TP:"{",1:"["))
"RTN","RGSEJSON",186,0)
 S RGSER("L",LVL,2)=RGNETRSP("LAST")
"RTN","RGSEJSON",187,0)
 Q
"RTN","RGSEJSON",188,0)
 ; End a level
"RTN","RGSEJSON",189,0)
 ; If an empty level is ended, it is completely removed
"RTN","RGSEJSON",190,0)
 ; from the output stream.
"RTN","RGSEJSON",191,0)
ENDLVL(NM,TP) ;
"RTN","RGSEJSON",192,0)
 N LVL,OUT,MATCH
"RTN","RGSEJSON",193,0)
 F LVL=$$GETLVL:-1:1 D  Q:MATCH
"RTN","RGSEJSON",194,0)
 .I RGSER("L",LVL) D
"RTN","RGSEJSON",195,0)
 ..S OUT=$S(RGSER("L",LVL,0):"}",1:"]")
"RTN","RGSEJSON",196,0)
 ..D ADD(OUT)
"RTN","RGSEJSON",197,0)
 .E  D
"RTN","RGSEJSON",198,0)
 ..D REPLACE^RGNETWWW(RGSER("L",LVL,2),"")
"RTN","RGSEJSON",199,0)
 ..S:LVL>1 RGSER("L",LVL-1)=RGSER("L",LVL-1)-1
"RTN","RGSEJSON",200,0)
 .S MATCH=RGSER("L",LVL,0)=TP
"RTN","RGSEJSON",201,0)
 .S:MATCH MATCH=$G(NM)=RGSER("L",LVL,1)
"RTN","RGSEJSON",202,0)
 .K RGSER("L",LVL)
"RTN","RGSEJSON",203,0)
 Q
"RTN","RGSEJSON",204,0)
 ; Return current level
"RTN","RGSEJSON",205,0)
GETLVL() Q +$O(RGSER("L",""),-1)
"RTN","RGSEJSON",206,0)
 ; Enclose value in quotes (escape contents if necessary)
"RTN","RGSEJSON",207,0)
QT(X) Q """"_$$ESCAPE^RGSER($G(X))_""""
"RTN","RGSEJSON",208,0)
 ; Convenience method
"RTN","RGSEJSON",209,0)
ADD(X) D ADD^RGNETWWW(X)
"RTN","RGSEJSON",210,0)
 Q
"RTN","RGSER")
0^3^B14460964
"RTN","RGSER",1,0)
RGSER ;RI/CBMI/DKM - Core Serialization Support ;07-Apr-2015 14:07;DKM
"RTN","RGSER",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 303
"RTN","RGSER",3,0)
 ;=================================================================
"RTN","RGSER",4,0)
 ; RPC: Process a REST request
"RTN","RGSER",5,0)
REST(DATA,REQUEST,HOST) ;
"RTN","RGSER",6,0)
 S:$D(REQUEST)=1 REQUEST(1)=REQUEST
"RTN","RGSER",7,0)
 S DATA=$$ENTRYARY^RGNETWWW(.REQUEST)
"RTN","RGSER",8,0)
 Q
"RTN","RGSER",9,0)
 ; RPC: Perform a GET operation
"RTN","RGSER",10,0)
FETCH(DATA,PATH,SLCT) ;
"RTN","RGSER",11,0)
 N RGNETREQ,RGNETRSP
"RTN","RGSER",12,0)
 D INIT^RGNETWWW,GET^RGSERGET(,.PATH,.SLCT,,"P"),CLEANUP^RGNETWWW
"RTN","RGSER",13,0)
 S DATA=RGNETRSP
"RTN","RGSER",14,0)
 Q
"RTN","RGSER",15,0)
 ; GET method handler
"RTN","RGSER",16,0)
MGET N X,ID,PATH,RGSER
"RTN","RGSER",17,0)
 D GETFMT
"RTN","RGSER",18,0)
 S PATH=RGNETREQ("PATH"),X=$L(PATH,"/")
"RTN","RGSER",19,0)
 S:X#2 ID=$P(PATH,"/",X),PATH=$P(PATH,"/",1,X-1)
"RTN","RGSER",20,0)
 K:$G(ID)="_search" ID
"RTN","RGSER",21,0)
 D GET^RGSERGET(.RGSER,PATH,.ID,,"P"),ADDHDRX
"RTN","RGSER",22,0)
 Q
"RTN","RGSER",23,0)
 ; POST method
"RTN","RGSER",24,0)
MPOST D SETSTAT^RGNETWWW(405)
"RTN","RGSER",25,0)
 Q
"RTN","RGSER",26,0)
 ; PUT method
"RTN","RGSER",27,0)
MPUT D SETSTAT^RGNETWWW(405)
"RTN","RGSER",28,0)
 Q
"RTN","RGSER",29,0)
 ; DELETE method
"RTN","RGSER",30,0)
MDELETE D SETSTAT^RGNETWWW(405)
"RTN","RGSER",31,0)
 Q
"RTN","RGSER",32,0)
 ; Get expected response format
"RTN","RGSER",33,0)
GETFMT I $D(RGNETREQ("PARAMS","_format")) D
"RTN","RGSER",34,0)
 .S RGSER("FORMAT")=RGNETREQ("PARAMS","_format",1,1)
"RTN","RGSER",35,0)
 .K RGNETREQ("PARAMS","_format")
"RTN","RGSER",36,0)
 E  S RGSER("FORMAT")=$G(RGNETREQ("HDR","accept"))
"RTN","RGSER",37,0)
 Q
"RTN","RGSER",38,0)
 ; Returns the presence of specified flag(s).
"RTN","RGSER",39,0)
 ; If ALL is true, presence of all flags are required.
"RTN","RGSER",40,0)
 ; If false (the default), only one flag must be present.
"RTN","RGSER",41,0)
HASFLAG(FLG,ALL) ;
"RTN","RGSER",42,0)
 N X,T
"RTN","RGSER",43,0)
 S ALL='$G(ALL),T=1
"RTN","RGSER",44,0)
 F X=1:1:$L(FLG) S T=FLAGS[$E(FLG,X) Q:T=ALL
"RTN","RGSER",45,0)
 Q T
"RTN","RGSER",46,0)
 ; Escape reserved characters
"RTN","RGSER",47,0)
ESCAPE(X) ;
"RTN","RGSER",48,0)
 N Y,Z,C,R,L
"RTN","RGSER",49,0)
 S R=$$ESCMAP^@RGSER("INTF"),L=$P(R,U),R=$P(R,U,2)
"RTN","RGSER",50,0)
 F Z=1:1 S Y=$P($T(@L+Z^@R),";;",2) Q:'$L(Y)  D
"RTN","RGSER",51,0)
 .S C=$P(Y,";")
"RTN","RGSER",52,0)
 .S:$E(C)="#" C=$C(+$E(C,2,99))
"RTN","RGSER",53,0)
 .S:X[C X=$$SUBST^RGUT(X,C,$P(Y,";",2,9999))
"RTN","RGSER",54,0)
 Q X
"RTN","RGSER",55,0)
 ; Serialize a date.
"RTN","RGSER",56,0)
FMTDATE(DT) ;
"RTN","RGSER",57,0)
 Q $$FMTDATE^@(RGSER("INTF"))(.DT)
"RTN","RGSER",58,0)
 ; Concatenate array elements into a string
"RTN","RGSER",59,0)
ARY2STR(ARY,DLM) ;
"RTN","RGSER",60,0)
 N X,RES
"RTN","RGSER",61,0)
 S RES="",DLM=$G(DLM)
"RTN","RGSER",62,0)
 F X=0:0 S X=$O(ARY(X)) Q:'X  S RES=RES_$S($L(RES):DLM,1:"")_ARY(X)
"RTN","RGSER",63,0)
 Q RES
"RTN","RGSER",64,0)
 ; Adds additional headers
"RTN","RGSER",65,0)
ADDHDRX N LP,HDR
"RTN","RGSER",66,0)
 I $G(RGSER("SER")),'$$ISERROR^RGNETWWW
"RTN","RGSER",67,0)
 .F LP=0:0 S LP=$O(^RGSER(998.1,RGSER("SER"),20,LP)) Q:'LP  S HDR=^(LP,0) D:$L(HDR) ADDHDR^RGNETWWW(HDR)
"RTN","RGSER",68,0)
 Q
"RTN","RGSER",69,0)
 ; Add array of values to output buffer.
"RTN","RGSER",70,0)
 ; AR may be by reference or indirection
"RTN","RGSER",71,0)
 ; FLG: B = encode as binary, L = add CRLF, W = is word processing root, R = don't escape
"RTN","RGSER",72,0)
ADDARY(AR,FLG) ;
"RTN","RGSER",73,0)
 N RT,B
"RTN","RGSER",74,0)
 S RT=$S($D(AR)=1:AR,1:$NA(AR)),FLG=$G(FLG),B=FLG["B"
"RTN","RGSER",75,0)
 D ADDTXT(RT,FLG):'B,ADDBIN(RT,FLG):B
"RTN","RGSER",76,0)
 Q
"RTN","RGSER",77,0)
ADDTXT(RT,FLG) ;
"RTN","RGSER",78,0)
 N LP,L,W,R,X
"RTN","RGSER",79,0)
 S L=$S(FLG["L":$C(13,10),1:""),W=FLG["W",R=FLG["R",LP=$S(W:0,1:"")
"RTN","RGSER",80,0)
 F  S LP=$O(@RT@(LP)) Q:'$L(LP)  D
"RTN","RGSER",81,0)
 .S X=$S(W:@RT@(LP,0),1:@RT@(LP))_L
"RTN","RGSER",82,0)
 .S:'R X=$$ESCAPE(X)
"RTN","RGSER",83,0)
 .D ADD^RGNETWWW(X)
"RTN","RGSER",84,0)
 Q
"RTN","RGSER",85,0)
ADDBIN(RT,FLG) ;
"RTN","RGSER",86,0)
 N X,Z,VL,LP,I,L,W
"RTN","RGSER",87,0)
 S Z="=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
"RTN","RGSER",88,0)
 S (VL,X)="",L=$S(FLG["L":$C(13,10),1:""),W=FLG["W",LP=$S(W:0,1:"")
"RTN","RGSER",89,0)
 F  S LP=$O(@RT@(LP)) Q:'$L(LP)  D
"RTN","RGSER",90,0)
 .S X=X_$S(W:@RT@(LP,0),1:@RT@(LP))_L
"RTN","RGSER",91,0)
 .F  Q:$L(X)<3  D
"RTN","RGSER",92,0)
 ..S VL=VL_$$B64ENC($E(X,1,3)),X=$E(X,4,9999)
"RTN","RGSER",93,0)
 .I $L(VL)>131 D ADD^RGNETWWW(VL) S VL=""
"RTN","RGSER",94,0)
 S:$L(X) VL=VL_$$B64ENC(X)
"RTN","RGSER",95,0)
 D:$L(VL) ADD^RGNETWWW(VL)
"RTN","RGSER",96,0)
 Q
"RTN","RGSER",97,0)
 ; Encode input as Base 64
"RTN","RGSER",98,0)
B64ENC(X) N Z1,Z2,Z3,Z4
"RTN","RGSER",99,0)
 S Z3=0,Z1=""
"RTN","RGSER",100,0)
 F Z4=1:1:3 S Z2=$A(X,Z4),Z3=Z3*256+$S(Z2<0:0,1:Z2)
"RTN","RGSER",101,0)
 F Z4=1:1:4 S Z1=$E(Z,Z3#64+2)_Z1,Z3=Z3\64
"RTN","RGSER",102,0)
 Q Z1
"RTN","RGSER",103,0)
 ; Return table # given name
"RTN","RGSER",104,0)
TABLE(T) Q $S(T=+T:T,1:+$O(^DIC("B",TABLE,0)))
"RTN","RGSER",105,0)
 ; Format system attribute
"RTN","RGSER",106,0)
SYSTEM(SYSTEM) ;
"RTN","RGSER",107,0)
 N PATH
"RTN","RGSER",108,0)
 S:'($D(SYSTEM)#10) SYSTEM="@"
"RTN","RGSER",109,0)
 S PATH=$P(SYSTEM,"/",2,999),SYSTEM=$P(SYSTEM,"/")
"RTN","RGSER",110,0)
 S:$E(SYSTEM)="#" SYSTEM="@"_$TR($P(^DIC($E(SYSTEM,2,9999),0),U)," /","__")
"RTN","RGSER",111,0)
 S:$E(SYSTEM)="@" SYSTEM=$$LOCALSYS($E(SYSTEM,2,9999))
"RTN","RGSER",112,0)
 Q SYSTEM_$S($L(PATH):"/"_PATH,1:"")
"RTN","RGSER",113,0)
 ; Prepend local system root to path
"RTN","RGSER",114,0)
LOCALSYS(PATH) ;
"RTN","RGSER",115,0)
 Q $$CONCAT^RGNETWWW("http://"_$$LOW^XLFSTR($$KSP^XUPARAM("WHERE")),.PATH)
"RTN","RGSER",116,0)
 ; Returns true if path matches specified pattern
"RTN","RGSER",117,0)
ISMATCH(PATH,PTRN) ;
"RTN","RGSER",118,0)
 Q $TR(PATH,"-_","XX")?@PTRN
"RTN","RGSERDD")
0^12^B831280
"RTN","RGSERDD",1,0)
RGSERDD ;RI/CBMI/DKM - Data dictionary logic ;31-Mar-2015 19:41;DKM
"RTN","RGSERDD",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 303
"RTN","RGSERDD",3,0)
 ;=================================================================
"RTN","RGSERDD",4,0)
 ; Convert to pattern (Used by B xref of 998.11:.01)
"RTN","RGSERDD",5,0)
TOPTRN(NM) ;
"RTN","RGSERDD",6,0)
 Q $$TOPTRN^RGNETWWW(NM)
"RTN","RGSERDD",7,0)
 ; Input transform for 998.12:10
"RTN","RGSERDD",8,0)
ITXCTRL(X,DA) ;
"RTN","RGSERDD",9,0)
 I '$L(X)!($L(X)>250) K X Q
"RTN","RGSERDD",10,0)
 N TYPE
"RTN","RGSERDD",11,0)
 S TYPE=$P($G(^RGSER(998.1,DA(2),10,DA(1),30,DA,0)),U,3)
"RTN","RGSERDD",12,0)
 I '$L(TYPE) K X Q
"RTN","RGSERDD",13,0)
 I TYPE="C" D ^DIM Q
"RTN","RGSERDD",14,0)
 I TYPE="T" K:'$O(^RGSER(998.1,DA(2),10,DA(1),50,"B",X,0)) X Q
"RTN","RGSERDD",15,0)
 I "NSW"[TYPE Q
"RTN","RGSERDD",16,0)
 I "IOM"[TYPE D  Q
"RTN","RGSERDD",17,0)
 .N RGSER
"RTN","RGSERDD",18,0)
 .S RGSER="RGSER",RGSER("SER")=DA(2),RGSER("SERNM")=$P(^RGSER(998.1,DA(2),0),U)
"RTN","RGSERDD",19,0)
 .K:'$L($$GETGBL^RGSERGET(X)) X
"RTN","RGSERDD",20,0)
 K X
"RTN","RGSERDD",21,0)
 Q
"RTN","RGSERDOC")
0^17^B340683
"RTN","RGSERDOC",1,0)
RGSERDOC ;RI/CBMI/DKM - Document Resource Support ;31-Mar-2015 22:52;DKM
"RTN","RGSERDOC",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERDOC",3,0)
 ;=================================================================
"RTN","RGSERDOC",4,0)
 ; Outputs a document in binary format
"RTN","RGSERDOC",5,0)
 ;  IEN = IEN of document
"RTN","RGSERDOC",6,0)
 ;  PRE = Prefix before binary content (optional)
"RTN","RGSERDOC",7,0)
 ;  PST = Postfix after binary content (optional)
"RTN","RGSERDOC",8,0)
TOBINARY(IEN,PRE,PST) ;
"RTN","RGSERDOC",9,0)
 N TXT,ERR
"RTN","RGSERDOC",10,0)
 D TGET^TIUSRVR1(.TXT,IEN)
"RTN","RGSERDOC",11,0)
 I $D(@TXT) D
"RTN","RGSERDOC",12,0)
 .D:$L($G(PRE)) ADD^RGNETWWW(PRE)
"RTN","RGSERDOC",13,0)
 .D ADDARY^RGSER(TXT,"BL")
"RTN","RGSERDOC",14,0)
 .D:$L($G(PST)) ADD^RGNETWWW(PST)
"RTN","RGSERDOC",15,0)
 .K @TXT
"RTN","RGSERDOC",16,0)
 E  D SETSTAT^RGNETWWW(404)
"RTN","RGSERDOC",17,0)
 Q
"RTN","RGSERENC")
0^4^B1699892
"RTN","RGSERENC",1,0)
RGSERENC ;RI/CBMI/DKM - Encounter Resource Support ;01-Apr-2015 16:50;DKM
"RTN","RGSERENC",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERENC",3,0)
 ;=================================================================
"RTN","RGSERENC",4,0)
 ; Get encounter types
"RTN","RGSERENC",5,0)
GETTYPES I '$D(RGSER("RGSERENC.SVCCAT")) D
"RTN","RGSERENC",6,0)
 .N SC,X
"RTN","RGSERENC",7,0)
 .S (SLCT,RGSER("RGSERENC.SVCCAT"))=$$TMPGBL^RGNETWWW,TP=1
"RTN","RGSERENC",8,0)
 .D GETLST^XPAR(.SC,"ALL","RGCWENCX VISIT TYPES","I")
"RTN","RGSERENC",9,0)
 .M @SLCT=SC
"RTN","RGSERENC",10,0)
 Q
"RTN","RGSERENC",11,0)
 ; Retrieve an encounter type
"RTN","RGSERENC",12,0)
RETRIEVE(IEN) ;
"RTN","RGSERENC",13,0)
 D RETRIEVE^RGSERGET(RGSER("RGSERENC.SVCCAT"),IEN,"~")
"RTN","RGSERENC",14,0)
 Q
"RTN","RGSERENC",15,0)
 ; Retrieve the encounter status
"RTN","RGSERENC",16,0)
GETSTAT(IEN) ;
"RTN","RGSERENC",17,0)
 N STATUS
"RTN","RGSERENC",18,0)
 I $L($T(ISLOCKED^BEHOENCX)) D
"RTN","RGSERENC",19,0)
 .S STATUS=$S($$ISLOCKED^BEHOENCX(IEN):"finished",1:"in progress")
"RTN","RGSERENC",20,0)
 E  D
"RTN","RGSERENC",21,0)
 .S STATUS=$S($$VISREFDT(IEN)\1'=$$DT^XLFDT:"finished",1:"in progress")
"RTN","RGSERENC",22,0)
 Q STATUS
"RTN","RGSERENC",23,0)
 ; Returns reference date for visit lock check
"RTN","RGSERENC",24,0)
VISREFDT(IEN) ;
"RTN","RGSERENC",25,0)
 N ADM,DIS,DAT
"RTN","RGSERENC",26,0)
 S DAT=$P($G(^AUPNVSIT(+IEN,0)),U,2)
"RTN","RGSERENC",27,0)
 Q:'DAT ""
"RTN","RGSERENC",28,0)
 S ADM=$O(^DGPM("AVISIT",IEN,0))
"RTN","RGSERENC",29,0)
 Q:'ADM DAT
"RTN","RGSERENC",30,0)
 S DIS=$P($G(^DGPM(ADM,0)),U,17)
"RTN","RGSERENC",31,0)
 Q $S(DIS:$P($G(^DGPM(DIS,0)),U),1:DT)
"RTN","RGSERGET")
0^11^B157637908
"RTN","RGSERGET",1,0)
RGSERGET ;RI/CBMI/DKM - GET method support ;07-Apr-2015 14:42;DKM
"RTN","RGSERGET",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 303
"RTN","RGSERGET",3,0)
 ;=================================================================
"RTN","RGSERGET",4,0)
 ; RPC: Returns a serialized form of the requested object.
"RTN","RGSERGET",5,0)
 ; SLCT may be:
"RTN","RGSERGET",6,0)
 ;  - a single IEN (e.g., SLCT=123)
"RTN","RGSERGET",7,0)
 ;  - a unique key on the source file (e.g., SLCT=@XYZ)
"RTN","RGSERGET",8,0)
 ;  - an ordered array passed by ref whose values are IENs (e.g., SLCT(1)=123...)
"RTN","RGSERGET",9,0)
 ;  - a global root whose subscript is an IEN (e.g., ^XYZ("B","ABC"))
"RTN","RGSERGET",10,0)
 ;  - a reference to an iterator that returns IENs (e.g., $$NXT^XYZ)
"RTN","RGSERGET",11,0)
 ; FLAGS may contain:
"RTN","RGSERGET",12,0)
 ;  I - Add id attribute to resource
"RTN","RGSERGET",13,0)
 ;  L - Processing an entry returned from a selector
"RTN","RGSERGET",14,0)
 ;  M - Processing a multiple field (subfile)
"RTN","RGSERGET",15,0)
 ;  P - Process search parameters
"RTN","RGSERGET",16,0)
 ;  S - Selection of internal resources is allowed
"RTN","RGSERGET",17,0)
 ;  X - Suppress execution of custom serializer
"RTN","RGSERGET",18,0)
GET(RGSER,PATH,SLCT,PNAME,FLAGS) ;
"RTN","RGSERGET",19,0)
 N RTN,TOP,IEN,IENS,FILE,SER,TP,XSER,XRDR,MAX,ID,SER,INTRNL,X
"RTN","RGSERGET",20,0)
 S:$E(PATH)="/" PATH=$E(PATH,2,9999)
"RTN","RGSERGET",21,0)
 I '$L(PATH) D GETDSC(SLCT) Q
"RTN","RGSERGET",22,0)
 S SER=$$GETGBL(PATH)
"RTN","RGSERGET",23,0)
 Q:'$L(SER)
"RTN","RGSERGET",24,0)
 S RGSER("CNT")=+$G(RGSER("CNT")),TOP='RGSER("CNT"),FLAGS=$G(FLAGS),PNAME=$G(PNAME),SLCT=$G(SLCT)
"RTN","RGSERGET",25,0)
 S N0=$G(@SER@(0)),XSER=$G(^(10)),XRDR=$G(^(20)),INTRNL=+$P(N0,U,2),FILE=+$P(N0,U,3),IENS="",TP=-1
"RTN","RGSERGET",26,0)
 I $D(SLCT)=1,'$L(SLCT) D                                              ; No selector
"RTN","RGSERGET",27,0)
 .I $D(RGNETREQ("PARAMS","_id",1)) D
"RTN","RGSERGET",28,0)
 ..M SLCT=RGNETREQ("PARAMS","_id",1)
"RTN","RGSERGET",29,0)
 ..K RGNETREQ("PARAMS","_id",1)
"RTN","RGSERGET",30,0)
 I $$GETPARAM^RGNETWWW("_count")>0 D
"RTN","RGSERGET",31,0)
 .S RGSER("MAX")=+RGNETREQ("PARAMS","_count",1,1)
"RTN","RGSERGET",32,0)
 .K RGNETREQ("PARAMS","_count",1,1)
"RTN","RGSERGET",33,0)
 I $$HASFLAG^RGSER("M") S IENS=SLCT,SLCT=$$ROOT^DILFD(FILE,SLCT,1),TP=2 Q:'$O(@SLCT@(0))
"RTN","RGSERGET",34,0)
 E  I $E(SLCT)="@" S SLCT=$$FIND1^DIC(FILE,,"X",$E(SLCT,2,9999))
"RTN","RGSERGET",35,0)
 E  I $E(SLCT)=U S TP=1
"RTN","RGSERGET",36,0)
 E  I $E(SLCT,1,2)="$$" S SLCT=$$NEWITER(SLCT),TP=3
"RTN","RGSERGET",37,0)
 E  I $D(SLCT)>9 S TP=0
"RTN","RGSERGET",38,0)
 S MAX=$G(RGSER("MAX"),$S(TP:999999,1:1000))
"RTN","RGSERGET",39,0)
 I '$D(RGSER("PREINIT")) D PREINIT^@RGSER("INTF") S RGSER("PREINIT")=$ESTACK
"RTN","RGSERGET",40,0)
 I $L(XSER),'$$HASFLAG^RGSER("X") X XSER Q:$D(XSER)
"RTN","RGSERGET",41,0)
 D BYIEN:TP=-1,BYSLCT:TP'=-1
"RTN","RGSERGET",42,0)
 I '$$ISERROR^RGNETWWW,$ESTACK=RGSER("PREINIT") D PSTINIT^@RGSER("INTF")
"RTN","RGSERGET",43,0)
 Q
"RTN","RGSERGET",44,0)
 ; By selector
"RTN","RGSERGET",45,0)
BYSLCT N LP,FL
"RTN","RGSERGET",46,0)
 D PRELIST^@RGSER("INTF")
"RTN","RGSERGET",47,0)
 F LP=0:0 Q:MAX'>RGSER("CNT")  S:TP=3 @("LP="_SLCT) S:TP'=3 LP=$S('TP:$O(SLCT(LP)),1:$O(@SLCT@(LP))) Q:'LP  D  Q:$$ISERROR^RGNETWWW
"RTN","RGSERGET",48,0)
 .S IEN=$S(TP:LP,1:SLCT(LP)),FL=$S($$HASFLAG^RGSER("P"):"P",1:"")_$S(TP=2:"S",1:"L")
"RTN","RGSERGET",49,0)
 .D GET(.RGSER,PATH,IEN_IENS,PNAME,FL)
"RTN","RGSERGET",50,0)
 D PSTLIST^@RGSER("INTF")
"RTN","RGSERGET",51,0)
 Q
"RTN","RGSERGET",52,0)
 ; By IEN
"RTN","RGSERGET",53,0)
BYIEN N LP,PROP,PARM,FLD,VALS
"RTN","RGSERGET",54,0)
 I INTRNL,'$L(PNAME),'$$HASFLAG^RGSER("S") D SETSTAT^RGNETWWW(403,"Invalid resource type: "_PATH) Q
"RTN","RGSERGET",55,0)
 D:$$HASFLAG^RGSER("P") PROCPARM
"RTN","RGSERGET",56,0)
 Q:$$ISERROR^RGNETWWW
"RTN","RGSERGET",57,0)
 I '$L(SLCT) D  Q:$L(SLCT)
"RTN","RGSERGET",58,0)
 .S SLCT=$$GETSLCT
"RTN","RGSERGET",59,0)
 .S:'$L(SLCT) SLCT=$$ROOT^DILFD(FILE,,1)
"RTN","RGSERGET",60,0)
 .D:$L(SLCT) GET(.RGSER,PATH,SLCT,.PNAME,FLAGS)
"RTN","RGSERGET",61,0)
 I '$L(SLCT) D SETSTAT^RGNETWWW(403,"Invalid request") Q
"RTN","RGSERGET",62,0)
 M PROP=@SER@(30)
"RTN","RGSERGET",63,0)
 S (ID,IEN)=SLCT
"RTN","RGSERGET",64,0)
 I FILE!$L(XRDR) D  Q:$$ISERROR^RGNETWWW  I '$$FILTER D:'$$HASFLAG^RGSER("L") SETSTAT^RGNETWWW(404) Q
"RTN","RGSERGET",65,0)
 .S IENS=IEN_","
"RTN","RGSERGET",66,0)
 .D BLDFLDS(FILE,.PROP,.FLD),BLDFLDS(FILE,.PARM,.FLD)
"RTN","RGSERGET",67,0)
 .I $L($G(FLD(0))) D
"RTN","RGSERGET",68,0)
 ..N ERR
"RTN","RGSERGET",69,0)
 ..X XRDR
"RTN","RGSERGET",70,0)
 ..I FILE D
"RTN","RGSERGET",71,0)
 ...D GETS^DIQ(FILE,IENS,FLD(0),"IE","VALS","ERR")
"RTN","RGSERGET",72,0)
 ...F LP=0:0 S LP=$O(FLD(LP)) Q:'LP  D
"RTN","RGSERGET",73,0)
 ....N TMP,IENS2,FILE2,LP2
"RTN","RGSERGET",74,0)
 ....S FILE2=FLD(LP,0),IENS2=VALS(FILE,IENS,LP,"I")_","
"RTN","RGSERGET",75,0)
 ....Q:'IENS2
"RTN","RGSERGET",76,0)
 ....D GETS^DIQ(FILE2,IENS2,FLD(LP),"IE","TMP","ERR")
"RTN","RGSERGET",77,0)
 ....F LP2=0:0 S LP2=$O(TMP(FILE2,IENS2,LP2)) Q:'LP2  D
"RTN","RGSERGET",78,0)
 .....M VALS(FILE,IENS,LP_"~"_LP2)=TMP(FILE2,IENS2,LP2)
"RTN","RGSERGET",79,0)
 ..I '$D(VALS),'$$ISERROR^RGNETWWW D SETSTAT^RGNETWWW(404,$G(ERR("DIERR",1,"TEXT",1),$G(ERR,"Unknown error")))
"RTN","RGSERGET",80,0)
 .I $D(PROP("B","@id")) D
"RTN","RGSERGET",81,0)
 ..N X
"RTN","RGSERGET",82,0)
 ..S X=+$O(PROP("B","@id",0)),X=$P($G(PROP(X,0)),U,2)
"RTN","RGSERGET",83,0)
 ..S X=$S('$L(X):"",1:$G(VALS(FILE,IENS,X,"E")))
"RTN","RGSERGET",84,0)
 ..S:$L(X) ID=X
"RTN","RGSERGET",85,0)
 .S VALS(FILE,IENS,"@ien","I")=IEN
"RTN","RGSERGET",86,0)
 .S VALS(FILE,IENS,"@ienx","I")=FILE_"-"_IEN
"RTN","RGSERGET",87,0)
 .S VALS(FILE,IENS,"@id","I")=ID
"RTN","RGSERGET",88,0)
 I '$L(PNAME),'$$HASFLAG^RGSER("S") S RGSER("CNT")=RGSER("CNT")+1
"RTN","RGSERGET",89,0)
 D COMPOSE^@RGSER("INTF")
"RTN","RGSERGET",90,0)
 Q
"RTN","RGSERGET",91,0)
 ; Retrieval logic for custom source.
"RTN","RGSERGET",92,0)
RETRIEVE(SRC,IEN,DLM) ;
"RTN","RGSERGET",93,0)
 N X,Y
"RTN","RGSERGET",94,0)
 S X=$G(@SRC@(IEN)),DLM=$G(DLM,U)
"RTN","RGSERGET",95,0)
 F Y=1:1:$L(X,DLM) S (VALS(FILE,IENS,Y,"I"),VALS(FILE,IENS,Y,"E"))=$P(X,DLM,Y)
"RTN","RGSERGET",96,0)
 Q
"RTN","RGSERGET",97,0)
 ; Get resource type
"RTN","RGSERGET",98,0)
GETRTYPE(PATH,PNAME) ;
"RTN","RGSERGET",99,0)
 Q $P($S($L(PNAME):PNAME,1:$P(PATH,"/",$L(PATH,"/"))),"_")
"RTN","RGSERGET",100,0)
 ; Get preferred global selector
"RTN","RGSERGET",101,0)
GETSLCT() ;
"RTN","RGSERGET",102,0)
 N LP,SQ,NM,X,PN
"RTN","RGSERGET",103,0)
 S X=""
"RTN","RGSERGET",104,0)
 F SQ=0:0 S SQ=$O(PARM("ASEQ",SQ)) Q:'SQ  D  Q:$L(X)
"RTN","RGSERGET",105,0)
 .F LP=0:0 S LP=$O(PARM("ASEQ",SQ,LP)) Q:'LP  D  Q:$L(X)
"RTN","RGSERGET",106,0)
 ..S PN=$P(PARM(LP,0),U)
"RTN","RGSERGET",107,0)
 ..X $G(PARM(LP,20))
"RTN","RGSERGET",108,0)
 Q X
"RTN","RGSERGET",109,0)
 ; Process parameters
"RTN","RGSERGET",110,0)
PROCPARM N LP
"RTN","RGSERGET",111,0)
 S LP=""
"RTN","RGSERGET",112,0)
 F  S LP=$O(RGNETREQ("PARAMS",LP)) D  Q:'$L(LP)
"RTN","RGSERGET",113,0)
 .S PARM=$O(@SER@(40,"B",$S($L(LP):LP,1:"@selector"),0))
"RTN","RGSERGET",114,0)
 .I 'PARM D:$L(LP) SETSTAT^RGNETWWW(403,"Unsupported search parameter: "_LP) S LP="" Q
"RTN","RGSERGET",115,0)
 .M PARM(PARM)=@SER@(40,PARM)
"RTN","RGSERGET",116,0)
 .S PARM("ASEQ",+$P(PARM(PARM,0),U,4),PARM)=""
"RTN","RGSERGET",117,0)
 Q
"RTN","RGSERGET",118,0)
 ; Process properties
"RTN","RGSERGET",119,0)
PROCPROP N LP,SQ
"RTN","RGSERGET",120,0)
 F SQ=0:0 S SQ=$O(PROP("ASEQ",SQ)) Q:'SQ  D
"RTN","RGSERGET",121,0)
 .F LP=0:0 S LP=$O(PROP("ASEQ",SQ,LP)) Q:'LP  D
"RTN","RGSERGET",122,0)
 ..N PN,FN,TP,VL,CTL
"RTN","RGSERGET",123,0)
 ..D EXTRP(.PROP,LP)
"RTN","RGSERGET",124,0)
 ..Q:TP="N"
"RTN","RGSERGET",125,0)
 ..I TP="M" D PROPM Q
"RTN","RGSERGET",126,0)
 ..I TP="T" D PROPT Q
"RTN","RGSERGET",127,0)
 ..D:$L(TP) @("PROP"_TP)^@RGSER("INTF")
"RTN","RGSERGET",128,0)
 Q
"RTN","RGSERGET",129,0)
 ; Process a multiple field
"RTN","RGSERGET",130,0)
PROPM D GET(.RGSER,CTL,","_IEN,PN,"M")
"RTN","RGSERGET",131,0)
 Q
"RTN","RGSERGET",132,0)
 ; Process a template property
"RTN","RGSERGET",133,0)
PROPT D TEMPLATE(CTL)
"RTN","RGSERGET",134,0)
 Q
"RTN","RGSERGET",135,0)
 ; Extracts property values
"RTN","RGSERGET",136,0)
EXTRP(SRC,LP) ;
"RTN","RGSERGET",137,0)
 N X,Y,Z,P
"RTN","RGSERGET",138,0)
 S X=SRC(LP,0),PN=$P(X,U),FN=$P(X,U,2),TP=$P(X,U,3),CTL=$G(SRC(LP,10))
"RTN","RGSERGET",139,0)
 S PN(0)=$P(PN,"!",2,9999),PN=$P(PN,"!")
"RTN","RGSERGET",140,0)
 F X=1:1:$L(FN,",") D
"RTN","RGSERGET",141,0)
 .S Y=$P(FN,",",X)
"RTN","RGSERGET",142,0)
 .I $L(Y) D
"RTN","RGSERGET",143,0)
 ..S VALS(FILE,IENS,Y)=$L($G(VALS(FILE,IENS,Y,"I")))
"RTN","RGSERGET",144,0)
 ..M:X=1 VL=VALS(FILE,IENS,Y)
"RTN","RGSERGET",145,0)
 ..M:X>1 VL(X)=VALS(FILE,IENS,Y)
"RTN","RGSERGET",146,0)
 Q
"RTN","RGSERGET",147,0)
 ; Returns the global root for the specified resource.
"RTN","RGSERGET",148,0)
GETGBL(PATH) ;
"RTN","RGSERGET",149,0)
 N SER,RES,N0
"RTN","RGSERGET",150,0)
 S SER=$$GETSER(PATH)
"RTN","RGSERGET",151,0)
 I SER<0 D SETSTAT^RGNETWWW($S(SER=-2:406,1:404)) Q ""
"RTN","RGSERGET",152,0)
 I '$G(RGSER("SER")) D
"RTN","RGSERGET",153,0)
 .S RGSER("SER")=SER,N0=^RGSER(998.1,SER,0)
"RTN","RGSERGET",154,0)
 .S RGSER("SERNM")=$P(N0,U),RGSER("INTF")=$P(N0,U,3),RGSER("VER")=$P(N0,U,4)
"RTN","RGSERGET",155,0)
 .D SETCTYPE^RGNETWWW($P($P(N0,U,2),","))
"RTN","RGSERGET",156,0)
 S RES=$$GETRES(PATH)
"RTN","RGSERGET",157,0)
 I 'RES D SETSTAT^RGNETWWW(404) Q ""
"RTN","RGSERGET",158,0)
 Q $NA(^RGSER(998.1,SER,10,RES))
"RTN","RGSERGET",159,0)
 ; Lookup serializer for path and content type.
"RTN","RGSERGET",160,0)
 ; Returns IEN of serializer, or
"RTN","RGSERGET",161,0)
 ;   -1 if no match by name
"RTN","RGSERGET",162,0)
 ;   -2 if no match by content type
"RTN","RGSERGET",163,0)
 ;   -3 if no match to active serializer
"RTN","RGSERGET",164,0)
GETSER(PATH) ;
"RTN","RGSERGET",165,0)
 N SERNM,SER,SERX,MTYPE,ACCPT,FND,WT,MWT,IEN
"RTN","RGSERGET",166,0)
 S SERNM=$P(PATH,"/"),SER=+$G(RGSER("SER"))
"RTN","RGSERGET",167,0)
 Q:'$L(SERNM) -1
"RTN","RGSERGET",168,0)
 Q:SER $S(SERNM="*":SER,SERNM=RGSER("SERNM"):SER,1:-3)
"RTN","RGSERGET",169,0)
 S ACCPT=$G(RGSER("FORMAT")),(FND,MWT,SERX)=0
"RTN","RGSERGET",170,0)
 F IEN=0:0 S IEN=$S(SER:SER,1:$O(^RGSER(998.1,"B",SERNM,IEN))) Q:'IEN  D  Q:MWT=1!SER
"RTN","RGSERGET",171,0)
 .S MTYPE=$P(^RGSER(998.1,IEN,0),U,2),WT=$$ISCTYPE^RGNETWWW(MTYPE,ACCPT),FND=1
"RTN","RGSERGET",172,0)
 .S:WT>MWT SERX=IEN,MWT=$S(WT>1:1,1:WT)
"RTN","RGSERGET",173,0)
 Q $S(SERX:SERX,FND:-2,1:-1)
"RTN","RGSERGET",174,0)
 ; Lookup resource for selected serializer
"RTN","RGSERGET",175,0)
 ; Returns IEN of resource or 0 if not found
"RTN","RGSERGET",176,0)
GETRES(PATH) ;
"RTN","RGSERGET",177,0)
 N START,IEN,LEN,LP,RES,D1,D2
"RTN","RGSERGET",178,0)
 S (START,LP)=$P(PATH,"/",2),PATH=$P(PATH,"/",2,999),D1=RGSER("SER"),RES=0,LEN=$L(START)
"RTN","RGSERGET",179,0)
 Q:'$L(START) 0
"RTN","RGSERGET",180,0)
 F  D  Q:RES  S LP=$O(^RGSER(998.1,D1,10,"B",LP)) Q:$E(LP,1,LEN)'=START
"RTN","RGSERGET",181,0)
 .F D2=0:0 S D2=$O(^RGSER(998.1,D1,10,"B",LP,D2)) Q:'D2  S PTRN=^(D2) D  Q:RES
"RTN","RGSERGET",182,0)
 ..S:$S($L(PTRN):$$ISMATCH^RGSER(PATH,PTRN),1:LP=PATH) RES=D2
"RTN","RGSERGET",183,0)
 Q RES
"RTN","RGSERGET",184,0)
 ; Build the list of fields to retrieve from
"RTN","RGSERGET",185,0)
 ; property or parameter list.
"RTN","RGSERGET",186,0)
BLDFLDS(FILE,SRC,FLD) ;
"RTN","RGSERGET",187,0)
 N PC,LP,FN,FN1,FN2,FNS
"RTN","RGSERGET",188,0)
 F LP=0:0 S LP=$O(SRC(LP)) Q:'LP  D
"RTN","RGSERGET",189,0)
 .S FNS=$P(SRC(LP,0),U,2)
"RTN","RGSERGET",190,0)
 .F PC=1:1:$L(FNS,",") D
"RTN","RGSERGET",191,0)
 ..S FN=$P(FNS,",",PC),FN1=$P(FN,"~"),FN2=$P(FN,"~",2)
"RTN","RGSERGET",192,0)
 ..D:$L(FN2) BLDFLD($$PTRTGT(FILE,FN1),FN1,FN2,.FLD)
"RTN","RGSERGET",193,0)
 ..D:$L(FN1) BLDFLD(FILE,0,FN1,.FLD)
"RTN","RGSERGET",194,0)
 Q
"RTN","RGSERGET",195,0)
BLDFLD(FILE,SB,FN,FLD) ;
"RTN","RGSERGET",196,0)
 Q:$E(FN)["@"
"RTN","RGSERGET",197,0)
 I FILE,FN'=+FN S FN=$$FLDNUM^DILFD(FILE,FN)
"RTN","RGSERGET",198,0)
 S FLD(SB)=$G(FLD(SB)),FLD(SB,0)=FILE
"RTN","RGSERGET",199,0)
 S:'$D(FLD(SB,FN)) FLD(SB)=FLD(SB)_$S($L(FLD(SB)):";",1:"")_FN,FLD(SB,FN)=1
"RTN","RGSERGET",200,0)
 Q
"RTN","RGSERGET",201,0)
 ; Get target file of pointer
"RTN","RGSERGET",202,0)
PTRTGT(FILE,FLD) ;
"RTN","RGSERGET",203,0)
 N X
"RTN","RGSERGET",204,0)
 S X=$$GET1^DID(FILE,FLD,,"POINTER")
"RTN","RGSERGET",205,0)
 Q +$S($L(X):$P(@(U_X_"0)"),U,2),1:0)
"RTN","RGSERGET",206,0)
 ; Search/filter logic.  Returns true if successful match.
"RTN","RGSERGET",207,0)
FILTER() N LP,SQ,PR,MATCH
"RTN","RGSERGET",208,0)
 S MATCH=1
"RTN","RGSERGET",209,0)
 F SQ=0:0 Q:'MATCH  S SQ=$O(PARM("ASEQ",SQ)) Q:'SQ  D
"RTN","RGSERGET",210,0)
 .F LP=0:0 Q:'MATCH  S LP=$O(PARM("ASEQ",SQ,LP)) Q:'LP  D
"RTN","RGSERGET",211,0)
 ..N PN,PN1,PN2,FN,TP,VL,CTL
"RTN","RGSERGET",212,0)
 ..D EXTRP(.PARM,LP)
"RTN","RGSERGET",213,0)
 ..I PN="@selector" X CTL Q
"RTN","RGSERGET",214,0)
 ..F PN1=0:0 Q:'MATCH  S PN1=$O(RGNETREQ("PARAMS",PN,PN1)) Q:'PN1  D
"RTN","RGSERGET",215,0)
 ...S MATCH=1
"RTN","RGSERGET",216,0)
 ...F PN2=0:0 S PN2=$O(RGNETREQ("PARAMS",PN,PN1,PN2)) Q:'PN2  D  Q:MATCH
"RTN","RGSERGET",217,0)
 ....N PVAL
"RTN","RGSERGET",218,0)
 ....M PVAL=RGNETREQ("PARAMS",PN,PN1,PN2)
"RTN","RGSERGET",219,0)
 ....I '$D(PVAL("I")) D
"RTN","RGSERGET",220,0)
 .....S PVAL("I")=1
"RTN","RGSERGET",221,0)
 .....D:$L(TP) @("INIT"_TP)
"RTN","RGSERGET",222,0)
 .....M RGNETREQ("PARAMS",PN,PN1,PN2)=PVAL
"RTN","RGSERGET",223,0)
 ....X CTL
"RTN","RGSERGET",224,0)
 ....D:$L(TP)&$D(PVAL) @("FILTER"_TP)
"RTN","RGSERGET",225,0)
 Q MATCH
"RTN","RGSERGET",226,0)
 ; Number
"RTN","RGSERGET",227,0)
INITN D EXTOPR("<>m")
"RTN","RGSERGET",228,0)
 Q
"RTN","RGSERGET",229,0)
FILTERN I PVAL'=+PVAL S MATCH=0
"RTN","RGSERGET",230,0)
 E  D DOCOMP("I")
"RTN","RGSERGET",231,0)
 Q
"RTN","RGSERGET",232,0)
 ; Date
"RTN","RGSERGET",233,0)
INITD D EXTOPR("<>m")
"RTN","RGSERGET",234,0)
 N DAT,TIM,TZ,X
"RTN","RGSERGET",235,0)
 I PVAL?4N1"-"2N1"-"2N.E D
"RTN","RGSERGET",236,0)
 .S TIM=$P(PVAL,"T",2,9999),DAT=$P(PVAL,"T"),DAT=$P(DAT,"-",2,3)_"-"_$P(DAT,"-")
"RTN","RGSERGET",237,0)
 .S X=$S($E(TIM,$L(TIM))="Z":"Z",TIM["-":"-",TIM["+":"+",1:"")
"RTN","RGSERGET",238,0)
 .S TZ=X_$P(TIM,X,2,9999),TIM=$P(TIM,X),PVAL=DAT
"RTN","RGSERGET",239,0)
 .S:$L(TIM) PVAL=PVAL_"@"_TIM
"RTN","RGSERGET",240,0)
 .I $L(TIM),$L(TZ) D
"RTN","RGSERGET",241,0)
 ..S X=$$TZ^XLFDT,TZ=X-$TR(TZ,":"),TZ(0)=TZ\100,TZ(1)=TZ-(TZ(0)*100)
"RTN","RGSERGET",242,0)
 D DT^DILF($S(PVAL["@":"TS",1:""),PVAL,.DAT)
"RTN","RGSERGET",243,0)
 I DAT>0,$D(TZ)>1 D
"RTN","RGSERGET",244,0)
 .S DAT=$$FMADD^XLFDT(DAT,0,TZ(0),TZ(1),0)
"RTN","RGSERGET",245,0)
 S PVAL=DAT
"RTN","RGSERGET",246,0)
 Q
"RTN","RGSERGET",247,0)
FILTERD I '$D(VL(2)) D DOCOMP("I") Q
"RTN","RGSERGET",248,0)
 D DOCOMPP("I")
"RTN","RGSERGET",249,0)
 Q
"RTN","RGSERGET",250,0)
 ; String
"RTN","RGSERGET",251,0)
INITS D EXTOPR("me","s")
"RTN","RGSERGET",252,0)
 S:PVAL("OPR")="s" PVAL=$$UP^XLFSTR(PVAL)
"RTN","RGSERGET",253,0)
 Q
"RTN","RGSERGET",254,0)
FILTERS D DOCOMP("E")
"RTN","RGSERGET",255,0)
 Q
"RTN","RGSERGET",256,0)
 ; Token
"RTN","RGSERGET",257,0)
INITT D EXTOPR("mt")
"RTN","RGSERGET",258,0)
 S:PVAL["|" PVAL(0)=$P(PVAL,"|"),PVAL=$P(PVAL,"|",2)
"RTN","RGSERGET",259,0)
 S:PVAL("OPR")="t" PVAL=$$UP^XLFSTR(PVAL)
"RTN","RGSERGET",260,0)
 Q
"RTN","RGSERGET",261,0)
FILTERT D DOCOMP($S(PVAL("OPR")="t":"E",1:"I"))
"RTN","RGSERGET",262,0)
 Q
"RTN","RGSERGET",263,0)
 ; Reference
"RTN","RGSERGET",264,0)
INITR D EXTOPR("m")
"RTN","RGSERGET",265,0)
 Q
"RTN","RGSERGET",266,0)
FILTERR D DOCOMP("I")
"RTN","RGSERGET",267,0)
 Q
"RTN","RGSERGET",268,0)
 ; Quantity
"RTN","RGSERGET",269,0)
INITQ D EXTOPR("<>m~")
"RTN","RGSERGET",270,0)
 Q
"RTN","RGSERGET",271,0)
FILTERQ D FILTERN
"RTN","RGSERGET",272,0)
 Q
"RTN","RGSERGET",273,0)
DOCOMP(IE) ;
"RTN","RGSERGET",274,0)
 D DOCOMPX($G(VL(IE)))
"RTN","RGSERGET",275,0)
 Q
"RTN","RGSERGET",276,0)
 ; Perform comparison against a period
"RTN","RGSERGET",277,0)
DOCOMPP(IE) ;
"RTN","RGSERGET",278,0)
 N START,END,OPR
"RTN","RGSERGET",279,0)
 S START=$G(VL(IE)),END=$G(VL(2,IE)),OPR=PVAL("OPR"),MATCH=0
"RTN","RGSERGET",280,0)
 I 'START,'END Q
"RTN","RGSERGET",281,0)
 I 'START D DOCOMPX(END) Q
"RTN","RGSERGET",282,0)
 I 'END D DOCOMPX(START) Q
"RTN","RGSERGET",283,0)
 I OPR["=" S MATCH=PVAL'<START&(PVAL'>END) Q:MATCH
"RTN","RGSERGET",284,0)
 I OPR["<" S MATCH=START<PVAL Q
"RTN","RGSERGET",285,0)
 I OPR[">" S MATCH=END>PVAL Q
"RTN","RGSERGET",286,0)
 Q
"RTN","RGSERGET",287,0)
 ; Perform comparison against search value
"RTN","RGSERGET",288,0)
DOCOMPX(VAL) ;
"RTN","RGSERGET",289,0)
 N OPR
"RTN","RGSERGET",290,0)
 S MATCH=0,OPR=PVAL("OPR")
"RTN","RGSERGET",291,0)
 I OPR["m" S MATCH='$L(VAL)=(PVAL="true") Q
"RTN","RGSERGET",292,0)
 I OPR["=" S MATCH=VAL=PVAL Q:MATCH
"RTN","RGSERGET",293,0)
 I OPR["<" S MATCH=VAL<PVAL Q
"RTN","RGSERGET",294,0)
 I OPR[">" S MATCH=VAL>PVAL Q
"RTN","RGSERGET",295,0)
 I OPR["e" S MATCH=VAL=PVAL Q
"RTN","RGSERGET",296,0)
 I OPR["~" D  Q
"RTN","RGSERGET",297,0)
 .N X1,X2,Y
"RTN","RGSERGET",298,0)
 .S Y=PVAL/10,X1=PVAL-Y,X2=PVAL+Y,MATCH=VAL'<X1&(X'>X2)
"RTN","RGSERGET",299,0)
 I OPR["s" D  Q
"RTN","RGSERGET",300,0)
 .S VAL=$$UP^XLFSTR($E(VAL,1,$L(PVAL))),MATCH=VAL=PVAL
"RTN","RGSERGET",301,0)
 I OPR["t" D  Q
"RTN","RGSERGET",302,0)
 .S MATCH=$$UP^XLFSTR(VAL)[PVAL
"RTN","RGSERGET",303,0)
 Q
"RTN","RGSERGET",304,0)
 ; Name comparison
"RTN","RGSERGET",305,0)
OPRNAME(VAL,PC) ;
"RTN","RGSERGET",306,0)
 N X,Y
"RTN","RGSERGET",307,0)
 S VAL=$P(VAL,",",PC)
"RTN","RGSERGET",308,0)
 F X=1:1:$L(VAL," ") D  Q:MATCH
"RTN","RGSERGET",309,0)
 .S Y=$P(VAL," ",X)
"RTN","RGSERGET",310,0)
 .D:$L(Y) DOCOMPX(Y)
"RTN","RGSERGET",311,0)
 Q
"RTN","RGSERGET",312,0)
 ; Extract optional operator from search parameter
"RTN","RGSERGET",313,0)
EXTOPR(ALLOWED,DFLT) ;
"RTN","RGSERGET",314,0)
 N X,OPR
"RTN","RGSERGET",315,0)
 S OPR=$G(PVAL("OPR"))
"RTN","RGSERGET",316,0)
 F X="<=",">=","<",">","~" I ALLOWED[$E(X),$E(PVAL,1,$L(X))=X D  Q
"RTN","RGSERGET",317,0)
 .I '$L(OPR) S OPR=X,PVAL=$E(PVAL,$L(X)+1,9999)
"RTN","RGSERGET",318,0)
 .E  D SETSTAT^RGNETWWW(403,"Invalid comparator on query string")
"RTN","RGSERGET",319,0)
 S PVAL("OPR")=$S($L(OPR):OPR,1:$G(DFLT,"="))
"RTN","RGSERGET",320,0)
 Q
"RTN","RGSERGET",321,0)
 ; Creates a new instance of an iterator
"RTN","RGSERGET",322,0)
 ; EP = entry point (tag or tag^routine)
"RTN","RGSERGET",323,0)
 ; Note: entry point will be invoked immediately via a DO
"RTN","RGSERGET",324,0)
 ; to permit initialization.
"RTN","RGSERGET",325,0)
NEWITER(EP) ;
"RTN","RGSERGET",326,0)
 S:$E(EP,1,2)="$$" EP=$E(EP,3,99)
"RTN","RGSERGET",327,0)
 S EP=EP_"("_$QS($$TMPGBL^RGNETWWW,3)_")"
"RTN","RGSERGET",328,0)
 D @EP
"RTN","RGSERGET",329,0)
 Q "$$"_EP
"RTN","RGSERGET",330,0)
 ; Iterator implementation for traversing a cross reference
"RTN","RGSERGET",331,0)
XREFITER(CTX,ROOT,START,TST) ;
"RTN","RGSERGET",332,0)
 S CTX=$$TMPGBL^RGNETWWW(CTX)
"RTN","RGSERGET",333,0)
 I '$Q D  Q
"RTN","RGSERGET",334,0)
 .S START=$$UP^XLFSTR(START)
"RTN","RGSERGET",335,0)
 .S @CTX@("IEN")=0,^("ROOT")=ROOT,(^("START"),^("LAST"))=START,^("TST")=$G(TST,"I 1")
"RTN","RGSERGET",336,0)
 N LAST,IEN
"RTN","RGSERGET",337,0)
 S IEN=@CTX@("IEN"),START=^("START"),LAST=^("LAST"),TST=^("TST"),ROOT=^("ROOT")
"RTN","RGSERGET",338,0)
 F  D  Q:IEN
"RTN","RGSERGET",339,0)
 .S:$L(LAST) IEN=+$O(@ROOT@(LAST,IEN)),@CTX@("IEN")=IEN
"RTN","RGSERGET",340,0)
 .Q:IEN
"RTN","RGSERGET",341,0)
 .S LAST=$O(@ROOT@(LAST)),@CTX@("LAST")=LAST
"RTN","RGSERGET",342,0)
 .I 0
"RTN","RGSERGET",343,0)
 .X:$L(LAST) TST
"RTN","RGSERGET",344,0)
 .S:'$T IEN=-1
"RTN","RGSERGET",345,0)
 Q $S(IEN>0:IEN,1:0)
"RTN","RGSERGET",346,0)
 ; Iterator implementation for traversing a name cross references
"RTN","RGSERGET",347,0)
NAMEITER(CTX,ROOT) ;
"RTN","RGSERGET",348,0)
 I '$Q D XREFITER(CTX,ROOT,$$GETPARAM^RGNETWWW("family"),"I $E($P(LAST,"",""),1,$L(START))=START") Q
"RTN","RGSERGET",349,0)
 Q $$XREFITER(CTX)
"RTN","RGSERGET",350,0)
 ; Return a cohort based on a xref
"RTN","RGSERGET",351,0)
 ; PARAM = Name of search parameter
"RTN","RGSERGET",352,0)
 ; GBL = Root of xref
"RTN","RGSERGET",353,0)
 ; OFF = Offset to subscript containing IEN (defaults to 0)
"RTN","RGSERGET",354,0)
COHORT(PARAM,GBL,OFF) ;
"RTN","RGSERGET",355,0)
 N LP,TMP
"RTN","RGSERGET",356,0)
 S OFF=+$G(OFF),LP=$O(RGNETREQ("PARAMS",PARAM,1,0)),TMP=$$TMPGBL^RGNETWWW
"RTN","RGSERGET",357,0)
 I 'OFF,LP,'$O(RGNETREQ("PARAMS",PARAM,1,LP)) Q $$GBLROOT(RGNETREQ("PARAMS",PARAM,1,LP),GBL)
"RTN","RGSERGET",358,0)
 F LP=0:0 S LP=$O(RGNETREQ("PARAMS",PARAM,1,LP)) Q:'LP  D COHORT2(RGNETREQ("PARAMS",PARAM,1,LP),GBL,OFF,TMP)
"RTN","RGSERGET",359,0)
 Q TMP
"RTN","RGSERGET",360,0)
 ; Return a cohort based on a xref
"RTN","RGSERGET",361,0)
 ; IDX = Value of indexed entry
"RTN","RGSERGET",362,0)
 ; GBL = Root of xref
"RTN","RGSERGET",363,0)
 ; OFF = Offset to subscript containing IEN (defaults to 0)
"RTN","RGSERGET",364,0)
COHORT2(IDX,GBL,OFF,TMP) ;
"RTN","RGSERGET",365,0)
 S TMP=$$COHORT3($$GBLROOT(IDX,GBL),.OFF,.TMP)
"RTN","RGSERGET",366,0)
 Q:$Q TMP
"RTN","RGSERGET",367,0)
 Q
"RTN","RGSERGET",368,0)
 ; Return a cohort from a global root
"RTN","RGSERGET",369,0)
 ; GBL = Root of global
"RTN","RGSERGET",370,0)
 ; OFF = Offset to subscript containing IEN (defaults to 0)
"RTN","RGSERGET",371,0)
 ; Internal entry point
"RTN","RGSERGET",372,0)
COHORT3(GBL,OFF,TMP) ;
"RTN","RGSERGET",373,0)
 N X,L,S,I,QL
"RTN","RGSERGET",374,0)
 S:'$D(TMP) TMP=$$TMPGBL^RGNETWWW
"RTN","RGSERGET",375,0)
 S OFF=+$G(OFF),QL=$QL(GBL)+OFF+1
"RTN","RGSERGET",376,0)
 I 'OFF M @TMP=@GBL Q
"RTN","RGSERGET",377,0)
 S X=GBL,L=$QL(X),S=""
"RTN","RGSERGET",378,0)
 F  S X=$Q(@X) Q:'$L(X)  Q:$NA(@X,L)'=GBL  D
"RTN","RGSERGET",379,0)
 .S I=$QS(X,QL)
"RTN","RGSERGET",380,0)
 .I $L(I),I'=S S S=I,@TMP@(S)=""
"RTN","RGSERGET",381,0)
 Q:$Q TMP
"RTN","RGSERGET",382,0)
 Q
"RTN","RGSERGET",383,0)
 ; Returns global root for indexed entries.
"RTN","RGSERGET",384,0)
 ; IDX = Index of entries
"RTN","RGSERGET",385,0)
 ; GBL = Global root.  If contains "*", index value is placed there.
"RTN","RGSERGET",386,0)
 ;       Otherwise, index value is placed at end.
"RTN","RGSERGET",387,0)
GBLROOT(IDX,GBL) ;
"RTN","RGSERGET",388,0)
 Q:GBL'["*" $NA(@GBL@(IDX))
"RTN","RGSERGET",389,0)
 S GBL=$P(GBL,"*")_IDX_$P(GBL,"*",2,9999)
"RTN","RGSERGET",390,0)
 Q $NA(@GBL)
"RTN","RGSERGET",391,0)
 ; Process a compartment request
"RTN","RGSERGET",392,0)
COMPRT(GBL,EXC) ;
"RTN","RGSERGET",393,0)
 D:$L(SLCT) PARSEQS^RGNETWWW("_id="_SLCT)
"RTN","RGSERGET",394,0)
 S:'$G(EXC) GBL=$NA(@GBL@($P(PATH,"/",3)))
"RTN","RGSERGET",395,0)
 D GET(.RGSER,$P(PATH,"/")_"/"_$P(PATH,"/",4),GBL,.PNAME,FLAGS)
"RTN","RGSERGET",396,0)
 Q
"RTN","RGSERGET",397,0)
 ; Process a compound id (#-#) selector
"RTN","RGSERGET",398,0)
COMPID N ID1,ID2
"RTN","RGSERGET",399,0)
 S ID1=$P(SLCT,"-"),ID2=$P(SLCT,"-",2,9999)
"RTN","RGSERGET",400,0)
 I '$L(ID1)!'$L(ID2) D
"RTN","RGSERGET",401,0)
 .D SETSTAT^RGNETWWW(404)
"RTN","RGSERGET",402,0)
 E  D GET(.RGSER,PATH_"_"_ID1,ID2,.PNAME,"S")
"RTN","RGSERGET",403,0)
 Q
"RTN","RGSERGET",404,0)
 ; Process a template
"RTN","RGSERGET",405,0)
 ;   NAME = Template name
"RTN","RGSERGET",406,0)
 ;   RESN = The resource name or ien (defaults to current resource)
"RTN","RGSERGET",407,0)
 ; Template may contain replaceable fields using |xxx| format, where xxx may be:
"RTN","RGSERGET",408,0)
 ;   A field reference in the format: name or name,[I or E]
"RTN","RGSERGET",409,0)
 ;     where I indicates the internal value and E the external.
"RTN","RGSERGET",410,0)
 ;   An expression in the format: @expression or #expression
"RTN","RGSERGET",411,0)
 ;     where @ causes the result to be escaped, # does not.
"RTN","RGSERGET",412,0)
TEMPLATE(NAME,RESN) ;
"RTN","RGSERGET",413,0)
 N TMPL,SERX,LP,LN,LN1,LN2,X,Y
"RTN","RGSERGET",414,0)
 I $D(RESN)#2 D  Q:'$D(SERX)
"RTN","RGSERGET",415,0)
 .S:RESN'=+RESN RESN=$O(^RGSER(998.1,RGSER("SER"),10,"B",RESN,0))
"RTN","RGSERGET",416,0)
 .S:RESN SERX=$NA(^RGSER(998.1,RGSER("SER"),10,RESN))
"RTN","RGSERGET",417,0)
 E  S SERX=SER
"RTN","RGSERGET",418,0)
 S TMPL=$O(@SERX@(50,"B",NAME,0))
"RTN","RGSERGET",419,0)
 Q:'TMPL
"RTN","RGSERGET",420,0)
 F LP=0:0 S LP=$O(@SERX@(50,TMPL,1,LP)) Q:'LP  S LN=^(LP,0) D
"RTN","RGSERGET",421,0)
 .F  Q:LN'["|"  D
"RTN","RGSERGET",422,0)
 ..S LN1=$P(LN,"|"),X=$P(LN,"|",2),LN2=$P(LN,"|",3,9999)
"RTN","RGSERGET",423,0)
 ..S Y=$E(X)
"RTN","RGSERGET",424,0)
 ..I Y="@"!(Y="#") D
"RTN","RGSERGET",425,0)
 ...S @("X="_$E(X,2,9999))
"RTN","RGSERGET",426,0)
 ...S:Y="@" X=$$ESCAPE^RGSER(X)
"RTN","RGSERGET",427,0)
 ..E  D
"RTN","RGSERGET",428,0)
 ...S Y=$P(X,",",2),X=$P(X,",")
"RTN","RGSERGET",429,0)
 ...S X=$G(VALS(FILE,IENS,X,$S($L(Y):Y,1:"E")))
"RTN","RGSERGET",430,0)
 ...S X=$$ESCAPE^RGSER(X)
"RTN","RGSERGET",431,0)
 ..S LN=LN1_X_LN2
"RTN","RGSERGET",432,0)
 .D ADD^RGNETWWW(LN)
"RTN","RGSERGET",433,0)
 Q
"RTN","RGSERGET",434,0)
 ; Retrieve description for end point
"RTN","RGSERGET",435,0)
GETDSC(SERNM) ;
"RTN","RGSERGET",436,0)
 N SER,LP
"RTN","RGSERGET",437,0)
 S SER=$$GETSER(SERNM)
"RTN","RGSERGET",438,0)
 I SER'>0 D SETSTAT^RGNETWWW(404) Q
"RTN","RGSERGET",439,0)
 D SETCTYPE^RGNETWWW("text/html")
"RTN","RGSERGET",440,0)
 D ADDARY^RGSER($NA(^RGSER(998.1,SER,99)),"WR")
"RTN","RGSERGET",441,0)
 Q
"RTN","RGSERLAB")
0^6^B13473128
"RTN","RGSERLAB",1,0)
RGSERLAB ;RI/CBMI/DKM - Return lab observations. ;31-Mar-2015 19:01;DKM
"RTN","RGSERLAB",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERLAB",3,0)
 ;=================================================================
"RTN","RGSERLAB",4,0)
 ; Return lab results
"RTN","RGSERLAB",5,0)
EN(RESULTS,DFN,ID,BEG,END,MAX) ;
"RTN","RGSERLAB",6,0)
 N LRDFN,LRIDT,LRSUB,LRSEQ,LR0
"RTN","RGSERLAB",7,0)
 I $L($G(ID)) D
"RTN","RGSERLAB",8,0)
 .S LRSUB=$P(ID,"-")
"RTN","RGSERLAB",9,0)
 .I "^CH^MI^AP^"'[(U_LRSUB_U) S DFN=0 Q
"RTN","RGSERLAB",10,0)
 .S LRDFN=+$P(ID,"-",3),LRIDT=$P(ID,"-",2),LR0=$G(^LR(LRDFN,0))
"RTN","RGSERLAB",11,0)
 .I $P(LR0,U,2)'=2 S DFN=0 Q
"RTN","RGSERLAB",12,0)
 .I '$G(DFN) S DFN=+$P(LR0,U,3) Q
"RTN","RGSERLAB",13,0)
 .I DFN'=$P(LR0,U,3) S DFN=0 Q
"RTN","RGSERLAB",14,0)
 .S (BEG,END)=9999999-LRIDT
"RTN","RGSERLAB",15,0)
 E  S DFN=+$G(DFN),LRDFN=$G(^DPT(DFN,"LR")),LRSUB=""
"RTN","RGSERLAB",16,0)
 Q:'DFN
"RTN","RGSERLAB",17,0)
 Q:'LRDFN
"RTN","RGSERLAB",18,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","RGSERLAB",19,0)
 D RR^LR7OR1(DFN,,BEG,END,LRSUB,,,MAX)
"RTN","RGSERLAB",20,0)
 S LRSUB=""
"RTN","RGSERLAB",21,0)
 F  S LRSUB=$O(^TMP("LRRR",$J,DFN,LRSUB)),LRIDT=0 Q:LRSUB=""  D  Q:MAX'>0
"RTN","RGSERLAB",22,0)
 .F  S LRIDT=$O(^TMP("LRRR",$J,DFN,LRSUB,LRIDT)) Q:'LRIDT  D  Q:MAX'>0
"RTN","RGSERLAB",23,0)
 ..S LR0=$G(^LR(LRDFN,LRSUB,LRIDT,0)),LRSEQ=0
"RTN","RGSERLAB",24,0)
 ..F  S LRSEQ=$O(^TMP("LRRR",$J,DFN,LRSUB,LRIDT,LRSEQ)) Q:'LRSEQ  D PROCESS(^(LRSEQ)) Q:MAX'>0
"RTN","RGSERLAB",25,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","RGSERLAB",26,0)
 Q
"RTN","RGSERLAB",27,0)
 ; Process an entry
"RTN","RGSERLAB",28,0)
 ; AU: LUNG,LT (gm)^200^^^^F^^^^^^^^^LUNG,LT (gm)^200^^^;AU;
"RTN","RGSERLAB",29,0)
 ; CH: 179^2^L*^meq/L^23 - 31^F^^^82830.0000^Carbon Dioxide Content^99NLT^11733^^^CO2^CH 0917 3^1209^^72"
"RTN","RGSERLAB",30,0)
 ; CY: GROSS DESCRIPTION^Swab for PAP smear^^^^I^^TX^^^&GDT^^^^GROSS DESCRIPTION^^^;CY;7039672.99999
"RTN","RGSERLAB",31,0)
 ; EM: ORGAN/TISSUE^LYMPH NODE^^^^F^1^CE^08000^SNM^&ANT^^^^ORG/TISS^^^;EM;7049691
"RTN","RGSERLAB",32,0)
 ; MI: URINE SCREEN^Positive^^^^P^^^^^^^^^URINE SCREEN^^^;MI;7079882.8562^71
"RTN","RGSERLAB",33,0)
 ; MI: ORGANISM^ESCHERICHIA COLI;3+ ^^^^P^^^^^^^^^ORGANISM^^^;MI;7079882.8562^71
"RTN","RGSERLAB",34,0)
 ; MI: R^R^^^^P^^^^^^^^^R^^^;MI;7079882.8562^71
"RTN","RGSERLAB",35,0)
 ; SP: MORPHOLOGY^NEGATIVE FOR MALIGNANT CELLS^^^^F^1^CE^09460^SNM^&IMP^^^^_MORPH^^^;SP;7049482
"RTN","RGSERLAB",36,0)
PROCESS(LRX) ;
"RTN","RGSERLAB",37,0)
 N ANID,ARY,LRN,X
"RTN","RGSERLAB",38,0)
 S LRN=+$P($P($G(^LAB(60,+LRX,0)),U,5),";",2)
"RTN","RGSERLAB",39,0)
 S ANID=LRSUB_"-"_LRIDT_"-"_LRDFN_"-"_$S(LRN:LRN,1:LRSEQ)
"RTN","RGSERLAB",40,0)
 I $L($G(ID)),ID'=ANID Q
"RTN","RGSERLAB",41,0)
 S ARY=$$ARY^RGSEROBS(RESULTS),MAX=MAX-1
"RTN","RGSERLAB",42,0)
 D PUT("id",ANID)
"RTN","RGSERLAB",43,0)
 D PUT("collected",9999999-LRIDT)
"RTN","RGSERLAB",44,0)
 S X=$P(LR0,U,3)
"RTN","RGSERLAB",45,0)
 D PUT("issued",X)
"RTN","RGSERLAB",46,0)
 D PUT("status","final")
"RTN","RGSERLAB",47,0)
 D PUT("reliability","ok")
"RTN","RGSERLAB",48,0)
 D PUT("value",$P(LRX,U,2))
"RTN","RGSERLAB",49,0)
 D PUT("interpretation",$P(LRX,U,3))
"RTN","RGSERLAB",50,0)
 D PUT("units",$P(LRX,U,4))
"RTN","RGSERLAB",51,0)
 S X=$P(LRX,U,5)
"RTN","RGSERLAB",52,0)
 D PUT("low",$P(X," - ")),PUT("high",$P(X," - ",2))
"RTN","RGSERLAB",53,0)
 D PUT("localName",$P(LRX,U,15))
"RTN","RGSERLAB",54,0)
 S LOINC=$S(LRN:+$P($P(^LR(LRDFN,LRSUB,LRIDT,LRN),U,3),"!",3),1:"")
"RTN","RGSERLAB",55,0)
 S X=+$P(LRX,U,19)
"RTN","RGSERLAB",56,0)
 I X D  ;specimen
"RTN","RGSERLAB",57,0)
 .D PUT("specimen",$$GET1^DIQ(61,X_",",2),$$GET1^DIQ(61,X_",",4.1)) ;SNOMED
"RTN","RGSERLAB",58,0)
 .D PUT("sample",$$GET1^DIQ(61,X_",",4.1))
"RTN","RGSERLAB",59,0)
 .S:'LOINC LOINC=$$GET1^DIQ(60.01,X_","_+LRX_",",95.3)
"RTN","RGSERLAB",60,0)
 I LOINC D
"RTN","RGSERLAB",61,0)
 .D PUT("code",$$GET1^DIQ(95.3,LOINC_",",.01),$$GET1^DIQ(95.3,LOINC_",",80))
"RTN","RGSERLAB",62,0)
 .D PUT("code_system","http://loinc.org/")
"RTN","RGSERLAB",63,0)
 E  I LRX D
"RTN","RGSERLAB",64,0)
 .D FILE^RGSEROBS("code",+LRX,60)
"RTN","RGSERLAB",65,0)
 .D PUT("code_system",$$LOCALSYS^RGSER("lab"))
"RTN","RGSERLAB",66,0)
 E  D
"RTN","RGSERLAB",67,0)
 .S X=$P(LRX,U)
"RTN","RGSERLAB",68,0)
 .S:'$L(X) X=$P(LRX,U,15)
"RTN","RGSERLAB",69,0)
 .D PUT("code",$S($L(X):X,1:"UNKNOWN"))
"RTN","RGSERLAB",70,0)
 .D PUT("code_system",$$LOCALSYS^RGSER("lab"))
"RTN","RGSERLAB",71,0)
 S X=$P(LRX,U,16)
"RTN","RGSERLAB",72,0)
 D PUT("groupID",X)
"RTN","RGSERLAB",73,0)
 D PUT("type",$S(LRSUB="CH":$$TYPE($P(X," ")),1:LRSUB))
"RTN","RGSERLAB",74,0)
 S X=+$P(LRX,U,17)
"RTN","RGSERLAB",75,0)
 D:X PUT("labOrderID",X)
"RTN","RGSERLAB",76,0)
 S X=$$ORDER(X,+LRX)
"RTN","RGSERLAB",77,0)
 D:X PUT("orderID",X)
"RTN","RGSERLAB",78,0)
 D FILE^RGSEROBS("patient",DFN,2)
"RTN","RGSERLAB",79,0)
 D FACILITY^RGSEROBS($P(LR0,U,14))
"RTN","RGSERLAB",80,0)
 D COMMENT
"RTN","RGSERLAB",81,0)
 Q
"RTN","RGSERLAB",82,0)
 ; Return #100 order given order # and test.
"RTN","RGSERLAB",83,0)
ORDER(LABORD,TEST) ;
"RTN","RGSERLAB",84,0)
 N Y,D,S,T
"RTN","RGSERLAB",85,0)
 S Y="",D=$O(^LRO(69,"C",LABORD,0))
"RTN","RGSERLAB",86,0)
 I D D
"RTN","RGSERLAB",87,0)
 .S S=0
"RTN","RGSERLAB",88,0)
 .F  S S=$O(^LRO(69,"C",LABORD,D,S)),T=0 Q:S<1  D  Q:Y
"RTN","RGSERLAB",89,0)
 ..F  S T=$O(^LRO(69,D,1,S,2,T)) Q:T<1  I +$G(^(T,0))=TEST S Y=+$P(^(0),U,7) Q
"RTN","RGSERLAB",90,0)
 Q Y
"RTN","RGSERLAB",91,0)
 ; Process comment (if any)
"RTN","RGSERLAB",92,0)
COMMENT N CMNT,LP,X
"RTN","RGSERLAB",93,0)
 S (LP,CMNT)=""
"RTN","RGSERLAB",94,0)
 F  S LP=$O(^TMP("LRRR",$J,DFN,LRSUB,LRIDT,"N",LP)) Q:'$L(LP)  S X=$G(^(LP))_$G(^(LP,0)) D
"RTN","RGSERLAB",95,0)
 .S CMNT=CMNT_$S($L(CMNT):$C(13,10),1:"")_X
"RTN","RGSERLAB",96,0)
 D PUT("comments",CMNT)
"RTN","RGSERLAB",97,0)
 Q
"RTN","RGSERLAB",98,0)
 ; Return name of lab section
"RTN","RGSERLAB",99,0)
TYPE(X) N LPY,Y
"RTN","RGSERLAB",100,0)
 S Y=X
"RTN","RGSERLAB",101,0)
 D FIND^DIC(68,,.01,"PQX",X,,"B",,,"LPY")
"RTN","RGSERLAB",102,0)
 S:$G(LPY("DILIST",1,0)) Y=$P(LPY("DILIST",1,0),U,2) ;name
"RTN","RGSERLAB",103,0)
 Q Y
"RTN","RGSERLAB",104,0)
 ; Write to target array
"RTN","RGSERLAB",105,0)
PUT(NAME,INTERNAL,EXTERNAL) ;
"RTN","RGSERLAB",106,0)
 D PUT^RGSEROBS(.NAME,.INTERNAL,.EXTERNAL)
"RTN","RGSERLAB",107,0)
 Q
"RTN","RGSEROBS")
0^7^B16358628
"RTN","RGSEROBS",1,0)
RGSEROBS ;RI/CBMI/DKM - Return observations in intermediate format. ;01-Apr-2015 16:50;DKM
"RTN","RGSEROBS",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSEROBS",3,0)
 ;=================================================================
"RTN","RGSEROBS",4,0)
OBS(DFN,ID,BEG,END,MAX) ;
"RTN","RGSEROBS",5,0)
 N RTN
"RTN","RGSEROBS",6,0)
 S RTN=$$TMPGBL^RGNETWWW,DFN=$G(DFN),ID=$G(ID),BEG=$G(BEG,1410101),END=$G(END,9999998)
"RTN","RGSEROBS",7,0)
 S MAX=$S($L(ID):1,1:$G(MAX,999999))
"RTN","RGSEROBS",8,0)
 D:'$$ISMAX EN^RGSERLAB(RTN,DFN,ID,BEG,END,MAX)
"RTN","RGSEROBS",9,0)
 D:'$$ISMAX EN^RGSERVIT(RTN,DFN,ID,BEG,END,MAX)
"RTN","RGSEROBS",10,0)
 S RGSER("RGSEROBS")=RTN
"RTN","RGSEROBS",11,0)
 Q RTN
"RTN","RGSEROBS",12,0)
 ; Retrieve data
"RTN","RGSEROBS",13,0)
RETRIEVE ; Merge into VALS
"RTN","RGSEROBS",14,0)
 S:'$D(RGSER("RGSEROBS")) RGSER("RGSEROBS")=$$OBS(,ID),IEN=1
"RTN","RGSEROBS",15,0)
 M VALS(0,IENS)=@RGSER("RGSEROBS")@(IEN)
"RTN","RGSEROBS",16,0)
 Q
"RTN","RGSEROBS",17,0)
 ; Return true if maximum observations returned
"RTN","RGSEROBS",18,0)
ISMAX() Q $O(@RTN@(""),-1)'<MAX
"RTN","RGSEROBS",19,0)
 ; Return vuid
"RTN","RGSEROBS",20,0)
VUID(IEN,FILE) ;
"RTN","RGSEROBS",21,0)
 Q $$GET1^DIQ(FILE,IEN_",",99.99)
"RTN","RGSEROBS",22,0)
 ; Ouput a file entry
"RTN","RGSEROBS",23,0)
FILE(NAME,IEN,FILE,FLD) ;
"RTN","RGSEROBS",24,0)
 D:IEN PUT(NAME,IEN,$$GET1^DIQ(FILE,+IEN,$G(FLD,.01)))
"RTN","RGSEROBS",25,0)
 Q
"RTN","RGSEROBS",26,0)
 ; Output facility
"RTN","RGSEROBS",27,0)
FACILITY(X) ;
"RTN","RGSEROBS",28,0)
 N P1,P2
"RTN","RGSEROBS",29,0)
 I $G(X) S P1=$$STA^XUAF4(X),P2=$P($$NS^XUAF4(X),U)
"RTN","RGSEROBS",30,0)
 E  S X=$$SITE^VASITE,P1=$P(X,U,2),P2=$P(X,U)
"RTN","RGSEROBS",31,0)
 D PUT("facility",P1,P2)
"RTN","RGSEROBS",32,0)
 Q
"RTN","RGSEROBS",33,0)
 ; Get array base
"RTN","RGSEROBS",34,0)
ARY(ARY) ;
"RTN","RGSEROBS",35,0)
 N X
"RTN","RGSEROBS",36,0)
 S X=$O(@ARY@(""),-1)+1
"RTN","RGSEROBS",37,0)
 Q $NA(@ARY@(X))
"RTN","RGSEROBS",38,0)
 ; Write to target array
"RTN","RGSEROBS",39,0)
PUT(NAME,INTERNAL,EXTERNAL) ;
"RTN","RGSEROBS",40,0)
 I $L($G(INTERNAL)) D
"RTN","RGSEROBS",41,0)
 .S @ARY@(NAME,"I")=INTERNAL
"RTN","RGSEROBS",42,0)
 .S @ARY@(NAME,"E")=$S($D(EXTERNAL)#2:EXTERNAL,1:INTERNAL)
"RTN","RGSEROBS",43,0)
 Q
"RTN","RGSEROBS",44,0)
 ; Output value (XML)
"RTN","RGSEROBS",45,0)
VALUEXML(VALUE,UNITS) ;
"RTN","RGSEROBS",46,0)
 Q:'$L($G(VALUE))
"RTN","RGSEROBS",47,0)
 I '$$ISNUM^RGUT(VALUE) D
"RTN","RGSEROBS",48,0)
 .D PUT^RGSEXML("valueString",VALUE)
"RTN","RGSEROBS",49,0)
 E  D
"RTN","RGSEROBS",50,0)
 .D NEWTAG^RGSEXML("valueQuantity")
"RTN","RGSEROBS",51,0)
 .D PUT^RGSEXML("value",VALUE)
"RTN","RGSEROBS",52,0)
 .I $L($G(UNITS)) D
"RTN","RGSEROBS",53,0)
 ..D PUT^RGSEXML("units",UNITS)
"RTN","RGSEROBS",54,0)
 ..D PUT^RGSEXML("code",UNITS)
"RTN","RGSEROBS",55,0)
 ..D PUT^RGSEXML("system","http://unitsofmeasure.org/")
"RTN","RGSEROBS",56,0)
 .D ENDTAG^RGSEXML("valueQuantity")
"RTN","RGSEROBS",57,0)
 Q
"RTN","RGSEROBS",58,0)
 ; Output value (JSON)
"RTN","RGSEROBS",59,0)
VALUEJSN(VALUE,UNITS) ;
"RTN","RGSEROBS",60,0)
 Q:'$L($G(VALUE))
"RTN","RGSEROBS",61,0)
 I '$$ISNUM^RGUT(VALUE) D
"RTN","RGSEROBS",62,0)
 .D PUT^RGSEJSON("valueString",VALUE)
"RTN","RGSEROBS",63,0)
 E  D
"RTN","RGSEROBS",64,0)
 .D NEWOBJ^RGSEJSON("valueQuantity")
"RTN","RGSEROBS",65,0)
 .D PUTRAW^RGSEJSON("value",VALUE)
"RTN","RGSEROBS",66,0)
 .I $L($G(UNITS)) D
"RTN","RGSEROBS",67,0)
 ..D PUT^RGSEJSON("units",UNITS)
"RTN","RGSEROBS",68,0)
 ..D PUT^RGSEJSON("code",UNITS)
"RTN","RGSEROBS",69,0)
 ..D PUT^RGSEJSON("system","http://unitsofmeasure.org/")
"RTN","RGSEROBS",70,0)
 .D ENDOBJ^RGSEJSON("valueQuantity")
"RTN","RGSEROBS",71,0)
 Q
"RTN","RGSEROBS",72,0)
 ; Return adusted reference range
"RTN","RGSEROBS",73,0)
REFRANGE(LOW,HIGH) ;
"RTN","RGSEROBS",74,0)
 S LOW=$G(VL("I")),HIGH=$G(VL(2,"I"))
"RTN","RGSEROBS",75,0)
 I $L(LOW),'$$ISNUM^RGUT(LOW) S LOW=""
"RTN","RGSEROBS",76,0)
 I $L(HIGH),'$$ISNUM^RGUT(HIGH) S HIGH=""
"RTN","RGSEROBS",77,0)
 Q $L(LOW)!$L(HIGH)
"RTN","RGSEROBS",78,0)
 ; Output reference range (XML)
"RTN","RGSEROBS",79,0)
RANGEXML(LOW,HIGH) ;
"RTN","RGSEROBS",80,0)
 Q:'$$REFRANGE(.LOW,.HIGH)
"RTN","RGSEROBS",81,0)
 D NEWTAG^RGSEXML(PN)
"RTN","RGSEROBS",82,0)
 D:$L(LOW) NEWTAG^RGSEXML("low"),PUT^RGSEXML("value",LOW),ENDTAG^RGSEXML("low")
"RTN","RGSEROBS",83,0)
 D:$L(HIGH) NEWTAG^RGSEXML("high"),PUT^RGSEXML("value",HIGH),ENDTAG^RGSEXML("high")
"RTN","RGSEROBS",84,0)
 D ENDTAG^RGSEXML(PN)
"RTN","RGSEROBS",85,0)
 Q
"RTN","RGSEROBS",86,0)
 ; Output reference range (JSON)
"RTN","RGSEROBS",87,0)
RANGEJSN(LOW,HIGH) ;
"RTN","RGSEROBS",88,0)
 Q:'$$REFRANGE(.LOW,.HIGH)
"RTN","RGSEROBS",89,0)
 D NEWARY^RGSEJSON(PN),NEWOBJ^RGSEJSON
"RTN","RGSEROBS",90,0)
 D:$L(LOW) NEWOBJ^RGSEJSON("low"),PUTAUTO^RGSEJSON("value",LOW),ENDOBJ^RGSEJSON("low")
"RTN","RGSEROBS",91,0)
 D:$L(HIGH) NEWOBJ^RGSEJSON("high"),PUTAUTO^RGSEJSON("value",HIGH),ENDOBJ^RGSEJSON("high")
"RTN","RGSEROBS",92,0)
 D ENDARY^RGSEJSON(PN)
"RTN","RGSEROBS",93,0)
 Q
"RTN","RGSEROBS",94,0)
 ; Output related observations (XML)
"RTN","RGSEROBS",95,0)
RELXML(RELATED) ;
"RTN","RGSEROBS",96,0)
 N LP
"RTN","RGSEROBS",97,0)
 F LP=1:1:$L(RELATED,",") D
"RTN","RGSEROBS",98,0)
 .D NEWTAG^RGSEXML("related")
"RTN","RGSEROBS",99,0)
 .D PUT^RGSEXML("type","has-component")
"RTN","RGSEROBS",100,0)
 .D PUT^RGSEXML("target:reference","Observation/"_$P(RELATED,",",LP))
"RTN","RGSEROBS",101,0)
 .D ENDTAG^RGSEXML("related")
"RTN","RGSEROBS",102,0)
 Q
"RTN","RGSEROBS",103,0)
 ; Output related observations (JSON)
"RTN","RGSEROBS",104,0)
RELJSN(RELATED) ;
"RTN","RGSEROBS",105,0)
 N LP
"RTN","RGSEROBS",106,0)
 D NEWARY^RGSEJSON("related")
"RTN","RGSEROBS",107,0)
 F LP=1:1:$L(RELATED,",") D
"RTN","RGSEROBS",108,0)
 .D NEWOBJ^RGSEJSON("related")
"RTN","RGSEROBS",109,0)
 .D PUT^RGSEJSON("type","has-component")
"RTN","RGSEROBS",110,0)
 .D NEWOBJ^RGSEJSON("target")
"RTN","RGSEROBS",111,0)
 .D PUT^RGSEJSON("reference","Observation/"_$P(RELATED,",",LP))
"RTN","RGSEROBS",112,0)
 .D ENDOBJ^RGSEJSON("related")
"RTN","RGSEROBS",113,0)
 D ENDARY^RGSEJSON("related")
"RTN","RGSEROBS",114,0)
 Q
"RTN","RGSERPAT")
0^8^B269044
"RTN","RGSERPAT",1,0)
RGSERPAT ;RI/CBMI/DKM - Patient Resource Support ;31-Mar-2015 18:40;DKM
"RTN","RGSERPAT",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERPAT",3,0)
 ;=================================================================
"RTN","RGSERPAT",4,0)
HRN(DFN) ; Return HRN given DFN
"RTN","RGSERPAT",5,0)
 N X
"RTN","RGSERPAT",6,0)
 S X=$G(^AUPNPAT(DFN,41,+$G(DUZ(2)),0))
"RTN","RGSERPAT",7,0)
 Q $S($P(X,U,3):"",1:$P(X,U,2))
"RTN","RGSERPAT",8,0)
 ; Iterator for traversing name xref
"RTN","RGSERPAT",9,0)
NAMEITER(CTX) ;
"RTN","RGSERPAT",10,0)
 I '$Q D NAMEITER^RGSERGET(CTX,$NA(^DPT("B"))) Q
"RTN","RGSERPAT",11,0)
 Q $$NAMEITER^RGSERGET(CTX)
"RTN","RGSERPER")
0^13^B151306
"RTN","RGSERPER",1,0)
RGSERPER ;RI/CBMI/DKM - User/Practitioner/Person Resource Support ;31-Mar-2015 18:40;DKM
"RTN","RGSERPER",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERPER",3,0)
 ;=================================================================
"RTN","RGSERPER",4,0)
 ; Iterator for traversing name xref
"RTN","RGSERPER",5,0)
NAMEITER(CTX) ;
"RTN","RGSERPER",6,0)
 I '$Q D NAMEITER^RGSERGET(CTX,$NA(^VA(200,"B"))) Q
"RTN","RGSERPER",7,0)
 Q $$NAMEITER^RGSERGET(CTX)
"RTN","RGSERVIT")
0^9^B12413990
"RTN","RGSERVIT",1,0)
RGSERVIT ;RI/CBMI/DKM - Return vital observations. ;31-Mar-2015 19:01;DKM
"RTN","RGSERVIT",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;07-Feb-2015 08:51;Build 303
"RTN","RGSERVIT",3,0)
 ;=================================================================
"RTN","RGSERVIT",4,0)
 ; Return vital measurements
"RTN","RGSERVIT",5,0)
EN(RESULTS,DFN,ID,BEG,END,MAX) ;
"RTN","RGSERVIT",6,0)
 N ARY,GMRVSTR,IEN,IDT,ANID,TYPE,QUAL,VALUE,PROC,RANGE,SEQ,X0,X,Y
"RTN","RGSERVIT",7,0)
 I $L($G(ID)) D
"RTN","RGSERVIT",8,0)
 .I $P(ID,"-")'="VT" S DFN=0 Q
"RTN","RGSERVIT",9,0)
 .S IEN=+$P(ID,"-",2),X0=$G(^GMR(120.5,IEN,0)),X=+$P(X0,U,2)
"RTN","RGSERVIT",10,0)
 .I $G(DFN),DFN'=X S DFN=0 Q
"RTN","RGSERVIT",11,0)
 .S DFN=X,MAX=9999,BEG=X0\1-.1,END=X0\1+.9
"RTN","RGSERVIT",12,0)
 .S GMRVSTR=$$GET1^DIQ(120.51,$P(X0,U,3),1)
"RTN","RGSERVIT",13,0)
 E  S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN"
"RTN","RGSERVIT",14,0)
 Q:'$G(DFN)
"RTN","RGSERVIT",15,0)
 S GMRVSTR(0)=BEG_U_END_U_MAX_"^1"
"RTN","RGSERVIT",16,0)
 K ^UTILITY($J,"GMRVD")
"RTN","RGSERVIT",17,0)
 D EN1^GMRVUT0,RANGES
"RTN","RGSERVIT",18,0)
 S IDT=0
"RTN","RGSERVIT",19,0)
 F  S IDT=$O(^UTILITY($J,"GMRVD",IDT)),TYPE="" Q:'IDT  D  Q:MAX'>0
"RTN","RGSERVIT",20,0)
 .F  S TYPE=$O(^UTILITY($J,"GMRVD",IDT,TYPE)),IEN=0 Q:TYPE=""  D  Q:MAX'>0
"RTN","RGSERVIT",21,0)
 ..S PROC=$$EP(TYPE)
"RTN","RGSERVIT",22,0)
 ..F  S IEN=$O(^UTILITY($J,"GMRVD",IDT,TYPE,IEN)) Q:'IEN  S X0=^(IEN) D  Q:MAX'>0
"RTN","RGSERVIT",23,0)
 ...S SEQ=0,VALUE=$P(X0,U,8),VALUE(0)=$P(X0,U,13),NAME=$$GET1^DIQ(120.5,IEN_",",.03)
"RTN","RGSERVIT",24,0)
 ...D @PROC
"RTN","RGSERVIT",25,0)
 K ^UTILITY($J,"GMRVD")
"RTN","RGSERVIT",26,0)
 Q
"RTN","RGSERVIT",27,0)
PROC(NAME,VALUE,UNITS,LOINC,HI,LO,RELATED) ;
"RTN","RGSERVIT",28,0)
 N ANID
"RTN","RGSERVIT",29,0)
 S SEQ=SEQ+1,ANID="VT-"_IEN_"-"_SEQ
"RTN","RGSERVIT",30,0)
 I '$L(VALUE),'$D(RELATED) Q
"RTN","RGSERVIT",31,0)
 I $L(ID) Q:ANID'=ID  S MAX=1
"RTN","RGSERVIT",32,0)
 S ARY=$$ARY^RGSEROBS(RESULTS),MAX=MAX-1,HI=+$G(HI),LO=+$G(LO),UNITS=$G(UNITS),LOINC=$G(LOINC)
"RTN","RGSERVIT",33,0)
 D PUT("id",ANID)
"RTN","RGSERVIT",34,0)
 D FILE^RGSEROBS("patient",DFN,2)
"RTN","RGSERVIT",35,0)
 D PUT("collected",9999999-IDT)
"RTN","RGSERVIT",36,0)
 D PUT("issued",$P(X0,U,4))                                            ;use last one
"RTN","RGSERVIT",37,0)
 D PUT("status","final")
"RTN","RGSERVIT",38,0)
 D PUT("reliability","ok")
"RTN","RGSERVIT",39,0)
 D:LOINC PUT("code",LOINC,NAME),PUT("code_system","http://loinc.org/")
"RTN","RGSERVIT",40,0)
 D:'LOINC PUT("code",$$VUID^RGSEROBS(+$P(X0,U,3),120.51),NAME),PUT("code_system",$$LOCALSYS^RGSER("vitals"))
"RTN","RGSERVIT",41,0)
 D PUT("value",VALUE)
"RTN","RGSERVIT",42,0)
 D PUT("units",UNITS)
"RTN","RGSERVIT",43,0)
 D PUT("low",RANGE(LO))
"RTN","RGSERVIT",44,0)
 D PUT("high",RANGE(HI))
"RTN","RGSERVIT",45,0)
 D FACILITY^RGSEROBS($P(X0,U,5))
"RTN","RGSERVIT",46,0)
 S QUAL=$P(X0,U,17)
"RTN","RGSERVIT",47,0)
 I $L(QUAL) F I=1:1:$L(QUAL,";") D
"RTN","RGSERVIT",48,0)
 .S X=$P(QUAL,";",I),Y=$$FIND1^DIC(120.52,,"QX",X)
"RTN","RGSERVIT",49,0)
 .D:Y PUT("qualifier."_I,$$VUID^RGSEROBS(Y,120.52),X)
"RTN","RGSERVIT",50,0)
 D:$D(RELATED) PUT("related",RELATED)
"RTN","RGSERVIT",51,0)
 .
"RTN","RGSERVIT",52,0)
 Q
"RTN","RGSERVIT",53,0)
 ; Write to target array
"RTN","RGSERVIT",54,0)
PUT(NAME,INTERNAL,EXTERNAL) ;
"RTN","RGSERVIT",55,0)
 D PUT^RGSEROBS(.NAME,.INTERNAL,.EXTERNAL)
"RTN","RGSERVIT",56,0)
 Q
"RTN","RGSERVIT",57,0)
 ; Blood pressure
"RTN","RGSERVIT",58,0)
PROCBP D PROC("BLOOD PRESSURE","","","55284-4","","","VT-"_IEN_"-2,VT-"_IEN_"-3")
"RTN","RGSERVIT",59,0)
 D PROC("SYSTOLIC "_NAME,$P(VALUE,"/"),"mmHg","8480-6",5.7,5.71)
"RTN","RGSERVIT",60,0)
 D PROC("DIASTOLIC "_NAME,$P(VALUE,"/",2),"mmHg","8462-4",5.8,5.81)
"RTN","RGSERVIT",61,0)
 Q
"RTN","RGSERVIT",62,0)
 ; Temperature
"RTN","RGSERVIT",63,0)
PROCT D PROC(NAME,VALUE,"F","8310-5",5.1,5.2)
"RTN","RGSERVIT",64,0)
 D PROC(NAME,VALUE(0),"C","8310-5")
"RTN","RGSERVIT",65,0)
 Q
"RTN","RGSERVIT",66,0)
 ; Respiratory rate
"RTN","RGSERVIT",67,0)
PROCR D PROC(NAME,VALUE,"/min","9279-1",5.5,5.6)
"RTN","RGSERVIT",68,0)
 Q
"RTN","RGSERVIT",69,0)
 ; Pulse
"RTN","RGSERVIT",70,0)
PROCP D PROC(NAME,VALUE,"/min","8867-4",5.3,5.4)
"RTN","RGSERVIT",71,0)
 Q
"RTN","RGSERVIT",72,0)
 ; Height
"RTN","RGSERVIT",73,0)
PROCHT D PROC(NAME,VALUE,"in","8302-2")
"RTN","RGSERVIT",74,0)
 D PROC(NAME,VALUE(0),"cm","8302-2")
"RTN","RGSERVIT",75,0)
 Q
"RTN","RGSERVIT",76,0)
 ; Weight
"RTN","RGSERVIT",77,0)
PROCWT D PROC(NAME,VALUE,"lb","29463-7")
"RTN","RGSERVIT",78,0)
 D PROC(NAME,VALUE(0),"kg","29463-7")
"RTN","RGSERVIT",79,0)
 Q
"RTN","RGSERVIT",80,0)
 ; Central venous pressure
"RTN","RGSERVIT",81,0)
PROCCVP D PROC(NAME,VALUE,"cmH2O","8591-0",6.1,6.2)
"RTN","RGSERVIT",82,0)
 Q
"RTN","RGSERVIT",83,0)
 ; Circumference/girth
"RTN","RGSERVIT",84,0)
PROCCG D PROC(NAME,VALUE,"in","9844-2")
"RTN","RGSERVIT",85,0)
 D PROC(NAME,VALUE(0),"cm","9844-2")
"RTN","RGSERVIT",86,0)
 Q
"RTN","RGSERVIT",87,0)
 ; Pulse oximetry
"RTN","RGSERVIT",88,0)
PROCPO2 D PROC(NAME,VALUE,"%","59408-5",6.31,6.3)
"RTN","RGSERVIT",89,0)
 Q
"RTN","RGSERVIT",90,0)
 ; Pain
"RTN","RGSERVIT",91,0)
PROCPN D PROC(NAME,VALUE,,"57696-7")
"RTN","RGSERVIT",92,0)
 Q
"RTN","RGSERVIT",93,0)
 ; All other types
"RTN","RGSERVIT",94,0)
PROCOTH D PROC(NAME,VALUE)
"RTN","RGSERVIT",95,0)
 Q
"RTN","RGSERVIT",96,0)
 ; Return entry point for processing measurement
"RTN","RGSERVIT",97,0)
EP(TYPE) S TYPE="PROC"_TYPE
"RTN","RGSERVIT",98,0)
 Q $S($L($T(@TYPE)):TYPE,1:"PROCOTH")
"RTN","RGSERVIT",99,0)
 ; Load normal ranges
"RTN","RGSERVIT",100,0)
RANGES N VAL
"RTN","RGSERVIT",101,0)
 D GETS^DIQ(120.57,"1,","5:7","","VAL")
"RTN","RGSERVIT",102,0)
 M RANGE=VAL(120.57,"1,")
"RTN","RGSERVIT",103,0)
 S RANGE(6.31)=100,RANGE(0)=""
"RTN","RGSERVIT",104,0)
 Q
"RTN","RGSEXML")
0^10^B12652617
"RTN","RGSEXML",1,0)
RGSEXML ;RI/CBMI/DKM - XML Support ;07-Apr-2015 14:09;DKM
"RTN","RGSEXML",2,0)
 ;;1.0;SERIALIZATION FRAMEWORK;;14-March-2014;Build 303
"RTN","RGSEXML",3,0)
 ;=================================================================
"RTN","RGSEXML",4,0)
 ; Implements Serializer interface (abstract)
"RTN","RGSEXML",5,0)
 ; Serializer.PREINIT - Preinitialization
"RTN","RGSEXML",6,0)
PREINIT D ADD^RGNETWWW("<?xml version=""1.0"" encoding=""UTF-8""?>")
"RTN","RGSEXML",7,0)
 Q
"RTN","RGSEXML",8,0)
 ; Serializer.PSTINIT - Postinitialization
"RTN","RGSEXML",9,0)
PSTINIT D ENDALL
"RTN","RGSEXML",10,0)
 Q
"RTN","RGSEXML",11,0)
 ; Serializer.PRELIST - List preprocessing
"RTN","RGSEXML",12,0)
PRELIST Q
"RTN","RGSEXML",13,0)
 ; Serializer.PSTLIST - List postprocessing
"RTN","RGSEXML",14,0)
PSTLIST Q
"RTN","RGSEXML",15,0)
 ; Serializer.COMPOSE - Compose an entry
"RTN","RGSEXML",16,0)
COMPOSE Q
"RTN","RGSEXML",17,0)
 ; Serializer.FMTDATE - Serialize a date
"RTN","RGSEXML",18,0)
FMTDATE(DT) ;
"RTN","RGSEXML",19,0)
 N X
"RTN","RGSEXML",20,0)
 S:'$G(DT) DT=$$NOW^XLFDT
"RTN","RGSEXML",21,0)
 S X=$$FMTDATE^RGUTDATF(DT,"YYYY-MM-dd"_$S(DT#1:"'T'HH:mm:ssXXXX",1:""))
"RTN","RGSEXML",22,0)
 S:X["-00" X=$$SUBST^RGUT(X,"-00")
"RTN","RGSEXML",23,0)
 Q X
"RTN","RGSEXML",24,0)
 ; Serializer.ESCMAP - Location of escape map
"RTN","RGSEXML",25,0)
ESCMAP() Q "ESCMAPX^RGSEXML"
"RTN","RGSEXML",26,0)
ESCMAPX ;;Table of escape mappings
"RTN","RGSEXML",27,0)
 ;;&;&amp;
"RTN","RGSEXML",28,0)
 ;;";&quot;
"RTN","RGSEXML",29,0)
 ;;';&apos;
"RTN","RGSEXML",30,0)
 ;;<;&lt;
"RTN","RGSEXML",31,0)
 ;;>;&gt;
"RTN","RGSEXML",32,0)
 ;;
"RTN","RGSEXML",33,0)
 ; Serializer.PROPF - Free text property
"RTN","RGSEXML",34,0)
PROPF D PUT(PN,$G(VL("E")))
"RTN","RGSEXML",35,0)
 Q
"RTN","RGSEXML",36,0)
 ; Serializer.PROPB - Boolean property
"RTN","RGSEXML",37,0)
PROPB D PUTBL(PN,$G(VL("I")))
"RTN","RGSEXML",38,0)
 Q
"RTN","RGSEXML",39,0)
 ; Serializer.PROPD - Date property
"RTN","RGSEXML",40,0)
PROPD D PUTDT(PN,$G(VL("I")))
"RTN","RGSEXML",41,0)
 Q
"RTN","RGSEXML",42,0)
 ; Serializer.PROPR - Raw value property
"RTN","RGSEXML",43,0)
PROPR D PUT(PN,$G(VL("I")))
"RTN","RGSEXML",44,0)
 Q
"RTN","RGSEXML",45,0)
 ; Serializer.PROPW - Word processing property
"RTN","RGSEXML",46,0)
PROPW D PUT(PN,$$ARY2STR^RGSER(.VL,$$UNESCURL^RGSER(CTL)))
"RTN","RGSEXML",47,0)
 Q
"RTN","RGSEXML",48,0)
 ; Serializer.PROPC - Custom property
"RTN","RGSEXML",49,0)
PROPC X CTL
"RTN","RGSEXML",50,0)
 Q
"RTN","RGSEXML",51,0)
 ; Serializer.PROPO - Object property
"RTN","RGSEXML",52,0)
PROPO D:$G(VL("I")) GET^RGSERGET(.RGSER,CTL,VL("I"),PN)
"RTN","RGSEXML",53,0)
 Q
"RTN","RGSEXML",54,0)
 ; Serializer.PROPI - Inline object property
"RTN","RGSEXML",55,0)
PROPI D:$G(VL("I")) NEWTAG(PN),GET^RGSERGET(.RGSER,CTL,VL("I"),,"I"),ENDTAG(PN)
"RTN","RGSEXML",56,0)
 Q
"RTN","RGSEXML",57,0)
 ; Serializer.PROPS - Static property
"RTN","RGSEXML",58,0)
PROPS D PUT(PN,$G(CTL))
"RTN","RGSEXML",59,0)
 Q
"RTN","RGSEXML",60,0)
 ; Put a name/value pair to output buffer
"RTN","RGSEXML",61,0)
 ; If name is ":"-delimited, it is assumed to be a sequenced list of
"RTN","RGSEXML",62,0)
 ; enclosing tags, the last one being the recipient of the value.
"RTN","RGSEXML",63,0)
PUT(NM,VL) ;
"RTN","RGSEXML",64,0)
 I $L($G(VL)) D
"RTN","RGSEXML",65,0)
 .N ATR
"RTN","RGSEXML",66,0)
 .S ATR("value")=VL
"RTN","RGSEXML",67,0)
 .D NEWTAG(NM,.ATR,1)
"RTN","RGSEXML",68,0)
 Q
"RTN","RGSEXML",69,0)
 ; Put a date value to output buffer
"RTN","RGSEXML",70,0)
PUTDT(NM,DT) ;
"RTN","RGSEXML",71,0)
 D:DT PUT(NM,$$FMTDATE^RGSER(DT))
"RTN","RGSEXML",72,0)
 Q
"RTN","RGSEXML",73,0)
 ; Put a boolean value to output buffer
"RTN","RGSEXML",74,0)
PUTBL(NM,BL) ;
"RTN","RGSEXML",75,0)
 D PUT(NM,$S(BL:"true",1:"false"))
"RTN","RGSEXML",76,0)
 Q
"RTN","RGSEXML",77,0)
 ; Put a set value to output buffer
"RTN","RGSEXML",78,0)
PUTST(NM,VL,ST) ;
"RTN","RGSEXML",79,0)
 D PUT(NM,$$SET^RGUT(VL,ST))
"RTN","RGSEXML",80,0)
 Q
"RTN","RGSEXML",81,0)
 ; Put an array to output buffer
"RTN","RGSEXML",82,0)
PUTAR(NM,AR) ;
"RTN","RGSEXML",83,0)
 D NEWTAG(NM),ADDARY^RGSER(.AR),ENDTAG(NM)
"RTN","RGSEXML",84,0)
 Q
"RTN","RGSEXML",85,0)
 ;Add opening tag (with optional attributes)
"RTN","RGSEXML",86,0)
 ; TAG = tag name (separate multiple names with ":")
"RTN","RGSEXML",87,0)
 ; ATR = optional array of attributes and/or content
"RTN","RGSEXML",88,0)
 ; CLS = if true, tag is self-closing
"RTN","RGSEXML",89,0)
NEWTAG(TAG,ATR,CLS) ;
"RTN","RGSEXML",90,0)
 N X,Y,A,CNT,TGC
"RTN","RGSEXML",91,0)
 S CLS=+$G(CLS),CNT=$G(ATR),CLS(0)=$S(CLS&'$L(CNT):"/>",1:">"),TGC=0
"RTN","RGSEXML",92,0)
 I TAG[":" D
"RTN","RGSEXML",93,0)
 .S X=$L(TAG,":")
"RTN","RGSEXML",94,0)
 .F TGC=1:1:X-1 D NEWTAG($P(TAG,":",TGC))
"RTN","RGSEXML",95,0)
 .S TAG=$P(TAG,":",X)
"RTN","RGSEXML",96,0)
 I $D(ATR)'>1 D
"RTN","RGSEXML",97,0)
 .S X="<"_TAG_CLS(0)
"RTN","RGSEXML",98,0)
 E  D
"RTN","RGSEXML",99,0)
 .S X="<"_TAG
"RTN","RGSEXML",100,0)
 .S ATR=""
"RTN","RGSEXML",101,0)
 .F  S ATR=$O(ATR(ATR)) Q:'$L(ATR)  D
"RTN","RGSEXML",102,0)
 ..S:$D(ATR(ATR))>1 Y=$O(ATR(ATR,"")),X=X_" "_Y_"="_$$QT(ATR(ATR,Y))
"RTN","RGSEXML",103,0)
 ..S:$D(ATR(ATR))#10 X=X_" "_ATR_"="_$$QT(ATR(ATR))
"RTN","RGSEXML",104,0)
 .S X=X_CLS(0)
"RTN","RGSEXML",105,0)
 D ADD^RGNETWWW(X)
"RTN","RGSEXML",106,0)
 I $L(CNT) D
"RTN","RGSEXML",107,0)
 .D ADD^RGNETWWW($$ESCAPE^RGSER(CNT))
"RTN","RGSEXML",108,0)
 .D:CLS ADD^RGNETWWW("</"_$P(TAG," ")_">")
"RTN","RGSEXML",109,0)
 S Y=+$G(RGSER("T"))
"RTN","RGSEXML",110,0)
 S:Y RGSER("T",Y,0)=RGSER("T",Y,0)+1
"RTN","RGSEXML",111,0)
 S:'CLS Y=Y+1,RGSER("T")=Y,RGSER("T",Y)=TAG,RGSER("T",Y,0)=0
"RTN","RGSEXML",112,0)
 I CLS F  Q:'TGC  D ENDTAG S TGC=TGC-1
"RTN","RGSEXML",113,0)
 K ATR
"RTN","RGSEXML",114,0)
 Q
"RTN","RGSEXML",115,0)
 ; Write closing tag
"RTN","RGSEXML",116,0)
 ;  TAG = If specified, write closing tags up to and including
"RTN","RGSEXML",117,0)
 ;    this one.  Otherwise, just write last pending closing tag.
"RTN","RGSEXML",118,0)
 ;  Returns true if there are more pending tag closures.
"RTN","RGSEXML",119,0)
ENDTAG(TAG) ;
"RTN","RGSEXML",120,0)
 N Y,T
"RTN","RGSEXML",121,0)
 I $G(TAG)[":" D  Q
"RTN","RGSEXML",122,0)
 .F Y=$L(TAG,":"):-1:1 Q:'$$ENDTAG($P(TAG,":",Y))
"RTN","RGSEXML",123,0)
 S Y=+$G(RGSER("T"))
"RTN","RGSEXML",124,0)
 F  Q:'Y  D  Q:TAG=T
"RTN","RGSEXML",125,0)
 .S T=RGSER("T",Y)
"RTN","RGSEXML",126,0)
 .D ADD^RGNETWWW("</"_T_">")
"RTN","RGSEXML",127,0)
 .S Y=Y-1,RGSER("T")=Y
"RTN","RGSEXML",128,0)
 .S:'$D(TAG) TAG=T
"RTN","RGSEXML",129,0)
 Q:$Q Y
"RTN","RGSEXML",130,0)
 Q
"RTN","RGSEXML",131,0)
 ; Close all open tags
"RTN","RGSEXML",132,0)
ENDALL F  Q:'$$ENDTAG
"RTN","RGSEXML",133,0)
 Q
"RTN","RGSEXML",134,0)
 ; Return # of siblings at specified tag level.
"RTN","RGSEXML",135,0)
 ; LVL: 0 = Current level (default); >0 = Absolute; <0 = Relative to current
"RTN","RGSEXML",136,0)
SIBS(LVL) ;
"RTN","RGSEXML",137,0)
 N X
"RTN","RGSEXML",138,0)
 S X=+$G(RGSER("T")),LVL=+$G(LVL),LVL=$S(LVL>X:X,LVL>0:LVL,1:X-LVL)
"RTN","RGSEXML",139,0)
 Q +$G(RGSER("T",LVL,0))
"RTN","RGSEXML",140,0)
 ; Enclose value in quotes (escape contents if necessary)
"RTN","RGSEXML",141,0)
QT(X) Q """"_$$ESCAPE^RGSER(X)_""""
"SEC","^DIC",996.52,996.52,0,"AUDIT")
@
"SEC","^DIC",996.52,996.52,0,"DD")
@
"SEC","^DIC",996.52,996.52,0,"DEL")
@
"SEC","^DIC",996.52,996.52,0,"LAYGO")
@
"SEC","^DIC",996.52,996.52,0,"RD")
@
"SEC","^DIC",996.52,996.52,0,"WR")
@
"SEC","^DIC",998.1,998.1,0,"AUDIT")
@
"SEC","^DIC",998.1,998.1,0,"DD")
@
"SEC","^DIC",998.1,998.1,0,"DEL")
@
"SEC","^DIC",998.1,998.1,0,"LAYGO")
@
"SEC","^DIC",998.1,998.1,0,"RD")
@
"SEC","^DIC",998.1,998.1,0,"WR")
@
"TEMP",998.1,"CWF")

"TEMP",998.1,"DSTU1")

"TEMP",998.1,"DSTU2")

"VER")
8.0^22.0
"^DD",996.52,996.52,0)
FIELD^^2^5
"^DD",996.52,996.52,0,"DDA")
N
"^DD",996.52,996.52,0,"DT")
3150331
"^DD",996.52,996.52,0,"IX","B",996.52,.01)

"^DD",996.52,996.52,0,"NM","NETSERV HTTP ENDPOINT")

"^DD",996.52,996.52,.01,0)
URL^RF^^0;1^K:$L(X)>150!($L(X)<1) X
"^DD",996.52,996.52,.01,1,0)
^.1
"^DD",996.52,996.52,.01,1,1,0)
996.52^B
"^DD",996.52,996.52,.01,1,1,1)
S ^RGNET(996.52,"B",$E(X,1,30),DA)=""
"^DD",996.52,996.52,.01,1,1,2)
K ^RGNET(996.52,"B",$E(X,1,30),DA)
"^DD",996.52,996.52,.01,3)
Enter URL pattern for this endpoint.
"^DD",996.52,996.52,.01,21,0)
^^6^6^3150330.151834
"^DD",996.52,996.52,.01,21,1,0)
This is the pattern to which a request URL is to be matched.  It may contain
"^DD",996.52,996.52,.01,21,2,0)
the following wildcard characters:
"^DD",996.52,996.52,.01,21,3,0)

"^DD",996.52,996.52,.01,21,4,0)
       * Matches any character sequence.
"^DD",996.52,996.52,.01,21,5,0)
       # Matches any sequence of digits.
"^DD",996.52,996.52,.01,21,6,0)

"^DD",996.52,996.52,.01,"DT")
3150330
"^DD",996.52,996.52,1,0)
METHOD^S^GET:GET;HEAD:HEAD;POST:POST;PUT:PUT;DELETE:DELETE;^0;2^Q
"^DD",996.52,996.52,1,"DT")
3150330
"^DD",996.52,996.52,2,0)
AUTH^S^BASIC:BASIC AUTHENTICATION;BEARER:OAUTH2 AUTHENTICATION;^0;3^Q
"^DD",996.52,996.52,2,3)
Enter authentication type (or no entry for none).
"^DD",996.52,996.52,2,21,0)
^^6^6^3150331.200154
"^DD",996.52,996.52,2,21,1,0)
This determines the type of authentication required for the associated endpoint.
"^DD",996.52,996.52,2,21,2,0)

"^DD",996.52,996.52,2,21,3,0)
       BASIC - Basic authentication (username/password)
"^DD",996.52,996.52,2,21,4,0)
       OAUTH - OAuth2 authentication (bearer)
"^DD",996.52,996.52,2,21,5,0)

"^DD",996.52,996.52,2,21,6,0)
No entry means that no authentication is required.
"^DD",996.52,996.52,2,"DT")
3150331
"^DD",996.52,996.52,10,0)
HANDLER^FX^^10;E1,250^K:X'?.8AN1"^"1.8AN X
"^DD",996.52,996.52,10,3)
Enter the handler entry point as TAG^ROUTINE.
"^DD",996.52,996.52,10,"DT")
3150330
"^DD",996.52,996.52,99,0)
DESCRIPTION^996.5299^^99;0
"^DD",996.52,996.5299,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",996.52,996.5299,0,"DT")
3150330
"^DD",996.52,996.5299,0,"NM","DESCRIPTION")

"^DD",996.52,996.5299,0,"UP")
996.52
"^DD",996.52,996.5299,.01,0)
DESCRIPTION^WL^^0;1^Q
"^DD",996.52,996.5299,.01,21,0)
^^1^1^3150330.181043
"^DD",996.52,996.5299,.01,21,1,0)
Provides a detailed description of this end point.
"^DD",996.52,996.5299,.01,"DT")
3150330
"^DD",998.1,998.1,0)
FIELD^^99^7
"^DD",998.1,998.1,0,"DDA")
N
"^DD",998.1,998.1,0,"DT")
3150316
"^DD",998.1,998.1,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",998.1,998.1,0,"IX","B",998.1,.01)

"^DD",998.1,998.1,0,"NM","SERIALIZATION CONTROL")

"^DD",998.1,998.1,0,"PT",999.991,.01)

"^DD",998.1,998.1,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<1)!'(X'?1P.E) X
"^DD",998.1,998.1,.01,1,0)
^.1
"^DD",998.1,998.1,.01,1,1,0)
998.1^B
"^DD",998.1,998.1,.01,1,1,1)
S ^RGSER(998.1,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.1,.01,1,1,2)
K ^RGSER(998.1,"B",$E(X,1,30),DA)
"^DD",998.1,998.1,.01,3)
Replace Name of the serialization type (1-30 characters).
"^DD",998.1,998.1,.01,21,0)
^^3^3^3150310.204501
"^DD",998.1,998.1,.01,21,1,0)
This is the portion of the request URL that identifies the serialization format
"^DD",998.1,998.1,.01,21,2,0)
of the requested resource.  It is first part of the path portion of the URL.
"^DD",998.1,998.1,.01,21,3,0)
The name and associated content type together should be unique within the file.
"^DD",998.1,998.1,.01,"DT")
3150211
"^DD",998.1,998.1,1,0)
CONTENT TYPE^F^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.1,1,3)
Content type(s) generated by this serializer.
"^DD",998.1,998.1,1,21,0)
^^6^6^3150315.140532
"^DD",998.1,998.1,1,21,1,0)
These are the content types (separated by commas) that are used to match 
"^DD",998.1,998.1,1,21,2,0)
against the requested content type.  It is used to match the requestor's 
"^DD",998.1,998.1,1,21,3,0)
desired content type.  This allows having multiple entries with the same name, 
"^DD",998.1,998.1,1,21,4,0)
but different content types.  By default, the first value of this entry is 
"^DD",998.1,998.1,1,21,5,0)
returned as the Content-Type in the response header.  However, the serializer 
"^DD",998.1,998.1,1,21,6,0)
may opt to override this value with a more specific MIME type. 
"^DD",998.1,998.1,1,"DT")
3150315
"^DD",998.1,998.1,2,0)
SERIALIZER^F^^0;3^K:$L(X)>10!($L(X)<1)!'(X?1.A0.AN) X
"^DD",998.1,998.1,2,3)
Name of serialization routine.
"^DD",998.1,998.1,2,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.1,2,21,1,0)
The specified serializer routine must implement the Serializer interface.
"^DD",998.1,998.1,2,"DT")
3150211
"^DD",998.1,998.1,3,0)
VERSION^F^^0;4^K:$L(X)>20!($L(X)<1) X
"^DD",998.1,998.1,3,3)
Version of this serializer (1-20 characters).
"^DD",998.1,998.1,3,21,0)
^^1^1^3150312.172833
"^DD",998.1,998.1,3,21,1,0)
This represents the version of the format the serializer is generating.
"^DD",998.1,998.1,3,"DT")
3150312
"^DD",998.1,998.1,10,0)
RESOURCE^998.11^^10;0
"^DD",998.1,998.1,10,21,0)
^.001^4^4^3150310^^
"^DD",998.1,998.1,10,21,1,0)
This is the portion of the path of the request URL that follows the 
"^DD",998.1,998.1,10,21,2,0)
serialization specifier.  It may include the wildcard characters # (for 
"^DD",998.1,998.1,10,21,3,0)
matching any sequence of digits) and * (for matching any sequence of 
"^DD",998.1,998.1,10,21,4,0)
characters).
"^DD",998.1,998.1,20,0)
HEADER FIELDS^998.14^^20;0
"^DD",998.1,998.1,20,"DT")
3150228
"^DD",998.1,998.1,99,0)
DESCRIPTION^998.199^^99;0
"^DD",998.1,998.11,0)
RESOURCE SUB-FIELD^^50^9
"^DD",998.1,998.11,0,"DT")
3150310
"^DD",998.1,998.11,0,"IX","B",998.11,.01)

"^DD",998.1,998.11,0,"IX","C",998.11,.01)

"^DD",998.1,998.11,0,"NM","RESOURCE")

"^DD",998.1,998.11,0,"UP")
998.1
"^DD",998.1,998.11,.01,0)
RESOURCE^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.11,.01,1,0)
^.1^^-1
"^DD",998.1,998.11,.01,1,1,0)
998.11^B^MUMPS
"^DD",998.1,998.11,.01,1,1,1)
S ^RGSER(998.1,DA(1),10,"B",X,DA)=$$TOPTRN^RGSERDD(X)
"^DD",998.1,998.11,.01,1,1,2)
K ^RGSER(998.1,DA(1),10,"B",X,DA)
"^DD",998.1,998.11,.01,1,1,"DT")
3150308
"^DD",998.1,998.11,.01,1,2,0)
998.11^C^MUMPS
"^DD",998.1,998.11,.01,1,2,1)
S ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)=""
"^DD",998.1,998.11,.01,1,2,2)
K ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)
"^DD",998.1,998.11,.01,1,2,"DT")
3150211
"^DD",998.1,998.11,.01,3)
Enter path name for the resource.
"^DD",998.1,998.11,.01,"DT")
3150308
"^DD",998.1,998.11,1,0)
INTERNAL^S^0:NO;1:YES;^0;2^Q
"^DD",998.1,998.11,1,3)
Enter YES if this is an internal resource.
"^DD",998.1,998.11,1,21,0)
^^3^3^3150310.205212
"^DD",998.1,998.11,1,21,1,0)
If set to YES, this resource is internal to the server and may not be 
"^DD",998.1,998.11,1,21,2,0)
referenced directly.  Any attempt to request an internal resource will return 
"^DD",998.1,998.11,1,21,3,0)
an error.
"^DD",998.1,998.11,1,"DT")
3150221
"^DD",998.1,998.11,2,0)
SOURCE^NJ10,4XO^^0;3^K:'$$VFILE^DILFD(X) X
"^DD",998.1,998.11,2,2)
S Y(0)=Y S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,2.1)
S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,3)
Enter a file or subfile number.
"^DD",998.1,998.11,2,21,0)
^^2^2^3150310.205524
"^DD",998.1,998.11,2,21,1,0)
This is the number of the file or subfile from which the resource will be
"^DD",998.1,998.11,2,21,2,0)
extracted.  For resources that are derived, this field may be null.
"^DD",998.1,998.11,2,"DT")
3150211
"^DD",998.1,998.11,10,0)
CUSTOM SERIALIZER^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,10,3)
M code to invoke custom serializer.
"^DD",998.1,998.11,10,9)
@
"^DD",998.1,998.11,10,21,0)
^^4^4^3150310.205835
"^DD",998.1,998.11,10,21,1,0)
For resources that use a custom serializer, this field contains executable M 
"^DD",998.1,998.11,10,21,2,0)
code that performs the serialization.  When this field is non-null, the 
"^DD",998.1,998.11,10,21,3,0)
default serialization code is not executed unless the custom serializer kills 
"^DD",998.1,998.11,10,21,4,0)
the XSER variable before returning control.
"^DD",998.1,998.11,10,"DT")
3150211
"^DD",998.1,998.11,20,0)
CUSTOM READER^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,20,3)
M code to invoke custom retrieval logic.
"^DD",998.1,998.11,20,9)
@
"^DD",998.1,998.11,20,21,0)
^.001^16^16^3150312^
"^DD",998.1,998.11,20,21,1,0)
This field contains custom retrieval logic for resources that require it.  It
"^DD",998.1,998.11,20,21,2,0)
should return a single instance of a resource given its unique identifier using
"^DD",998.1,998.11,20,21,3,0)
the VALS array in the format:
"^DD",998.1,998.11,20,21,4,0)

"^DD",998.1,998.11,20,21,5,0)
       VALS(FILE,IENS,<property>,<int/ext>)=<value>
"^DD",998.1,998.11,20,21,6,0)

"^DD",998.1,998.11,20,21,7,0)
where
"^DD",998.1,998.11,20,21,8,0)

"^DD",998.1,998.11,20,21,9,0)
       <property> = The property's name.
"^DD",998.1,998.11,20,21,10,0)
       <int/ext>  = "I" or "E" for representing internal and external values,
"^DD",998.1,998.11,20,21,11,0)
                    respectively.
"^DD",998.1,998.11,20,21,12,0)
       <value>    = The property's value.
"^DD",998.1,998.11,20,21,13,0)

"^DD",998.1,998.11,20,21,14,0)
Note that even if custom retrieval logic is provided, the default retrieval
"^DD",998.1,998.11,20,21,15,0)
logic will also be executed if the value of the FILE variable (from the SOURCE
"^DD",998.1,998.11,20,21,16,0)
field) is non-zero.
"^DD",998.1,998.11,20,"DT")
3150312
"^DD",998.1,998.11,30,0)
PROPERTY^998.12I^^30;0
"^DD",998.1,998.11,30,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.11,30,21,1,0)
This is the list of properties for the given resource.
"^DD",998.1,998.11,40,0)
PARAMETER^998.13I^^40;0
"^DD",998.1,998.11,40,21,0)
^^5^5^3150310.211659
"^DD",998.1,998.11,40,21,1,0)
This is the list of searchable parameters supported for the resource.  These 
"^DD",998.1,998.11,40,21,2,0)
serve two purposes.  First, they define the logic for determining a match for 
"^DD",998.1,998.11,40,21,3,0)
the given search parameter.  Second, they may define a cohort selector for a 
"^DD",998.1,998.11,40,21,4,0)
given search parameter.  Cohort selectors optimize search strategy depending 
"^DD",998.1,998.11,40,21,5,0)
on which search parameters are selected.
"^DD",998.1,998.11,50,0)
TEMPLATE^998.15^^50;0
"^DD",998.1,998.11,50,21,0)
^^8^8^3150312.154427
"^DD",998.1,998.11,50,21,1,0)
Templates may be referenced by properties to generate output from the 
"^DD",998.1,998.11,50,21,2,0)
serializer. They may contain replaceable parameters enclosed between "|" 
"^DD",998.1,998.11,50,21,3,0)
characters.  If a replaceable parameter starts with an "@" or "#" character, 
"^DD",998.1,998.11,50,21,4,0)
it is assumed to be an M expression whose value is inserted into the 
"^DD",998.1,998.11,50,21,5,0)
generated output.  Otherwise, it is assumed to be a field identifier whose 
"^DD",998.1,998.11,50,21,6,0)
value is inserted.  Except for "#"-prefixed expressions, any reserved 
"^DD",998.1,998.11,50,21,7,0)
characters in the replacement value will be escaped according to the rules
"^DD",998.1,998.11,50,21,8,0)
specified by the serializer.
"^DD",998.1,998.11,99,0)
DESCRIPTION^F^^99;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.11,99,3)
Enter brief description of this resource.
"^DD",998.1,998.11,99,21,0)
^^1^1^3150310.21222
"^DD",998.1,998.11,99,21,1,0)
Provides a detailed description of the associated resource.
"^DD",998.1,998.11,99,"DT")
3150211
"^DD",998.1,998.12,0)
PROPERTY SUB-FIELD^^10^5
"^DD",998.1,998.12,0,"DT")
3150310
"^DD",998.1,998.12,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.12,0,"IX","ASEQ",998.12,3)

"^DD",998.1,998.12,0,"IX","B",998.12,.01)

"^DD",998.1,998.12,0,"NM","PROPERTY")

"^DD",998.1,998.12,0,"UP")
998.11
"^DD",998.1,998.12,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.12,.01,1,0)
^.1
"^DD",998.1,998.12,.01,1,1,0)
998.12^B
"^DD",998.1,998.12,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.12,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)
"^DD",998.1,998.12,.01,3)
Property name to be used in serialization.
"^DD",998.1,998.12,.01,21,0)
^^8^8^3150311.183527
"^DD",998.1,998.12,.01,21,1,0)
This is the name that identifies the property.  It is typically the name that 
"^DD",998.1,998.12,.01,21,2,0)
is emitted by the serializer, but this is not a requirement. An arbitrary tag 
"^DD",998.1,998.12,.01,21,3,0)
may also be appended to the property name using the "!" character as a 
"^DD",998.1,998.12,.01,21,4,0)
delimiter.  This may be used to provide additional information about the 
"^DD",998.1,998.12,.01,21,5,0)
entry.  For example, if a property requires multiple entries to implement the 
"^DD",998.1,998.12,.01,21,6,0)
logic required to emit it, the tag can provide information to the user as to 
"^DD",998.1,998.12,.01,21,7,0)
the role each entry plays.  For any given entry, the serializer may choose to 
"^DD",998.1,998.12,.01,21,8,0)
apply additional significance to the tag.
"^DD",998.1,998.12,.01,"DT")
3150311
"^DD",998.1,998.12,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.12,1,3)
Field name or # corresponding to this property
"^DD",998.1,998.12,1,21,0)
^^7^7^3150311.184042
"^DD",998.1,998.12,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved
"^DD",998.1,998.12,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.12,1,21,3,0)
retrieved for the specified fields are available to the serializer.  Where the
"^DD",998.1,998.12,1,21,4,0)
SOURCE is a FileMan file or subfile, the field is the field # (or name).  For 
"^DD",998.1,998.12,1,21,5,0)
resources using custom retrieval logic, the field is the identifier assigned 
"^DD",998.1,998.12,1,21,6,0)
by that logic.  For properties that do not require source data (such as a 
"^DD",998.1,998.12,1,21,7,0)
static property), this entry may be left blank.
"^DD",998.1,998.12,1,"DT")
3150311
"^DD",998.1,998.12,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;I:INLINE;T:TEMPLATE;S:STATIC;N:NOP;^0;3^Q
"^DD",998.1,998.12,2,3)
Encoding type for this property.
"^DD",998.1,998.12,2,21,0)
^^15^15^3150310.21405
"^DD",998.1,998.12,2,21,1,0)
Represents the type of property.  Possible values are:
"^DD",998.1,998.12,2,21,2,0)
   B = BOOLEAN         - Emits a property value that is true or false.
"^DD",998.1,998.12,2,21,3,0)
   C = CUSTOM          - The associated custom code emits the property value.
"^DD",998.1,998.12,2,21,4,0)
   D = DATE            - Emits a property value that is a date.
"^DD",998.1,998.12,2,21,5,0)
   F = FREE TEXT       - Emits the external value of the property.
"^DD",998.1,998.12,2,21,6,0)
   I = INLINE          - Inserts a serialized object inline.
"^DD",998.1,998.12,2,21,7,0)
   N = NOP             - Causes the property to be ignored.
"^DD",998.1,998.12,2,21,8,0)
   M = MULTIPLE        - The property is a subfile multiple.
"^DD",998.1,998.12,2,21,9,0)
   O = OBJECT          - Invokes serialization logic for the specified object.
"^DD",998.1,998.12,2,21,10,0)
   R = RAW             - Emits the internal value of the property.
"^DD",998.1,998.12,2,21,11,0)
   S = STATIC          - Emits a static value for the property.
"^DD",998.1,998.12,2,21,12,0)
   T = TEMPLATE        - Emits the specified template.
"^DD",998.1,998.12,2,21,13,0)
   W = WORD PROCESSING - Emits a word processing value.
"^DD",998.1,998.12,2,21,14,0)

"^DD",998.1,998.12,2,21,15,0)
For more information, see the description of the CONTROL field.
"^DD",998.1,998.12,2,"DT")
3150310
"^DD",998.1,998.12,3,0)
SEQUENCE^RNJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.12,3,1,0)
^.1
"^DD",998.1,998.12,3,1,1,0)
998.12^ASEQ
"^DD",998.1,998.12,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.12,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.12,3,1,1,"DT")
3150211
"^DD",998.1,998.12,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.12,3,21,0)
^^3^3^3150311.184411
"^DD",998.1,998.12,3,21,1,0)
This is a numerical sequence # that determines the order in which the 
"^DD",998.1,998.12,3,21,2,0)
serializer processes property entries, and, thus, the order in which 
"^DD",998.1,998.12,3,21,3,0)
properties are emitted by the serializer.
"^DD",998.1,998.12,3,"DT")
3150311
"^DD",998.1,998.12,10,0)
CONTROL^FX^^10;E1,250^D ITXCTRL^RGSERDD(.X,.DA)
"^DD",998.1,998.12,10,3)
Enter control data.
"^DD",998.1,998.12,10,21,0)
^^10^10^3150311.184552
"^DD",998.1,998.12,10,21,1,0)
The content of this field depends on the value of the TYPE field.  For those
"^DD",998.1,998.12,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",998.1,998.12,10,21,3,0)

"^DD",998.1,998.12,10,21,4,0)
  C (CUSTOM)          - Executable M code.
"^DD",998.1,998.12,10,21,5,0)
  I (INLINE)          - Path for inline resource.
"^DD",998.1,998.12,10,21,6,0)
  O (OBJECT)          - Path for the target object.
"^DD",998.1,998.12,10,21,7,0)
  M (MULTIPLE)        - Path for the multiple entry.
"^DD",998.1,998.12,10,21,8,0)
  S (STATIC)          - The static value of the property.
"^DD",998.1,998.12,10,21,9,0)
  W (WORD PROCESSING) - Line delimiter to use (escaped characters supported).
"^DD",998.1,998.12,10,21,10,0)

"^DD",998.1,998.12,10,"DT")
3150311
"^DD",998.1,998.13,0)
PARAMETER SUB-FIELD^^10^6
"^DD",998.1,998.13,0,"DT")
3150211
"^DD",998.1,998.13,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.13,0,"IX","ASEQ",998.13,3)

"^DD",998.1,998.13,0,"IX","B",998.13,.01)

"^DD",998.1,998.13,0,"NM","PARAMETER")

"^DD",998.1,998.13,0,"UP")
998.11
"^DD",998.1,998.13,.01,0)
PARAMETER^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.13,.01,1,0)
^.1
"^DD",998.1,998.13,.01,1,1,0)
998.13^B
"^DD",998.1,998.13,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.13,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)
"^DD",998.1,998.13,.01,3)
Enter name of search parameter.
"^DD",998.1,998.13,.01,21,0)
^^1^1^3150311.184801
"^DD",998.1,998.13,.01,21,1,0)
This is the identifier of the parameter as it would appear in a query.
"^DD",998.1,998.13,.01,"DT")
3150311
"^DD",998.1,998.13,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.13,1,3)
Field name or # corresponding to this parameter.
"^DD",998.1,998.13,1,21,0)
^^6^6^3150311.185216
"^DD",998.1,998.13,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved 
"^DD",998.1,998.13,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.13,1,21,3,0)
retrieved for the specified fields are available to the serializer when 
"^DD",998.1,998.13,1,21,4,0)
formulating a search query.  Where the SOURCE is a FileMan file or subfile, 
"^DD",998.1,998.13,1,21,5,0)
the field is the field # (or name).  For resources using custom retrieval 
"^DD",998.1,998.13,1,21,6,0)
logic, the field is the identifier assigned by that logic. 
"^DD",998.1,998.13,1,"DT")
3150311
"^DD",998.1,998.13,2,0)
TYPE^S^N:NUMBER;D:DATE;S:STRING;T:TOKEN;R:REFERENCE;Q:QUANTITY;^0;3^Q
"^DD",998.1,998.13,2,3)
Type of the search parameter.
"^DD",998.1,998.13,2,21,0)
^^12^12^3150311.190219
"^DD",998.1,998.13,2,21,1,0)
The parameter type determines the allowable comparison operators and the logic 
"^DD",998.1,998.13,2,21,2,0)
used to implement them.
"^DD",998.1,998.13,2,21,3,0)

"^DD",998.1,998.13,2,21,4,0)
The following parameter types are recognized:
"^DD",998.1,998.13,2,21,5,0)

"^DD",998.1,998.13,2,21,6,0)
       N        NUMBER     - The parameter is a numeric value.
"^DD",998.1,998.13,2,21,7,0)
       D        DATE       - The parameter is a date value.
"^DD",998.1,998.13,2,21,8,0)
       S        STRING     - The parameter is a text string.
"^DD",998.1,998.13,2,21,9,0)
       T        TOKEN      - The parameter is a special token.
"^DD",998.1,998.13,2,21,10,0)
       R        REFERENCE  - The parameter is a resource reference.
"^DD",998.1,998.13,2,21,11,0)
       Q        QUANTITY   - The parameter is a quantity.
"^DD",998.1,998.13,2,21,12,0)
 
"^DD",998.1,998.13,2,"DT")
3150311
"^DD",998.1,998.13,3,0)
SEQUENCE^NJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.13,3,1,0)
^.1
"^DD",998.1,998.13,3,1,1,0)
998.13^ASEQ
"^DD",998.1,998.13,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.13,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.13,3,1,1,"DT")
3150211
"^DD",998.1,998.13,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.13,3,21,0)
^^3^3^3150311.190416
"^DD",998.1,998.13,3,21,1,0)
The sequence # determines the order the serializer uses in processing 
"^DD",998.1,998.13,3,21,2,0)
parameters.  This can be important in determining optimal search strategy 
"^DD",998.1,998.13,3,21,3,0)
where multiple parameters are specified.
"^DD",998.1,998.13,3,"DT")
3150311
"^DD",998.1,998.13,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.13,10,3)
M code to perform filtering.
"^DD",998.1,998.13,10,"DT")
3150211
"^DD",998.1,998.13,20,0)
COHORT^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.13,20,3)
M code to set global selector into X.
"^DD",998.1,998.13,20,9)
@
"^DD",998.1,998.13,20,"DT")
3150211
"^DD",998.1,998.14,0)
HEADER FIELDS SUB-FIELD^^.01^1
"^DD",998.1,998.14,0,"DT")
3150228
"^DD",998.1,998.14,0,"NM","HEADER FIELDS")

"^DD",998.1,998.14,0,"UP")
998.1
"^DD",998.1,998.14,.01,0)
HEADER FIELDS^WLx^^0;1^Q
"^DD",998.1,998.14,.01,3)
Additional fields to be included in the HTTP response header.
"^DD",998.1,998.14,.01,"DT")
3150228
"^DD",998.1,998.15,0)
TEMPLATE SUB-FIELD^^1^2
"^DD",998.1,998.15,0,"DT")
3150309
"^DD",998.1,998.15,0,"IX","B",998.15,.01)

"^DD",998.1,998.15,0,"NM","TEMPLATE")

"^DD",998.1,998.15,0,"UP")
998.11
"^DD",998.1,998.15,.01,0)
TEMPLATE^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",998.1,998.15,.01,1,0)
^.1
"^DD",998.1,998.15,.01,1,1,0)
998.15^B
"^DD",998.1,998.15,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.15,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)
"^DD",998.1,998.15,.01,3)
Answer must be 1-30 characters in length.
"^DD",998.1,998.15,.01,"DT")
3150309
"^DD",998.1,998.15,1,0)
CONTENT^998.151^^1;0
"^DD",998.1,998.151,0)
CONTENT SUB-FIELD^^.01^1
"^DD",998.1,998.151,0,"DT")
3150309
"^DD",998.1,998.151,0,"NM","CONTENT")

"^DD",998.1,998.151,0,"UP")
998.15
"^DD",998.1,998.151,.01,0)
CONTENT^WLx^^0;1^Q
"^DD",998.1,998.151,.01,"DT")
3150309
"^DD",998.1,998.199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",998.1,998.199,0,"DT")
3150316
"^DD",998.1,998.199,0,"NM","DESCRIPTION")

"^DD",998.1,998.199,0,"UP")
998.1
"^DD",998.1,998.199,.01,0)
DESCRIPTION^WLx^^0;1^Q
"^DD",998.1,998.199,.01,3)
Enter a description of this endpoint using HTML formatting.
"^DD",998.1,998.199,.01,21,0)
^^2^2^3150316.133317
"^DD",998.1,998.199,.01,21,1,0)
The content of this field will be returned if a request is directed to this 
"^DD",998.1,998.199,.01,21,2,0)
endpoint's root URL. 
"^DD",998.1,998.199,.01,"DT")
3150316
"^DIC",996.52,996.52,0)
NETSERV HTTP ENDPOINT^996.52
"^DIC",996.52,996.52,0,"GL")
^RGNET(996.52,
"^DIC",996.52,996.52,"%",0)
^1.005^^
"^DIC",996.52,996.52,"%D",0)
^^3^3^3150330.180223
"^DIC",996.52,996.52,"%D",1,0)
This file defines execution endpoints for HTTP-based services. A service 
"^DIC",996.52,996.52,"%D",2,0)
request is matched to its respective endpoint by matching the request method 
"^DIC",996.52,996.52,"%D",3,0)
and the request URL to the corresponding entry in this file.
"^DIC",996.52,"B","NETSERV HTTP ENDPOINT",996.52)

"^DIC",998.1,998.1,0)
SERIALIZATION CONTROL^998.1
"^DIC",998.1,998.1,0,"GL")
^RGSER(998.1,
"^DIC",998.1,998.1,"%D",0)
^^1^1^3150211.113842
"^DIC",998.1,998.1,"%D",1,0)
Supports serialization of domain objects.
"^DIC",998.1,"B","SERIALIZATION CONTROL",998.1)

**INSTALL NAME**
CAREWEB FRAMEWORK 1.0
"BLD",8485,0)
CAREWEB FRAMEWORK 1.0^CAREWEB FRAMEWORK^0^3150407^n
"BLD",8485,4,0)
^9.64PA^996.54^2
"BLD",8485,4,996.54,0)
996.54
"BLD",8485,4,996.54,222)
n^y^f^^y^^y^o^n
"BLD",8485,4,996.54,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8485,4,998.1,0)
998.1
"BLD",8485,4,998.1,222)
y^y^f^^n^^y^o^n
"BLD",8485,4,998.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8485,4,"B",996.54,996.54)

"BLD",8485,4,"B",998.1,998.1)

"BLD",8485,6.3)
376
"BLD",8485,"ABPKG")
n
"BLD",8485,"INI")
PRE^RGCWKDIN
"BLD",8485,"INIT")
POST^RGCWKDIN
"BLD",8485,"KRN",0)
^9.67PA^8994^20
"BLD",8485,"KRN",.4,0)
.4
"BLD",8485,"KRN",.401,0)
.401
"BLD",8485,"KRN",.402,0)
.402
"BLD",8485,"KRN",.403,0)
.403
"BLD",8485,"KRN",.5,0)
.5
"BLD",8485,"KRN",.84,0)
.84
"BLD",8485,"KRN",3.6,0)
3.6
"BLD",8485,"KRN",3.8,0)
3.8
"BLD",8485,"KRN",9.2,0)
9.2
"BLD",8485,"KRN",9.8,0)
9.8
"BLD",8485,"KRN",9.8,"NM",0)
^9.68A^5^4
"BLD",8485,"KRN",9.8,"NM",1,0)
RGCWFPAR^^0^B11663289
"BLD",8485,"KRN",9.8,"NM",2,0)
RGCWFRPC^^0^B3415575
"BLD",8485,"KRN",9.8,"NM",4,0)
RGCWFUSR^^0^B13557027
"BLD",8485,"KRN",9.8,"NM",5,0)
RGCWFUTL^^0^B7711238
"BLD",8485,"KRN",9.8,"NM","B","RGCWFPAR",1)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFRPC",2)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFUSR",4)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFUTL",5)

"BLD",8485,"KRN",19,0)
19
"BLD",8485,"KRN",19,"NM",0)
^9.68A^6^5
"BLD",8485,"KRN",19,"NM",2,0)
RGCWF MANAGER^^0
"BLD",8485,"KRN",19,"NM",3,0)
RGCWF SHOW USERS^^0
"BLD",8485,"KRN",19,"NM",4,0)
RGCWF SHUTDOWN ABORT^^0
"BLD",8485,"KRN",19,"NM",5,0)
RGCWF SHUTDOWN START^^0
"BLD",8485,"KRN",19,"NM",6,0)
RGCWF CAREWEB FRAMEWORK^^0
"BLD",8485,"KRN",19,"NM","B","RGCWF CAREWEB FRAMEWORK",6)

"BLD",8485,"KRN",19,"NM","B","RGCWF MANAGER",2)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHOW USERS",3)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHUTDOWN ABORT",4)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHUTDOWN START",5)

"BLD",8485,"KRN",19.1,0)
19.1
"BLD",8485,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",8485,"KRN",19.1,"NM",1,0)
RGCWF DESIGNER^^0
"BLD",8485,"KRN",19.1,"NM",2,0)
RGCWF MANAGER^^0
"BLD",8485,"KRN",19.1,"NM","B","RGCWF DESIGNER",1)

"BLD",8485,"KRN",19.1,"NM","B","RGCWF MANAGER",2)

"BLD",8485,"KRN",101,0)
101
"BLD",8485,"KRN",101,"NM",0)
^9.68A^^0
"BLD",8485,"KRN",409.61,0)
409.61
"BLD",8485,"KRN",771,0)
771
"BLD",8485,"KRN",779.2,0)
779.2
"BLD",8485,"KRN",870,0)
870
"BLD",8485,"KRN",8989.51,0)
8989.51
"BLD",8485,"KRN",8989.51,"NM",0)
^9.68A^14^13
"BLD",8485,"KRN",8989.51,"NM",1,0)
RGCWF.INITIAL.SECTION^^0
"BLD",8485,"KRN",8989.51,"NM",2,0)
RGCWF.LAYOUT.ASSOCIATION^^0
"BLD",8485,"KRN",8989.51,"NM",3,0)
RGCWF.LAYOUT.PRIVATE^^0
"BLD",8485,"KRN",8989.51,"NM",4,0)
RGCWF.LAYOUT.SHARED^^0
"BLD",8485,"KRN",8989.51,"NM",6,0)
RGCWF.PATIENT.FORCE.SELECT^^0
"BLD",8485,"KRN",8989.51,"NM",7,0)
RGCWF.PATIENT.LIST.DATES^^0
"BLD",8485,"KRN",8989.51,"NM",8,0)
RGCWF.PATIENT.LIST.FAVORITES^^0
"BLD",8485,"KRN",8989.51,"NM",9,0)
RGCWF.PATIENT.LIST.MRU^^0
"BLD",8485,"KRN",8989.51,"NM",10,0)
RGCWF.PATIENT.LIST.MRU.SIZE^^0
"BLD",8485,"KRN",8989.51,"NM",11,0)
RGCWF.PATIENT.LIST.PERSONAL^^0
"BLD",8485,"KRN",8989.51,"NM",12,0)
RGCWF.SAVED.RESPONSES^^0
"BLD",8485,"KRN",8989.51,"NM",13,0)
RGCWF.THEME^^0
"BLD",8485,"KRN",8989.51,"NM",14,0)
RGCWF.DESIGN.FAVORITES^^0
"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.DESIGN.FAVORITES",14)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.INITIAL.SECTION",1)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.ASSOCIATION",2)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.PRIVATE",3)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.SHARED",4)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.FORCE.SELECT",6)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.DATES",7)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.FAVORITES",8)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.MRU",9)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.MRU.SIZE",10)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.PERSONAL",11)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.SAVED.RESPONSES",12)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.THEME",13)

"BLD",8485,"KRN",8989.52,0)
8989.52
"BLD",8485,"KRN",8989.52,"NM",0)
^9.68A^^0
"BLD",8485,"KRN",8994,0)
8994
"BLD",8485,"KRN",8994,"NM",0)
^9.68A^26^23
"BLD",8485,"KRN",8994,"NM",1,0)
RGCWFPAR GETPAR^^0
"BLD",8485,"KRN",8994,"NM",2,0)
RGCWFPAR GETPARLI^^0
"BLD",8485,"KRN",8994,"NM",3,0)
RGCWFPAR GETPARPF^^0
"BLD",8485,"KRN",8994,"NM",4,0)
RGCWFPAR GETPARWP^^0
"BLD",8485,"KRN",8994,"NM",5,0)
RGCWFPAR SETPAR^^0
"BLD",8485,"KRN",8994,"NM",6,0)
RGCWFRPC DISV^^0
"BLD",8485,"KRN",8994,"NM",7,0)
RGCWFRPC GETIDX^^0
"BLD",8485,"KRN",8994,"NM",8,0)
RGCWFRPC GETVAR^^0
"BLD",8485,"KRN",8994,"NM",9,0)
RGCWFRPC PATCH^^0
"BLD",8485,"KRN",8994,"NM",10,0)
RGCWFRPC SETVAR^^0
"BLD",8485,"KRN",8994,"NM",11,0)
RGCWFPAR GETINST^^0
"BLD",8485,"KRN",8994,"NM",12,0)
RGCWFRPC VERSION^^0
"BLD",8485,"KRN",8994,"NM",16,0)
RGCWFUSR GETALRTS^^0
"BLD",8485,"KRN",8994,"NM",17,0)
RGCWFUSR GETPRIV^^0
"BLD",8485,"KRN",8994,"NM",18,0)
RGCWFUSR HASESIG^^0
"BLD",8485,"KRN",8994,"NM",19,0)
RGCWFUSR HASFMCD^^0
"BLD",8485,"KRN",8994,"NM",20,0)
RGCWFUSR HASKEYS^^0
"BLD",8485,"KRN",8994,"NM",21,0)
RGCWFUSR LOOKUP^^0
"BLD",8485,"KRN",8994,"NM",22,0)
RGCWFUSR STORESIG^^0
"BLD",8485,"KRN",8994,"NM",23,0)
RGCWFUSR VALIDPSW^^0
"BLD",8485,"KRN",8994,"NM",24,0)
RGCWFUSR VALIDSIG^^0
"BLD",8485,"KRN",8994,"NM",25,0)
RGCWFUSR VALINSIG^^0
"BLD",8485,"KRN",8994,"NM",26,0)
RGCWFPAR GETTMPL^^0
"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETINST",11)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPAR",1)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARLI",2)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARPF",3)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARWP",4)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETTMPL",26)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR SETPAR",5)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC DISV",6)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC GETIDX",7)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC GETVAR",8)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC PATCH",9)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC SETVAR",10)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC VERSION",12)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR GETALRTS",16)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR GETPRIV",17)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASESIG",18)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASFMCD",19)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASKEYS",20)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR LOOKUP",21)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR STORESIG",22)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALIDPSW",23)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALIDSIG",24)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALINSIG",25)

"BLD",8485,"KRN","B",.4,.4)

"BLD",8485,"KRN","B",.401,.401)

"BLD",8485,"KRN","B",.402,.402)

"BLD",8485,"KRN","B",.403,.403)

"BLD",8485,"KRN","B",.5,.5)

"BLD",8485,"KRN","B",.84,.84)

"BLD",8485,"KRN","B",3.6,3.6)

"BLD",8485,"KRN","B",3.8,3.8)

"BLD",8485,"KRN","B",9.2,9.2)

"BLD",8485,"KRN","B",9.8,9.8)

"BLD",8485,"KRN","B",19,19)

"BLD",8485,"KRN","B",19.1,19.1)

"BLD",8485,"KRN","B",101,101)

"BLD",8485,"KRN","B",409.61,409.61)

"BLD",8485,"KRN","B",771,771)

"BLD",8485,"KRN","B",779.2,779.2)

"BLD",8485,"KRN","B",870,870)

"BLD",8485,"KRN","B",8989.51,8989.51)

"BLD",8485,"KRN","B",8989.52,8989.52)

"BLD",8485,"KRN","B",8994,8994)

"BLD",8485,"PRE")
RGCWKDIN
"BLD",8485,"PRET")
PRETRANS^RGCWKDTP
"BLD",8485,"QUES",0)
^9.62^^
"BLD",8485,"REQB",0)
^9.611^^
"DATA",996.54,1,0)
STATUS^0^60^^^1
"DATA",996.54,1,1)
D BRDCAST^RGNETBEV(TYPE,$$ENTRY^RGUTDT($H))
"DATA",996.54,1,99,0)
^996.5499^2^2^3021028^^^^
"DATA",996.54,1,99,1,0)
Sample event monitor:  returns system date/time as a STATUS event.
"DATA",996.54,1,99,2,0)
Causes system date/time to be displayed on status line in application.
"DATA",996.54,2,0)
TRACE
"DATA",996.54,4,0)
MESSAGE
"DATA",996.54,4,99,1,0)
Causes CWF to display the associated message text in
"DATA",996.54,4,99,2,0)
a modeless dialog.  The event stub format is:
"DATA",996.54,4,99,3,0)

"DATA",996.54,4,99,4,0)
    <caption text>^<message text>
"DATA",996.54,4,99,5,0)

"DATA",996.54,4,99,6,0)
where caption text appears in the dialog's title bar and message text appears
"DATA",996.54,4,99,7,0)
in a scrollable region within the dialog.
"DATA",996.54,5,0)
DESKTOP.SHUTDOWN
"DATA",996.54,5,20,0)
^996.542P^1^1
"DATA",996.54,5,20,1,0)
512
"DATA",996.54,5,99,0)
^996.5499^14^14^3140319^
"DATA",996.54,5,99,1,0)
Causes a CareWeb application to initiate or abort an automatic shutdown
"DATA",996.54,5,99,2,0)
sequence.  
"DATA",996.54,5,99,3,0)

"DATA",996.54,5,99,4,0)
To initiate a shutdown send the following event:
"DATA",996.54,5,99,5,0)

"DATA",996.54,5,99,6,0)
DESKTOP.SHUTDOWN.START     <delay>
"DATA",996.54,5,99,7,0)

"DATA",996.54,5,99,8,0)
Where delay is the delay in milliseconds before the shutdown is executed.
"DATA",996.54,5,99,9,0)

"DATA",996.54,5,99,10,0)
To abort a shutdown in progress, send the following event:
"DATA",996.54,5,99,11,0)

"DATA",996.54,5,99,12,0)
DESKTOP.SHUTDOWN.ABORT     <message>
"DATA",996.54,5,99,13,0)

"DATA",996.54,5,99,14,0)
Where message is the popup message that is displayed to the user.
"DATA",996.54,7,0)
LOGIN^^^1^5^^
"DATA",996.54,7,99,0)
^996.5499^13^13^3021105^
"DATA",996.54,7,99,1,0)
Broadcast to all sessions when a new session logs in.
"DATA",996.54,7,99,2,0)

"DATA",996.54,7,99,3,0)
Stub format consists of the following ^-delimited fields:
"DATA",996.54,7,99,4,0)

"DATA",996.54,7,99,5,0)
       Session Identifier
"DATA",996.54,7,99,6,0)
       Session Expiration Date (FM)
"DATA",996.54,7,99,7,0)
       Session Creation Date (FM)
"DATA",996.54,7,99,8,0)
       User DUZ
"DATA",996.54,7,99,9,0)
       Workstation ID
"DATA",996.54,7,99,10,0)
       User's Full Name
"DATA",996.54,7,99,11,0)
       Assigned Resource Device
"DATA",996.54,7,99,12,0)
       Login Date/Time ($H)
"DATA",996.54,7,99,13,0)

"DATA",996.54,8,0)
LOGOUT^^^1^5^^
"DATA",996.54,8,99,0)
^^13^13^3001117.084247
"DATA",996.54,8,99,1,0)
Broadcast to all sessions when a session logs out.
"DATA",996.54,8,99,2,0)

"DATA",996.54,8,99,3,0)
Stub format consists of the following ^-delimited fields:
"DATA",996.54,8,99,4,0)

"DATA",996.54,8,99,5,0)
       Session Identifier
"DATA",996.54,8,99,6,0)
       Session Expiration Date (FM)
"DATA",996.54,8,99,7,0)
       Session Creation Date (FM)
"DATA",996.54,8,99,8,0)
       User DUZ
"DATA",996.54,8,99,9,0)
       Workstation ID
"DATA",996.54,8,99,10,0)
       User's Full Name
"DATA",996.54,8,99,11,0)
       Assigned Resource Device
"DATA",996.54,8,99,12,0)
       Login Date/Time ($H)
"DATA",996.54,8,99,13,0)

"DATA",996.54,11,0)
CCOW^1
"DATA",996.54,11,99,0)
^^1^1^3010328.222333
"DATA",996.54,11,99,1,0)
Used internally to notify subscribers of changes in CCOW status.
"DATA",996.54,13,0)
SUBSCRIBE^^^^^^
"DATA",996.54,13,99,0)
^996.5499^4^4^3020416^^
"DATA",996.54,13,99,1,0)
Broadcast whenever a session subscribes to any event.  The format is:
"DATA",996.54,13,99,2,0)
 
"DATA",996.54,13,99,3,0)
Event type: SUBSCRIBE.<event name>
"DATA",996.54,13,99,4,0)
Event stub: <session id>^<session data>
"DATA",996.54,14,0)
UNSUBSCRIBE^^^^^^
"DATA",996.54,14,99,0)
^^4^4^3020311^
"DATA",996.54,14,99,1,0)
Broadcast whenever a sessions unsubscribes from any event.  The format is:
"DATA",996.54,14,99,2,0)
 
"DATA",996.54,14,99,3,0)
Event type: UNSUBSCRIBE.<event name>
"DATA",996.54,14,99,4,0)
Event stub: <session id>^<session data>
"DATA",996.54,15,0)
BRINGTOFRONT
"DATA",996.54,15,99,0)
^^3^3^3020311^
"DATA",996.54,15,99,1,0)
Causes the Visual Interface Manager to bring the requested component
"DATA",996.54,15,99,2,0)
to the forefront of the user interface.  The event stub is the 
"DATA",996.54,15,99,3,0)
programmatic identifier of the affected component.
"DATA",996.54,16,0)
INFO
"DATA",996.54,16,99,0)
^^23^23^3060221.004532
"DATA",996.54,16,99,1,0)
Causes the Visual Interface Manager to display a slide-down alert.  The
"DATA",996.54,16,99,2,0)
event stub format is:
"DATA",996.54,16,99,3,0)
 
"DATA",996.54,16,99,4,0)
  EventType^EventData^Hint|Caption|Icon|Duration^Text
"DATA",996.54,16,99,5,0)
 
"DATA",996.54,16,99,6,0)
where
"DATA",996.54,16,99,7,0)

"DATA",996.54,16,99,8,0)
EventType is the event to be fired when the user chooses to act upon the 
"DATA",996.54,16,99,9,0)
alert.
"DATA",996.54,16,99,10,0)

"DATA",996.54,16,99,11,0)
EventData is the data associated with the above EventType.
"DATA",996.54,16,99,12,0)

"DATA",996.54,16,99,13,0)
Hint is the hint text displayed when the mouse cursor hovers over the action
"DATA",996.54,16,99,14,0)
button.
"DATA",996.54,16,99,15,0)

"DATA",996.54,16,99,16,0)
Caption is the optional caption text that appears above the message text.
"DATA",996.54,16,99,17,0)

"DATA",996.54,16,99,18,0)
Icon is the type of icon to be displayed where I=information, W=warning, and
"DATA",996.54,16,99,19,0)
E=Error.
"DATA",996.54,16,99,20,0)

"DATA",996.54,16,99,21,0)
Duration is the time in seconds that the alert will persist if not acted upon.
"DATA",996.54,16,99,22,0)

"DATA",996.54,16,99,23,0)
Text is the text of the message to be displayed.
"DATA",996.54,21,0)
CONTEXT
"DATA",996.54,21,99,0)
^996.5499^12^12^3020822^
"DATA",996.54,21,99,1,0)
Fire this event to request a context change for the specified context.
"DATA",996.54,21,99,2,0)

"DATA",996.54,21,99,3,0)
This event may be used by the server process to control the client's context.  
"DATA",996.54,21,99,4,0)
Note that the client has the option of rejecting any context change request. 
"DATA",996.54,21,99,5,0)
Therefore, the server cannot assume that context change request was honored.
"DATA",996.54,21,99,6,0)

"DATA",996.54,21,99,7,0)
The following subtypes are currently supported for this event:
"DATA",996.54,21,99,8,0)

"DATA",996.54,21,99,9,0)
       Subtype              Stub                       Description
"DATA",996.54,21,99,10,0)
       -------              ----                       -----------
"DATA",996.54,21,99,11,0)
   CONTEXT.PATIENT       Patient IEN             Changes the patient context.
"DATA",996.54,21,99,12,0)
   CONTEXT.ENCOUNTER     Visit IEN or VisitStr   Changes the encounter context.
"FIA",996.54)
NETSERV BROKER EVENT TYPE
"FIA",996.54,0)
^RGNET(996.54,
"FIA",996.54,0,0)
996.54
"FIA",996.54,0,1)
n^y^f^^y^^y^o^n
"FIA",996.54,0,10)

"FIA",996.54,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",996.54,0,"RLRO")

"FIA",996.54,0,"VR")
1.0^CAREWEB FRAMEWORK
"FIA",996.54,996.54)
0
"FIA",996.54,996.542)
0
"FIA",996.54,996.5421)
0
"FIA",996.54,996.5499)
0
"FIA",998.1)
SERIALIZATION CONTROL
"FIA",998.1,0)
^RGSER(998.1,
"FIA",998.1,0,0)
998.1I
"FIA",998.1,0,1)
y^y^f^^n^^y^o^n
"FIA",998.1,0,10)

"FIA",998.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",998.1,0,"RLRO")

"FIA",998.1,0,"VR")
1.0^CAREWEB FRAMEWORK
"FIA",998.1,998.1)
0
"FIA",998.1,998.11)
0
"FIA",998.1,998.12)
0
"FIA",998.1,998.13)
0
"FIA",998.1,998.14)
0
"FIA",998.1,998.15)
0
"FIA",998.1,998.151)
0
"FIA",998.1,998.199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",19,11318,-1)
0^6
"KRN",19,11318,0)
RGCWF CAREWEB FRAMEWORK^CareWeb Framework^^B^^^^^^^^
"KRN",19,11318,99)
63265,61715
"KRN",19,11318,99.1)
58703,41699
"KRN",19,11318,"RPC",0)
^19.05P^^0
"KRN",19,11318,"U")
CAREWEB FRAMEWORK
"KRN",19,11319,-1)
0^2
"KRN",19,11319,0)
RGCWF MANAGER^CareWeb Management^^M^^RGCWF MANAGER^^^^^^^^^^^1
"KRN",19,11319,10,0)
^19.01IP^4^4
"KRN",19,11319,10,2,0)
11320^1^1
"KRN",19,11319,10,2,"^")
RGCWF SHOW USERS
"KRN",19,11319,10,3,0)
11321^2^2
"KRN",19,11319,10,3,"^")
RGCWF SHUTDOWN ABORT
"KRN",19,11319,10,4,0)
11322^3^3
"KRN",19,11319,10,4,"^")
RGCWF SHUTDOWN START
"KRN",19,11319,26)
D MNUHDR^CIAU()
"KRN",19,11319,99)
63265,61715
"KRN",19,11319,"U")
CAREWEB MANAGEMENT
"KRN",19,11320,-1)
0^3
"KRN",19,11320,0)
RGCWF SHOW USERS^Show Current CareWeb Users^^A^^^^^^^^^^1
"KRN",19,11320,20)
D MNUEXEC^CIAU("D ^%ZIS Q:POP  D SHOWSESS^RGCWFUTL(),^%ZISC",1)
"KRN",19,11320,"U")
SHOW CURRENT CAREWEB USERS
"KRN",19,11321,-1)
0^4
"KRN",19,11321,0)
RGCWF SHUTDOWN ABORT^Abort CareWeb Shutdown^^A^^RGCWF MANAGER^^^^^^^^1
"KRN",19,11321,20)
D MNUEXEC^CIAU("D ABORTSD^RGCWFUTL",1)
"KRN",19,11321,"U")
ABORT CAREWEB SHUTDOWN
"KRN",19,11322,-1)
0^5
"KRN",19,11322,0)
RGCWF SHUTDOWN START^Shutdown CareWeb^^A^^RGCWF MANAGER^^^^^^^^1
"KRN",19,11322,20)
D MNUEXEC^CIAU("D SHUTDOWN^RGCWFUTL",1)
"KRN",19,11322,25)

"KRN",19,11322,"U")
SHUTDOWN CAREWEB
"KRN",19.1,511,-1)
0^1
"KRN",19.1,511,0)
RGCWF DESIGNER^CWF design mode access.
"KRN",19.1,512,-1)
0^2
"KRN",19.1,512,0)
RGCWF MANAGER^CareWeb management access.
"KRN",8989.51,209,-1)
0^11
"KRN",8989.51,209,0)
RGCWF.PATIENT.LIST.PERSONAL^User Personal List^1^Enter List Name
"KRN",8989.51,209,1)
W
"KRN",8989.51,209,6)
F
"KRN",8989.51,209,7)
K:'$L(X) X
"KRN",8989.51,209,30,0)
^8989.513I^1^1
"KRN",8989.51,209,30,1,0)
1^200
"KRN",8989.51,213,-1)
0^9
"KRN",8989.51,213,0)
RGCWF.PATIENT.LIST.MRU^Recent Patient Selections^0
"KRN",8989.51,213,1)
W
"KRN",8989.51,213,6)
F
"KRN",8989.51,213,30,0)
^8989.513I^1^1
"KRN",8989.51,213,30,1,0)
1^200
"KRN",8989.51,226,-1)
0^7
"KRN",8989.51,226,0)
RGCWF.PATIENT.LIST.DATES^Default date ranges:^^^Edit Value?
"KRN",8989.51,226,1)
W^^Enter Y to edit, @ to delete.
"KRN",8989.51,226,2)
S:"Yy"'[Y Y=""
"KRN",8989.51,226,30,0)
^8989.513I^1^1
"KRN",8989.51,226,30,1,0)
100^4.2
"KRN",8989.51,228,-1)
0^1
"KRN",8989.51,228,0)
RGCWF.INITIAL.SECTION^Initial component to display.^1
"KRN",8989.51,228,1)
F
"KRN",8989.51,228,6)
F
"KRN",8989.51,228,30,0)
^8989.513I^2^2
"KRN",8989.51,228,30,1,0)
10^200
"KRN",8989.51,228,30,2,0)
20^4.2
"KRN",8989.51,229,-1)
0^4
"KRN",8989.51,229,0)
RGCWF.LAYOUT.SHARED^^1
"KRN",8989.51,229,1)
W
"KRN",8989.51,229,6)
F
"KRN",8989.51,229,30,0)
^8989.513I^1^1
"KRN",8989.51,229,30,1,0)
10^4.2
"KRN",8989.51,231,-1)
0^2
"KRN",8989.51,231,0)
RGCWF.LAYOUT.ASSOCIATION^^1
"KRN",8989.51,231,1)
F
"KRN",8989.51,231,6)
F
"KRN",8989.51,231,30,0)
^8989.513I^1^1
"KRN",8989.51,231,30,1,0)
10^4.2
"KRN",8989.51,245,-1)
0^8
"KRN",8989.51,245,0)
RGCWF.PATIENT.LIST.FAVORITES^Favorite patient list settings^1^Favorite
"KRN",8989.51,245,1)
W
"KRN",8989.51,245,6)
F
"KRN",8989.51,245,30,0)
^8989.513I^1^1
"KRN",8989.51,245,30,1,0)
10^200
"KRN",8989.51,251,-1)
0^10
"KRN",8989.51,251,0)
RGCWF.PATIENT.LIST.MRU.SIZE^Maximum list size for MRU list.^0
"KRN",8989.51,251,1)
N
"KRN",8989.51,251,30,0)
^8989.513I^1^1
"KRN",8989.51,251,30,1,0)
10^200
"KRN",8989.51,261,-1)
0^13
"KRN",8989.51,261,0)
RGCWF.THEME^Default CareWeb theme.^0
"KRN",8989.51,261,1)
F
"KRN",8989.51,261,30,0)
^8989.513I^2^2
"KRN",8989.51,261,30,1,0)
10^4.2
"KRN",8989.51,261,30,2,0)
5^200
"KRN",8989.51,263,-1)
0^12
"KRN",8989.51,263,0)
RGCWF.SAVED.RESPONSES^Saved dialog responses.^1
"KRN",8989.51,263,1)
F
"KRN",8989.51,263,6)
F
"KRN",8989.51,263,30,0)
^8989.513I^1^1
"KRN",8989.51,263,30,1,0)
10^200
"KRN",8989.51,268,-1)
0^6
"KRN",8989.51,268,0)
RGCWF.PATIENT.FORCE.SELECT^Force patient selection at start.^0^^Force patient selection at startup?
"KRN",8989.51,268,1)
Y^^Forces patient selection at application startup.
"KRN",8989.51,268,6)
N
"KRN",8989.51,268,20,0)
^^1^1^3110609.171648
"KRN",8989.51,268,20,1,0)
If yes, patient selection is forced at application startup.
"KRN",8989.51,268,30,0)
^8989.513I^3^3
"KRN",8989.51,268,30,1,0)
100^200
"KRN",8989.51,268,30,2,0)
200^4
"KRN",8989.51,268,30,3,0)
300^4.2
"KRN",8989.51,291,-1)
0^3
"KRN",8989.51,291,0)
RGCWF.LAYOUT.PRIVATE^^1
"KRN",8989.51,291,1)
W
"KRN",8989.51,291,6)
F
"KRN",8989.51,291,30,0)
^8989.513I^1^1
"KRN",8989.51,291,30,1,0)
10^4.2
"KRN",8989.51,411,-1)
0^14
"KRN",8989.51,411,0)
RGCWF.DESIGN.FAVORITES^Favorites for add component dialog.
"KRN",8989.51,411,1)
W
"KRN",8989.51,411,30,0)
^8989.513I^1^1
"KRN",8989.51,411,30,1,0)
10^200
"KRN",8994,2606,-1)
0^20
"KRN",8994,2606,0)
RGCWFUSR HASKEYS^HASKEYS^RGCWFUSR^1
"KRN",8994,2607,-1)
0^6
"KRN",8994,2607,0)
RGCWFRPC DISV^DISV^RGCWFRPC^1
"KRN",8994,2608,-1)
0^1
"KRN",8994,2608,0)
RGCWFPAR GETPAR^GETPAR^RGCWFPAR^1
"KRN",8994,2609,-1)
0^5
"KRN",8994,2609,0)
RGCWFPAR SETPAR^SETPAR^RGCWFPAR^1
"KRN",8994,2610,-1)
0^7
"KRN",8994,2610,0)
RGCWFRPC GETIDX^GETIDX^RGCWFRPC^4^^^^1
"KRN",8994,2611,-1)
0^12
"KRN",8994,2611,0)
RGCWFRPC VERSION^VERSION^RGCWFRPC^1
"KRN",8994,2612,-1)
0^16
"KRN",8994,2612,0)
RGCWFUSR GETALRTS^GETALRTS^RGCWFUSR^4^^^^1
"KRN",8994,2613,-1)
0^2
"KRN",8994,2613,0)
RGCWFPAR GETPARLI^GETPARLI^RGCWFPAR^4^^^^1
"KRN",8994,2614,-1)
0^4
"KRN",8994,2614,0)
RGCWFPAR GETPARWP^GETPARWP^RGCWFPAR^4^^^^1
"KRN",8994,2615,-1)
0^23
"KRN",8994,2615,0)
RGCWFUSR VALIDPSW^VALIDPSW^RGCWFUSR^1
"KRN",8994,2616,-1)
0^10
"KRN",8994,2616,0)
RGCWFRPC SETVAR^SETVAR^RGCWFRPC^1
"KRN",8994,2617,-1)
0^8
"KRN",8994,2617,0)
RGCWFRPC GETVAR^GETVAR^RGCWFRPC^2^^^^1
"KRN",8994,2618,-1)
0^9
"KRN",8994,2618,0)
RGCWFRPC PATCH^PATCH^RGCWFRPC^1
"KRN",8994,2618,1,0)
^8994.01^1^1^3051219.20334
"KRN",8994,2618,1,1,0)
Returns true if specified patch is present.
"KRN",8994,2618,2,0)
^8994.02A^1^1
"KRN",8994,2618,2,1,0)
PATCH^1^^1^1
"KRN",8994,2618,2,1,1,0)
^^1^1^3051219.203412
"KRN",8994,2618,2,1,1,1,0)
Patch designation to be checked. 
"KRN",8994,2618,2,"B","PATCH",1)

"KRN",8994,2618,2,"PARAMSEQ",1,1)

"KRN",8994,2618,3,0)
^^1^1^3051219.203433
"KRN",8994,2618,3,1,0)
Boolean return type is true if specified patch is present.
"KRN",8994,2619,-1)
0^19
"KRN",8994,2619,0)
RGCWFUSR HASFMCD^HASFMCD^RGCWFUSR^1
"KRN",8994,2620,-1)
0^21
"KRN",8994,2620,0)
RGCWFUSR LOOKUP^LOOKUP^RGCWFUSR^2
"KRN",8994,2621,-1)
0^24
"KRN",8994,2621,0)
RGCWFUSR VALIDSIG^VALIDSIG^RGCWFUSR^1
"KRN",8994,2622,-1)
0^22
"KRN",8994,2622,0)
RGCWFUSR STORESIG^STORESIG^RGCWFUSR^1
"KRN",8994,2623,-1)
0^25
"KRN",8994,2623,0)
RGCWFUSR VALINSIG^VALINSIG^RGCWFUSR^1
"KRN",8994,2624,-1)
0^18
"KRN",8994,2624,0)
RGCWFUSR HASESIG^HASESIG^RGCWFUSR^1
"KRN",8994,2628,-1)
0^17
"KRN",8994,2628,0)
RGCWFUSR GETPRIV^GETPRIV^RGCWFUSR^2^^^^1
"KRN",8994,2629,-1)
0^3
"KRN",8994,2629,0)
RGCWFPAR GETPARPF^GETPARPF^RGCWFPAR^2^^^^1
"KRN",8994,2630,-1)
0^26
"KRN",8994,2630,0)
RGCWFPAR GETTMPL^GETTMPL^RGCWFPAR^2^^^^1
"KRN",8994,2682,-1)
0^11
"KRN",8994,2682,0)
RGCWFPAR GETINST^GETINST^RGCWFPAR^2^^^^1
"MBREQ")
1
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PGL",996.54,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""RGNE"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PKG",220,-1)
1^1
"PKG",220,0)
CAREWEB FRAMEWORK^RGCW^CareWeb Framework Support.
"PKG",220,5)
RI/CBMI
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
1.0^3150407^3140319^1
"PKG",220,"DEV")
DKM/RI/CBMI
"PKG",220,"VERSION")
1.0
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","RGCWFPAR")
0^1^B11663289
"RTN","RGCWFPAR",1,0)
RGCWFPAR ;RI/CBMI/DKM - Parameter management ;01-Apr-2015 14:12;DKM
"RTN","RGCWFPAR",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 376
"RTN","RGCWFPAR",3,0)
 ; Load a parameter template
"RTN","RGCWFPAR",4,0)
GETTMPL(DATA,TPL) ;
"RTN","RGCWFPAR",5,0)
 N PAR,SEQ,CNT,LP,X0,X1
"RTN","RGCWFPAR",6,0)
 S:TPL'=+TPL TPL=+$$FIND1^DIC(8989.52,,"X",TPL)
"RTN","RGCWFPAR",7,0)
 I '$D(^XTV(8989.52,TPL,0)) S DATA(1)="-1^Not found" Q
"RTN","RGCWFPAR",8,0)
 S CNT=1,SEQ="",X0=^XTV(8989.52,TPL,0),X1=+$P(X0,U,3)
"RTN","RGCWFPAR",9,0)
 S X1=$S(X1=4:"DIV",X1=4.2:"SYS",X1=9.4:"PKG",X1=49:"SRV",X1=200:"USR",1:"")
"RTN","RGCWFPAR",10,0)
 I '$L(X1) S DATA(1)="-2^Bad entity" Q
"RTN","RGCWFPAR",11,0)
 S $P(X0,U,3)=X1,DATA(1)=TPL_U_X0
"RTN","RGCWFPAR",12,0)
 F  S SEQ=$O(^XTV(8989.52,TPL,10,"B",SEQ)),LP=0 Q:'$L(SEQ)  D
"RTN","RGCWFPAR",13,0)
 .F  S LP=$O(^XTV(8989.52,TPL,10,"B",SEQ,LP)) Q:'LP  D
"RTN","RGCWFPAR",14,0)
 ..S PAR=+$P($G(^XTV(8989.52,TPL,10,LP,0)),U,2)
"RTN","RGCWFPAR",15,0)
 ..S X0=$$GETATTR(PAR)
"RTN","RGCWFPAR",16,0)
 ..S:$L(X0) CNT=CNT+1,DATA(CNT)=X0
"RTN","RGCWFPAR",17,0)
 Q
"RTN","RGCWFPAR",18,0)
 ; Return parameter attributes
"RTN","RGCWFPAR",19,0)
GETATTR(PAR) ;
"RTN","RGCWFPAR",20,0)
 N X0,X1
"RTN","RGCWFPAR",21,0)
 I $L(PAR),PAR'=+PAR S PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",22,0)
 S X0=$G(^XTV(8989.51,PAR,0)),X1=$G(^(1))
"RTN","RGCWFPAR",23,0)
 Q $S($L(X0):PAR_U_$P(X0,U)_U_$P(X0,U,2)_U_X1,1:"")
"RTN","RGCWFPAR",24,0)
 ; Return parameter instances
"RTN","RGCWFPAR",25,0)
GETINST(DATA,PAR,ENT) ;
"RTN","RGCWFPAR",26,0)
 N CNT,LP
"RTN","RGCWFPAR",27,0)
 S:PAR'=+PAR PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",28,0)
 D ENTDFLT^XPAR1(.ENT)
"RTN","RGCWFPAR",29,0)
 S CNT=0,LP=""
"RTN","RGCWFPAR",30,0)
 F  S LP=$O(^XTV(8989.5,"AC",PAR,ENT,LP)) Q:'$L(LP)  D
"RTN","RGCWFPAR",31,0)
 .S CNT=CNT+1,DATA(CNT)=LP
"RTN","RGCWFPAR",32,0)
 Q
"RTN","RGCWFPAR",33,0)
 ; Retrieve a package parameter value
"RTN","RGCWFPAR",34,0)
PARAM(PAR,MIN,MAX) ;
"RTN","RGCWFPAR",35,0)
 S VAL=+$$GET^XPAR("ALL",PAR)
"RTN","RGCWFPAR",36,0)
 S:VAL<MIN VAL=MIN
"RTN","RGCWFPAR",37,0)
 S:VAL>MAX VAL=MAX
"RTN","RGCWFPAR",38,0)
 Q VAL
"RTN","RGCWFPAR",39,0)
 ; RPC: Returns value for named parameter
"RTN","RGCWFPAR",40,0)
GETPAR(DATA,PARAM,ENT,INST,FMT,USR) ;
"RTN","RGCWFPAR",41,0)
 N X
"RTN","RGCWFPAR",42,0)
 S ENT=$$ENT(PARAM,.ENT,.USR),DATA=$S($L(ENT):$$GET^XPAR(ENT,PARAM,.INST,.FMT),1:"")
"RTN","RGCWFPAR",43,0)
 Q
"RTN","RGCWFPAR",44,0)
 ; RPC: Get multivalued parameter values
"RTN","RGCWFPAR",45,0)
GETPARLI(DATA,PARAM,ENT,FMT,USR) ;
"RTN","RGCWFPAR",46,0)
 N TMP,X
"RTN","RGCWFPAR",47,0)
 D GETLST^XPAR(.TMP,$$ENT(PARAM,.ENT,.USR),PARAM,.FMT,.ERR)
"RTN","RGCWFPAR",48,0)
 I $G(ERR) K TMP S TMP=ERR
"RTN","RGCWFPAR",49,0)
 E  S TMP=""
"RTN","RGCWFPAR",50,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWFPAR",51,0)
 M @DATA=TMP
"RTN","RGCWFPAR",52,0)
 Q
"RTN","RGCWFPAR",53,0)
 ; RPC: Get WP parameter value
"RTN","RGCWFPAR",54,0)
GETPARWP(DATA,PARAM,ENT,INST,USR) ;
"RTN","RGCWFPAR",55,0)
 N TMP,X
"RTN","RGCWFPAR",56,0)
 D GETWP^XPAR(.TMP,$$ENT(PARAM,.ENT,.USR),PARAM,.INST,.ERR)
"RTN","RGCWFPAR",57,0)
 I $G(ERR) K TMP S TMP=ERR
"RTN","RGCWFPAR",58,0)
 E  S TMP=""
"RTN","RGCWFPAR",59,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWFPAR",60,0)
 M @DATA=TMP
"RTN","RGCWFPAR",61,0)
 Q
"RTN","RGCWFPAR",62,0)
 ; Return parameters matching prefix
"RTN","RGCWFPAR",63,0)
GETPARPF(DATA,PFX) ;
"RTN","RGCWFPAR",64,0)
 N LP,CNT,LEN
"RTN","RGCWFPAR",65,0)
 S LP=PFX,CNT=0,LEN=$L(PFX)
"RTN","RGCWFPAR",66,0)
 F  D:$O(^XTV(8989.51,"B",LP,0))  S LP=$O(^XTV(8989.51,"B",LP)) Q:$E(LP,1,LEN)'=PFX
"RTN","RGCWFPAR",67,0)
 .S CNT=CNT+1,DATA(CNT)=LP
"RTN","RGCWFPAR",68,0)
 Q
"RTN","RGCWFPAR",69,0)
 ; Return entity list (if ENT not specified)
"RTN","RGCWFPAR",70,0)
ENT(PAR,ENT,USR) ;EP
"RTN","RGCWFPAR",71,0)
 N I,X,Y,Z
"RTN","RGCWFPAR",72,0)
 Q:$L($G(ENT)) ENT
"RTN","RGCWFPAR",73,0)
 I $L(PAR),PAR'=+PAR S PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",74,0)
 Q:'PAR ""
"RTN","RGCWFPAR",75,0)
 S X="",I=0,USR=$G(USR,DUZ)
"RTN","RGCWFPAR",76,0)
 F  S I=+$O(^XTV(8989.51,PAR,30,"B",I)) Q:'I  S Y=$O(^(I,0)) D:Y
"RTN","RGCWFPAR",77,0)
 .S Y=$P($G(^XTV(8989.518,+$P($G(^XTV(8989.51,PAR,30,Y,0)),U,2),0)),U,2)
"RTN","RGCWFPAR",78,0)
 .Q:'$L(Y)
"RTN","RGCWFPAR",79,0)
 .I "DIV^SYS^PKG"[Y S X=X_U_Y Q
"RTN","RGCWFPAR",80,0)
 .I Y="USR" S X=X_U_"USR.`"_USR Q
"RTN","RGCWFPAR",81,0)
 .I Y="SRV" S Z=+$G(^VA(200,USR,5)) S:Z X=X_U_"SRV.`"_Z Q
"RTN","RGCWFPAR",82,0)
 .I Y="OTL" Q                                                          ; OE/RR TEAM
"RTN","RGCWFPAR",83,0)
 .I Y="TEA" Q                                                          ; TEAM
"RTN","RGCWFPAR",84,0)
 .I Y="CLS" D  Q
"RTN","RGCWFPAR",85,0)
 ..S Z=0
"RTN","RGCWFPAR",86,0)
 ..F  S Z=$O(^USR(8930.3,"AUC",USR,Z)) Q:'Z  D CLS(Z)
"RTN","RGCWFPAR",87,0)
 .I Y="LOC",$G(RGNETB("UID")) D  Q
"RTN","RGCWFPAR",88,0)
 ..S Z=+$$GETVAR^RGNETBUT("ENCOUNTER.ID.ALTERNATEVISITID",,"CONTEXT.ENCOUNTER")
"RTN","RGCWFPAR",89,0)
 ..S:Z X=X_U_"LOC.`"_Z
"RTN","RGCWFPAR",90,0)
 Q $E(X,2,$L(X))
"RTN","RGCWFPAR",91,0)
 ; Append user class memberships to entity list
"RTN","RGCWFPAR",92,0)
CLS(Z) N Y
"RTN","RGCWFPAR",93,0)
 S X=X_U_"CLS.`"_Z,Y=0
"RTN","RGCWFPAR",94,0)
 F  S Y=$O(^USR(8930,"AD",Z,Y)) Q:'Y  D CLS(Y)
"RTN","RGCWFPAR",95,0)
 Q
"RTN","RGCWFPAR",96,0)
 ; RPC: Changes value for named parameter
"RTN","RGCWFPAR",97,0)
SETPAR(DATA,PARAM,VAL,ENT,INST) ;
"RTN","RGCWFPAR",98,0)
 D EN^XPAR($G(ENT,"PKG"),PARAM,$G(INST,1),.VAL,.DATA)
"RTN","RGCWFPAR",99,0)
 Q
"RTN","RGCWFRPC")
0^2^B3415575
"RTN","RGCWFRPC",1,0)
RGCWFRPC ;RI/CBMI/DKM - Miscellaneous RPC calls ;01-Apr-2015 14:05;DKM
"RTN","RGCWFRPC",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 376
"RTN","RGCWFRPC",3,0)
 ; RPC: Get/set DISV entry for selected file/IEN
"RTN","RGCWFRPC",4,0)
 ; If IEN is specified, entry is set
"RTN","RGCWFRPC",5,0)
 ; Returned as IEN^.01 internal value
"RTN","RGCWFRPC",6,0)
DISV(DATA,FILE,IEN) ;
"RTN","RGCWFRPC",7,0)
 S FILE=$$ROOT^DILFD(+FILE)
"RTN","RGCWFRPC",8,0)
 I FILE="" S DATA=0 Q
"RTN","RGCWFRPC",9,0)
 S:$G(IEN) ^DISV(DUZ,FILE)=IEN
"RTN","RGCWFRPC",10,0)
 S DATA=+$G(^DISV(DUZ,FILE))
"RTN","RGCWFRPC",11,0)
 S:DATA $P(DATA,U,2)=$P($G(@(FILE_DATA_",0)")),U)
"RTN","RGCWFRPC",12,0)
 Q
"RTN","RGCWFRPC",13,0)
 ; RPC: Return version of package
"RTN","RGCWFRPC",14,0)
VERSION(DATA,PKG) ;
"RTN","RGCWFRPC",15,0)
 S DATA=$$VERSION^XPDUTL(PKG)
"RTN","RGCWFRPC",16,0)
 Q
"RTN","RGCWFRPC",17,0)
 ; RPC: Return true if patch installed
"RTN","RGCWFRPC",18,0)
PATCH(DATA,PATCH) ;
"RTN","RGCWFRPC",19,0)
 S DATA=$$PATCH^XPDUTL(PATCH)
"RTN","RGCWFRPC",20,0)
 Q
"RTN","RGCWFRPC",21,0)
 ; RPC: Get stored variable(s)
"RTN","RGCWFRPC",22,0)
GETVAR(DATA,LIST,NMSP) ;
"RTN","RGCWFRPC",23,0)
 N CNT
"RTN","RGCWFRPC",24,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGCWFRPC",25,0)
 S LIST="",CNT=0
"RTN","RGCWFRPC",26,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGCWFRPC",27,0)
 .S CNT=CNT+1,DATA(CNT)=LIST(LIST)_"="_$$GETVAR^RGNETBUT(LIST(LIST),,.NMSP)
"RTN","RGCWFRPC",28,0)
 Q
"RTN","RGCWFRPC",29,0)
 ; RPC: Set stored variable(s)
"RTN","RGCWFRPC",30,0)
SETVAR(DATA,LIST,NMSP,RESET) ;
"RTN","RGCWFRPC",31,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGCWFRPC",32,0)
 S LIST="",DATA=0
"RTN","RGCWFRPC",33,0)
 D:$G(RESET) CLRVAR^RGNETBUT(.NMSP)
"RTN","RGCWFRPC",34,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGCWFRPC",35,0)
 .S DATA=DATA+1
"RTN","RGCWFRPC",36,0)
 .D SETVAR^RGNETBUT($P(LIST(LIST),"="),$P(LIST(LIST),"=",2,9999),.NMSP)
"RTN","RGCWFRPC",37,0)
 Q
"RTN","RGCWFRPC",38,0)
 ; RPC: Get .01 field values from a file
"RTN","RGCWFRPC",39,0)
GETIDX(DATA,FN,FLG) ;
"RTN","RGCWFRPC",40,0)
 N X,I,Z
"RTN","RGCWFRPC",41,0)
 S DATA=$$TMPGBL,X=0,FN=$$ROOT^DILFD(FN,,1),I=0,FLG=+$G(FLG)
"RTN","RGCWFRPC",42,0)
 I $L(FN) F  S X=$O(@FN@(X)) Q:'X  D
"RTN","RGCWFRPC",43,0)
 .S Z=$P($G(@FN@(X,0)),U)
"RTN","RGCWFRPC",44,0)
 .S:$L(Z) I=I+1,@DATA@(I)=$S(FLG:Z,1:X_U_Z)
"RTN","RGCWFRPC",45,0)
 Q
"RTN","RGCWFRPC",46,0)
 ; Compare version # VER1 with VER2
"RTN","RGCWFRPC",47,0)
 ; Returns -1 if <; 0 if =; 1 if >
"RTN","RGCWFRPC",48,0)
VERCMP(VER1,VER2,PC) ;EP
"RTN","RGCWFRPC",49,0)
 N X,Y,V1,V2
"RTN","RGCWFRPC",50,0)
 S:'$G(PC) PC=4
"RTN","RGCWFRPC",51,0)
 S Y=0
"RTN","RGCWFRPC",52,0)
 F X=1:1:PC D  Q:Y
"RTN","RGCWFRPC",53,0)
 .S V1=+$P(VER1,".",X),V2=+$P(VER2,".",X)
"RTN","RGCWFRPC",54,0)
 .S:V1'=V2 Y=$S(V1>V2:1,1:-1)
"RTN","RGCWFRPC",55,0)
 Q Y
"RTN","RGCWFRPC",56,0)
 ; Get temp global reference
"RTN","RGCWFRPC",57,0)
TMPGBL(X) ;EP
"RTN","RGCWFRPC",58,0)
 K ^TMP("RGCWFRPC"_$G(X),$J) Q $NA(^($J))
"RTN","RGCWFUSR")
0^4^B13557027
"RTN","RGCWFUSR",1,0)
RGCWFUSR ;RI/CBMI/DKM - User utility methods;04-Mar-2015 16:23;DKM
"RTN","RGCWFUSR",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 376
"RTN","RGCWFUSR",3,0)
 ; Returns true if user has key
"RTN","RGCWFUSR",4,0)
 ; KEY = Security key (or parameter if begins with "@")
"RTN","RGCWFUSR",5,0)
 ; USR = IEN of user to check (defaults to current user)
"RTN","RGCWFUSR",6,0)
HASKEY(KEY,USR) ;EP
"RTN","RGCWFUSR",7,0)
 Q:'$L(KEY) 1
"RTN","RGCWFUSR",8,0)
 S USR=$G(USR,DUZ)
"RTN","RGCWFUSR",9,0)
 I $E(KEY)="@" D GETPAR^RGCWFPAR(.KEY,$E(KEY,2,999),,,,USR) Q ''KEY
"RTN","RGCWFUSR",10,0)
 Q ''$D(^XUSEC(KEY,+USR))
"RTN","RGCWFUSR",11,0)
 ; RPC: Check for multiple keys
"RTN","RGCWFUSR",12,0)
HASKEYS(DATA,KEYS,USR) ;EP
"RTN","RGCWFUSR",13,0)
 N PC
"RTN","RGCWFUSR",14,0)
 S DATA=""
"RTN","RGCWFUSR",15,0)
 F PC=1:1:$L(KEYS,U) S $P(DATA,U,PC)=$$HASKEY($P(KEYS,U,PC),.USR)
"RTN","RGCWFUSR",16,0)
 Q
"RTN","RGCWFUSR",17,0)
 ; RPC: Returns true if password is valid
"RTN","RGCWFUSR",18,0)
VALIDPSW(DATA,PSW,USER) ;EP
"RTN","RGCWFUSR",19,0)
 S PSW=$$DECRYP^XUSRB1(PSW),USER=+$G(USER,DUZ)
"RTN","RGCWFUSR",20,0)
 S:'$$GET^XPAR("SYS","XU VC CASE SENSITIVE") PSW=$$UP^XLFSTR(PSW)
"RTN","RGCWFUSR",21,0)
 S DATA=$$EN^XUSHSH(PSW)=$P($G(^VA(200,USER,.1)),U,2)
"RTN","RGCWFUSR",22,0)
 Q
"RTN","RGCWFUSR",23,0)
 ; RPC: Returns roles and privileges
"RTN","RGCWFUSR",24,0)
GETPRIV(DATA,USER) ;EP
"RTN","RGCWFUSR",25,0)
 N TMP,LP,IDX,PAR
"RTN","RGCWFUSR",26,0)
 S USER=+$GET(USER,DUZ)
"RTN","RGCWFUSR",27,0)
 D WHATIS^USRLM(USER,"TMP")
"RTN","RGCWFUSR",28,0)
 S LP="",IDX=1
"RTN","RGCWFUSR",29,0)
 F  S LP=$O(TMP(LP)) Q:'$L(LP)  D
"RTN","RGCWFUSR",30,0)
 .S DATA(IDX)="ROLE_"_$P(TMP(LP),U,3),IDX=IDX+1
"RTN","RGCWFUSR",31,0)
 S LP=""
"RTN","RGCWFUSR",32,0)
 F  S LP=$O(^XUSEC(LP)) Q:'$L(LP)  D
"RTN","RGCWFUSR",33,0)
 .S:$$HASKEY(LP,USER) DATA(IDX)="PRIV_"_LP,IDX=IDX+1
"RTN","RGCWFUSR",34,0)
 S LP=""
"RTN","RGCWFUSR",35,0)
 F  S LP=$O(^XTV(8989.51,"D","XUSEC",LP)) Q:'LP  D
"RTN","RGCWFUSR",36,0)
 .S PAR=$P($G(^XTV(8989.51,LP,0)),U)
"RTN","RGCWFUSR",37,0)
 .I $L(PAR),$$HASKEY("@"_PAR,USER) S DATA(IDX)="PARM_"_PAR,IDX=IDX+1
"RTN","RGCWFUSR",38,0)
 Q
"RTN","RGCWFUSR",39,0)
 ; Return a set of names from the NEW PERSON file
"RTN","RGCWFUSR",40,0)
LOOKUP(DATA,FROM,DIR,KEY,DATE,FLT,CNT) ;
"RTN","RGCWFUSR",41,0)
 ; .DATA=returned list
"RTN","RGCWFUSR",42,0)
 ;  FROM=text to $O from
"RTN","RGCWFUSR",43,0)
 ;  DIR=$O direction,
"RTN","RGCWFUSR",44,0)
 ;  KEY=screen users by security key (optional)
"RTN","RGCWFUSR",45,0)
 ;  DATE=checks for an active person class on this date (optional)
"RTN","RGCWFUSR",46,0)
 ;  FLT=any of: A=Active only, D=Current division only
"RTN","RGCWFUSR",47,0)
 ;  CNT=maximum # to return (defaults to 44)
"RTN","RGCWFUSR",48,0)
 N I,IEN
"RTN","RGCWFUSR",49,0)
 S I=0,CNT=$S($G(CNT)>0:+CNT,1:44),KEY=$G(KEY),DATE=$G(DATE),FLT=$G(FLT,"AD")
"RTN","RGCWFUSR",50,0)
 S:FLT FLT="A"                                                         ; Backward compatibility
"RTN","RGCWFUSR",51,0)
 I DATE,DATE'=+DATE S DATE=$$DT^RGUT(DATE) Q:DATE<0
"RTN","RGCWFUSR",52,0)
 F  S FROM=$O(^VA(200,"B",FROM),DIR),IEN=0 Q:FROM=""  D  Q:I'<CNT
"RTN","RGCWFUSR",53,0)
 .F  S IEN=$O(^VA(200,"B",FROM,IEN)) Q:'IEN  D
"RTN","RGCWFUSR",54,0)
 ..Q:IEN<1
"RTN","RGCWFUSR",55,0)
 ..Q:'$$HASKEY(KEY,IEN)
"RTN","RGCWFUSR",56,0)
 ..I FLT["A",'$$ACTIVE(IEN,DATE) Q                                     ; terminated user
"RTN","RGCWFUSR",57,0)
 ..I FLT["D",'$$INDIV(IEN) Q
"RTN","RGCWFUSR",58,0)
 ..S I=I+1,DATA(I)=IEN_U_FROM
"RTN","RGCWFUSR",59,0)
 Q
"RTN","RGCWFUSR",60,0)
 ; Return true if user was active on/before given date
"RTN","RGCWFUSR",61,0)
 ;   IEN = User IEN
"RTN","RGCWFUSR",62,0)
 ;   DAT = Date constraint
"RTN","RGCWFUSR",63,0)
ACTIVE(IEN,DAT) ;PEP - User active?
"RTN","RGCWFUSR",64,0)
 N X
"RTN","RGCWFUSR",65,0)
 I $G(DAT) N DT S DT=DAT\1
"RTN","RGCWFUSR",66,0)
 S X=$$ACTIVE^XUSER(IEN)
"RTN","RGCWFUSR",67,0)
 Q $S(X:+X,1:X=0)
"RTN","RGCWFUSR",68,0)
 ; Returns true if user in specified division
"RTN","RGCWFUSR",69,0)
 ; For users not assigned to any divisions, always returns true
"RTN","RGCWFUSR",70,0)
 ;   IEN = User IEN (defaults to DUZ)
"RTN","RGCWFUSR",71,0)
 ;   DIV = Division constraint (defaults to current division)
"RTN","RGCWFUSR",72,0)
INDIV(IEN,DIV) ;
"RTN","RGCWFUSR",73,0)
 N RTN
"RTN","RGCWFUSR",74,0)
 S:'$G(IEN) IEN=DUZ
"RTN","RGCWFUSR",75,0)
 S:'$D(DIV) DIV=DUZ(2)
"RTN","RGCWFUSR",76,0)
 Q $S('$$DIV4^XUSER(.RTN,IEN):1,1:$D(RTN(DIV)))
"RTN","RGCWFUSR",77,0)
 ; Returns true if valid electronic signature
"RTN","RGCWFUSR",78,0)
VALIDSIG(DATA,ESIG) ;
"RTN","RGCWFUSR",79,0)
 N X
"RTN","RGCWFUSR",80,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",81,0)
 D HASH^XUSHSHP
"RTN","RGCWFUSR",82,0)
 S DATA=X=$P($G(^VA(200,+DUZ,20)),U,4)
"RTN","RGCWFUSR",83,0)
 Q
"RTN","RGCWFUSR",84,0)
 ; Returns true if electronic signature code passes input transform
"RTN","RGCWFUSR",85,0)
VALINSIG(DATA,ESIG) ;
"RTN","RGCWFUSR",86,0)
 N X
"RTN","RGCWFUSR",87,0)
 S DATA=1
"RTN","RGCWFUSR",88,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",89,0)
 I $L(X)>20!($L(X)<6) S DATA="-1^Length must be between 6 and 20 characters." Q
"RTN","RGCWFUSR",90,0)
 I X'?.UNP S DATA="-2^Signature code can only contain uppercase letters, punctuation or numbers." Q
"RTN","RGCWFUSR",91,0)
 Q
"RTN","RGCWFUSR",92,0)
STORESIG(DATA,ESIG) ;
"RTN","RGCWFUSR",93,0)
 N X,LP,DA
"RTN","RGCWFUSR",94,0)
 S DA=DUZ
"RTN","RGCWFUSR",95,0)
 S DATA=0
"RTN","RGCWFUSR",96,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",97,0)
 D HASH^XUSHSHP  ;returns hashed value in X
"RTN","RGCWFUSR",98,0)
 L +^VA(200,DUZ):5
"RTN","RGCWFUSR",99,0)
 E  S DATA="-1^Unable to obtain lock on New Person File." Q
"RTN","RGCWFUSR",100,0)
 S $P(^VA(200,DUZ,20),U,4)=X
"RTN","RGCWFUSR",101,0)
 S LP=0 F  S LP=$O(^DD(200,20.4,1,LP)) Q:'LP  X ^(LP,1)  ; Fire DD Triggers
"RTN","RGCWFUSR",102,0)
 L -^VA(200,DUZ)
"RTN","RGCWFUSR",103,0)
 Q
"RTN","RGCWFUSR",104,0)
 ; Returns true if user has electronic signature code
"RTN","RGCWFUSR",105,0)
HASESIG(DATA) ;EP
"RTN","RGCWFUSR",106,0)
 S DATA=$L($P($G(^VA(200,DUZ,20)),U,4))>0
"RTN","RGCWFUSR",107,0)
 Q
"RTN","RGCWFUSR",108,0)
 ; Returns true if File Manager Access Code field contains code
"RTN","RGCWFUSR",109,0)
 ; If user has the '@' code, returns true regardless
"RTN","RGCWFUSR",110,0)
HASFMCD(DATA,CODE) ;
"RTN","RGCWFUSR",111,0)
 S DATA=$G(DUZ(0))["@"!($G(DUZ(0))[CODE)
"RTN","RGCWFUSR",112,0)
 Q
"RTN","RGCWFUSR",113,0)
 ; Iterator for traversing name xref
"RTN","RGCWFUSR",114,0)
NAMEITER(CTX) ;
"RTN","RGCWFUSR",115,0)
 I '$Q D NAMEITER^RGSERG(CTX,$NA(^VA(200,"B"))) Q
"RTN","RGCWFUSR",116,0)
 Q $$NAMEITER^RGSERG(CTX)
"RTN","RGCWFUTL")
0^5^B7711238
"RTN","RGCWFUTL",1,0)
RGCWFUTL ;RI/CBMI/DKM CareWeb Management Utilites;01-Apr-2015 14:05;DKM
"RTN","RGCWFUTL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 376
"RTN","RGCWFUTL",3,0)
 ; Initiate shutdown sequence for applications
"RTN","RGCWFUTL",4,0)
SHUTDOWN N DELAY,MSG
"RTN","RGCWFUTL",5,0)
 W !,"Initiate CareWeb Shutdown Sequence",!!
"RTN","RGCWFUTL",6,0)
 D SHOWSESS()
"RTN","RGCWFUTL",7,0)
 W:$$GETLOGIN'="" "Note: shutdown has already been initiated.",!!
"RTN","RGCWFUTL",8,0)
 F  D  Q:$D(DELAY)
"RTN","RGCWFUTL",9,0)
 .R !,"# of seconds till shutdown (30 minimum): ",DELAY:DTIME,!
"RTN","RGCWFUTL",10,0)
 .E  S DELAY=U
"RTN","RGCWFUTL",11,0)
 .S DELAY=$TR(DELAY," ")
"RTN","RGCWFUTL",12,0)
 .Q:DELAY[U
"RTN","RGCWFUTL",13,0)
 .I DELAY["?" D  Q
"RTN","RGCWFUTL",14,0)
 ..K DELAY
"RTN","RGCWFUTL",15,0)
 ..W "Enter number of seconds before shutdown.",!
"RTN","RGCWFUTL",16,0)
 ..W "To specify time in minutes, follow number with letter M.",!
"RTN","RGCWFUTL",17,0)
 .S:DELAY?1.N1(1"M",1"m") DELAY=DELAY*60
"RTN","RGCWFUTL",18,0)
 .S DELAY=DELAY\1
"RTN","RGCWFUTL",19,0)
 .K:DELAY<30 DELAY
"RTN","RGCWFUTL",20,0)
 Q:DELAY[U
"RTN","RGCWFUTL",21,0)
 Q:'$$ASK^RGUT("Do you really want to shut down CareWeb in "_DELAY_" seconds")
"RTN","RGCWFUTL",22,0)
 D SDINIT(.MSG,DELAY,1)
"RTN","RGCWFUTL",23,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",24,0)
 Q
"RTN","RGCWFUTL",25,0)
 ; Abort a shutdown sequence in progress
"RTN","RGCWFUTL",26,0)
ABORTSD N MSG
"RTN","RGCWFUTL",27,0)
 W !,"Abort CareWeb Shutdown and Enable Logins",!!
"RTN","RGCWFUTL",28,0)
 D SHOWSESS()
"RTN","RGCWFUTL",29,0)
 W:$$GETLOGIN="" "Note: a shutdown does not appear to be in progress.",!!
"RTN","RGCWFUTL",30,0)
 Q:'$$ASK^RGUT("Do you really want to abort any shutdowns in progress and enable logins")
"RTN","RGCWFUTL",31,0)
 D SDABORT(.MSG,1)
"RTN","RGCWFUTL",32,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",33,0)
 Q
"RTN","RGCWFUTL",34,0)
 ; RPC: Initiate shutdown
"RTN","RGCWFUTL",35,0)
SDINIT(DATA,DELAY,LOCK,USR) ;
"RTN","RGCWFUTL",36,0)
 S DELAY=DELAY\1
"RTN","RGCWFUTL",37,0)
 I DELAY<30 S DATA="Invalid value for shutdown delay." Q
"RTN","RGCWFUTL",38,0)
 D:$G(LOCK) SETLOGIN("Application is currently offline.  Please try later.")
"RTN","RGCWFUTL",39,0)
 D BRDCAST^RGNETBEV("DESKTOP.SHUTDOWN.START",DELAY*1000,.USR)
"RTN","RGCWFUTL",40,0)
 S DATA="Shutdown sequence initiated.  "_$$SDMSG
"RTN","RGCWFUTL",41,0)
 Q
"RTN","RGCWFUTL",42,0)
 ; RPC: Abort shutdown
"RTN","RGCWFUTL",43,0)
SDABORT(DATA,UNLOCK,USR) ;
"RTN","RGCWFUTL",44,0)
 D BRDCAST^RGNETBEV("DESKTOP.SHUTDOWN.ABORT","Application shutdown has been aborted.  You may continue.",.USR)
"RTN","RGCWFUTL",45,0)
 D:$G(UNLOCK) SETLOGIN()
"RTN","RGCWFUTL",46,0)
 S DATA="Shutdown sequence aborted.  "_$$SDMSG
"RTN","RGCWFUTL",47,0)
 Q
"RTN","RGCWFUTL",48,0)
 ; Login status message
"RTN","RGCWFUTL",49,0)
SDMSG() Q "Logins are "_$S($L($$GETLOGIN):"disabled.",1:"enabled.")
"RTN","RGCWFUTL",50,0)
 ; Get inhibit login message
"RTN","RGCWFUTL",51,0)
GETLOGIN() ;
"RTN","RGCWFUTL",52,0)
 Q $$OPTMSG^RGNETBUT("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",53,0)
 ; Set inhibit login message
"RTN","RGCWFUTL",54,0)
SETLOGIN(MSG) ;
"RTN","RGCWFUTL",55,0)
 D OPTMSG^RGNETBUT("RGCWF CAREWEB FRAMEWORK",$G(MSG))
"RTN","RGCWFUTL",56,0)
 Q
"RTN","RGCWFUTL",57,0)
 ; RPC: Get/set inhibit login message
"RTN","RGCWFUTL",58,0)
MSGLOGIN(DATA,MSG) ;
"RTN","RGCWFUTL",59,0)
 I '$D(MSG) S DATA=$$GETLOGIN
"RTN","RGCWFUTL",60,0)
 E  D SETLOGIN(MSG)
"RTN","RGCWFUTL",61,0)
 Q
"RTN","RGCWFUTL",62,0)
 ; Show active CareWeb sessions
"RTN","RGCWFUTL",63,0)
SHOWSESS() ;
"RTN","RGCWFUTL",64,0)
 N X
"RTN","RGCWFUTL",65,0)
 S X=$$SHOWSESS^RGNETBUT("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",66,0)
 Q:$Q X
"RTN","RGCWFUTL",67,0)
 Q
"RTN","RGCWKDIN")
0^^B31607711
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;01-Apr-2015 14:05;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 376
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^RGUT("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^RGUT($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^RGUTOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^RGUTRPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^RGUTRPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^RGUTUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^RGUTRPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RG","DG","DDR","BEH" D REGNMSP^RGUTRPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^RGUTRPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^RGUTRPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^RGUTRPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"SEC","^DIC",996.54,996.54,0,"AUDIT")
@
"SEC","^DIC",996.54,996.54,0,"DD")
@
"SEC","^DIC",996.54,996.54,0,"DEL")
@
"SEC","^DIC",996.54,996.54,0,"LAYGO")
@
"SEC","^DIC",996.54,996.54,0,"RD")
@
"SEC","^DIC",996.54,996.54,0,"WR")
@
"SEC","^DIC",998.1,998.1,0,"AUDIT")
@
"SEC","^DIC",998.1,998.1,0,"DD")
@
"SEC","^DIC",998.1,998.1,0,"DEL")
@
"SEC","^DIC",998.1,998.1,0,"LAYGO")
@
"SEC","^DIC",998.1,998.1,0,"RD")
@
"SEC","^DIC",998.1,998.1,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")

"TEMP","INITIAL")

"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.212,"BRINGTOFRONT")

"TEMP","PTRS",19941.212,"CCOW")

"TEMP","PTRS",19941.212,"CONTEXT")

"TEMP","PTRS",19941.212,"DESKTOP.SHUTDOWN")

"TEMP","PTRS",19941.212,"DESKTOP.SHUTDOWN","RGCWF MANAGER")

"TEMP","PTRS",19941.212,"INFO")

"TEMP","PTRS",19941.212,"LOGIN")

"TEMP","PTRS",19941.212,"LOGOUT")

"TEMP","PTRS",19941.212,"MESSAGE")

"TEMP","PTRS",19941.212,"STATUS")

"TEMP","PTRS",19941.212,"SUBSCRIBE")

"TEMP","PTRS",19941.212,"TRACE")

"TEMP","PTRS",19941.212,"UNSUBSCRIBE")

"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","PTRS",19941.2121,"BRINGTOFRONT")

"TEMP","PTRS",19941.2121,"CCOW")

"TEMP","PTRS",19941.2121,"CONTEXT")

"TEMP","PTRS",19941.2121,"DESKTOP.SHUTDOWN")

"TEMP","PTRS",19941.2121,"INFO")

"TEMP","PTRS",19941.2121,"LOGIN")

"TEMP","PTRS",19941.2121,"LOGOUT")

"TEMP","PTRS",19941.2121,"MESSAGE")

"TEMP","PTRS",19941.2121,"STATUS")

"TEMP","PTRS",19941.2121,"SUBSCRIBE")

"TEMP","PTRS",19941.2121,"TRACE")

"TEMP","PTRS",19941.2121,"UNSUBSCRIBE")

"TEMP","TGT")
1
"VER")
8.0^22.0
"^DD",996.54,996.54,0)
FIELD^^7^14
"^DD",996.54,996.54,0,"DT")
3091007
"^DD",996.54,996.54,0,"IX","B",996.54,.01)

"^DD",996.54,996.54,0,"NM","NETSERV BROKER EVENT TYPE")

"^DD",996.54,996.54,0,"PT",996.55,1)

"^DD",996.54,996.54,0,"PT",999.995,.01)

"^DD",996.54,996.54,0,"PT",19930.995,.01)

"^DD",996.54,996.54,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",996.54,996.54,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",996.54,996.54,.01,1,0)
^.1
"^DD",996.54,996.54,.01,1,1,0)
996.54^B
"^DD",996.54,996.54,.01,1,1,1)
S ^RGNET(996.54,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.54,.01,1,1,2)
K ^RGNET(996.54,"B",$E(X,1,30),DA)
"^DD",996.54,996.54,.01,3)
Answer must be 3-100 characters in length.
"^DD",996.54,996.54,.01,"DT")
3030611
"^DD",996.54,996.54,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",996.54,996.54,1,3)
M code to invoke monitor for this event type
"^DD",996.54,996.54,1,9)
@
"^DD",996.54,996.54,1,"DT")
3021021
"^DD",996.54,996.54,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",996.54,996.54,2,3)
Enter YES to disable this event type.
"^DD",996.54,996.54,2,21,0)
^.001^3^3^3030810^
"^DD",996.54,996.54,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",996.54,996.54,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",996.54,996.54,2,21,3,0)
already in the queue. 
"^DD",996.54,996.54,2,"DT")
3030810
"^DD",996.54,996.54,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",996.54,996.54,3,3)
Enter the nominal polling interval in seconds.
"^DD",996.54,996.54,3,21,0)
^^10^10^3021021.152235
"^DD",996.54,996.54,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",996.54,996.54,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",996.54,996.54,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",996.54,996.54,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",996.54,996.54,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",996.54,996.54,3,21,6,0)
 
"^DD",996.54,996.54,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",996.54,996.54,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",996.54,996.54,3,21,9,0)
mitigate impact on system load. 
"^DD",996.54,996.54,3,21,10,0)

"^DD",996.54,996.54,3,"DT")
3021021
"^DD",996.54,996.54,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",996.54,996.54,4,3)
Enter YES to enable logging of this event.
"^DD",996.54,996.54,4,"DT")
3030611
"^DD",996.54,996.54,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",996.54,996.54,5,3)
Number of days to retain log entries.
"^DD",996.54,996.54,5,"DT")
3030611
"^DD",996.54,996.54,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",996.54,996.54,6,3)
Determines how a monitored event is polled.
"^DD",996.54,996.54,6,21,0)
^^11^11^3030810.175145
"^DD",996.54,996.54,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",996.54,996.54,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",996.54,996.54,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",996.54,996.54,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",996.54,996.54,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",996.54,996.54,6,21,6,0)
is available to the monitor in this case.
"^DD",996.54,996.54,6,21,7,0)

"^DD",996.54,996.54,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",996.54,996.54,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",996.54,996.54,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",996.54,996.54,6,21,11,0)
the host date/time).
"^DD",996.54,996.54,6,"DT")
3030810
"^DD",996.54,996.54,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""RGNE"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",996.54,996.54,7,12)
Restricts to Extended Action Protocols starting with RGNE
"^DD",996.54,996.54,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""RGNE"",$P(^(0),U,4)=""X"""
"^DD",996.54,996.54,7,"DT")
3091007
"^DD",996.54,996.54,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",996.54,996.54,10,3)
Logic to display stub info in log viewer.
"^DD",996.54,996.54,10,9)
@
"^DD",996.54,996.54,10,"DT")
3030611
"^DD",996.54,996.54,20,0)
PUBLICATION KEY^996.542P^^20;0
"^DD",996.54,996.54,21,0)
SUBSCRIPTION KEY^996.5421P^^21;0
"^DD",996.54,996.54,99,0)
DESCRIPTION^996.5499^^99;0
"^DD",996.54,996.54,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",996.54,996.54,100,3)
Date and time of last error
"^DD",996.54,996.54,100,"DT")
3061129
"^DD",996.54,996.54,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",996.54,996.54,101,3)
Answer must be 1-240 characters in length.
"^DD",996.54,996.54,101,"DT")
3061129
"^DD",996.54,996.542,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",996.54,996.542,0,"DT")
3021021
"^DD",996.54,996.542,0,"IX","B",996.542,.01)

"^DD",996.54,996.542,0,"NM","PUBLICATION KEY")

"^DD",996.54,996.542,0,"UP")
996.54
"^DD",996.54,996.542,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",996.54,996.542,.01,1,0)
^.1
"^DD",996.54,996.542,.01,1,1,0)
996.542^B
"^DD",996.54,996.542,.01,1,1,1)
S ^RGNET(996.54,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.542,.01,1,1,2)
K ^RGNET(996.54,DA(1),20,"B",$E(X,1,30),DA)
"^DD",996.54,996.542,.01,3)
Security keys required to fire this event.
"^DD",996.54,996.542,.01,21,0)
^^2^2^3021021.152715
"^DD",996.54,996.542,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",996.54,996.542,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",996.54,996.542,.01,"DT")
3040310
"^DD",996.54,996.5421,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",996.54,996.5421,0,"DT")
3021021
"^DD",996.54,996.5421,0,"IX","B",996.5421,.01)

"^DD",996.54,996.5421,0,"NM","SUBSCRIPTION KEY")

"^DD",996.54,996.5421,0,"UP")
996.54
"^DD",996.54,996.5421,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",996.54,996.5421,.01,1,0)
^.1
"^DD",996.54,996.5421,.01,1,1,0)
996.5421^B
"^DD",996.54,996.5421,.01,1,1,1)
S ^RGNET(996.54,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",996.54,996.5421,.01,1,1,2)
K ^RGNET(996.54,DA(1),21,"B",$E(X,1,30),DA)
"^DD",996.54,996.5421,.01,3)
Security keys required to receive this event type.
"^DD",996.54,996.5421,.01,21,0)
^^2^2^3021021.153002
"^DD",996.54,996.5421,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",996.54,996.5421,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",996.54,996.5421,.01,"DT")
3040310
"^DD",996.54,996.5499,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",996.54,996.5499,0,"DT")
3021021
"^DD",996.54,996.5499,0,"NM","DESCRIPTION")

"^DD",996.54,996.5499,0,"UP")
996.54
"^DD",996.54,996.5499,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",996.54,996.5499,.01,3)
Enter a detailed description of this event type.
"^DD",996.54,996.5499,.01,"DT")
3021021
"^DD",998.1,998.1,0)
FIELD^^99^7
"^DD",998.1,998.1,0,"DDA")
N
"^DD",998.1,998.1,0,"DT")
3150316
"^DD",998.1,998.1,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",998.1,998.1,0,"IX","B",998.1,.01)

"^DD",998.1,998.1,0,"NM","SERIALIZATION CONTROL")

"^DD",998.1,998.1,0,"PT",999.991,.01)

"^DD",998.1,998.1,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<1)!'(X'?1P.E) X
"^DD",998.1,998.1,.01,1,0)
^.1
"^DD",998.1,998.1,.01,1,1,0)
998.1^B
"^DD",998.1,998.1,.01,1,1,1)
S ^RGSER(998.1,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.1,.01,1,1,2)
K ^RGSER(998.1,"B",$E(X,1,30),DA)
"^DD",998.1,998.1,.01,3)
Replace Name of the serialization type (1-30 characters).
"^DD",998.1,998.1,.01,21,0)
^^3^3^3150310.204501
"^DD",998.1,998.1,.01,21,1,0)
This is the portion of the request URL that identifies the serialization format
"^DD",998.1,998.1,.01,21,2,0)
of the requested resource.  It is first part of the path portion of the URL.
"^DD",998.1,998.1,.01,21,3,0)
The name and associated content type together should be unique within the file.
"^DD",998.1,998.1,.01,"DT")
3150211
"^DD",998.1,998.1,1,0)
CONTENT TYPE^F^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.1,1,3)
Content type(s) generated by this serializer.
"^DD",998.1,998.1,1,21,0)
^^6^6^3150315.140532
"^DD",998.1,998.1,1,21,1,0)
These are the content types (separated by commas) that are used to match 
"^DD",998.1,998.1,1,21,2,0)
against the requested content type.  It is used to match the requestor's 
"^DD",998.1,998.1,1,21,3,0)
desired content type.  This allows having multiple entries with the same name, 
"^DD",998.1,998.1,1,21,4,0)
but different content types.  By default, the first value of this entry is 
"^DD",998.1,998.1,1,21,5,0)
returned as the Content-Type in the response header.  However, the serializer 
"^DD",998.1,998.1,1,21,6,0)
may opt to override this value with a more specific MIME type. 
"^DD",998.1,998.1,1,"DT")
3150315
"^DD",998.1,998.1,2,0)
SERIALIZER^F^^0;3^K:$L(X)>10!($L(X)<1)!'(X?1.A0.AN) X
"^DD",998.1,998.1,2,3)
Name of serialization routine.
"^DD",998.1,998.1,2,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.1,2,21,1,0)
The specified serializer routine must implement the Serializer interface.
"^DD",998.1,998.1,2,"DT")
3150211
"^DD",998.1,998.1,3,0)
VERSION^F^^0;4^K:$L(X)>20!($L(X)<1) X
"^DD",998.1,998.1,3,3)
Version of this serializer (1-20 characters).
"^DD",998.1,998.1,3,21,0)
^^1^1^3150312.172833
"^DD",998.1,998.1,3,21,1,0)
This represents the version of the format the serializer is generating.
"^DD",998.1,998.1,3,"DT")
3150312
"^DD",998.1,998.1,10,0)
RESOURCE^998.11^^10;0
"^DD",998.1,998.1,10,21,0)
^.001^4^4^3150310^^
"^DD",998.1,998.1,10,21,1,0)
This is the portion of the path of the request URL that follows the 
"^DD",998.1,998.1,10,21,2,0)
serialization specifier.  It may include the wildcard characters # (for 
"^DD",998.1,998.1,10,21,3,0)
matching any sequence of digits) and * (for matching any sequence of 
"^DD",998.1,998.1,10,21,4,0)
characters).
"^DD",998.1,998.1,20,0)
HEADER FIELDS^998.14^^20;0
"^DD",998.1,998.1,20,"DT")
3150228
"^DD",998.1,998.1,99,0)
DESCRIPTION^998.199^^99;0
"^DD",998.1,998.11,0)
RESOURCE SUB-FIELD^^50^9
"^DD",998.1,998.11,0,"DT")
3150310
"^DD",998.1,998.11,0,"IX","B",998.11,.01)

"^DD",998.1,998.11,0,"IX","C",998.11,.01)

"^DD",998.1,998.11,0,"NM","RESOURCE")

"^DD",998.1,998.11,0,"UP")
998.1
"^DD",998.1,998.11,.01,0)
RESOURCE^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.11,.01,1,0)
^.1^^-1
"^DD",998.1,998.11,.01,1,1,0)
998.11^B^MUMPS
"^DD",998.1,998.11,.01,1,1,1)
S ^RGSER(998.1,DA(1),10,"B",X,DA)=$$TOPTRN^RGSERDD(X)
"^DD",998.1,998.11,.01,1,1,2)
K ^RGSER(998.1,DA(1),10,"B",X,DA)
"^DD",998.1,998.11,.01,1,1,"DT")
3150308
"^DD",998.1,998.11,.01,1,2,0)
998.11^C^MUMPS
"^DD",998.1,998.11,.01,1,2,1)
S ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)=""
"^DD",998.1,998.11,.01,1,2,2)
K ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)
"^DD",998.1,998.11,.01,1,2,"DT")
3150211
"^DD",998.1,998.11,.01,3)
Enter path name for the resource.
"^DD",998.1,998.11,.01,"DT")
3150308
"^DD",998.1,998.11,1,0)
INTERNAL^S^0:NO;1:YES;^0;2^Q
"^DD",998.1,998.11,1,3)
Enter YES if this is an internal resource.
"^DD",998.1,998.11,1,21,0)
^^3^3^3150310.205212
"^DD",998.1,998.11,1,21,1,0)
If set to YES, this resource is internal to the server and may not be 
"^DD",998.1,998.11,1,21,2,0)
referenced directly.  Any attempt to request an internal resource will return 
"^DD",998.1,998.11,1,21,3,0)
an error.
"^DD",998.1,998.11,1,"DT")
3150221
"^DD",998.1,998.11,2,0)
SOURCE^NJ10,4XO^^0;3^K:'$$VFILE^DILFD(X) X
"^DD",998.1,998.11,2,2)
S Y(0)=Y S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,2.1)
S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,3)
Enter a file or subfile number.
"^DD",998.1,998.11,2,21,0)
^^2^2^3150310.205524
"^DD",998.1,998.11,2,21,1,0)
This is the number of the file or subfile from which the resource will be
"^DD",998.1,998.11,2,21,2,0)
extracted.  For resources that are derived, this field may be null.
"^DD",998.1,998.11,2,"DT")
3150211
"^DD",998.1,998.11,10,0)
CUSTOM SERIALIZER^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,10,3)
M code to invoke custom serializer.
"^DD",998.1,998.11,10,9)
@
"^DD",998.1,998.11,10,21,0)
^^4^4^3150310.205835
"^DD",998.1,998.11,10,21,1,0)
For resources that use a custom serializer, this field contains executable M 
"^DD",998.1,998.11,10,21,2,0)
code that performs the serialization.  When this field is non-null, the 
"^DD",998.1,998.11,10,21,3,0)
default serialization code is not executed unless the custom serializer kills 
"^DD",998.1,998.11,10,21,4,0)
the XSER variable before returning control.
"^DD",998.1,998.11,10,"DT")
3150211
"^DD",998.1,998.11,20,0)
CUSTOM READER^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,20,3)
M code to invoke custom retrieval logic.
"^DD",998.1,998.11,20,9)
@
"^DD",998.1,998.11,20,21,0)
^.001^16^16^3150312^
"^DD",998.1,998.11,20,21,1,0)
This field contains custom retrieval logic for resources that require it.  It
"^DD",998.1,998.11,20,21,2,0)
should return a single instance of a resource given its unique identifier using
"^DD",998.1,998.11,20,21,3,0)
the VALS array in the format:
"^DD",998.1,998.11,20,21,4,0)

"^DD",998.1,998.11,20,21,5,0)
       VALS(FILE,IENS,<property>,<int/ext>)=<value>
"^DD",998.1,998.11,20,21,6,0)

"^DD",998.1,998.11,20,21,7,0)
where
"^DD",998.1,998.11,20,21,8,0)

"^DD",998.1,998.11,20,21,9,0)
       <property> = The property's name.
"^DD",998.1,998.11,20,21,10,0)
       <int/ext>  = "I" or "E" for representing internal and external values,
"^DD",998.1,998.11,20,21,11,0)
                    respectively.
"^DD",998.1,998.11,20,21,12,0)
       <value>    = The property's value.
"^DD",998.1,998.11,20,21,13,0)

"^DD",998.1,998.11,20,21,14,0)
Note that even if custom retrieval logic is provided, the default retrieval
"^DD",998.1,998.11,20,21,15,0)
logic will also be executed if the value of the FILE variable (from the SOURCE
"^DD",998.1,998.11,20,21,16,0)
field) is non-zero.
"^DD",998.1,998.11,20,"DT")
3150312
"^DD",998.1,998.11,30,0)
PROPERTY^998.12I^^30;0
"^DD",998.1,998.11,30,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.11,30,21,1,0)
This is the list of properties for the given resource.
"^DD",998.1,998.11,40,0)
PARAMETER^998.13I^^40;0
"^DD",998.1,998.11,40,21,0)
^^5^5^3150310.211659
"^DD",998.1,998.11,40,21,1,0)
This is the list of searchable parameters supported for the resource.  These 
"^DD",998.1,998.11,40,21,2,0)
serve two purposes.  First, they define the logic for determining a match for 
"^DD",998.1,998.11,40,21,3,0)
the given search parameter.  Second, they may define a cohort selector for a 
"^DD",998.1,998.11,40,21,4,0)
given search parameter.  Cohort selectors optimize search strategy depending 
"^DD",998.1,998.11,40,21,5,0)
on which search parameters are selected.
"^DD",998.1,998.11,50,0)
TEMPLATE^998.15^^50;0
"^DD",998.1,998.11,50,21,0)
^^8^8^3150312.154427
"^DD",998.1,998.11,50,21,1,0)
Templates may be referenced by properties to generate output from the 
"^DD",998.1,998.11,50,21,2,0)
serializer. They may contain replaceable parameters enclosed between "|" 
"^DD",998.1,998.11,50,21,3,0)
characters.  If a replaceable parameter starts with an "@" or "#" character, 
"^DD",998.1,998.11,50,21,4,0)
it is assumed to be an M expression whose value is inserted into the 
"^DD",998.1,998.11,50,21,5,0)
generated output.  Otherwise, it is assumed to be a field identifier whose 
"^DD",998.1,998.11,50,21,6,0)
value is inserted.  Except for "#"-prefixed expressions, any reserved 
"^DD",998.1,998.11,50,21,7,0)
characters in the replacement value will be escaped according to the rules
"^DD",998.1,998.11,50,21,8,0)
specified by the serializer.
"^DD",998.1,998.11,99,0)
DESCRIPTION^F^^99;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.11,99,3)
Enter brief description of this resource.
"^DD",998.1,998.11,99,21,0)
^^1^1^3150310.21222
"^DD",998.1,998.11,99,21,1,0)
Provides a detailed description of the associated resource.
"^DD",998.1,998.11,99,"DT")
3150211
"^DD",998.1,998.12,0)
PROPERTY SUB-FIELD^^10^5
"^DD",998.1,998.12,0,"DT")
3150310
"^DD",998.1,998.12,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.12,0,"IX","ASEQ",998.12,3)

"^DD",998.1,998.12,0,"IX","B",998.12,.01)

"^DD",998.1,998.12,0,"NM","PROPERTY")

"^DD",998.1,998.12,0,"UP")
998.11
"^DD",998.1,998.12,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.12,.01,1,0)
^.1
"^DD",998.1,998.12,.01,1,1,0)
998.12^B
"^DD",998.1,998.12,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.12,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)
"^DD",998.1,998.12,.01,3)
Property name to be used in serialization.
"^DD",998.1,998.12,.01,21,0)
^^8^8^3150311.183527
"^DD",998.1,998.12,.01,21,1,0)
This is the name that identifies the property.  It is typically the name that 
"^DD",998.1,998.12,.01,21,2,0)
is emitted by the serializer, but this is not a requirement. An arbitrary tag 
"^DD",998.1,998.12,.01,21,3,0)
may also be appended to the property name using the "!" character as a 
"^DD",998.1,998.12,.01,21,4,0)
delimiter.  This may be used to provide additional information about the 
"^DD",998.1,998.12,.01,21,5,0)
entry.  For example, if a property requires multiple entries to implement the 
"^DD",998.1,998.12,.01,21,6,0)
logic required to emit it, the tag can provide information to the user as to 
"^DD",998.1,998.12,.01,21,7,0)
the role each entry plays.  For any given entry, the serializer may choose to 
"^DD",998.1,998.12,.01,21,8,0)
apply additional significance to the tag.
"^DD",998.1,998.12,.01,"DT")
3150311
"^DD",998.1,998.12,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.12,1,3)
Field name or # corresponding to this property
"^DD",998.1,998.12,1,21,0)
^^7^7^3150311.184042
"^DD",998.1,998.12,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved
"^DD",998.1,998.12,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.12,1,21,3,0)
retrieved for the specified fields are available to the serializer.  Where the
"^DD",998.1,998.12,1,21,4,0)
SOURCE is a FileMan file or subfile, the field is the field # (or name).  For 
"^DD",998.1,998.12,1,21,5,0)
resources using custom retrieval logic, the field is the identifier assigned 
"^DD",998.1,998.12,1,21,6,0)
by that logic.  For properties that do not require source data (such as a 
"^DD",998.1,998.12,1,21,7,0)
static property), this entry may be left blank.
"^DD",998.1,998.12,1,"DT")
3150311
"^DD",998.1,998.12,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;I:INLINE;T:TEMPLATE;S:STATIC;N:NOP;^0;3^Q
"^DD",998.1,998.12,2,3)
Encoding type for this property.
"^DD",998.1,998.12,2,21,0)
^^15^15^3150310.21405
"^DD",998.1,998.12,2,21,1,0)
Represents the type of property.  Possible values are:
"^DD",998.1,998.12,2,21,2,0)
   B = BOOLEAN         - Emits a property value that is true or false.
"^DD",998.1,998.12,2,21,3,0)
   C = CUSTOM          - The associated custom code emits the property value.
"^DD",998.1,998.12,2,21,4,0)
   D = DATE            - Emits a property value that is a date.
"^DD",998.1,998.12,2,21,5,0)
   F = FREE TEXT       - Emits the external value of the property.
"^DD",998.1,998.12,2,21,6,0)
   I = INLINE          - Inserts a serialized object inline.
"^DD",998.1,998.12,2,21,7,0)
   N = NOP             - Causes the property to be ignored.
"^DD",998.1,998.12,2,21,8,0)
   M = MULTIPLE        - The property is a subfile multiple.
"^DD",998.1,998.12,2,21,9,0)
   O = OBJECT          - Invokes serialization logic for the specified object.
"^DD",998.1,998.12,2,21,10,0)
   R = RAW             - Emits the internal value of the property.
"^DD",998.1,998.12,2,21,11,0)
   S = STATIC          - Emits a static value for the property.
"^DD",998.1,998.12,2,21,12,0)
   T = TEMPLATE        - Emits the specified template.
"^DD",998.1,998.12,2,21,13,0)
   W = WORD PROCESSING - Emits a word processing value.
"^DD",998.1,998.12,2,21,14,0)

"^DD",998.1,998.12,2,21,15,0)
For more information, see the description of the CONTROL field.
"^DD",998.1,998.12,2,"DT")
3150310
"^DD",998.1,998.12,3,0)
SEQUENCE^RNJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.12,3,1,0)
^.1
"^DD",998.1,998.12,3,1,1,0)
998.12^ASEQ
"^DD",998.1,998.12,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.12,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.12,3,1,1,"DT")
3150211
"^DD",998.1,998.12,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.12,3,21,0)
^^3^3^3150311.184411
"^DD",998.1,998.12,3,21,1,0)
This is a numerical sequence # that determines the order in which the 
"^DD",998.1,998.12,3,21,2,0)
serializer processes property entries, and, thus, the order in which 
"^DD",998.1,998.12,3,21,3,0)
properties are emitted by the serializer.
"^DD",998.1,998.12,3,"DT")
3150311
"^DD",998.1,998.12,10,0)
CONTROL^FX^^10;E1,250^D ITXCTRL^RGSERDD(.X,.DA)
"^DD",998.1,998.12,10,3)
Enter control data.
"^DD",998.1,998.12,10,21,0)
^^10^10^3150311.184552
"^DD",998.1,998.12,10,21,1,0)
The content of this field depends on the value of the TYPE field.  For those
"^DD",998.1,998.12,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",998.1,998.12,10,21,3,0)

"^DD",998.1,998.12,10,21,4,0)
  C (CUSTOM)          - Executable M code.
"^DD",998.1,998.12,10,21,5,0)
  I (INLINE)          - Path for inline resource.
"^DD",998.1,998.12,10,21,6,0)
  O (OBJECT)          - Path for the target object.
"^DD",998.1,998.12,10,21,7,0)
  M (MULTIPLE)        - Path for the multiple entry.
"^DD",998.1,998.12,10,21,8,0)
  S (STATIC)          - The static value of the property.
"^DD",998.1,998.12,10,21,9,0)
  W (WORD PROCESSING) - Line delimiter to use (escaped characters supported).
"^DD",998.1,998.12,10,21,10,0)

"^DD",998.1,998.12,10,"DT")
3150311
"^DD",998.1,998.13,0)
PARAMETER SUB-FIELD^^10^6
"^DD",998.1,998.13,0,"DT")
3150211
"^DD",998.1,998.13,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.13,0,"IX","ASEQ",998.13,3)

"^DD",998.1,998.13,0,"IX","B",998.13,.01)

"^DD",998.1,998.13,0,"NM","PARAMETER")

"^DD",998.1,998.13,0,"UP")
998.11
"^DD",998.1,998.13,.01,0)
PARAMETER^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.13,.01,1,0)
^.1
"^DD",998.1,998.13,.01,1,1,0)
998.13^B
"^DD",998.1,998.13,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.13,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)
"^DD",998.1,998.13,.01,3)
Enter name of search parameter.
"^DD",998.1,998.13,.01,21,0)
^^1^1^3150311.184801
"^DD",998.1,998.13,.01,21,1,0)
This is the identifier of the parameter as it would appear in a query.
"^DD",998.1,998.13,.01,"DT")
3150311
"^DD",998.1,998.13,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.13,1,3)
Field name or # corresponding to this parameter.
"^DD",998.1,998.13,1,21,0)
^^6^6^3150311.185216
"^DD",998.1,998.13,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved 
"^DD",998.1,998.13,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.13,1,21,3,0)
retrieved for the specified fields are available to the serializer when 
"^DD",998.1,998.13,1,21,4,0)
formulating a search query.  Where the SOURCE is a FileMan file or subfile, 
"^DD",998.1,998.13,1,21,5,0)
the field is the field # (or name).  For resources using custom retrieval 
"^DD",998.1,998.13,1,21,6,0)
logic, the field is the identifier assigned by that logic. 
"^DD",998.1,998.13,1,"DT")
3150311
"^DD",998.1,998.13,2,0)
TYPE^S^N:NUMBER;D:DATE;S:STRING;T:TOKEN;R:REFERENCE;Q:QUANTITY;^0;3^Q
"^DD",998.1,998.13,2,3)
Type of the search parameter.
"^DD",998.1,998.13,2,21,0)
^^12^12^3150311.190219
"^DD",998.1,998.13,2,21,1,0)
The parameter type determines the allowable comparison operators and the logic 
"^DD",998.1,998.13,2,21,2,0)
used to implement them.
"^DD",998.1,998.13,2,21,3,0)

"^DD",998.1,998.13,2,21,4,0)
The following parameter types are recognized:
"^DD",998.1,998.13,2,21,5,0)

"^DD",998.1,998.13,2,21,6,0)
       N        NUMBER     - The parameter is a numeric value.
"^DD",998.1,998.13,2,21,7,0)
       D        DATE       - The parameter is a date value.
"^DD",998.1,998.13,2,21,8,0)
       S        STRING     - The parameter is a text string.
"^DD",998.1,998.13,2,21,9,0)
       T        TOKEN      - The parameter is a special token.
"^DD",998.1,998.13,2,21,10,0)
       R        REFERENCE  - The parameter is a resource reference.
"^DD",998.1,998.13,2,21,11,0)
       Q        QUANTITY   - The parameter is a quantity.
"^DD",998.1,998.13,2,21,12,0)
 
"^DD",998.1,998.13,2,"DT")
3150311
"^DD",998.1,998.13,3,0)
SEQUENCE^NJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.13,3,1,0)
^.1
"^DD",998.1,998.13,3,1,1,0)
998.13^ASEQ
"^DD",998.1,998.13,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.13,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.13,3,1,1,"DT")
3150211
"^DD",998.1,998.13,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.13,3,21,0)
^^3^3^3150311.190416
"^DD",998.1,998.13,3,21,1,0)
The sequence # determines the order the serializer uses in processing 
"^DD",998.1,998.13,3,21,2,0)
parameters.  This can be important in determining optimal search strategy 
"^DD",998.1,998.13,3,21,3,0)
where multiple parameters are specified.
"^DD",998.1,998.13,3,"DT")
3150311
"^DD",998.1,998.13,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.13,10,3)
M code to perform filtering.
"^DD",998.1,998.13,10,"DT")
3150211
"^DD",998.1,998.13,20,0)
COHORT^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.13,20,3)
M code to set global selector into X.
"^DD",998.1,998.13,20,9)
@
"^DD",998.1,998.13,20,"DT")
3150211
"^DD",998.1,998.14,0)
HEADER FIELDS SUB-FIELD^^.01^1
"^DD",998.1,998.14,0,"DT")
3150228
"^DD",998.1,998.14,0,"NM","HEADER FIELDS")

"^DD",998.1,998.14,0,"UP")
998.1
"^DD",998.1,998.14,.01,0)
HEADER FIELDS^WLx^^0;1^Q
"^DD",998.1,998.14,.01,3)
Additional fields to be included in the HTTP response header.
"^DD",998.1,998.14,.01,"DT")
3150228
"^DD",998.1,998.15,0)
TEMPLATE SUB-FIELD^^1^2
"^DD",998.1,998.15,0,"DT")
3150309
"^DD",998.1,998.15,0,"IX","B",998.15,.01)

"^DD",998.1,998.15,0,"NM","TEMPLATE")

"^DD",998.1,998.15,0,"UP")
998.11
"^DD",998.1,998.15,.01,0)
TEMPLATE^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",998.1,998.15,.01,1,0)
^.1
"^DD",998.1,998.15,.01,1,1,0)
998.15^B
"^DD",998.1,998.15,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.15,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)
"^DD",998.1,998.15,.01,3)
Answer must be 1-30 characters in length.
"^DD",998.1,998.15,.01,"DT")
3150309
"^DD",998.1,998.15,1,0)
CONTENT^998.151^^1;0
"^DD",998.1,998.151,0)
CONTENT SUB-FIELD^^.01^1
"^DD",998.1,998.151,0,"DT")
3150309
"^DD",998.1,998.151,0,"NM","CONTENT")

"^DD",998.1,998.151,0,"UP")
998.15
"^DD",998.1,998.151,.01,0)
CONTENT^WLx^^0;1^Q
"^DD",998.1,998.151,.01,"DT")
3150309
"^DD",998.1,998.199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",998.1,998.199,0,"DT")
3150316
"^DD",998.1,998.199,0,"NM","DESCRIPTION")

"^DD",998.1,998.199,0,"UP")
998.1
"^DD",998.1,998.199,.01,0)
DESCRIPTION^WLx^^0;1^Q
"^DD",998.1,998.199,.01,3)
Enter a description of this endpoint using HTML formatting.
"^DD",998.1,998.199,.01,21,0)
^^2^2^3150316.133317
"^DD",998.1,998.199,.01,21,1,0)
The content of this field will be returned if a request is directed to this 
"^DD",998.1,998.199,.01,21,2,0)
endpoint's root URL. 
"^DD",998.1,998.199,.01,"DT")
3150316
"^DIC",996.54,996.54,0)
NETSERV BROKER EVENT TYPE^996.54
"^DIC",996.54,996.54,0,"GL")
^RGNET(996.54,
"^DIC",996.54,"B","NETSERV BROKER EVENT TYPE",996.54)

"^DIC",998.1,998.1,0)
SERIALIZATION CONTROL^998.1
"^DIC",998.1,998.1,0,"GL")
^RGSER(998.1,
"^DIC",998.1,998.1,"%D",0)
^^1^1^3150211.113842
"^DIC",998.1,998.1,"%D",1,0)
Supports serialization of domain objects.
"^DIC",998.1,"B","SERIALIZATION CONTROL",998.1)

**INSTALL NAME**
CAREWEB CONTEXT 1.0
"BLD",8487,0)
CAREWEB CONTEXT 1.0^^0^3150407^n
"BLD",8487,4,0)
^9.64PA^998.1^4
"BLD",8487,4,998.1,0)
998.1
"BLD",8487,4,998.1,222)
y^y^f^^n^^y^o^n
"BLD",8487,4,998.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8487,4,999.2,0)
999.2
"BLD",8487,4,999.2,222)
y^y^f^^n^^y^r^n
"BLD",8487,4,999.201,0)
999.201
"BLD",8487,4,999.201,222)
n^y^f^^y^^y^o^n
"BLD",8487,4,999.201,224)
I $$SCRN^RGCWKDTP(Y,4)
"BLD",8487,4,19941.21,0)
19941.21
"BLD",8487,4,19941.21,222)
n^y^f^^y^^y^o^n
"BLD",8487,4,19941.21,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8487,4,"B",998.1,998.1)

"BLD",8487,4,"B",999.2,999.2)

"BLD",8487,4,"B",999.201,999.201)

"BLD",8487,4,"B",19941.21,19941.21)

"BLD",8487,6.3)
372
"BLD",8487,"INI")
PRE^RGCWKDIN
"BLD",8487,"INIT")
POST^RGCWKDIN
"BLD",8487,"KRN",0)
^9.67PA^8994^20
"BLD",8487,"KRN",.4,0)
.4
"BLD",8487,"KRN",.401,0)
.401
"BLD",8487,"KRN",.402,0)
.402
"BLD",8487,"KRN",.403,0)
.403
"BLD",8487,"KRN",.5,0)
.5
"BLD",8487,"KRN",.84,0)
.84
"BLD",8487,"KRN",3.6,0)
3.6
"BLD",8487,"KRN",3.8,0)
3.8
"BLD",8487,"KRN",9.2,0)
9.2
"BLD",8487,"KRN",9.8,0)
9.8
"BLD",8487,"KRN",9.8,"NM",0)
^9.68A^10^10
"BLD",8487,"KRN",9.8,"NM",1,0)
RGCWENC1^^0^B34209910
"BLD",8487,"KRN",9.8,"NM",2,0)
RGCWENCX^^0^B118167219
"BLD",8487,"KRN",9.8,"NM",3,0)
RGCWPTP1^^0^B27498471
"BLD",8487,"KRN",9.8,"NM",4,0)
RGCWPTP2^^0^B6092178
"BLD",8487,"KRN",9.8,"NM",5,0)
RGCWPTP3^^0^B17293499
"BLD",8487,"KRN",9.8,"NM",6,0)
RGCWPTPC^^0^B8280859
"BLD",8487,"KRN",9.8,"NM",7,0)
RGCWPTPL^^0^B18695330
"BLD",8487,"KRN",9.8,"NM",8,0)
RGCWPTPS^^0^B4899277
"BLD",8487,"KRN",9.8,"NM",9,0)
RGCWPTCX^^0^B39032511
"BLD",8487,"KRN",9.8,"NM",10,0)
RGCWFTIU^^0^B2617280
"BLD",8487,"KRN",9.8,"NM","B","RGCWENC1",1)

"BLD",8487,"KRN",9.8,"NM","B","RGCWENCX",2)

"BLD",8487,"KRN",9.8,"NM","B","RGCWFTIU",10)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTCX",9)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP1",3)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP2",4)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP3",5)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPC",6)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPL",7)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPS",8)

"BLD",8487,"KRN",19,0)
19
"BLD",8487,"KRN",19.1,0)
19.1
"BLD",8487,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",8487,"KRN",19.1,"NM",1,0)
RGCWPT PATIENT SELECT^^0
"BLD",8487,"KRN",19.1,"NM","B","RGCWPT PATIENT SELECT",1)

"BLD",8487,"KRN",101,0)
101
"BLD",8487,"KRN",409.61,0)
409.61
"BLD",8487,"KRN",771,0)
771
"BLD",8487,"KRN",779.2,0)
779.2
"BLD",8487,"KRN",870,0)
870
"BLD",8487,"KRN",8989.51,0)
8989.51
"BLD",8487,"KRN",8989.51,"NM",0)
^9.68A^21^21
"BLD",8487,"KRN",8989.51,"NM",1,0)
RGCWENCX CREATE VISIT^^0
"BLD",8487,"KRN",8989.51,"NM",2,0)
RGCWENCX DETAIL REPORT^^0
"BLD",8487,"KRN",8989.51,"NM",3,0)
RGCWENCX OTHER LOCATION^^0
"BLD",8487,"KRN",8989.51,"NM",4,0)
RGCWENCX PROV ENC FETCH^^0
"BLD",8487,"KRN",8989.51,"NM",5,0)
RGCWENCX PROVIDER^^0
"BLD",8487,"KRN",8989.51,"NM",6,0)
RGCWENCX SEARCH RANGE START^^0
"BLD",8487,"KRN",8989.51,"NM",7,0)
RGCWENCX SEARCH RANGE STOP^^0
"BLD",8487,"KRN",8989.51,"NM",8,0)
RGCWENCX VISIT LOCK OVERRIDE^^0
"BLD",8487,"KRN",8989.51,"NM",9,0)
RGCWENCX VISIT LOCKED^^0
"BLD",8487,"KRN",8989.51,"NM",10,0)
RGCWENCX VISIT TYPES^^0
"BLD",8487,"KRN",8989.51,"NM",11,0)
RGCWPTCX DEMO MODE^^0
"BLD",8487,"KRN",8989.51,"NM",12,0)
RGCWPTCX DETAIL REPORT^^0
"BLD",8487,"KRN",8989.51,"NM",13,0)
RGCWPTCX IGNORE ALIASES^^0
"BLD",8487,"KRN",8989.51,"NM",14,0)
RGCWPTCX LAST PATIENT^^0
"BLD",8487,"KRN",8989.51,"NM",15,0)
RGCWPTCX RECALL LAST^^0
"BLD",8487,"KRN",8989.51,"NM",16,0)
RGCWPTCX REQUIRES HRN^^0
"BLD",8487,"KRN",8989.51,"NM",17,0)
RGCWPTPL DATE RANGES^^0
"BLD",8487,"KRN",8989.51,"NM",18,0)
RGCWPTPL DEFAULT ITEM^^0
"BLD",8487,"KRN",8989.51,"NM",19,0)
RGCWPTPL DEFAULT SOURCE^^0
"BLD",8487,"KRN",8989.51,"NM",20,0)
RGCWPTPL PERSONAL LIST^^0
"BLD",8487,"KRN",8989.51,"NM",21,0)
RGCWENCX LOCATION DEFAULT^^0
"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX CREATE VISIT",1)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX DETAIL REPORT",2)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX LOCATION DEFAULT",21)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX OTHER LOCATION",3)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX PROV ENC FETCH",4)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX PROVIDER",5)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX SEARCH RANGE START",6)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX SEARCH RANGE STOP",7)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT LOCK OVERRIDE",8)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT LOCKED",9)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT TYPES",10)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX DEMO MODE",11)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX DETAIL REPORT",12)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX IGNORE ALIASES",13)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX LAST PATIENT",14)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX RECALL LAST",15)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX REQUIRES HRN",16)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DATE RANGES",17)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DEFAULT ITEM",18)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DEFAULT SOURCE",19)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL PERSONAL LIST",20)

"BLD",8487,"KRN",8989.52,0)
8989.52
"BLD",8487,"KRN",8994,0)
8994
"BLD",8487,"KRN",8994,"NM",0)
^9.68A^30^30
"BLD",8487,"KRN",8994,"NM",1,0)
RGCWENCX ADMITCUR^^0
"BLD",8487,"KRN",8994,"NM",2,0)
RGCWENCX ADMITLST^^0
"BLD",8487,"KRN",8994,"NM",3,0)
RGCWENCX CHKVISIT^^0
"BLD",8487,"KRN",8994,"NM",4,0)
RGCWENCX CLINLOC^^0
"BLD",8487,"KRN",8994,"NM",5,0)
RGCWENCX ENINQ^^0
"BLD",8487,"KRN",8994,"NM",6,0)
RGCWENCX FETCH^^0
"BLD",8487,"KRN",8994,"NM",7,0)
RGCWENCX GETPRV^^0
"BLD",8487,"KRN",8994,"NM",8,0)
RGCWENCX GETVISIT^^0
"BLD",8487,"KRN",8994,"NM",9,0)
RGCWENCX HOSPLOC^^0
"BLD",8487,"KRN",8994,"NM",10,0)
RGCWENCX INPLOC^^0
"BLD",8487,"KRN",8994,"NM",11,0)
RGCWENCX LOCIEN^^0
"BLD",8487,"KRN",8994,"NM",12,0)
RGCWENCX LOCINFO^^0
"BLD",8487,"KRN",8994,"NM",13,0)
RGCWENCX UPDPRV^^0
"BLD",8487,"KRN",8994,"NM",14,0)
RGCWENCX VID2IEN^^0
"BLD",8487,"KRN",8994,"NM",15,0)
RGCWENCX VISITLST^^0
"BLD",8487,"KRN",8994,"NM",16,0)
RGCWPTPL CLINRNG^^0
"BLD",8487,"KRN",8994,"NM",17,0)
RGCWPTPL DOBLKP^^0
"BLD",8487,"KRN",8994,"NM",18,0)
RGCWPTPL GETDFLT^^0
"BLD",8487,"KRN",8994,"NM",19,0)
RGCWPTPL HRNLKP^^0
"BLD",8487,"KRN",8994,"NM",20,0)
RGCWPTPL IENLKP^^0
"BLD",8487,"KRN",8994,"NM",21,0)
RGCWPTPL LISTALL^^0
"BLD",8487,"KRN",8994,"NM",22,0)
RGCWPTPL LISTINFO^^0
"BLD",8487,"KRN",8994,"NM",23,0)
RGCWPTPL LISTPTS^^0
"BLD",8487,"KRN",8994,"NM",24,0)
RGCWPTPL LISTSEL^^0
"BLD",8487,"KRN",8994,"NM",25,0)
RGCWPTPL LOOKUP^^0
"BLD",8487,"KRN",8994,"NM",26,0)
RGCWPTPL MANAGE^^0
"BLD",8487,"KRN",8994,"NM",27,0)
RGCWPTPL MANAGE^^0
"BLD",8487,"KRN",8994,"NM",28,0)
RGCWPTPL SAVEDFLT^^0
"BLD",8487,"KRN",8994,"NM",29,0)
RGCWPTPS SEARCH^^0
"BLD",8487,"KRN",8994,"NM",30,0)
RGCWPTPL LISTINFO1^^0
"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ADMITCUR",1)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ADMITLST",2)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX CHKVISIT",3)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX CLINLOC",4)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ENINQ",5)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX FETCH",6)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX GETPRV",7)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX GETVISIT",8)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX HOSPLOC",9)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX INPLOC",10)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX LOCIEN",11)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX LOCINFO",12)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX UPDPRV",13)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX VID2IEN",14)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX VISITLST",15)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL CLINRNG",16)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL DOBLKP",17)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL GETDFLT",18)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL HRNLKP",19)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL IENLKP",20)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTALL",21)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTINFO",22)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTINFO1",30)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTPTS",23)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTSEL",24)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LOOKUP",25)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL MANAGE",26)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL MANAGE",27)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL SAVEDFLT",28)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPS SEARCH",29)

"BLD",8487,"KRN","B",.4,.4)

"BLD",8487,"KRN","B",.401,.401)

"BLD",8487,"KRN","B",.402,.402)

"BLD",8487,"KRN","B",.403,.403)

"BLD",8487,"KRN","B",.5,.5)

"BLD",8487,"KRN","B",.84,.84)

"BLD",8487,"KRN","B",3.6,3.6)

"BLD",8487,"KRN","B",3.8,3.8)

"BLD",8487,"KRN","B",9.2,9.2)

"BLD",8487,"KRN","B",9.8,9.8)

"BLD",8487,"KRN","B",19,19)

"BLD",8487,"KRN","B",19.1,19.1)

"BLD",8487,"KRN","B",101,101)

"BLD",8487,"KRN","B",409.61,409.61)

"BLD",8487,"KRN","B",771,771)

"BLD",8487,"KRN","B",779.2,779.2)

"BLD",8487,"KRN","B",870,870)

"BLD",8487,"KRN","B",8989.51,8989.51)

"BLD",8487,"KRN","B",8989.52,8989.52)

"BLD",8487,"KRN","B",8994,8994)

"BLD",8487,"PRE")
RGCWKDIN
"BLD",8487,"PRET")
PRETRANS^RGCWKDTP
"DATA",999.2,1,0)
Providers^LM^Provider^10
"DATA",999.2,1,10)
D PROVPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,1,11)
D PROVLST^RGCWPTP1(.DATA,.FROM,.DIR,.MAX)
"DATA",999.2,2,0)
Teams^MS^Team^20
"DATA",999.2,2,10)
D TEAMPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,2,11)
D TEAMLST^RGCWPTP1(.DATA)
"DATA",999.2,2,12)
D MAN2^RGCWPTP3(.DATA,LIST,ACTION,NAME,.VAL)
"DATA",999.2,2,13)
I $D(^OR(100.21))
"DATA",999.2,3,0)
Specialties^LMS^Specialty^30
"DATA",999.2,3,10)
D SPECPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,3,11)
D SPECLST^RGCWPTP1(.DATA,.FROM,.DIR,.MAX)
"DATA",999.2,4,0)
Clinics^DELMN^Clinic^40
"DATA",999.2,4,10)
D CLINPTS^RGCWPTP1(.DATA,IEN,START,END)
"DATA",999.2,4,11)
D HOSPLOC^RGCWPTP1(.DATA,.FROM,.DIR,.MAX,"C",START,END)
"DATA",999.2,5,0)
Wards^ELMS^Ward^50
"DATA",999.2,5,10)
D WARDPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,5,11)
D HOSPLOC^RGCWPTP1(.DATA,.FROM,.DIR,.MAX,"W")
"DATA",999.2,6,0)
Personal Lists^SU^Personal List^60
"DATA",999.2,6,10)
D PLSTPTS^RGCWPTP2(.DATA,IEN)
"DATA",999.2,6,11)
D PLSTLST^RGCWPTP2(.DATA)
"DATA",999.2,6,12)
D MANAGE^RGCWPTP2(.DATA,ACTION,NAME,.VAL)
"FIA",998.1)
SERIALIZATION CONTROL
"FIA",998.1,0)
^RGSER(998.1,
"FIA",998.1,0,0)
998.1I
"FIA",998.1,0,1)
y^y^f^^n^^y^o^n
"FIA",998.1,0,10)

"FIA",998.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",998.1,0,"RLRO")

"FIA",998.1,998.1)
0
"FIA",998.1,998.11)
0
"FIA",998.1,998.12)
0
"FIA",998.1,998.13)
0
"FIA",998.1,998.14)
0
"FIA",998.1,998.15)
0
"FIA",998.1,998.151)
0
"FIA",998.1,998.199)
0
"FIA",999.2)
CAREWEB PATIENT LIST
"FIA",999.2,0)
^RGCWF(999.2,
"FIA",999.2,0,0)
999.2
"FIA",999.2,0,1)
y^y^f^^n^^y^r^n
"FIA",999.2,0,10)

"FIA",999.2,0,11)

"FIA",999.2,0,"RLRO")

"FIA",999.2,999.2)
0
"FIA",999.201)
CAREWEB NOTIFICATION CONTROL
"FIA",999.201,0)
^RGCWF(999.201,
"FIA",999.201,0,0)
999.201
"FIA",999.201,0,1)
n^y^f^^y^^y^o^n
"FIA",999.201,0,10)

"FIA",999.201,0,11)
I $$SCRN^RGCWKDTP(Y,4)
"FIA",999.201,0,"RLRO")

"FIA",999.201,999.201)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
n^y^f^^y^^y^o^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",19941.21,0,"RLRO")

"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",19.1,513,-1)
0^1
"KRN",19.1,513,0)
RGCWPT PATIENT SELECT^Allows selection of a patient.
"KRN",8989.51,292,-1)
0^20
"KRN",8989.51,292,0)
RGCWPTPL PERSONAL LIST^User Personal List^1^Enter List Name
"KRN",8989.51,292,1)
W
"KRN",8989.51,292,6)
F
"KRN",8989.51,292,7)
K:$L(X)<3!(X=+X) X
"KRN",8989.51,292,30,0)
^8989.513I^1^1
"KRN",8989.51,292,30,1,0)
1^200
"KRN",8989.51,293,-1)
0^19
"KRN",8989.51,293,0)
RGCWPTPL DEFAULT SOURCE^Default Patient List^0
"KRN",8989.51,293,1)
P^90460.03^Enter default patient list.
"KRN",8989.51,293,30,0)
^8989.513I^2^2
"KRN",8989.51,293,30,1,0)
99^4.2
"KRN",8989.51,293,30,2,0)
1^200
"KRN",8989.51,294,-1)
0^18
"KRN",8989.51,294,0)
RGCWPTPL DEFAULT ITEM^Default List Item^1
"KRN",8989.51,294,1)
F
"KRN",8989.51,294,6)
P^90460.03
"KRN",8989.51,294,30,0)
^8989.513I^2^2
"KRN",8989.51,294,30,1,0)
99^4.2
"KRN",8989.51,294,30,2,0)
1^200
"KRN",8989.51,295,-1)
0^6
"KRN",8989.51,295,0)
RGCWENCX SEARCH RANGE START^Visit Search Start Date^0^^Visit Search Start Date
"KRN",8989.51,295,1)
F^^Enter relative start date to list visits.  (E.g. T-120)
"KRN",8989.51,295,20,0)
^8989.512^2^2^3011212^^^^
"KRN",8989.51,295,20,1,0)
Returns the relative date to start listing visits for a patient.
"KRN",8989.51,295,20,2,0)
For example, 'T-90' will list visits beginning 90 days before today.
"KRN",8989.51,295,30,0)
^8989.513I^6^4
"KRN",8989.51,295,30,1,0)
1^200
"KRN",8989.51,295,30,2,0)
2^49
"KRN",8989.51,295,30,4,0)
3^4
"KRN",8989.51,295,30,6,0)
5^4.2
"KRN",8989.51,296,-1)
0^7
"KRN",8989.51,296,0)
RGCWENCX SEARCH RANGE STOP^Visit Search Stop Date^0^^Visit Search Stop Date
"KRN",8989.51,296,1)
F^^Enter the relative stop date to list visits.  (E.g., T, T+30)
"KRN",8989.51,296,20,0)
^^3^3^3070608.140249
"KRN",8989.51,296,20,1,0)
Returns the relative date to end listing visits for a patient.
"KRN",8989.51,296,20,2,0)
For example, 'T' will not list visits later than today.  'T+30' will not
"KRN",8989.51,296,20,3,0)
list visits after 30 days from now.
"KRN",8989.51,296,30,0)
^8989.513I^6^4
"KRN",8989.51,296,30,1,0)
1^200
"KRN",8989.51,296,30,2,0)
2^49
"KRN",8989.51,296,30,4,0)
3^4
"KRN",8989.51,296,30,6,0)
5^4.2
"KRN",8989.51,297,-1)
0^12
"KRN",8989.51,297,0)
RGCWPTCX DETAIL REPORT^Patient detail report
"KRN",8989.51,297,1)
F
"KRN",8989.51,297,20,0)
^8989.512^1^1^3050215^^^^
"KRN",8989.51,297,20,1,0)
M code to generate a patient detail report.
"KRN",8989.51,297,30,0)
^8989.513I^4^4
"KRN",8989.51,297,30,1,0)
900^4.2
"KRN",8989.51,297,30,2,0)
100^200
"KRN",8989.51,297,30,3,0)
500^4
"KRN",8989.51,297,30,4,0)
300^49
"KRN",8989.51,298,-1)
0^14
"KRN",8989.51,298,0)
RGCWPTCX LAST PATIENT^Last patient selected^1^Facility^Patient
"KRN",8989.51,298,1)
P^2
"KRN",8989.51,298,6)
P^4
"KRN",8989.51,298,20,0)
^8989.512^1^1^3020730^
"KRN",8989.51,298,20,1,0)
Saves the last patient selected for the current institution.
"KRN",8989.51,298,30,0)
^8989.513I^1^1
"KRN",8989.51,298,30,1,0)
100^200
"KRN",8989.51,299,-1)
0^1
"KRN",8989.51,299,0)
RGCWENCX CREATE VISIT^Allow user to create new visits.^0
"KRN",8989.51,299,1)
Y
"KRN",8989.51,299,30,0)
^8989.513I^6^6
"KRN",8989.51,299,30,1,0)
100^200
"KRN",8989.51,299,30,2,0)
200^8930
"KRN",8989.51,299,30,3,0)
300^49
"KRN",8989.51,299,30,4,0)
400^44
"KRN",8989.51,299,30,5,0)
500^4
"KRN",8989.51,299,30,6,0)
900^4.2
"KRN",8989.51,300,-1)
0^4
"KRN",8989.51,300,0)
RGCWENCX PROV ENC FETCH^Fetch current user as provider?^^^Use current user as visit provider
"KRN",8989.51,300,1)
Y^^Enter YES if current user should be defaulted as provider
"KRN",8989.51,300,30,0)
^8989.513I^2^2
"KRN",8989.51,300,30,1,0)
100^4
"KRN",8989.51,300,30,2,0)
200^4.2
"KRN",8989.51,301,-1)
0^2
"KRN",8989.51,301,0)
RGCWENCX DETAIL REPORT^Visit detail report
"KRN",8989.51,301,1)
F
"KRN",8989.51,301,20,0)
^^1^1^3080201.120417
"KRN",8989.51,301,20,1,0)
M code to generate a visit detail report.
"KRN",8989.51,301,30,0)
^8989.513I^4^4
"KRN",8989.51,301,30,1,0)
900^4.2
"KRN",8989.51,301,30,2,0)
100^200
"KRN",8989.51,301,30,3,0)
500^4
"KRN",8989.51,301,30,4,0)
300^49
"KRN",8989.51,302,-1)
0^16
"KRN",8989.51,302,0)
RGCWPTCX REQUIRES HRN^Patient selection requires HRN^0^^Patient selection requires HRN
"KRN",8989.51,302,1)
Y^^Enter YES if patient must have an HRN to be selectable.
"KRN",8989.51,302,20,0)
^^2^2^3080215.08342
"KRN",8989.51,302,20,1,0)
This parameter controls whether a patient must have an assigned health record
"KRN",8989.51,302,20,2,0)
number to be selectable within the EHR.
"KRN",8989.51,302,30,0)
^8989.513I^1^1
"KRN",8989.51,302,30,1,0)
100^4.2
"KRN",8989.51,303,-1)
0^13
"KRN",8989.51,303,0)
RGCWPTCX IGNORE ALIASES^Ignore aliases in patient lookup^0^^Ignore aliases in patient lookup
"KRN",8989.51,303,1)
Y
"KRN",8989.51,303,20,0)
^^2^2^3080216.091741
"KRN",8989.51,303,20,1,0)
If set to YES, any aliases encountered in the primary index of the patient file
"KRN",8989.51,303,20,2,0)
are ignored.
"KRN",8989.51,303,30,0)
^8989.513I^2^2
"KRN",8989.51,303,30,1,0)
300^4.2
"KRN",8989.51,303,30,2,0)
200^4
"KRN",8989.51,394,-1)
0^5
"KRN",8989.51,394,0)
RGCWENCX PROVIDER^Can be a visit provider?^0^^Can be a visit provider?
"KRN",8989.51,394,1)
Y^^Enter yes if user class can be a provider for a visit.
"KRN",8989.51,394,20,0)
^8989.512^2^2^3040306^^
"KRN",8989.51,394,20,1,0)
If returns yes, user can be a provider associated with a visit.  This controls
"KRN",8989.51,394,20,2,0)
which users appear in the provider list of the encounter context dialog.
"KRN",8989.51,394,30,0)
^8989.513I^2^2
"KRN",8989.51,394,30,1,0)
100^8930
"KRN",8989.51,394,30,2,0)
10^200
"KRN",8989.51,395,-1)
0^11
"KRN",8989.51,395,0)
RGCWPTCX DEMO MODE^Allow viewing of demo patients only^0^^Limit to demo patients only?
"KRN",8989.51,395,1)
Y^^If yes, only demo patients may be selected.
"KRN",8989.51,395,6)
N
"KRN",8989.51,395,20,0)
^8989.512^1^1^3040128.115426
"KRN",8989.51,395,20,1,0)
If yes, the only demo patients may be selected.
"KRN",8989.51,395,30,0)
^8989.513I^3^3
"KRN",8989.51,395,30,1,0)
100^200
"KRN",8989.51,395,30,2,0)
200^4
"KRN",8989.51,395,30,3,0)
300^4.2
"KRN",8989.51,396,-1)
0^17
"KRN",8989.51,396,0)
RGCWPTPL DATE RANGES^Default date ranges:^^^Edit Value?
"KRN",8989.51,396,1)
W^^Enter Y to edit, @ to delete.
"KRN",8989.51,396,2)
S:"Yy"'[Y Y=""
"KRN",8989.51,396,30,0)
^8989.513I^1^1
"KRN",8989.51,396,30,1,0)
100^4.2
"KRN",8989.51,397,-1)
0^21
"KRN",8989.51,397,0)
RGCWENCX LOCATION DEFAULT^Default encounter location.^0
"KRN",8989.51,397,1)
N
"KRN",8989.51,397,30,0)
^8989.513I^1^1
"KRN",8989.51,397,30,1,0)
10^200
"KRN",8989.51,398,-1)
0^10
"KRN",8989.51,398,0)
RGCWENCX VISIT TYPES^Selectable visit types^1^Sequence^Value
"KRN",8989.51,398,1)
F
"KRN",8989.51,398,6)
N
"KRN",8989.51,398,20,0)
^8989.512^4^4^3050215^^^^
"KRN",8989.51,398,20,1,0)
Specifies the visit types selectable from the encounter context dialog.  The
"KRN",8989.51,398,20,2,0)
format for each entry is:
"KRN",8989.51,398,20,3,0)

"KRN",8989.51,398,20,4,0)
       Visit Code~Short Descriptor~Long Descriptor
"KRN",8989.51,398,30,0)
^8989.513I^3^2
"KRN",8989.51,398,30,1,0)
5^4
"KRN",8989.51,398,30,3,0)
10^4.2
"KRN",8989.51,399,-1)
0^9
"KRN",8989.51,399,0)
RGCWENCX VISIT LOCKED^Number days visit can be modified.^0
"KRN",8989.51,399,1)
N^1:180^# of days (1-180) following creation after which a visit cannot be modified.
"KRN",8989.51,399,20,0)
^8989.512^3^3^3070527.005944
"KRN",8989.51,399,20,1,0)
This parameter determines the maximum # of days (1-180) following the 
"KRN",8989.51,399,20,2,0)
creation of a visit after which the visit cannot be modified.  Once this 
"KRN",8989.51,399,20,3,0)
period has passed, no additional PCC data may be attached to a visit.
"KRN",8989.51,399,30,0)
^8989.513I^2^2
"KRN",8989.51,399,30,1,0)
900^4.2
"KRN",8989.51,399,30,2,0)
800^4
"KRN",8989.51,400,-1)
0^3
"KRN",8989.51,400,0)
RGCWENCX OTHER LOCATION^General location for outside encounters.^0^^Location
"KRN",8989.51,400,1)
P^9999999.06
"KRN",8989.51,400,20,0)
^^1^1^3061207.213805
"KRN",8989.51,400,20,1,0)
This is a general location is stored for visits that have an outside location.
"KRN",8989.51,400,30,0)
^8989.513I^2^2
"KRN",8989.51,400,30,1,0)
900^4.2
"KRN",8989.51,400,30,2,0)
500^4
"KRN",8989.51,401,-1)
0^8
"KRN",8989.51,401,0)
RGCWENCX VISIT LOCK OVERRIDE^Use to override visit lock for a user.^1^Visit to unlock^Date override expires
"KRN",8989.51,401,1)
D^::EX^Value must be between Today and value in BEHOENCX VISIT LOCKED parameter.
"KRN",8989.51,401,2)
K:Y>$$FMADD^XLFDT($$DT^XLFDT(),+$$GET^XPAR("ALL","BEHOENCX VISIT LOCKED"))!(Y<$$DT^XLFDT()) X
"KRN",8989.51,401,6)
P^9000010
"KRN",8989.51,401,20,0)
^8989.512^3^3^3090218^^^
"KRN",8989.51,401,20,1,0)
Use this parameter to temporarily override a locked visit for a specific user.
"KRN",8989.51,401,20,2,0)
Be sure to remove the override after the user has completed the necessary 
"KRN",8989.51,401,20,3,0)
modifications.
"KRN",8989.51,401,30,0)
^8989.513I^1^1
"KRN",8989.51,401,30,1,0)
100^200
"KRN",8989.51,402,-1)
0^15
"KRN",8989.51,402,0)
RGCWPTCX RECALL LAST^Recall last selected patient^0^^Recall last selected patient?
"KRN",8989.51,402,1)
Y^^Recalls the patient last selected upon startup.
"KRN",8989.51,402,6)
N
"KRN",8989.51,402,20,0)
^8989.512^2^2^3080216^^^^
"KRN",8989.51,402,20,1,0)
If yes, the patient context is set to the last patient selected upon
"KRN",8989.51,402,20,2,0)
startup.
"KRN",8989.51,402,30,0)
^8989.513I^3^3
"KRN",8989.51,402,30,1,0)
100^200
"KRN",8989.51,402,30,2,0)
200^4
"KRN",8989.51,402,30,3,0)
300^4.2
"KRN",8994,2643,-1)
0^2
"KRN",8994,2643,0)
RGCWENCX ADMITLST^ADMITLST^RGCWENCX^2
"KRN",8994,2644,-1)
0^4
"KRN",8994,2644,0)
RGCWENCX CLINLOC^CLINLOC^RGCWENCX^2
"KRN",8994,2645,-1)
0^6
"KRN",8994,2645,0)
RGCWENCX FETCH^FETCH^RGCWENCX^1^^^^1
"KRN",8994,2646,-1)
0^7
"KRN",8994,2646,0)
RGCWENCX GETPRV^GETPRV^RGCWENCX^2^^^^1
"KRN",8994,2647,-1)
0^8
"KRN",8994,2647,0)
RGCWENCX GETVISIT^GETVISIT^RGCWENCX^1
"KRN",8994,2647,1,0)
^8994.01^1^1^3010531^
"KRN",8994,2647,1,1,0)
Returns visit data given IEN of VISIT file entry.
"KRN",8994,2648,-1)
0^9
"KRN",8994,2648,0)
RGCWENCX HOSPLOC^HOSPLOC^RGCWENCX^2
"KRN",8994,2649,-1)
0^10
"KRN",8994,2649,0)
RGCWENCX INPLOC^INPLOC^RGCWENCX^2
"KRN",8994,2650,-1)
0^11
"KRN",8994,2650,0)
RGCWENCX LOCIEN^LOCIEN^RGCWENCX^1
"KRN",8994,2650,1,0)
^8994.01^1^1^3010531.210736
"KRN",8994,2650,1,1,0)
Returns the IEN of the specified hospital location.
"KRN",8994,2651,-1)
0^14
"KRN",8994,2651,0)
RGCWENCX VID2IEN^VID2IEN^RGCWENCX^1
"KRN",8994,2651,1,0)
^8994.01^1^1^3010531.120443
"KRN",8994,2651,1,1,0)
Returns the IEN of a VISIT file entry given its visit id.
"KRN",8994,2652,-1)
0^15
"KRN",8994,2652,0)
RGCWENCX VISITLST^VISITLST^RGCWENCX^4^^^^1
"KRN",8994,2653,-1)
0^13
"KRN",8994,2653,0)
RGCWENCX UPDPRV^UPDPRV^RGCWENCX^1
"KRN",8994,2654,-1)
0^12
"KRN",8994,2654,0)
RGCWENCX LOCINFO^LOCINFO^RGCWENCX^1
"KRN",8994,2654,1,0)
^8994.01^1^1^3051128.075357
"KRN",8994,2654,1,1,0)
Returns information about the specified entry from the HOSPITAL LOCATION file.
"KRN",8994,2654,2,0)
^8994.02A^1^1
"KRN",8994,2654,2,1,0)
LOCATION^1^^1^1
"KRN",8994,2654,2,1,1,0)
^^1^1^3051128.075318
"KRN",8994,2654,2,1,1,1,0)
Internal entry number in HOSPITAL LOCATION file.
"KRN",8994,2654,2,"B","LOCATION",1)

"KRN",8994,2654,2,"PARAMSEQ",1,1)

"KRN",8994,2654,3,0)
^^1^1^3051128.075343
"KRN",8994,2654,3,1,0)
Returns the zero node of the specified entry from the HOSPITAL LOCATION file.
"KRN",8994,2655,-1)
0^3
"KRN",8994,2655,0)
RGCWENCX CHKVISIT^CHKVISIT^RGCWENCX^2^^^^1
"KRN",8994,2656,-1)
0^1
"KRN",8994,2656,0)
RGCWENCX ADMITCUR^ADMITCUR^RGCWENCX^1
"KRN",8994,2656,1,0)
^8994.01^1^1^3070517.114924
"KRN",8994,2656,1,1,0)
Return information about current admission.
"KRN",8994,2656,2,0)
^8994.02A^1^1
"KRN",8994,2656,2,1,0)
DFN^1^^1^1
"KRN",8994,2656,2,1,1,0)
^^1^1^3070517.114942
"KRN",8994,2656,2,1,1,1,0)
Patient internal record number.
"KRN",8994,2656,2,"B","DFN",1)

"KRN",8994,2656,2,"PARAMSEQ",1,1)

"KRN",8994,2656,3,0)
^^1^1^3070517.115113
"KRN",8994,2656,3,1,0)
VSTR [1] ^ LOCNAME [2] ^ ADMDATE [3] ^ TYPE [4] ^ LOCKED [5]
"KRN",8994,2657,-1)
0^16
"KRN",8994,2657,0)
RGCWPTPL CLINRNG^CLINRNG^RGCWPTPL^2
"KRN",8994,2658,-1)
0^17
"KRN",8994,2658,0)
RGCWPTPL DOBLKP^DOBLKP^RGCWPTPL^4^^^^1
"KRN",8994,2659,-1)
0^18
"KRN",8994,2659,0)
RGCWPTPL GETDFLT^GETDFLT^RGCWPTPL^1
"KRN",8994,2660,-1)
0^19
"KRN",8994,2660,0)
RGCWPTPL HRNLKP^HRNLKP^RGCWPTPL^2^^^^1
"KRN",8994,2661,-1)
0^20
"KRN",8994,2661,0)
RGCWPTPL IENLKP^IENLKP^RGCWPTPL^2
"KRN",8994,2662,-1)
0^21
"KRN",8994,2662,0)
RGCWPTPL LISTALL^LISTALL^RGCWPTPL^2
"KRN",8994,2663,-1)
0^22
"KRN",8994,2663,0)
RGCWPTPL LISTINFO^LISTINFO^RGCWPTPL^2^^^^1
"KRN",8994,2664,-1)
0^23
"KRN",8994,2664,0)
RGCWPTPL LISTPTS^LISTPTS^RGCWPTPL^2
"KRN",8994,2665,-1)
0^24
"KRN",8994,2665,0)
RGCWPTPL LISTSEL^LISTSEL^RGCWPTPL^2
"KRN",8994,2666,-1)
0^25
"KRN",8994,2666,0)
RGCWPTPL LOOKUP^LOOKUP^RGCWPTPL^4^^^^1
"KRN",8994,2667,-1)
0^27
"KRN",8994,2667,0)
RGCWPTPL MANAGE^MANAGE^RGCWPTPL^1
"KRN",8994,2668,-1)
0^28
"KRN",8994,2668,0)
RGCWPTPL SAVEDFLT^SAVEDFLT^RGCWPTPL^1
"KRN",8994,2669,-1)
0^5
"KRN",8994,2669,0)
RGCWENCX ENINQ^ENINQ^RGCWENCX^4^^^^1
"KRN",8994,2670,-1)
0^29
"KRN",8994,2670,0)
RGCWPTPS SEARCH^SEARCH^RGCWPTPS^4^^^^1
"KRN",8994,2671,-1)
0^30
"KRN",8994,2671,0)
RGCWPTPL LISTINFO1^LISTINFO^RGCWPTPL^1
"MBREQ")
1
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PGL",19941.21,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
11
"RTN","RGCWENC1")
0^1^B34209910
"RTN","RGCWENC1",1,0)
RGCWENC1 ;RI/CBMI/DKM - Visit Creation Support ;14-Mar-2014 17:10;DKM
"RTN","RGCWENC1",2,0)
 ;;1.0;CAREWEB FRAMEWORK;**005004;20-Aug-2007 08:41;Build 372
"RTN","RGCWENC1",3,0)
 ; Visit creation API
"RTN","RGCWENC1",4,0)
GETVISIT(IN,OUT) ;
"RTN","RGCWENC1",5,0)
 ;
"RTN","RGCWENC1",6,0)
 ; >> All date/time variables must be in FileMan internal format
"RTN","RGCWENC1",7,0)
 ;
"RTN","RGCWENC1",8,0)
 ; Special Incoming Variables:
"RTN","RGCWENC1",9,0)
 ;  IN("FORCE ADD")   = 1    ; no matter what, create new visit (Optional)
"RTN","RGCWENC1",10,0)
 ;  IN ("NEVER ADD")  = 1    ; never add visit, just try to find one or more (Optional)
"RTN","RGCWENC1",11,0)
 ;  IN("ANCILLARY")   = 1    ; for ancillary packages to create noon visit if no match found (Optional)
"RTN","RGCWENC1",12,0)
 ;
"RTN","RGCWENC1",13,0)
 ; Incoming Variables used in Matching: REQUIRED
"RTN","RGCWENC1",14,0)
 ;  IN("PAT")         = patient IEN (file 2 or 9000001)
"RTN","RGCWENC1",15,0)
 ;  IN("VISIT DATE")  = visit date & time (same as check-in date & time)
"RTN","RGCWENC1",16,0)
 ;  IN ("SITE")       = location of encounter IEN (file 4 or 9999999.06)
"RTN","RGCWENC1",17,0)
 ;  IN("VISIT TYPE")  = internal value for field .03 in Visit file
"RTN","RGCWENC1",18,0)
 ;  IN("SRV CAT")     = internal value for service category
"RTN","RGCWENC1",19,0)
 ;  IN("TIME RANGE")  = #   ; range in minutes for matching on visit time; REQUIRED unless FORCE ADD set
"RTN","RGCWENC1",20,0)
 ;                             ;   zero=exact matches only; -1=don't match on time
"RTN","RGCWENC1",21,0)
 ;
"RTN","RGCWENC1",22,0)
 ;   These are used to match if sent (Optional)
"RTN","RGCWENC1",23,0)
 ;  IN("PROVIDER")    = IEN for provider to match from file 200
"RTN","RGCWENC1",24,0)
 ;  IN("CLINIC CODE") = IEN of clinic stop code (file 40.7)
"RTN","RGCWENC1",25,0)
 ;  IN("HOS LOC")     = IEN of hospital location (file 44)
"RTN","RGCWENC1",26,0)
 ;
"RTN","RGCWENC1",27,0)
 ; Incoming Variables used in creating appt and visit
"RTN","RGCWENC1",28,0)
 ;  IN("USR")         = user IEN in file 200; REQUIRED
"RTN","RGCWENC1",29,0)
 ;
"RTN","RGCWENC1",30,0)
 ; Incoming PCC variables for adding additional info to visit (Optional)
"RTN","RGCWENC1",31,0)
 ;  IN("APCDOLOC") = Outside Location (#2101)
"RTN","RGCWENC1",32,0)
 ;
"RTN","RGCWENC1",33,0)
 ; Outgoing Array:
"RTN","RGCWENC1",34,0)
 ;  OUT(0) always set
"RTN","RGCWENC1",35,0)
 ;    if = 0 none found and may have error message in 2nd piece
"RTN","RGCWENC1",36,0)
 ;    if = 1 and OUT(visit ien)="ADD" new visit just created
"RTN","RGCWENC1",37,0)
 ;    if = 1 and OUT(visit ien)=#; # is time difference in minutes
"RTN","RGCWENC1",38,0)
 ;    if >1, multiple OUT(visit ien) entries exist
"RTN","RGCWENC1",39,0)
 ;
"RTN","RGCWENC1",40,0)
 N TMP
"RTN","RGCWENC1",41,0)
 K OUT
"RTN","RGCWENC1",42,0)
 M TMP=IN    ;don't mess with incoming array
"RTN","RGCWENC1",43,0)
 Q:'$$HAVEREQ(.TMP,.OUT)    ;check required fields
"RTN","RGCWENC1",44,0)
 ; if forced add, skip visit match attempt
"RTN","RGCWENC1",45,0)
 I $G(TMP("FORCE ADD")) D ADDVIST(.TMP,.OUT) Q
"RTN","RGCWENC1",46,0)
 ; attempt to find matching visits; return OUT array
"RTN","RGCWENC1",47,0)
 D MATCH(.TMP,.OUT)
"RTN","RGCWENC1",48,0)
 ; if appt date set, go to check-in
"RTN","RGCWENC1",49,0)
 I $G(TMP("APPT DATE")),'$G(TMP("NEVER ADD")) D ADDVIST(.TMP,.OUT) Q
"RTN","RGCWENC1",50,0)
 ; if only 1 visit found, return ien and quit
"RTN","RGCWENC1",51,0)
 ; if >1 visits found, return full array and quit
"RTN","RGCWENC1",52,0)
 Q:OUT(0)
"RTN","RGCWENC1",53,0)
 ; if called by ancillary package, just create noon visit and quit
"RTN","RGCWENC1",54,0)
 I $G(TMP("ANCILLARY")) D  Q
"RTN","RGCWENC1",55,0)
 .K TMP("ANCILLARY"),TMP("PROVIDER")             ; set up to find other ancillaries
"RTN","RGCWENC1",56,0)
 .D MATCH(.TMP,.OUT)
"RTN","RGCWENC1",57,0)
 .Q:OUT(0)=1                                     ; try to match on hos loc or clinic
"RTN","RGCWENC1",58,0)
 .Q:$G(TMP("NEVER ADD"))=1                       ; if in never add mode, quit after 2nd match
"RTN","RGCWENC1",59,0)
 .S TMP("VISIT DATE")=TMP("VISIT DATE")\1        ; take off time; PCC will add noon
"RTN","RGCWENC1",60,0)
 .D ADDVIST(.TMP,.OUT)                           ; create noon visit; no PIMS link
"RTN","RGCWENC1",61,0)
 ; if no visits found but in never add mode, just quit
"RTN","RGCWENC1",62,0)
 Q:$G(TMP("NEVER ADD"))=1
"RTN","RGCWENC1",63,0)
 ; otherwise, logic falls through to create visit choices
"RTN","RGCWENC1",64,0)
 D ADDVIST(.TMP,.OUT)
"RTN","RGCWENC1",65,0)
 Q
"RTN","RGCWENC1",66,0)
 ; Check required fields
"RTN","RGCWENC1",67,0)
HAVEREQ(IN,OUT) ;
"RTN","RGCWENC1",68,0)
 I ('$G(IN("FORCE ADD"))),('$D(IN("TIME RANGE"))) S OUT(0)="0^Missing Time Range" Q 0
"RTN","RGCWENC1",69,0)
 I '$D(IN("PAT")) S OUT(0)="0^Missing Patient IEN" Q 0
"RTN","RGCWENC1",70,0)
 I '$D(IN("VISIT DATE")) S OUT(0)="0^Missing Visit Date" Q 0
"RTN","RGCWENC1",71,0)
 I IN("VISIT DATE")\1>DT S OUT(0)="0^Future Dates Not Allowed" Q 0
"RTN","RGCWENC1",72,0)
 I '$D(IN("SITE")) S OUT(0)="0^Missing Facility/Site" Q 0
"RTN","RGCWENC1",73,0)
 I '$D(IN("VISIT TYPE")) S OUT(0)="0^Missing Visit Type" Q 0
"RTN","RGCWENC1",74,0)
 I '$D(IN("SRV CAT")) S OUT(0)="0^Missing Service Category" Q 0
"RTN","RGCWENC1",75,0)
 I '$D(IN("USR")) S OUT(0)="0^Missing User IEN" Q 0
"RTN","RGCWENC1",76,0)
 I $G(IN("HOS LOC")),'$G(IN("CLINIC CODE")) S IN("CLINIC CODE")=$$GET1^DIQ(44,IN("HOS LOC"),8,"I")
"RTN","RGCWENC1",77,0)
 Q 1
"RTN","RGCWENC1",78,0)
 ; Set DATE and END based on TIME RANGE setting in minutes
"RTN","RGCWENC1",79,0)
TIME(RANGE,VISIT,DATE,END) ;
"RTN","RGCWENC1",80,0)
 N TMDIF,SW
"RTN","RGCWENC1",81,0)
 S TMDIF=$S(RANGE<1:0,1:RANGE)
"RTN","RGCWENC1",82,0)
 S DATE=$$FMADD^XLFDT(VISIT,,,-TMDIF)
"RTN","RGCWENC1",83,0)
 S END=$$FMADD^XLFDT(VISIT,,,TMDIF)
"RTN","RGCWENC1",84,0)
 I (DATE\1)<(END\1) S SW=(END\1),END=(DATE\1)_".9999",DATE=SW
"RTN","RGCWENC1",85,0)
 S DATE=(9999999-(DATE\1)_"."_$P(DATE,".",2))-.0001
"RTN","RGCWENC1",86,0)
 S END=9999999-(END\1)_"."_$P(END,".",2)
"RTN","RGCWENC1",87,0)
 I RANGE=-1 S END=END\1_".9999",DATE=DATE\1     ;no time range used; go from begin one day to end
"RTN","RGCWENC1",88,0)
 Q
"RTN","RGCWENC1",89,0)
 ; Find matching visits based on IN array
"RTN","RGCWENC1",90,0)
 ; OUT(0)=# of visits found^optional error message
"RTN","RGCWENC1",91,0)
MATCH(IN,OUT) ;
"RTN","RGCWENC1",92,0)
 N END,DATE,VIEN,STOP,DIFF
"RTN","RGCWENC1",93,0)
 S OUT(0)=0
"RTN","RGCWENC1",94,0)
 D TIME(IN("TIME RANGE"),IN("VISIT DATE"),.DATE,.END)
"RTN","RGCWENC1",95,0)
 F  S DATE=$O(^AUPNVSIT("AA",IN("PAT"),DATE)) Q:'DATE  Q:(DATE>END)  D
"RTN","RGCWENC1",96,0)
 .S VIEN=0
"RTN","RGCWENC1",97,0)
 .F  S VIEN=$O(^AUPNVSIT("AA",IN("PAT"),DATE,VIEN)) Q:'VIEN  D
"RTN","RGCWENC1",98,0)
 ..I $P($G(^AUPNVSIT(VIEN,0)),U,11) Q                        ;check for delete flag just in case xref not killed
"RTN","RGCWENC1",99,0)
 ..I IN("SITE")'=$$GET1^DIQ(9000010,VIEN,.06,"I") Q          ;no match on loc of enc
"RTN","RGCWENC1",100,0)
 ..I IN("VISIT TYPE")'=$$GET1^DIQ(9000010,VIEN,.03,"I") Q    ;no match on vist type
"RTN","RGCWENC1",101,0)
 ..I IN("SRV CAT")'=$$GET1^DIQ(9000010,VIEN,.07,"I") Q       ;no match on service category
"RTN","RGCWENC1",102,0)
 ..I IN("TIME RANGE")>-1 S STOP=0 D  Q:STOP                  ;check time range
"RTN","RGCWENC1",103,0)
 ...S DIFF=$$TIMEDIF(IN("VISIT DATE"),VIEN)                 ;find difference in minutes
"RTN","RGCWENC1",104,0)
 ...S:$$ABS^XLFMTH(DIFF)>IN("TIME RANGE") STOP=1
"RTN","RGCWENC1",105,0)
 ..Q:'$$PRVMTCH    ; if provider sent and didn't match, skip
"RTN","RGCWENC1",106,0)
 ..;
"RTN","RGCWENC1",107,0)
 ..; if called by ancillary, falls through and sets visit into array
"RTN","RGCWENC1",108,0)
 ..; otherwise, check if app wants to match on clinic code or hosp location
"RTN","RGCWENC1",109,0)
 ..I '$G(IN("ANCILLARY")) S STOP=0 D  Q:STOP
"RTN","RGCWENC1",110,0)
 ...I $G(IN("HOS LOC")),'$G(IN("CLINIC CODE")) S IN("CLINIC CODE")=$$GET1^DIQ(44,IN("HOS LOC"),8,"I")
"RTN","RGCWENC1",111,0)
 ...I $G(IN("CLINIC CODE")),IN("CLINIC CODE")'=$$GET1^DIQ(9000010,VIEN,.08,"I") S STOP=1 Q  ;no match on clinic code
"RTN","RGCWENC1",112,0)
 ...I $G(IN("HOS LOC")),(IN("HOS LOC")'=$$GET1^DIQ(9000010,VIEN,.22,"I")) S STOP=1 Q  ;no match on hospital location
"RTN","RGCWENC1",113,0)
 ..S OUT(0)=OUT(0)+1
"RTN","RGCWENC1",114,0)
 ..S OUT(VIEN)=$$TIMEDIF(IN("VISIT DATE"),VIEN)
"RTN","RGCWENC1",115,0)
 Q
"RTN","RGCWENC1",116,0)
 ; Do visits match on provider?
"RTN","RGCWENC1",117,0)
PRVMTCH() ;
"RTN","RGCWENC1",118,0)
 N PRVS,IEN
"RTN","RGCWENC1",119,0)
 I '$G(IN("PROVIDER")) Q 1     ; if no provider sent, assume okay
"RTN","RGCWENC1",120,0)
 ; find all v provider entries for visit
"RTN","RGCWENC1",121,0)
 S IEN=0
"RTN","RGCWENC1",122,0)
 F  S IEN=$O(^AUPNVPRV("AD",VIEN,IEN)) Q:'IEN  D
"RTN","RGCWENC1",123,0)
 .S PRVS(+$G(^AUPNVPRV(IEN,0)))=""
"RTN","RGCWENC1",124,0)
 Q ''$D(PRVS(IN("PROVIDER")))
"RTN","RGCWENC1",125,0)
 ;
"RTN","RGCWENC1",126,0)
TIMEDIF(VDTTM,VIEN) ; return time difference between incoming time and current visit
"RTN","RGCWENC1",127,0)
 Q $$FMDIFF^XLFDT(VDTTM,+$G(^AUPNVSIT(VIEN,0)),2)\60
"RTN","RGCWENC1",128,0)
 ; Create visit
"RTN","RGCWENC1",129,0)
ADDVIST(IN,OUT) ;
"RTN","RGCWENC1",130,0)
 N VSIT,VSITPKG,DFN
"RTN","RGCWENC1",131,0)
 S VSIT("VDT")=IN("VISIT DATE")
"RTN","RGCWENC1",132,0)
 S VSIT("TYP")=IN("VISIT TYPE")
"RTN","RGCWENC1",133,0)
 S VSIT("PAT")=IN("PAT")
"RTN","RGCWENC1",134,0)
 S VSIT("INS")=IN("SITE")
"RTN","RGCWENC1",135,0)
 S VSIT("SVC")=IN("SRV CAT")
"RTN","RGCWENC1",136,0)
 S VSIT("DSS")=$G(IN("CLINIC CODE"))
"RTN","RGCWENC1",137,0)
 S VSIT("LOC")=$G(IN("HOS LOC"))
"RTN","RGCWENC1",138,0)
 S VSIT("USR")=IN("USR")
"RTN","RGCWENC1",139,0)
 S VSIT("OPT")=$G(XQY)
"RTN","RGCWENC1",140,0)
 S VSIT("VID")=$$GETVID^VSITVID
"RTN","RGCWENC1",141,0)
 S:$D(IN("APCDOLOC")) VSIT("OUT")=IN("APCDOLOC")
"RTN","RGCWENC1",142,0)
 S VSIT(0)="F"
"RTN","RGCWENC1",143,0)
 S VSITPKG="RGCW"
"RTN","RGCWENC1",144,0)
 S DFN=IN("PAT")
"RTN","RGCWENC1",145,0)
 D ^VSIT
"RTN","RGCWENC1",146,0)
 I $G(VSIT("IEN"))'>0 S OUT(0)="0^Could not create visit."
"RTN","RGCWENC1",147,0)
 E  S OUT(+VSIT("IEN"))="ADD",OUT(0)=1
"RTN","RGCWENC1",148,0)
 Q
"RTN","RGCWENCX")
0^2^B118167219
"RTN","RGCWENCX",1,0)
RGCWENCX ;RI/CBMI/DKM - Encounter Context Support ;01-Apr-2015 14:05;DKM
"RTN","RGCWENCX",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWENCX",3,0)
 ; RPC: Fetch visit data given visit file IEN
"RTN","RGCWENCX",4,0)
 ; Returns hosp loc^visit date^service category^dfn^visit id^locked
"RTN","RGCWENCX",5,0)
GETVISIT(DATA,IEN) ;EP
"RTN","RGCWENCX",6,0)
 N VSIT,DLM
"RTN","RGCWENCX",7,0)
 S (DLM,DATA)=""
"RTN","RGCWENCX",8,0)
 Q:$$LOOKUP^VSIT(IEN,"I",0)<1
"RTN","RGCWENCX",9,0)
 Q:$G(VSIT("DEL"))
"RTN","RGCWENCX",10,0)
 F VSIT="LOC","VDT","SVC","PAT","VID" S DATA=DATA_DLM_VSIT(VSIT),DLM=U
"RTN","RGCWENCX",11,0)
 S DATA=DATA_U_$$ISLOCKED(IEN)
"RTN","RGCWENCX",12,0)
 Q
"RTN","RGCWENCX",13,0)
 ; RPC: Fetch visit IEN given visit id
"RTN","RGCWENCX",14,0)
VID2IEN(DATA,VID) ;EP
"RTN","RGCWENCX",15,0)
 S DATA=$$VID2IEN^VSIT(VID)
"RTN","RGCWENCX",16,0)
 Q
"RTN","RGCWENCX",17,0)
 ; RPC: Return IEN of hospital location
"RTN","RGCWENCX",18,0)
LOCIEN(DATA,LOC) ;EP
"RTN","RGCWENCX",19,0)
 S DATA=$$FIND1^DIC(44,"","QX",LOC)
"RTN","RGCWENCX",20,0)
 Q
"RTN","RGCWENCX",21,0)
 ; RPC: Return values for specified encounter
"RTN","RGCWENCX",22,0)
 ;   DFN   = Patient IEN
"RTN","RGCWENCX",23,0)
 ;   VSTR  = Visit string (extended)
"RTN","RGCWENCX",24,0)
 ;   PRV   = Provider
"RTN","RGCWENCX",25,0)
 ;   CREATE= -1=Always, 0=never, 1=If not found
"RTN","RGCWENCX",26,0)
 ;   Return value =
"RTN","RGCWENCX",27,0)
 ;        1       2       3       4        5       6        7       8      9
"RTN","RGCWENCX",28,0)
 ;     LOCNAME^LOCABBR^ROOMBED^PROVIEN^PROVNAME^VISITIEN^VISITID^LOCKED^ERRORTXT
"RTN","RGCWENCX",29,0)
FETCH(DATA,DFN,VSTR,PRV,CREATE) ;EP
"RTN","RGCWENCX",30,0)
 N IEN,X,FETCH
"RTN","RGCWENCX",31,0)
 S PRV=+$G(PRV)
"RTN","RGCWENCX",32,0)
 S FETCH=$$GET^XPAR("ALL","RGCWENCX PROV ENC FETCH")
"RTN","RGCWENCX",33,0)
 I 'PRV,$$ISPROV^RGCWFUSR S PRV=DUZ
"RTN","RGCWENCX",34,0)
 S IEN=$$VSTR2VIS(DFN,.VSTR,.CREATE,PRV)
"RTN","RGCWENCX",35,0)
 I IEN>0,'PRV,FETCH D
"RTN","RGCWENCX",36,0)
 .D GETPRV2(.X,IEN,1)
"RTN","RGCWENCX",37,0)
 .S PRV=+$O(X(0))
"RTN","RGCWENCX",38,0)
 S DATA=$P($G(^SC(+VSTR,0)),U,1,2)
"RTN","RGCWENCX",39,0)
 S $P(DATA,U,3)=$P($G(^DPT(DFN,.101)),U)
"RTN","RGCWENCX",40,0)
 S $P(DATA,U,4)=PRV
"RTN","RGCWENCX",41,0)
 S $P(DATA,U,5)=$P($G(^VA(200,PRV,0)),U)
"RTN","RGCWENCX",42,0)
 I IEN>0 S $P(DATA,U,6)=IEN,$P(DATA,U,7)=$P($G(^AUPNVSIT(IEN,150)),U),$P(DATA,U,8)=$$ISLOCKED(IEN)
"RTN","RGCWENCX",43,0)
 E  S $P(DATA,U,9)=$P(IEN,U,2)
"RTN","RGCWENCX",44,0)
 Q
"RTN","RGCWENCX",45,0)
 ; RPC: Return location info
"RTN","RGCWENCX",46,0)
 ;   Returns 0 node of HOSPITAL LOCATION file for specified entry.
"RTN","RGCWENCX",47,0)
LOCINFO(DATA,LOC) ;
"RTN","RGCWENCX",48,0)
 Q $G(^SC(+LOC,0))
"RTN","RGCWENCX",49,0)
 ; Find a visit
"RTN","RGCWENCX",50,0)
 ;   DFN = Patient IEN
"RTN","RGCWENCX",51,0)
 ;   DAT = Visit date/time
"RTN","RGCWENCX",52,0)
 ;   CAT = Service category
"RTN","RGCWENCX",53,0)
 ;   LOC = Value to compare (location or stop code)
"RTN","RGCWENCX",54,0)
 ;   CRE = Force create?
"RTN","RGCWENCX",55,0)
 ;   PRV = Provider IEN to restrict search (optional)
"RTN","RGCWENCX",56,0)
 ;   ELC = Encounter location (optional)
"RTN","RGCWENCX",57,0)
 ; Returns one of:
"RTN","RGCWENCX",58,0)
 ;   If found or created: visit ien
"RTN","RGCWENCX",59,0)
 ;   If not found: 0
"RTN","RGCWENCX",60,0)
 ;   If error: -1^error message
"RTN","RGCWENCX",61,0)
FNDVIS(DFN,DAT,CAT,LOC,CRE,PRV,ELC) ;PEP - Find a visit
"RTN","RGCWENCX",62,0)
 N IN,OUT,IEN,DIF
"RTN","RGCWENCX",63,0)
 S IN("PAT")=DFN
"RTN","RGCWENCX",64,0)
 S IN("VISIT DATE")=DAT
"RTN","RGCWENCX",65,0)
 S IN("VISIT TYPE")=$S(CAT="E":"O",1:$S($G(DUZ("AG"))="I":$$GET1^DIQ(9001000,DUZ(2),.04,"I"),1:$$GET^XPAR("ALL","RGCWENCX VISIT TYPE")))
"RTN","RGCWENCX",66,0)
 S IN("SRV CAT")=CAT
"RTN","RGCWENCX",67,0)
 S IN("TIME RANGE")=60
"RTN","RGCWENCX",68,0)
 S IN("USR")=DUZ
"RTN","RGCWENCX",69,0)
 S:$G(LOC) IN("HOS LOC")=LOC
"RTN","RGCWENCX",70,0)
 S:$G(XQY) IN("APCDOPT")=XQY
"RTN","RGCWENCX",71,0)
 S:$G(PRV) IN("PROVIDER")=PRV
"RTN","RGCWENCX",72,0)
 S ELC=$G(ELC)
"RTN","RGCWENCX",73,0)
 I $L(ELC),ELC'=+ELC D
"RTN","RGCWENCX",74,0)
 .S IN("APCDOLOC")=ELC
"RTN","RGCWENCX",75,0)
 .S ELC=$$GET^XPAR("ALL","RGCWENCX OTHER LOCATION")
"RTN","RGCWENCX",76,0)
 S IN("SITE")=$S(ELC:ELC,$P($G(^SC(+$G(LOC),0)),U,4):$P(^(0),U,4),1:DUZ(2))
"RTN","RGCWENCX",77,0)
 I 'CRE S IN("NEVER ADD")=1
"RTN","RGCWENCX",78,0)
 E  I CRE<0 S IN("FORCE ADD")=1
"RTN","RGCWENCX",79,0)
 I $G(DUZ("AG"))="I" D
"RTN","RGCWENCX",80,0)
 .D GETVISIT^BSDAPI4(.IN,.OUT)
"RTN","RGCWENCX",81,0)
 E  D GETVISIT^RGCWENC1(.IN,.OUT)
"RTN","RGCWENCX",82,0)
 Q:'OUT(0) $S(OUT(0)[U:"-1^"_$P(OUT(0),U,2),1:0)
"RTN","RGCWENCX",83,0)
 S IEN=0,DIF=999999
"RTN","RGCWENCX",84,0)
 F  S IEN=$O(OUT(IEN)) Q:'IEN  D
"RTN","RGCWENCX",85,0)
 .I OUT(IEN)="ADD" D
"RTN","RGCWENCX",86,0)
 ..N VSTR
"RTN","RGCWENCX",87,0)
 ..S VSTR=$$VIS2VSTR(DFN,IEN)
"RTN","RGCWENCX",88,0)
 ..D BRDCAST^RGNETBEV("PCC."_DFN_".VST",VSTR)
"RTN","RGCWENCX",89,0)
 ..D:$G(PRV) UPDPRV(,DFN,VSTR,PRV)
"RTN","RGCWENCX",90,0)
 .S:$$ABS(OUT(IEN))<DIF DIF=$$ABS(OUT(IEN)),IEN(0)=IEN
"RTN","RGCWENCX",91,0)
 Q IEN(0)
"RTN","RGCWENCX",92,0)
 ; Return absolute value
"RTN","RGCWENCX",93,0)
ABS(X) Q $S(X<0:-X,1:X)
"RTN","RGCWENCX",94,0)
 ; Return a visit ien from a visit string (create if necessary)
"RTN","RGCWENCX",95,0)
 ;   DFN    = Patient IEN
"RTN","RGCWENCX",96,0)
 ;   VSTR   = Visit string
"RTN","RGCWENCX",97,0)
 ;   CREATE = Create flag
"RTN","RGCWENCX",98,0)
 ;            0 = Don't create
"RTN","RGCWENCX",99,0)
 ;           >0 = Create if not found
"RTN","RGCWENCX",100,0)
 ;           <0 = Always create
"RTN","RGCWENCX",101,0)
 ;   PRV    = Provider IEN to restrict visit search (optional)
"RTN","RGCWENCX",102,0)
VSTR2VIS(DFN,VSTR,CREATE,PRV) ;PEP - Convert visit string to visit IEN
"RTN","RGCWENCX",103,0)
 N IEN,DAT,CAT,LOC,FLG,VSIT,LP
"RTN","RGCWENCX",104,0)
 S LOC=+VSTR,DAT=+$P(VSTR,";",2),CAT=$P(VSTR,";",3),IEN=+$P(VSTR,";",4),CREATE=+$G(CREATE)
"RTN","RGCWENCX",105,0)
 I 'IEN,CREATE'<0 S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,0,.PRV)
"RTN","RGCWENCX",106,0)
 I 'IEN,CREATE'<0 S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,0)
"RTN","RGCWENCX",107,0)
 I 'IEN,CREATE S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,CREATE,.PRV)
"RTN","RGCWENCX",108,0)
 S:IEN>0 VSTR=$$VIS2VSTR(DFN,IEN,.IEN),$P(VSTR,";")=LOC
"RTN","RGCWENCX",109,0)
 Q IEN
"RTN","RGCWENCX",110,0)
 ; Return a visit string given visit ien
"RTN","RGCWENCX",111,0)
VIS2VSTR(DFN,IEN,ERR) ;PEP - Convert visit IEN to visit string
"RTN","RGCWENCX",112,0)
 N VSTR
"RTN","RGCWENCX",113,0)
 S VSTR=$G(^AUPNVSIT(+IEN,0))
"RTN","RGCWENCX",114,0)
 I '$L(VSTR) S ERR="-1^Visit does not exist"
"RTN","RGCWENCX",115,0)
 E  I $P(VSTR,U,5)'=DFN S ERR="-1^Visit does not belong to current patient",VSTR=""
"RTN","RGCWENCX",116,0)
 E  S VSTR=$P(VSTR,U,22)_";"_+VSTR_";"_$P(VSTR,U,7)_";"_IEN
"RTN","RGCWENCX",117,0)
 Q VSTR
"RTN","RGCWENCX",118,0)
 ; RPC: Return a list of appointments
"RTN","RGCWENCX",119,0)
 ; APPTTIME^LOCIEN^LOCNAME^EXTSTATUS
"RTN","RGCWENCX",120,0)
APPTLST(DATA,DFN) ;EP
"RTN","RGCWENCX",121,0)
 N VASD,I
"RTN","RGCWENCX",122,0)
 S VASD("F")=$$HTFM^XLFDT($H-30,1)
"RTN","RGCWENCX",123,0)
 S VASD("T")=$$HTFM^XLFDT($H+1,1)_".2359"
"RTN","RGCWENCX",124,0)
 S VASD("W")="123456789"
"RTN","RGCWENCX",125,0)
 D SDA^VADPT
"RTN","RGCWENCX",126,0)
 S I=0
"RTN","RGCWENCX",127,0)
 F  S I=$O(^UTILITY("VASD",$J,I)) Q:'I  D
"RTN","RGCWENCX",128,0)
 .S DATA(I)=$P(^UTILITY("VASD",$J,I,"I"),U,1,2)_U_$P(^("E"),U,2,3)
"RTN","RGCWENCX",129,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWENCX",130,0)
 Q
"RTN","RGCWENCX",131,0)
 ; RPC: Return a list of admissions
"RTN","RGCWENCX",132,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",133,0)
ADMITLST(DATA,DFN,BEG,END) ;EP
"RTN","RGCWENCX",134,0)
 N TIM,MOV,CNT,IDT,IDT2
"RTN","RGCWENCX",135,0)
 S CNT=0,TIM=""
"RTN","RGCWENCX",136,0)
 S:'$G(BEG) BEG=2000000
"RTN","RGCWENCX",137,0)
 S:'$G(END) END=DT
"RTN","RGCWENCX",138,0)
 S IDT2=9999999-(BEG\1)+.9,IDT=9999999-(END\1)
"RTN","RGCWENCX",139,0)
 F  Q:'IDT!(IDT>IDT2)  D  S IDT=$O(^DGPM("ATID1",DFN,IDT))
"RTN","RGCWENCX",140,0)
 .S MOV=0 F  S MOV=$O(^DGPM("ATID1",DFN,IDT,MOV)) Q:MOV'>0  D
"RTN","RGCWENCX",141,0)
 ..S X=$$ADMITINF(DFN,MOV)
"RTN","RGCWENCX",142,0)
 ..S:X CNT=CNT+1,DATA(CNT)=X
"RTN","RGCWENCX",143,0)
 Q
"RTN","RGCWENCX",144,0)
 ; RPC: Return current admission info
"RTN","RGCWENCX",145,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",146,0)
ADMITCUR(DATA,DFN) ;EP
"RTN","RGCWENCX",147,0)
 S DATA=$$ADMITINF(DFN,+$G(^DPT(DFN,.105)))
"RTN","RGCWENCX",148,0)
 Q
"RTN","RGCWENCX",149,0)
 ; Return admission info
"RTN","RGCWENCX",150,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",151,0)
ADMITINF(DFN,MOV) ;EP
"RTN","RGCWENCX",152,0)
 N VIEN,VSTR,LLOC,XLOC,HLOC,CMOV,AMOV,DMOV,LMOV,MTIM,XTYP,X0
"RTN","RGCWENCX",153,0)
 S X0=$G(^DGPM(+MOV,0))
"RTN","RGCWENCX",154,0)
 Q:$P(X0,U,3)'=DFN ""
"RTN","RGCWENCX",155,0)
 S MTIM=$P(X0,U),DMOV=$P(X0,U,17),VIEN=$P(X0,U,27)
"RTN","RGCWENCX",156,0)
 S:'$D(^AUPNVSIT(+VIEN,0)) VIEN=""
"RTN","RGCWENCX",157,0)
 S CMOV=+$G(^DPT(DFN,.102)),AMOV=+$G(^(.105))
"RTN","RGCWENCX",158,0)
 S XTYP=$P($G(^DG(405.1,+$P(X0,U,4),0)),U)
"RTN","RGCWENCX",159,0)
 I MOV=AMOV,CMOV'=AMOV,$D(^DGPM(CMOV,0)) S LMOV=CMOV
"RTN","RGCWENCX",160,0)
 E  S LMOV=MOV
"RTN","RGCWENCX",161,0)
 D AL2(MOV,.XLOC,.HLOC),AL2(LMOV,.LLOC,.HLOC):LMOV'=MOV
"RTN","RGCWENCX",162,0)
 I $L($G(LLOC)),LLOC'=XLOC S XLOC=XLOC_" ("_LLOC_")"
"RTN","RGCWENCX",163,0)
 S VSTR=HLOC_";"_MTIM_";H;"_VIEN
"RTN","RGCWENCX",164,0)
 Q VSTR_U_XLOC_U_MTIM_U_XTYP_U_$$ISLOCKED(VIEN)
"RTN","RGCWENCX",165,0)
 ; Return ward location name and associated hospital location ien for movement
"RTN","RGCWENCX",166,0)
AL2(MOV,WLOC,HLOC) ;
"RTN","RGCWENCX",167,0)
 S WLOC=+$P($G(^DGPM(MOV,0)),U,6),WLOC=$P($G(^DIC(42,WLOC,0)),U),HLOC=+$G(^(44))
"RTN","RGCWENCX",168,0)
 Q
"RTN","RGCWENCX",169,0)
 ; RPC: Get discharge movement information
"RTN","RGCWENCX",170,0)
DISCHRG(DATA,DFN,ADMITDT) ;EP
"RTN","RGCWENCX",171,0)
 N VAIP
"RTN","RGCWENCX",172,0)
 S DATA=DT
"RTN","RGCWENCX",173,0)
 Q:'$G(ADMITDT)
"RTN","RGCWENCX",174,0)
 S VAIP("D")=ADMITDT
"RTN","RGCWENCX",175,0)
 D 52^VADPT
"RTN","RGCWENCX",176,0)
 S:VAIP(17) DATA=+VAIP(17,1)
"RTN","RGCWENCX",177,0)
 Q
"RTN","RGCWENCX",178,0)
 ; Returns true if active hospital location
"RTN","RGCWENCX",179,0)
 ; LOC = IEN of hospital location
"RTN","RGCWENCX",180,0)
 ; DAT = optional date to check (defaults to today)
"RTN","RGCWENCX",181,0)
ACTLOC(LOC,DAT) ;PEP - Is active location?
"RTN","RGCWENCX",182,0)
 N D0,X
"RTN","RGCWENCX",183,0)
 S X=$G(^SC(LOC,0))
"RTN","RGCWENCX",184,0)
 Q:'$L(X) 0                                                            ; Screen nonexistent entries
"RTN","RGCWENCX",185,0)
 S X=$P($G(^DG(40.8,+$P(X,U,15),0)),U,7)
"RTN","RGCWENCX",186,0)
 I X,X'=DUZ(2) Q 0                                                     ; Screen clinics not in current division
"RTN","RGCWENCX",187,0)
 Q:+$G(^SC(LOC,"OOS")) 0                                               ; Screen OOS entry
"RTN","RGCWENCX",188,0)
 S D0=+$G(^SC(LOC,42)),DAT=$G(DAT,DT)\1
"RTN","RGCWENCX",189,0)
 I D0 D WIN^DGPMDDCF Q 'X                                              ; Check out of svc wards
"RTN","RGCWENCX",190,0)
 S X=$G(^SC(LOC,"I"))
"RTN","RGCWENCX",191,0)
 Q:'X 1                                                                ; No inactivate date
"RTN","RGCWENCX",192,0)
 Q:DAT'<$P(X,U)&($P(X,U,2)=""!(DAT<$P(X,U,2))) 0                       ; Check reactivate date
"RTN","RGCWENCX",193,0)
 Q 1                                                                   ; Must still be active
"RTN","RGCWENCX",194,0)
 ; RPC: Return a set of hospital locations
"RTN","RGCWENCX",195,0)
HOSPLOC(DATA,FROM,DIR,MAX,TYPE,START,END) ;EP
"RTN","RGCWENCX",196,0)
 N IEN,CNT,APT
"RTN","RGCWENCX",197,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),TYPE=$G(TYPE),CNT=0
"RTN","RGCWENCX",198,0)
 S START=$G(START)\1,END=$G(END)\1
"RTN","RGCWENCX",199,0)
 S:'END END=START
"RTN","RGCWENCX",200,0)
 F  S FROM=$O(^SC("B",FROM),DIR),IEN="" Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWENCX",201,0)
 .F  S IEN=$O(^SC("B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWENCX",202,0)
 ..I $$ACTLOC(IEN),$P(^SC(IEN,0),U,3)[TYPE D
"RTN","RGCWENCX",203,0)
 ...I START S APT=$O(^SC(IEN,"S",START-.1))\1 Q:'APT!(APT>END)
"RTN","RGCWENCX",204,0)
 ...S CNT=CNT+1,DATA(CNT)=IEN_U_$P(^SC(IEN,0),U)_U_$S($G(DUZ("AG"))="I":$P($G(^BSDSC(IEN,0)),U,12),1:$P($G(^SC(IEN,0)),U,9))
"RTN","RGCWENCX",205,0)
 Q
"RTN","RGCWENCX",206,0)
 ; RPC: Return a set of clinics
"RTN","RGCWENCX",207,0)
CLINLOC(DATA,FROM,DIR,MAX,START,END) ;EP
"RTN","RGCWENCX",208,0)
 D HOSPLOC(.DATA,.FROM,.DIR,.MAX,"C",.START,.END)
"RTN","RGCWENCX",209,0)
 Q
"RTN","RGCWENCX",210,0)
 ; RPC: Return a set of wards
"RTN","RGCWENCX",211,0)
INPLOC(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWENCX",212,0)
 D HOSPLOC(.DATA,.FROM,.DIR,.MAX,"W")
"RTN","RGCWENCX",213,0)
 Q
"RTN","RGCWENCX",214,0)
 ; RPC: Return appts/visits for patient
"RTN","RGCWENCX",215,0)
 ;  DFN = Patient IEN
"RTN","RGCWENCX",216,0)
 ;  BEG = Beginning date to search (optional)
"RTN","RGCWENCX",217,0)
 ;        Defaults to RGCWENCX SEARCH RANGE START
"RTN","RGCWENCX",218,0)
 ;  END = Ending date to search (optional)
"RTN","RGCWENCX",219,0)
 ;        Defaults to RGCWENCX SEARCH RANGE END
"RTN","RGCWENCX",220,0)
 ;  LOC = If not specified, return all locations and all active appointments
"RTN","RGCWENCX",221,0)
 ;        If <0, return all locations and all appointments (except checked-in)
"RTN","RGCWENCX",222,0)
 ;        If >0, return only specified location and only active appointments
"RTN","RGCWENCX",223,0)
 ;SCEXC = Contains service category types to exclude (defaults to HXI)
"RTN","RGCWENCX",224,0)
 ; .DATA= List of results in format:
"RTN","RGCWENCX",225,0)
 ;        VSTR^LOCNAME^DATE^STATUS^LOCKED^PRV^PRVNM^STANDALONE
"RTN","RGCWENCX",226,0)
VISITLST(DATA,DFN,BEG,END,LOC,SCEXC) ;EP
"RTN","RGCWENCX",227,0)
 N VAERR,VASD,CNT,IDT,IDT2,STS,DTM,LOCNAM,LOCIEN,VSTR,IEN,LP,XI,XE,X
"RTN","RGCWENCX",228,0)
 S CNT=0,DATA=$$TMPGBL^RGUTRPC,LOC=+$G(LOC)
"RTN","RGCWENCX",229,0)
 S SCEXC=$G(SCEXC,"XI")  ;p9 removed H
"RTN","RGCWENCX",230,0)
 S:'$G(BEG) BEG=$$DTSTART
"RTN","RGCWENCX",231,0)
 S:'$G(END) END=$$DTSTOP+.9
"RTN","RGCWENCX",232,0)
 ; Return list of visits for a patient
"RTN","RGCWENCX",233,0)
 S IDT2=9999999-(BEG\1)+.9,IDT=9999999-(END\1)
"RTN","RGCWENCX",234,0)
 F  Q:'IDT!(IDT>IDT2)  D  S IDT=$O(^AUPNVSIT("AA",DFN,IDT))
"RTN","RGCWENCX",235,0)
 .F IEN=0:0 S IEN=$O(^AUPNVSIT("AA",DFN,IDT,IEN)) Q:'IEN  D
"RTN","RGCWENCX",236,0)
 ..N PRV
"RTN","RGCWENCX",237,0)
 ..S XI=$G(^AUPNVSIT(IEN,0)),DTM=+XI,LOCIEN=$P(XI,U,22),LOCNAM=$P($G(^SC(+LOCIEN,0),"Unknown"),U),X=$P(XI,U,7)
"RTN","RGCWENCX",238,0)
 ..Q:$P(XI,U,11)                                                       ; Ignore if logically deleted
"RTN","RGCWENCX",239,0)
 ..Q:'LOC&'LOCIEN
"RTN","RGCWENCX",240,0)
 ..Q:LOC>0&(LOC'=LOCIEN)
"RTN","RGCWENCX",241,0)
 ..D GETPRV2(.PRV,IEN,1)
"RTN","RGCWENCX",242,0)
 ..S PRV=$P($G(PRV(+$O(PRV(0)))),U,1,2)
"RTN","RGCWENCX",243,0)
 ..S VSTR=LOCIEN_";"_DTM_";"_X_";"_IEN,STS=$$SET^RGUT(X,$P($G(^DD(9000010,.07,0)),U,3))
"RTN","RGCWENCX",244,0)
 ..S:SCEXC'[X CNT=CNT+1,@DATA@(-DTM,CNT)=VSTR_U_LOCNAM_U_DTM_U_STS_U_$$ISLOCKED(IEN)_U_PRV_U_'$D(^SCE("AVSIT",IEN))
"RTN","RGCWENCX",245,0)
 Q:LOC>0
"RTN","RGCWENCX",246,0)
 ; Get appointments pending check-in
"RTN","RGCWENCX",247,0)
 S VASD("F")=$S(LOC<0:BEG,BEG<DT:DT,1:BEG)
"RTN","RGCWENCX",248,0)
 S VASD("T")=END
"RTN","RGCWENCX",249,0)
 S VASD("W")=$S(LOC<0:123456789,1:1)
"RTN","RGCWENCX",250,0)
 D SDA^VADPT
"RTN","RGCWENCX",251,0)
 S LP=0
"RTN","RGCWENCX",252,0)
 F  S LP=$O(^UTILITY("VASD",$J,LP)) Q:'LP  D
"RTN","RGCWENCX",253,0)
 .S XI=^UTILITY("VASD",$J,LP,"I"),XE=^("E")
"RTN","RGCWENCX",254,0)
 .S DTM=$P(XI,U),LOCIEN=$P(XI,U,2),LOCNAM=$P(XE,U,2)
"RTN","RGCWENCX",255,0)
 .Q:$$CHKDIN(DFN,LOCIEN,DTM)
"RTN","RGCWENCX",256,0)
 .S XI=$G(^DPT(DFN,"S",DTM,0))
"RTN","RGCWENCX",257,0)
 .Q:+XI'=LOCIEN
"RTN","RGCWENCX",258,0)
 .S XI=$P(XI,U,20),STS=$S(LOC<0:$P(XE,U,3),1:"Pending Check-In")
"RTN","RGCWENCX",259,0)
 .I XI,$P($G(^SCE(XI,0)),U,5) Q
"RTN","RGCWENCX",260,0)
 .S VSTR=LOCIEN_";"_DTM_";A"
"RTN","RGCWENCX",261,0)
 .S CNT=CNT+1,@DATA@(-DTM,CNT)=VSTR_U_LOCNAM_U_DTM_U_STS
"RTN","RGCWENCX",262,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWENCX",263,0)
 Q
"RTN","RGCWENCX",264,0)
 ; Returns true if checked in
"RTN","RGCWENCX",265,0)
CHKDIN(DFN,LOCIEN,DTM) ;
"RTN","RGCWENCX",266,0)
 Q:$G(DUZ("AG"))="I" $$CI^BSDU2(DFN,LOCIEN,DTM)
"RTN","RGCWENCX",267,0)
 Q ''$P($$STATUS^SDAMA308(DFN,DTM,LOCIEN),";",4)
"RTN","RGCWENCX",268,0)
 ; Returns visit lock status:
"RTN","RGCWENCX",269,0)
 ;  -1:  Visit not found
"RTN","RGCWENCX",270,0)
 ;   0:  Visit is not locked
"RTN","RGCWENCX",271,0)
 ;   1:  Visit is locked
"RTN","RGCWENCX",272,0)
ISLOCKED(IEN) ;PEP - Is visit locked?
"RTN","RGCWENCX",273,0)
 N DAT,DAYS,EXPDT
"RTN","RGCWENCX",274,0)
 S DAT=$$VISREFDT(IEN)
"RTN","RGCWENCX",275,0)
 Q:'DAT -1
"RTN","RGCWENCX",276,0)
 ;IHS/MSC/PLS - 02/18/09 - Parameter now holds lock expiration date
"RTN","RGCWENCX",277,0)
 S EXPDT=$$GET^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN)
"RTN","RGCWENCX",278,0)
 Q:EXPDT'<$$DT^XLFDT() 0
"RTN","RGCWENCX",279,0)
 D:EXPDT DEL^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN)  ; remove expired locked
"RTN","RGCWENCX",280,0)
 ;Q:$$GET^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN) 0
"RTN","RGCWENCX",281,0)
 S DAYS=$$GET^XPAR("ALL","RGCWENCX VISIT LOCKED")
"RTN","RGCWENCX",282,0)
 Q $$FMDIFF^XLFDT(DT,DAT)>$S(DAYS<1:1,1:DAYS)
"RTN","RGCWENCX",283,0)
 ; Returns reference date for visit lock check
"RTN","RGCWENCX",284,0)
VISREFDT(IEN) ;
"RTN","RGCWENCX",285,0)
 N ADM,DIS,DAT
"RTN","RGCWENCX",286,0)
 S DAT=$P($G(^AUPNVSIT(+IEN,0)),U,2)
"RTN","RGCWENCX",287,0)
 Q:'DAT ""
"RTN","RGCWENCX",288,0)
 S ADM=$O(^DGPM("AVISIT",IEN,0))
"RTN","RGCWENCX",289,0)
 Q:'ADM DAT
"RTN","RGCWENCX",290,0)
 S DIS=$P($G(^DGPM(ADM,0)),U,17)
"RTN","RGCWENCX",291,0)
 Q $S(DIS:$P($G(^DGPM(DIS,0)),U),1:DT)
"RTN","RGCWENCX",292,0)
 ; RPC: Return providers associated with a visit (by VSTR)
"RTN","RGCWENCX",293,0)
 ; If PRI is set, returns primary only
"RTN","RGCWENCX",294,0)
 ; Returns as DATA(DUZ)=DUZ^Name^Primary^EncDT
"RTN","RGCWENCX",295,0)
GETPRV(DATA,DFN,VSTR,PRI) ;EP
"RTN","RGCWENCX",296,0)
 D GETPRV2(.DATA,$$VSTR2VIS(DFN,VSTR,0),.PRI)
"RTN","RGCWENCX",297,0)
 Q
"RTN","RGCWENCX",298,0)
 ; RPC: Return providers associated with a visit (by IEN)
"RTN","RGCWENCX",299,0)
 ; If PRI is set, returns primary only
"RTN","RGCWENCX",300,0)
 ; Returns as DATA(DUZ)=DUZ^Name^Primary^EncDT
"RTN","RGCWENCX",301,0)
GETPRV2(DATA,IEN,PRI) ;EP
"RTN","RGCWENCX",302,0)
 N LP,ED,PP,PR,X
"RTN","RGCWENCX",303,0)
 K DATA
"RTN","RGCWENCX",304,0)
 S LP=0,IEN=+IEN,PRI=+$G(PRI)
"RTN","RGCWENCX",305,0)
 F  S LP=$O(^AUPNVPRV("AD",IEN,LP)) Q:'LP  D
"RTN","RGCWENCX",306,0)
 .S X=$G(^AUPNVPRV(LP,0)),ED=$P($G(^(12)),U),PP=$P(X,U,4)="P",PR=+X
"RTN","RGCWENCX",307,0)
 .I $P(X,U,3)=IEN,'PRI!PP S DATA(PR)=PR_U_$$GET1^DIQ(200,PR,.01)_U_PP_U_ED
"RTN","RGCWENCX",308,0)
 Q
"RTN","RGCWENCX",309,0)
 ; RPC: Add/Remove providers to/from a visit
"RTN","RGCWENCX",310,0)
UPDPRV(DATA,DFN,VSTR,PRV) ;EP
"RTN","RGCWENCX",311,0)
 N PCC,ACT,PRI,PFG,RTN
"RTN","RGCWENCX",312,0)
 S:$D(PRV)=1 PRV(PRV)="P"
"RTN","RGCWENCX",313,0)
 S PRV="",PFG=0
"RTN","RGCWENCX",314,0)
 F  S PRV=$O(PRV(PRV)) Q:'$L(PRV)  D
"RTN","RGCWENCX",315,0)
 .S ACT=PRV(PRV),PRI=0
"RTN","RGCWENCX",316,0)
 .S:ACT="P" PRI='PFG,ACT="+",PFG=1
"RTN","RGCWENCX",317,0)
 .D ADDPCC("PRV"_ACT_U_PRV_"^^^^"_PRI)
"RTN","RGCWENCX",318,0)
 D:$D(PCC) SAVE^RGCWENPC(.DATA,.PCC)
"RTN","RGCWENCX",319,0)
 Q
"RTN","RGCWENCX",320,0)
 ; RPC: Check visit for missing elements
"RTN","RGCWENCX",321,0)
CHKVISIT(DATA,IEN) ;
"RTN","RGCWENCX",322,0)
 Q:$T(+2^RGCWXQPC)=""
"RTN","RGCWENCX",323,0)
 N RTN,CNT
"RTN","RGCWENCX",324,0)
 S CNT=0
"RTN","RGCWENCX",325,0)
 D NOPOV^RGCWXQPC(.RTN,IEN),CV1("POV")
"RTN","RGCWENCX",326,0)
 D NOEMC^RGCWXQPC(.RTN,IEN),CV1("E&M")
"RTN","RGCWENCX",327,0)
 Q
"RTN","RGCWENCX",328,0)
CV1(DX) S:$D(RTN) CNT=CNT+1,$P(RTN,U)=DX,DATA(CNT)=RTN
"RTN","RGCWENCX",329,0)
 K RTN
"RTN","RGCWENCX",330,0)
 Q
"RTN","RGCWENCX",331,0)
 ; Build PCC array
"RTN","RGCWENCX",332,0)
ADDPCC(X) ;
"RTN","RGCWENCX",333,0)
 S:'$D(PCC) PCC(1)="HDR^^^"_VSTR,PCC(2)="VST^PT^"_DFN
"RTN","RGCWENCX",334,0)
 S PCC($O(PCC(""),-1)+1)=X
"RTN","RGCWENCX",335,0)
 Q
"RTN","RGCWENCX",336,0)
 ;  VST may either be the visit ien or a visitstr
"RTN","RGCWENCX",337,0)
 ;  Optionally returns success indicator
"RTN","RGCWENCX",338,0)
SETCTX(VST) ;PEP - Set the encounter context
"RTN","RGCWENCX",339,0)
 N UID
"RTN","RGCWENCX",340,0)
 S UID=$$GETUID^RGNETBUT
"RTN","RGCWENCX",341,0)
 D:$L(UID) QUEUE^RGNETBEV("CONTEXT.ENCOUNTER",VST,UID)
"RTN","RGCWENCX",342,0)
 Q:$Q ''$L(UID)
"RTN","RGCWENCX",343,0)
 Q
"RTN","RGCWENCX",344,0)
 ; Return FM date given relative date
"RTN","RGCWENCX",345,0)
 ;   DAT = Relative date (e.g., T+1)
"RTN","RGCWENCX",346,0)
 ;   DFL = Default relative date (if DAT is not specified)
"RTN","RGCWENCX",347,0)
TOFM(DAT,DFL) ;
"RTN","RGCWENCX",348,0)
 N %DT,X,Y
"RTN","RGCWENCX",349,0)
 S X=$S(DAT="":DFL,1:DAT),%DT="TS"
"RTN","RGCWENCX",350,0)
 D ^%DT
"RTN","RGCWENCX",351,0)
 Q Y
"RTN","RGCWENCX",352,0)
 ; Return start date for encounters
"RTN","RGCWENCX",353,0)
DTSTART() ;EP
"RTN","RGCWENCX",354,0)
 Q $$TOFM($$GET^XPAR("ALL","RGCWENCX SEARCH RANGE START",1,"I"),"T-365")
"RTN","RGCWENCX",355,0)
 ; Return stop date for encounters
"RTN","RGCWENCX",356,0)
DTSTOP() ;EP
"RTN","RGCWENCX",357,0)
 Q $$TOFM($$GET^XPAR("ALL","RGCWENCX SEARCH RANGE STOP",1,"I"),"T+90")
"RTN","RGCWENCX",358,0)
 ; Return formatted visit detail report
"RTN","RGCWENCX",359,0)
ENINQ(DATA,VIEN) ;
"RTN","RGCWENCX",360,0)
 S DATA=$$TMPGBL^RGUTRPC
"RTN","RGCWENCX",361,0)
 D CAPTURE^RGUTHFS($TR($$GET^XPAR($$ENT^RGCWFPAR("RGCWENCX DETAIL REPORT"),"RGCWENCX DETAIL REPORT"),"~",U),DATA,80)
"RTN","RGCWENCX",362,0)
 Q
"RTN","RGCWFTIU")
0^10^B2617280
"RTN","RGCWFTIU",1,0)
RGCWFTIU ;RI/CBMI/DKM - TIU FHIR Support ;28-Jul-2014 17:23;DKM
"RTN","RGCWFTIU",2,0)
 ;;1.0;RGCW;;14-March-2014;Build 372
"RTN","RGCWFTIU",3,0)
 ;=================================================================
"RTN","RGCWFTIU",4,0)
DOCUMENT N ATR,TEXT,VL
"RTN","RGCWFTIU",5,0)
 M VL=VALS(FILE,IENS)
"RTN","RGCWFTIU",6,0)
 K VALS
"RTN","RGCWFTIU",7,0)
 D NEWFEED^RGCWFHIR(VL(.01,"E"))
"RTN","RGCWFTIU",8,0)
 S ATR("scheme")="http://hl7.org/fhir/tag",ATR("term")="http://hl7.org/fhir/tag/document"
"RTN","RGCWFTIU",9,0)
 D ADDTAG^RGCWFHIR("category",.ATR,1)
"RTN","RGCWFTIU",10,0)
 D NEWENTRY^RGCWFHIR("Composition","urn:guid:"_$$UUID^RGCWFHIR())
"RTN","RGCWFTIU",11,0)
 S ATR("xmlns")="http://hl7.org/fhir"
"RTN","RGCWFTIU",12,0)
 D ADDTAG^RGCWFHIR("Composition",.ATR)
"RTN","RGCWFTIU",13,0)
 D ADDTAG^RGCWFHIR("text")
"RTN","RGCWFTIU",14,0)
 D PUT^RGCWFHIR("status","generated")
"RTN","RGCWFTIU",15,0)
 S ATR("xmlns")="http://www.w3.org/1999/xhtml"
"RTN","RGCWFTIU",16,0)
 D ADDTAG^RGCWFHIR("div",.ATR)
"RTN","RGCWFTIU",17,0)
 D TGET^TIUSRVR1(.TEXT,IEN)
"RTN","RGCWFTIU",18,0)
 D ADDARY^RGCWFHIR(TEXT)
"RTN","RGCWFTIU",19,0)
 D ENDTAG^RGCWFHIR("text")
"RTN","RGCWFTIU",20,0)
 D PUTDT^RGCWFHIR("date",VL(1301,"I"))
"RTN","RGCWFTIU",21,0)
 D ADDTAG^RGCWFHIR("type")
"RTN","RGCWFTIU",22,0)
 D PUT^RGCWFHIR("text",VL(.01,"E"))
"RTN","RGCWFTIU",23,0)
 D ENDTAG^RGCWFHIR("type")
"RTN","RGCWFTIU",24,0)
 D PERSON("subject","Patient",.02)
"RTN","RGCWFTIU",25,0)
 D PERSON("author","Practitioner",1202)
"RTN","RGCWFTIU",26,0)
 D ENDFEED^RGCWFHIR
"RTN","RGCWFTIU",27,0)
 Q
"RTN","RGCWFTIU",28,0)
PERSON(TAG,ENT,FLD) ;
"RTN","RGCWFTIU",29,0)
 D ADDTAG^RGCWFHIR(TAG)
"RTN","RGCWFTIU",30,0)
 D PUT^RGCWFHIR("reference",ENT_"/"_VL(FLD,"I"))
"RTN","RGCWFTIU",31,0)
 D PUT^RGCWFHIR("display",VL(FLD,"E"))
"RTN","RGCWFTIU",32,0)
 D ENDTAG^RGCWFHIR(TAG)
"RTN","RGCWFTIU",33,0)
 Q
"RTN","RGCWKDIN")
0^^B31607711
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;01-Apr-2015 14:05;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^RGUT("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^RGUT($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^RGUTOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^RGUTRPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^RGUTRPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^RGUTUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^RGUTRPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RG","DG","DDR","BEH" D REGNMSP^RGUTRPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^RGUTRPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^RGUTRPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^RGUTRPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"RTN","RGCWPTCX")
0^9^B39032511
"RTN","RGCWPTCX",1,0)
RGCWPTCX ;RI/CBMI/DKM - Patient Context Object ;01-Apr-2015 14:05;DKM
"RTN","RGCWPTCX",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTCX",3,0)
 ; Save/retrieve last patient selected for current institution
"RTN","RGCWPTCX",4,0)
LAST(DATA,DFN) ;
"RTN","RGCWPTCX",5,0)
 D:$$ISACTIVE($G(DFN)) EN^XPAR("USR","RGCWPTCX LAST PATIENT","`"_DUZ(2),"`"_DFN)
"RTN","RGCWPTCX",6,0)
 S DATA=$$GET^XPAR("USR","RGCWPTCX LAST PATIENT",DUZ(2),"I")
"RTN","RGCWPTCX",7,0)
 S:DATA ^DISV(DUZ,"^DPT(")=DATA
"RTN","RGCWPTCX",8,0)
 S:'$$GET^XPAR("ALL","RGCWPTCX RECALL LAST") DATA=""
"RTN","RGCWPTCX",9,0)
 Q
"RTN","RGCWPTCX",10,0)
 ; Return message if data on the legacy system
"RTN","RGCWPTCX",11,0)
 ; DATA(0)=1 if data,  DATA(n)=display message if data
"RTN","RGCWPTCX",12,0)
LEGACY(DATA,DFN) ;
"RTN","RGCWPTCX",13,0)
 S DATA(0)=0
"RTN","RGCWPTCX",14,0)
 I $L($T(HXDATA^A7RDPAGU)) D
"RTN","RGCWPTCX",15,0)
 .D HXDATA^A7RDPAGU(.DATA,DFN)
"RTN","RGCWPTCX",16,0)
 .S:$O(DATA(0)) DATA(0)=1
"RTN","RGCWPTCX",17,0)
 Q
"RTN","RGCWPTCX",18,0)
 ; Return a patient's current location
"RTN","RGCWPTCX",19,0)
INPLOC(DATA,DFN) ;
"RTN","RGCWPTCX",20,0)
 N X
"RTN","RGCWPTCX",21,0)
 S X=$G(^DPT(DFN,.102)),DATA=0
"RTN","RGCWPTCX",22,0)
 S:X X=$P($G(^DGPM(X,0)),U,6)
"RTN","RGCWPTCX",23,0)
 S:X DATA=+$G(^DIC(42,X,44)),$P(DATA,U,2)=$P($G(^DIC(42,X,0)),U),X=$P($G(^DIC(42,X,0)),U,3)
"RTN","RGCWPTCX",24,0)
 S $P(DATA,U,3)=X
"RTN","RGCWPTCX",25,0)
 Q
"RTN","RGCWPTCX",26,0)
 ; Returns true if selectable patient
"RTN","RGCWPTCX",27,0)
ISACTIVE(DFN,QUALS) ;EP
"RTN","RGCWPTCX",28,0)
 N X
"RTN","RGCWPTCX",29,0)
 S:'$D(DEMO) DEMO=+$$GET^XPAR("ALL","RGCWPTCX DEMO MODE",,"Q")
"RTN","RGCWPTCX",30,0)
 S X=$G(^DPT(+DFN,0))
"RTN","RGCWPTCX",31,0)
 Q:'$L(X)!$P(X,U,19) 0
"RTN","RGCWPTCX",32,0)
 I '$P(X,U,21),$$LKPQUAL("@RGCWPTCX DEMO MODE",.QUALS) Q 0
"RTN","RGCWPTCX",33,0)
 Q:$$LKPQUAL("MSC DG ALL SITES HIPAA",.QUALS) 1
"RTN","RGCWPTCX",34,0)
 Q:'$$LKPQUAL("@RGCWPTCX REQUIRES HRN",.QUALS) 1
"RTN","RGCWPTCX",35,0)
 Q ''$L($$HRN(DFN))
"RTN","RGCWPTCX",36,0)
 ; Return requested lookup qualifier
"RTN","RGCWPTCX",37,0)
LKPQUAL(QUAL,CACHE) ;EP
"RTN","RGCWPTCX",38,0)
 N RET
"RTN","RGCWPTCX",39,0)
 S RET=$G(CACHE(QUAL))
"RTN","RGCWPTCX",40,0)
 S:'$L(RET) (RET,CACHE(QUAL))=+$$HASKEY^RGCWFUSR(QUAL)
"RTN","RGCWPTCX",41,0)
 Q RET
"RTN","RGCWPTCX",42,0)
 ; Returns sensitive patient status
"RTN","RGCWPTCX",43,0)
ISSENS(DFN) ;
"RTN","RGCWPTCX",44,0)
 N RET
"RTN","RGCWPTCX",45,0)
 D PTSEC^DGSEC4(.RET,DFN,0)
"RTN","RGCWPTCX",46,0)
 Q $G(RET(1))
"RTN","RGCWPTCX",47,0)
 ; Get DFN from ICN
"RTN","RGCWPTCX",48,0)
ICN2DFN(DATA,ICN) ;
"RTN","RGCWPTCX",49,0)
 S DATA=$S($L($T(GETDFN^MPIF001)):$$GETDFN^MPIF001(ICN),1:"")
"RTN","RGCWPTCX",50,0)
 S:DATA<1 DATA=""
"RTN","RGCWPTCX",51,0)
 Q
"RTN","RGCWPTCX",52,0)
 ; Return ICN
"RTN","RGCWPTCX",53,0)
ICN(DFN) N X
"RTN","RGCWPTCX",54,0)
 S X=$S($L($T(GETICN^MPIF001)):+$$GETICN^MPIF001(DFN),1:"")
"RTN","RGCWPTCX",55,0)
 Q $S(X>0:X,1:"")
"RTN","RGCWPTCX",56,0)
 ; Return HRN given DFN
"RTN","RGCWPTCX",57,0)
HRN(DFN) ;EP
"RTN","RGCWPTCX",58,0)
 N X
"RTN","RGCWPTCX",59,0)
 S X=$G(^AUPNPAT(DFN,41,+$G(DUZ(2)),0))
"RTN","RGCWPTCX",60,0)
 Q $S($P(X,U,3):"",1:$P(X,U,2))
"RTN","RGCWPTCX",61,0)
 ; Return MFN given DFN
"RTN","RGCWPTCX",62,0)
EPI(DFN) ;EP
"RTN","RGCWPTCX",63,0)
 Q $S($$TEST^RGUTRTN("MSCDPTID"):$$^MSCDPTID(DFN),1:"")
"RTN","RGCWPTCX",64,0)
 ; Return formatted patient detail report
"RTN","RGCWPTCX",65,0)
PTINQ(DATA,DFN) ;
"RTN","RGCWPTCX",66,0)
 S DATA=$$TMPGBL^RGNETBRP
"RTN","RGCWPTCX",67,0)
 D CAPTURE^RGUTHFS($TR($$GET^XPAR("ALL","RGCWPTCX DETAIL REPORT"),"~",U),DATA,80)
"RTN","RGCWPTCX",68,0)
 Q
"RTN","RGCWPTCX",69,0)
 ; Build Patient Inquiry
"RTN","RGCWPTCX",70,0)
PTINQB(DFN) ;
"RTN","RGCWPTCX",71,0)
 N DOC,TEAM,X,VAOA,PH,DOD,CAUSE,CAUSE2,NARR
"RTN","RGCWPTCX",72,0)
 S DOD=$$GET1^DIQ(2,DFN,.351)
"RTN","RGCWPTCX",73,0)
 I $L(DOD) D
"RTN","RGCWPTCX",74,0)
 .W !,"******** PATIENT IS DECEASED ************"
"RTN","RGCWPTCX",75,0)
 .W !,"Date of Death: ",DOD
"RTN","RGCWPTCX",76,0)
 .I DUZ("AG")="I" D
"RTN","RGCWPTCX",77,0)
 ..S CAUSE=$$GET1^DIQ(9000001,DFN,1114,"I")
"RTN","RGCWPTCX",78,0)
 ..S CAUSE2=$$GET1^DIQ(80,CAUSE,.01)
"RTN","RGCWPTCX",79,0)
 ..S NARR=$$GET1^DIQ(80,CAUSE,3)
"RTN","RGCWPTCX",80,0)
 ..W:$L(NARR) !,"Underlying Cause: ",CAUSE2_" ("_NARR_")"
"RTN","RGCWPTCX",81,0)
 D EN^RGCWPTC1                                                            ; mas patient inquiry
"RTN","RGCWPTCX",82,0)
 S DOC=$$OUTPTPR^RGCWPTPC(DFN)
"RTN","RGCWPTCX",83,0)
 S TEAM=$$OUTPTTM^RGCWPTPC(DFN)
"RTN","RGCWPTCX",84,0)
 I DOC!TEAM  D
"RTN","RGCWPTCX",85,0)
 .W !!,"Primary Care Information:"
"RTN","RGCWPTCX",86,0)
 .W:DOC !,"Primary Practitioner:  ",$P(DOC,U,2)
"RTN","RGCWPTCX",87,0)
 .W:TEAM !,"Primary Care Team:     ",$P(TEAM,U,2)
"RTN","RGCWPTCX",88,0)
 W !!,"Service Connection/Rated Disabilities:"
"RTN","RGCWPTCX",89,0)
 D DIS^DGRPDB
"RTN","RGCWPTCX",90,0)
 ;IHS/MSC/MGH Added EHR patch 8 Insurance
"RTN","RGCWPTCX",91,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",92,0)
 .S VDT="TODAY",VDT=$$DT^RGUT(VDT),LINE=""
"RTN","RGCWPTCX",93,0)
 .I $$MCR^AUPNPAT(DFN,VDT)=1 S LINE="MEDICARE #"_$$MCR^BTIULO2(DFN)_"/"
"RTN","RGCWPTCX",94,0)
 .I $$MCD^AUPNPAT(DFN,VDT)=1 S LINE=LINE_"MEDICAID #"_$$MCD^BTIULO2(DFN)_"/"
"RTN","RGCWPTCX",95,0)
 .I $$PI^AUPNPAT(DFN,VDT)=1 S LINE=LINE_"PVT INS ("_$$PIN^AUPNPAT(DFN,VDT,"E")_")/"
"RTN","RGCWPTCX",96,0)
 .I LINE]"" D
"RTN","RGCWPTCX",97,0)
 ..W !!,"INSURANCE:"
"RTN","RGCWPTCX",98,0)
 ..W !,?5,$E(LINE,1,$L(LINE)-1)
"RTN","RGCWPTCX",99,0)
 E  D
"RTN","RGCWPTCX",100,0)
 .D DISP^DGIBDSP
"RTN","RGCWPTCX",101,0)
 ;Added EHR patch 7
"RTN","RGCWPTCX",102,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",103,0)
 .S PH=$$GET1^DIQ(9000001,DFN,1801)
"RTN","RGCWPTCX",104,0)
 .I PH'="" W !!,"Other Phone Contact: "_PH
"RTN","RGCWPTCX",105,0)
 D OAD^VADPT                                                           ; get NOK address
"RTN","RGCWPTCX",106,0)
 D:$L(VAOA(9))
"RTN","RGCWPTCX",107,0)
 .W !!,"Next of Kin Information:"
"RTN","RGCWPTCX",108,0)
 .W !,"Name:  ",VAOA(9)                                                ; nok name
"RTN","RGCWPTCX",109,0)
 .W:$L(VAOA(10)) " (",VAOA(10),")"                                     ; relationship
"RTN","RGCWPTCX",110,0)
 .W:$L(VAOA(1)) !?7,VAOA(1)                                            ; address line 1
"RTN","RGCWPTCX",111,0)
 .W:$L(VAOA(2)) !?7,VAOA(2)                                            ; line 2
"RTN","RGCWPTCX",112,0)
 .W:$L(VAOA(3)) !?7,VAOA(3)                                            ; line 3
"RTN","RGCWPTCX",113,0)
 .D:$L(VAOA(4))
"RTN","RGCWPTCX",114,0)
 ..W !?7,VAOA(4)                                                       ; city
"RTN","RGCWPTCX",115,0)
 ..W:$L(VAOA(5)) ", "_$P(VAOA(5),U,2)                                  ; state
"RTN","RGCWPTCX",116,0)
 ..W "  ",$P(VAOA(11),U,2)                                             ; zip+4
"RTN","RGCWPTCX",117,0)
 .W:$L(VAOA(8)) !!?7,"Phone number:  ",VAOA(8)                         ; phone
"RTN","RGCWPTCX",118,0)
 ;IHS/MSC/MGH Find Language Data Patch 8
"RTN","RGCWPTCX",119,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",120,0)
 .N PRILAN,PRETER,PREFLAN,PROF,LANDT,IEN
"RTN","RGCWPTCX",121,0)
 .S LANDT=9999999 S LANDT=$O(^AUPNPAT(DFN,86,LANDT),-1) Q:LANDT=""  D
"RTN","RGCWPTCX",122,0)
 ..S IEN=LANDT_","_DFN
"RTN","RGCWPTCX",123,0)
 ..S PRILAN=$$GET1^DIQ(9000001.86,IEN,.02)
"RTN","RGCWPTCX",124,0)
 ..S PRETER=$$GET1^DIQ(9000001.86,IEN,.03)
"RTN","RGCWPTCX",125,0)
 ..S PREFLAN=$$GET1^DIQ(9000001.86,IEN,.04)
"RTN","RGCWPTCX",126,0)
 ..S PROF=$$GET1^DIQ(9000001.86,IEN,.06)
"RTN","RGCWPTCX",127,0)
 ..W !!,"Language Information:"
"RTN","RGCWPTCX",128,0)
 ..W:$L(PRILAN) !?5,"Primary Language: ",PRILAN
"RTN","RGCWPTCX",129,0)
 ..W:$L(PRETER) ?40,"Interpreter Needed: ",PRETER
"RTN","RGCWPTCX",130,0)
 ..W:$L(PREFLAN) !,?5,"Preferred Language: ",PREFLAN
"RTN","RGCWPTCX",131,0)
 ..W:$L(PROF) ?40,"English Proficiency: ",PROF
"RTN","RGCWPTCX",132,0)
 ;IHS/MSC/MGH Communication method
"RTN","RGCWPTCX",133,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",134,0)
 .N MOC,GEN
"RTN","RGCWPTCX",135,0)
 .W !!,"METHOD OF COMMUNICATION:"
"RTN","RGCWPTCX",136,0)
 .S GEN=$$GET1^DIQ(9000001,DFN,4001)
"RTN","RGCWPTCX",137,0)
 .S MOC=$$GET1^DIQ(9000001,DFN,4002)
"RTN","RGCWPTCX",138,0)
 .I GEN'="" W !?5,"PERMISSION FOR E-MAIL: "_GEN
"RTN","RGCWPTCX",139,0)
 .I MOC'="" W !?5,"PREFERRED METHOD: "_MOC
"RTN","RGCWPTCX",140,0)
 D KVAR^VADPT
"RTN","RGCWPTCX",141,0)
 K PRILAN,PRETER,LANDT,PREFLAN,PROF
"RTN","RGCWPTCX",142,0)
 Q
"RTN","RGCWPTCX",143,0)
SETCTX(DFN) ;PEP - Set the patient context
"RTN","RGCWPTCX",144,0)
 N UID
"RTN","RGCWPTCX",145,0)
 S UID=$$GETUID^RGNETBUT
"RTN","RGCWPTCX",146,0)
 D:$L(UID) QUEUE^RGNETBEV("CONTEXT.PATIENT",+DFN,UID)
"RTN","RGCWPTCX",147,0)
 Q:$Q ''$L(UID)
"RTN","RGCWPTCX",148,0)
 Q
"RTN","RGCWPTCX",149,0)
 ; Check for possible dups
"RTN","RGCWPTCX",150,0)
CHKDUP(DATA,DFN) ; EP
"RTN","RGCWPTCX",151,0)
 N DUPS,CNT,X
"RTN","RGCWPTCX",152,0)
 D GUIBS5A^DPTLK6(.DUPS,DFN)
"RTN","RGCWPTCX",153,0)
 I DUPS(1)<1 M DATA=DUPS Q
"RTN","RGCWPTCX",154,0)
 F X=1:0 S X=$O(DUPS(X)) Q:'X  D
"RTN","RGCWPTCX",155,0)
 .I 'DUPS(X) K DUPS(X) Q
"RTN","RGCWPTCX",156,0)
 .I $P(DUPS(X),U,2)=DFN D
"RTN","RGCWPTCX",157,0)
 ..S DUPS(1)=$$CD1(DUPS(X))
"RTN","RGCWPTCX",158,0)
 ..K DUPS(X)
"RTN","RGCWPTCX",159,0)
 .E  S DUPS(X)=$$CD1(DUPS(X))
"RTN","RGCWPTCX",160,0)
 S CNT=0
"RTN","RGCWPTCX",161,0)
 D CD2(1),CD2("You have selected the following patient:"),CD2(DUPS(1)),CD2()
"RTN","RGCWPTCX",162,0)
 D CD2("However, these patients also have the same last name")
"RTN","RGCWPTCX",163,0)
 D CD2("and the same last 4 digits of their SSNs:"),CD2()
"RTN","RGCWPTCX",164,0)
 F X=1:0 S X=$O(DUPS(X)) Q:'X  D CD2(DUPS(X))
"RTN","RGCWPTCX",165,0)
 D CD2(),CD2("Are you sure this is the correct patient?")
"RTN","RGCWPTCX",166,0)
 Q
"RTN","RGCWPTCX",167,0)
CD1(VAL) Q $P(VAL,U,3)_"   DOB: "_$$ENTRY^RGUTDT($P(VAL,U,4))_"   SSN: "_$$SSN^RGUT($P(VAL,U,5))_"   HRN: "_$$HRN($P(VAL,U,2))
"RTN","RGCWPTCX",168,0)
CD2(VAL) S CNT=CNT+1,DATA(CNT)=$G(VAL)
"RTN","RGCWPTCX",169,0)
 Q
"RTN","RGCWPTCX",170,0)
 ;
"RTN","RGCWPTCX",171,0)
FMTSSN(SSN) ;EP - P7
"RTN","RGCWPTCX",172,0)
 N X
"RTN","RGCWPTCX",173,0)
 S X=$E(SSN,6,$L(SSN))
"RTN","RGCWPTCX",174,0)
 Q "XXX-XX-"_$S($L(X):X,1:"XXXX")
"RTN","RGCWPTP1")
0^3^B27498471
"RTN","RGCWPTP1",1,0)
RGCWPTP1 ;RI/CBMI/DKM - Patient List Management ;02-Feb-2015 10:15;DKM
"RTN","RGCWPTP1",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTP1",3,0)
 ; Return list of patients with clinic appt w/in range
"RTN","RGCWPTP1",4,0)
CLINPTS(DATA,LOC,START,END,MAX) ;EP
"RTN","RGCWPTP1",5,0)
 I +$G(LOC)<1 S DATA(1)="^No clinic identified" Q
"RTN","RGCWPTP1",6,0)
 I '$$ACTLOC^RGCWENCX(LOC) S DATA(1)="^Clinic is not active" Q
"RTN","RGCWPTP1",7,0)
 N DFN,CNT,J,X,DAT,DATX,QUALS,VIEN,VSTR
"RTN","RGCWPTP1",8,0)
 S MAX=$G(MAX,200),CNT=0
"RTN","RGCWPTP1",9,0)
 D:START="" GETPAR^RGCWFPAR(.START,"ORLP DEFAULT CLINIC START DATE",,,"E")
"RTN","RGCWPTP1",10,0)
 D:END="" GETPAR^RGCWFPAR(.END,"ORLP DEFAULT CLINIC STOP DATE",,,"E")
"RTN","RGCWPTP1",11,0)
 D DT^DILF("T",START,.START,"","")
"RTN","RGCWPTP1",12,0)
 D DT^DILF("T",END,.END,"","")
"RTN","RGCWPTP1",13,0)
 I (START=-1)!(END=-1) S DATA(1)="^Error in date range." Q
"RTN","RGCWPTP1",14,0)
 S END=END\1+.9,DAT=START,LOC=+LOC,DATX=$S(START\1=(END\1):"",1:" ")
"RTN","RGCWPTP1",15,0)
 F  S DAT=$O(^SC(LOC,"S",DAT)),J=0 Q:'DAT!(DAT>END)  D:$L($G(^SC(LOC,"S",DAT,1,0)))  Q:CNT'<MAX
"RTN","RGCWPTP1",16,0)
 .S:$L(DATX) DATX=" on "_$$ENTRY^RGUTDT(DAT)
"RTN","RGCWPTP1",17,0)
 .F  S J=$O(^SC(+LOC,"S",DAT,1,J)) Q:'J!(CNT'<MAX)  D
"RTN","RGCWPTP1",18,0)
 ..S X=^SC(LOC,"S",DAT,1,J,0)
"RTN","RGCWPTP1",19,0)
 ..Q:$P(X,U,9)="C"                                                     ; cancelled clinic availability
"RTN","RGCWPTP1",20,0)
 ..S DFN=+X
"RTN","RGCWPTP1",21,0)
 ..S X=$G(^DPT(DFN,"S",DAT,0))
"RTN","RGCWPTP1",22,0)
 ..Q:+X'=LOC                                                           ; appt cancelled/resched
"RTN","RGCWPTP1",23,0)
 ..I $P(X,U,2)'="NT",($P(X,U,2)["C")!($P(X,U,2)["N") Q                 ; quit if appt cancelled or no show
"RTN","RGCWPTP1",24,0)
 ..S VIEN=+$P($G(^SCE(+$P(X,U,20),0)),U,5)
"RTN","RGCWPTP1",25,0)
 ..I VIEN,$D(^AUPNVSIT(VIEN,0)) S VSTR=LOC_";"_+^(0)_";A;"_VIEN
"RTN","RGCWPTP1",26,0)
 ..E  S VSTR=LOC_";"_DAT_";A"
"RTN","RGCWPTP1",27,0)
 ..S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_DATX_U_VSTR
"RTN","RGCWPTP1",28,0)
 I CNT'<MAX D                                                          ;maximum allowable appointments exceeded
"RTN","RGCWPTP1",29,0)
 .K DATA
"RTN","RGCWPTP1",30,0)
 .S DATA(1)="^Too many appointments found; please narrow search range."
"RTN","RGCWPTP1",31,0)
 S:'$D(DATA) DATA(1)="^No appointments."
"RTN","RGCWPTP1",32,0)
 Q
"RTN","RGCWPTP1",33,0)
 ; Return appts for a patient between beginning and end dates for a clinic, if no clinic return all appointments
"RTN","RGCWPTP1",34,0)
PTAPPTS(DATA,DFN,START,END,LOC) ;EP
"RTN","RGCWPTP1",35,0)
 I '$$ACTLOC^RGCWENCX(LOC) S DATA(1)="^Clinic is not active" Q
"RTN","RGCWPTP1",36,0)
 N VASD,VAERR,NUM,CNT,INVDT,INT,EXT,ORSRV
"RTN","RGCWPTP1",37,0)
 S NUM=0,CNT=0
"RTN","RGCWPTP1",38,0)
 I START="" D
"RTN","RGCWPTP1",39,0)
 .D:'$L(LOC) GETPAR^RGCWFPAR(.START,"ORQQAP SEARCH RANGE START",,,"E")
"RTN","RGCWPTP1",40,0)
 .S:START="" START="T"                                                 ;default start date across all clinics is today
"RTN","RGCWPTP1",41,0)
 I END="" D
"RTN","RGCWPTP1",42,0)
 .D:'$L(LOC) GETPAR^RGCWFPAR(.START,"ORQQAP SEARCH RANGE STOP",,,"E")
"RTN","RGCWPTP1",43,0)
 .S:END="" END="T"                                                     ;default end date across all clinics is today
"RTN","RGCWPTP1",44,0)
 D DT^DILF("T",START,.START,"","")
"RTN","RGCWPTP1",45,0)
 D DT^DILF("T",END,.END,"","")
"RTN","RGCWPTP1",46,0)
 I (START=-1)!(END=-1) S DATA(1)="^Error in date range." Q
"RTN","RGCWPTP1",47,0)
 S VASD("F")=START
"RTN","RGCWPTP1",48,0)
 S VASD("T")=END\1+.5
"RTN","RGCWPTP1",49,0)
 S:$L(LOC) VASD("C",LOC)=""
"RTN","RGCWPTP1",50,0)
 S DATA(1)="^No appointments."
"RTN","RGCWPTP1",51,0)
 D SDA^VADPT
"RTN","RGCWPTP1",52,0)
 Q:VAERR=1
"RTN","RGCWPTP1",53,0)
 F  S NUM=$O(^UTILITY("VASD",$J,NUM)) Q:'NUM  D
"RTN","RGCWPTP1",54,0)
 .S INT=^UTILITY("VASD",$J,NUM,"I"),INVDT=9999999-$P(INT,U)
"RTN","RGCWPTP1",55,0)
 .S EXT=^UTILITY("VASD",$J,NUM,"E")
"RTN","RGCWPTP1",56,0)
 .S CNT=CNT+1,DATA(CNT)=$P(INT,U)_U_$P(EXT,U,2)_U_$P(EXT,U,3)_U_$P(EXT,U,4)_U_INVDT
"RTN","RGCWPTP1",57,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWPTP1",58,0)
 Q
"RTN","RGCWPTP1",59,0)
 ; Return provider list
"RTN","RGCWPTP1",60,0)
PROVLST(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWPTP1",61,0)
 N IEN,CNT
"RTN","RGCWPTP1",62,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),CNT=0
"RTN","RGCWPTP1",63,0)
 F  S FROM=$O(^VA(200,"B",FROM),DIR),IEN="" Q:FROM=""  D:$E(FROM)'="*"  Q:CNT'<MAX
"RTN","RGCWPTP1",64,0)
 .F  S IEN=$O(^VA(200,"B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWPTP1",65,0)
 ..I $D(^XUSEC("PROVIDER",IEN)),$$ACTIVE^XUSER(IEN) S CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTP1",66,0)
 Q
"RTN","RGCWPTP1",67,0)
 ; Return list of patients associated w/ primary provider
"RTN","RGCWPTP1",68,0)
PROVPTS(DATA,PROV) ;EP
"RTN","RGCWPTP1",69,0)
 I +$G(PROV)<1 S DATA(1)="^No provider identified" Q
"RTN","RGCWPTP1",70,0)
 N DFN,CNT,QUALS
"RTN","RGCWPTP1",71,0)
 S (CNT,DFN)=0,DATA(1)="^No patients found."
"RTN","RGCWPTP1",72,0)
 F  S DFN=+$O(^DPT("APR",PROV,DFN)) Q:'DFN  D
"RTN","RGCWPTP1",73,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",74,0)
 Q
"RTN","RGCWPTP1",75,0)
 ; Return list of treating specialties
"RTN","RGCWPTP1",76,0)
SPECLST(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWPTP1",77,0)
 N CNT,IEN
"RTN","RGCWPTP1",78,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),CNT=0
"RTN","RGCWPTP1",79,0)
 F  S FROM=$O(^DIC(45.7,"B",FROM),DIR),IEN="" Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTP1",80,0)
 .F  S IEN=$O(^DIC(45.7,"B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWPTP1",81,0)
 ..S:$$ACTIVE^DGACT(45.7,IEN) CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTP1",82,0)
 Q
"RTN","RGCWPTP1",83,0)
 ; Return list of patients associated w/ treating specialty
"RTN","RGCWPTP1",84,0)
SPECPTS(DATA,SPEC) ;EP
"RTN","RGCWPTP1",85,0)
 I +$G(SPEC)<1 S DATA(1)="^No specialty identified" Q
"RTN","RGCWPTP1",86,0)
 N CNT,DFN,QUALS
"RTN","RGCWPTP1",87,0)
 S (CNT,DFN)=0,DATA(1)="^No patients found."
"RTN","RGCWPTP1",88,0)
 F  S DFN=+$O(^DPT("ATR",SPEC,DFN)) Q:'DFN  D
"RTN","RGCWPTP1",89,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",90,0)
 Q
"RTN","RGCWPTP1",91,0)
 ; Return list of patients on a ward
"RTN","RGCWPTP1",92,0)
WARDPTS(DATA,LOC) ;EP
"RTN","RGCWPTP1",93,0)
 N CNT,DFN,WARD,QUALS
"RTN","RGCWPTP1",94,0)
 I +$G(LOC)<1 S DATA(1)="^No ward identified." Q
"RTN","RGCWPTP1",95,0)
 S WARD=+$G(^SC(+LOC,42))
"RTN","RGCWPTP1",96,0)
 I '$D(^DIC(42,WARD,0)) S DATA(1)="^Not a valid ward." Q
"RTN","RGCWPTP1",97,0)
 S (CNT,DFN)=0,WARD=$P(^DIC(42,WARD,0),U),DATA(1)="^No patients found."
"RTN","RGCWPTP1",98,0)
 F  S DFN=+$O(^DPT("CN",WARD,DFN)) Q:'DFN  D:$$ISACTIVE^RGCWPTCX(DFN,.QUALS)
"RTN","RGCWPTP1",99,0)
 .S CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_$P($G(^DPT(DFN,.101)),U)
"RTN","RGCWPTP1",100,0)
 .S DATA(CNT)=DATA(CNT)_U_$P($$ADMITINF^RGCWENCX(DFN,^DPT("CN",WARD,DFN)),U)
"RTN","RGCWPTP1",101,0)
 Q
"RTN","RGCWPTP1",102,0)
 ; Returns all teams to which a user belongs
"RTN","RGCWPTP1",103,0)
 ;   PER = If nonzero, return personal lists.  Otherwise, return team lists.
"RTN","RGCWPTP1",104,0)
TEAMLST(DATA,PER) ;EP
"RTN","RGCWPTP1",105,0)
 N CNT,IEN,X
"RTN","RGCWPTP1",106,0)
 S (CNT,IEN)=0,PER=''$G(PER)
"RTN","RGCWPTP1",107,0)
 F  S IEN=$O(^OR(100.21,"C",DUZ,IEN)) Q:'IEN  D
"RTN","RGCWPTP1",108,0)
 .S X=$G(^OR(100.21,IEN,0))
"RTN","RGCWPTP1",109,0)
 .S:$P(X,U,2)="P"=PER CNT=CNT+1,DATA(CNT)=IEN_U_X
"RTN","RGCWPTP1",110,0)
 Q
"RTN","RGCWPTP1",111,0)
 ; Return list of patients belonging to a team
"RTN","RGCWPTP1",112,0)
TEAMPTS(DATA,TEAM) ;EP
"RTN","RGCWPTP1",113,0)
 N CNT,IEN,DFN,QUALS
"RTN","RGCWPTP1",114,0)
 S DATA(1)="^No patients found.",(CNT,IEN)=0,TEAM=+TEAM
"RTN","RGCWPTP1",115,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP1",116,0)
 F  S IEN=$O(^OR(100.21,TEAM,10,IEN)) Q:'IEN  S DFN=+$G(^(IEN,0)) D
"RTN","RGCWPTP1",117,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",118,0)
 Q
"RTN","RGCWPTP1",119,0)
 ; Return list of locations
"RTN","RGCWPTP1",120,0)
HOSPLOC(DATA,FROM,DIR,MAX,TYPE,START,END) ;EP
"RTN","RGCWPTP1",121,0)
 D HOSPLOC^RGCWENCX(.DATA,.FROM,.DIR,.MAX,.TYPE,.START,.END)
"RTN","RGCWPTP1",122,0)
 Q
"RTN","RGCWPTP2")
0^4^B6092178
"RTN","RGCWPTP2",1,0)
RGCWPTP2 ;RI/CBMI/DKM - Patient List Management ;02-Feb-2015 10:15;DKM
"RTN","RGCWPTP2",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTP2",3,0)
 ; Retrieve a given list for a given user
"RTN","RGCWPTP2",4,0)
PLSTPTS(DATA,NAME) ;EP
"RTN","RGCWPTP2",5,0)
 N TMP,ERR,CNT,LP,DFN,PTNM
"RTN","RGCWPTP2",6,0)
 S DATA(1)="^No patients found.",(CNT,LP)=0
"RTN","RGCWPTP2",7,0)
 D GETWP^XPAR(.TMP,"ALL",$$PARAM,$$GETNAME(NAME),.ERR)
"RTN","RGCWPTP2",8,0)
 F  S LP=$O(TMP(LP)) Q:'LP  D
"RTN","RGCWPTP2",9,0)
 .S DFN=+TMP(LP,0)
"RTN","RGCWPTP2",10,0)
 .I DFN D
"RTN","RGCWPTP2",11,0)
 ..S PTNM=$$GET1^DIQ(2,DFN_",",".01")
"RTN","RGCWPTP2",12,0)
 ..S:$L(PTNM) CNT=CNT+1,DATA(CNT)=DFN_U_PTNM
"RTN","RGCWPTP2",13,0)
 Q
"RTN","RGCWPTP2",14,0)
 ; Retrieve a list of personal lists for a user
"RTN","RGCWPTP2",15,0)
PLSTLST(DATA) ;EP
"RTN","RGCWPTP2",16,0)
 N ERR,LP
"RTN","RGCWPTP2",17,0)
 S LP=0
"RTN","RGCWPTP2",18,0)
 D GETLST^XPAR(.DATA,"ALL",$$PARAM,"Q",.ERR)
"RTN","RGCWPTP2",19,0)
 F  S LP=$O(DATA(LP)) Q:'LP  S $P(DATA(LP),U)=$$GETIEN($P(DATA(LP),U,2))
"RTN","RGCWPTP2",20,0)
 Q
"RTN","RGCWPTP2",21,0)
 ; List management API
"RTN","RGCWPTP2",22,0)
MANAGE(DATA,ACTION,NAME,VAL) ;EP
"RTN","RGCWPTP2",23,0)
 S DATA=$$VALIDATE(.NAME,ACTION="C")
"RTN","RGCWPTP2",24,0)
 Q:DATA
"RTN","RGCWPTP2",25,0)
 I ACTION="C" D SETLST(.DATA,NAME) Q
"RTN","RGCWPTP2",26,0)
 I ACTION="R" D RENLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP2",27,0)
 I ACTION="S" D SETLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP2",28,0)
 I ACTION="D" D DELLST(.DATA,NAME) Q
"RTN","RGCWPTP2",29,0)
 S DATA="-1^Unknown action"
"RTN","RGCWPTP2",30,0)
 Q
"RTN","RGCWPTP2",31,0)
 ; Validate list name
"RTN","RGCWPTP2",32,0)
VALIDATE(NAME,DUP) ;
"RTN","RGCWPTP2",33,0)
 N L
"RTN","RGCWPTP2",34,0)
 S NAME=$$TRIM^RGUT(NAME),L=$L(NAME),DUP=+$G(DUP)
"RTN","RGCWPTP2",35,0)
 Q:L<3!(L>30) "-1^List name must be 3-30 characters in length."
"RTN","RGCWPTP2",36,0)
 Q:NAME'?.(1A,1N,1"_",1" ") "-1^List name contains invalid characters."
"RTN","RGCWPTP2",37,0)
 I DUP,$$GETIEN(NAME) Q "-1^List name already exists."
"RTN","RGCWPTP2",38,0)
 I 'DUP,'$$GETIEN(NAME) Q "-1^List name not found."
"RTN","RGCWPTP2",39,0)
 Q ""
"RTN","RGCWPTP2",40,0)
 ; Rename existing list
"RTN","RGCWPTP2",41,0)
 ;  OLD  - Existing Instance name (aka list name)
"RTN","RGCWPTP2",42,0)
 ;  NEW  - New list name
"RTN","RGCWPTP2",43,0)
RENLST(DATA,OLD,NEW) ;EP
"RTN","RGCWPTP2",44,0)
 S DATA=$$VALIDATE(NEW,1)
"RTN","RGCWPTP2",45,0)
 D:'DATA REP^XPAR("USR",$$PARAM,$$GETNAME(OLD),NEW,.DATA)
"RTN","RGCWPTP2",46,0)
 D:'DATA CHG^XPAR("USR",$$PARAM,NEW,NEW,.DATA)
"RTN","RGCWPTP2",47,0)
 Q
"RTN","RGCWPTP2",48,0)
 ; Set List
"RTN","RGCWPTP2",49,0)
SETLST(DATA,NAME,VAL) ;EP
"RTN","RGCWPTP2",50,0)
 Q:'$L(NAME)
"RTN","RGCWPTP2",51,0)
 S:NAME=+NAME NAME=$$GETNAME(NAME)
"RTN","RGCWPTP2",52,0)
 S VAL=NAME
"RTN","RGCWPTP2",53,0)
 S:$D(VAL)'=11 VAL(1,0)=""
"RTN","RGCWPTP2",54,0)
 D EN^XPAR("USR",$$PARAM,NAME,.VAL,.DATA)
"RTN","RGCWPTP2",55,0)
 Q
"RTN","RGCWPTP2",56,0)
 ; Delete list
"RTN","RGCWPTP2",57,0)
 ;   NAME - List Name
"RTN","RGCWPTP2",58,0)
DELLST(DATA,NAME) ;EP
"RTN","RGCWPTP2",59,0)
 D DEL^XPAR("USR",$$PARAM,$$GETNAME(NAME),.DATA)
"RTN","RGCWPTP2",60,0)
 Q
"RTN","RGCWPTP2",61,0)
 ; Return parameter name/ien
"RTN","RGCWPTP2",62,0)
PARAM(X) Q $S($G(X):$$FIND1^DIC(8989.51,,,$$PARAM),1:"RGCWPTPL PERSONAL LIST")
"RTN","RGCWPTP2",63,0)
 ; Return IEN to file 8989.5
"RTN","RGCWPTP2",64,0)
GETIEN(NAME) ;
"RTN","RGCWPTP2",65,0)
 Q $S(NAME=+NAME:NAME,1:$O(^XTV(8989.5,"AC",$$PARAM(1),+DUZ_";VA(200,",NAME,0)))
"RTN","RGCWPTP2",66,0)
 ; Returns instance name for 8989.5 IEN
"RTN","RGCWPTP2",67,0)
GETNAME(IEN) ;
"RTN","RGCWPTP2",68,0)
 Q $S(IEN=+IEN:$$GET1^DIQ(8989.5,IEN_",",.03),1:IEN)
"RTN","RGCWPTP3")
0^5^B17293499
"RTN","RGCWPTP3",1,0)
RGCWPTP3 ;RI/CBMI/MGH - Patient List Management ;02-Feb-2015 10:15;DKM
"RTN","RGCWPTP3",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTP3",3,0)
 ; Call logic to manage team lists
"RTN","RGCWPTP3",4,0)
MANAGE(DATA,LIST,ACTION,NAME,VAL) ;
"RTN","RGCWPTP3",5,0)
 D EXEC(12)
"RTN","RGCWPTP3",6,0)
 Q
"RTN","RGCWPTP3",7,0)
 ; Execute logic at specified node
"RTN","RGCWPTP3",8,0)
EXEC(NODE) ;
"RTN","RGCWPTP3",9,0)
 N $ET
"RTN","RGCWPTP3",10,0)
 S $ET="",@$$TRAP^RGUTOS("EXECERR^RGCWPTPL")
"RTN","RGCWPTP3",11,0)
 X $G(^RGCWF(999.2,+LIST,NODE))
"RTN","RGCWPTP3",12,0)
 Q
"RTN","RGCWPTP3",13,0)
 ; List management API
"RTN","RGCWPTP3",14,0)
MAN2(DATA,LIST,ACTION,NAME,VAL) ;EP
"RTN","RGCWPTP3",15,0)
 S DATA=""
"RTN","RGCWPTP3",16,0)
 I ACTION="S"!(ACTION="P")!(ACTION="D") S DATA(1)=$$VALIDATE(NAME)
"RTN","RGCWPTP3",17,0)
 I ACTION="C" S DATA=$$VALIDATE(NAME,1)
"RTN","RGCWPTP3",18,0)
 Q:DATA(1)
"RTN","RGCWPTP3",19,0)
 I ACTION="T" D GETTEAM(.DATA) Q
"RTN","RGCWPTP3",20,0)
 I ACTION="P" D GETLST(.DATA,NAME) Q
"RTN","RGCWPTP3",21,0)
 I ACTION="C" D CRLST(.DATA,NAME) Q
"RTN","RGCWPTP3",22,0)
 I ACTION="S" D SETLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP3",23,0)
 I ACTION="D" D DELETE(.DATA,NAME) Q
"RTN","RGCWPTP3",24,0)
 S DATA(1)="-1^Unknown action"
"RTN","RGCWPTP3",25,0)
 Q
"RTN","RGCWPTP3",26,0)
 ;Return the list of providers for this list
"RTN","RGCWPTP3",27,0)
GETLST(DATA,NAME) ;EP
"RTN","RGCWPTP3",28,0)
 N CNT,IEN,PRV,QUALS,DATE,PAT
"RTN","RGCWPTP3",29,0)
 K DATA
"RTN","RGCWPTP3",30,0)
 S DATA(1)="^No Users found.",(CNT,IEN)=0
"RTN","RGCWPTP3",31,0)
 S DATE="TODAY",DATE=$$DT^RGUT(DATE)
"RTN","RGCWPTP3",32,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",33,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",34,0)
 F  S IEN=$O(^OR(100.21,TEAM,1,IEN)) Q:'IEN  S PRV=+$G(^(IEN,0)) D
"RTN","RGCWPTP3",35,0)
 .S X=$$ACTIVE^RGCWUSCX(PRV,DATE)
"RTN","RGCWPTP3",36,0)
 .I X=1 S CNT=CNT+1,DATA(CNT)=PRV_U_$P(^VA(200,PRV,0),U)_U_"U"
"RTN","RGCWPTP3",37,0)
 .I X=0 S CNT=CNT+1,DATA(CNT)=PRV_"*"_U_$P(^VA(200,PRV,0),U)_U_"U"
"RTN","RGCWPTP3",38,0)
 S IEN=0 F  S IEN=$O(^OR(100.21,TEAM,10,IEN)) Q:'IEN  S PAT=+$G(^(IEN,0)) D
"RTN","RGCWPTP3",39,0)
 .S CNT=CNT+1,DATA(CNT)=PAT_U_$P(^DPT(PAT,0),U)_U_"M"
"RTN","RGCWPTP3",40,0)
 Q
"RTN","RGCWPTP3",41,0)
 ; Validate list name
"RTN","RGCWPTP3",42,0)
VALIDATE(NAME,DUP) ;
"RTN","RGCWPTP3",43,0)
 N L
"RTN","RGCWPTP3",44,0)
 S NAME=$$TRIM^RGUT(NAME),L=$L(NAME),DUP=+$G(DUP)
"RTN","RGCWPTP3",45,0)
 Q:L<3!(L>30) "-1^List name must be 3-30 characters in length."
"RTN","RGCWPTP3",46,0)
 Q:NAME'?.(1A,1N,1"_",1" ") "-1^List name contains invalid characters."
"RTN","RGCWPTP3",47,0)
 I DUP,$$GETIEN(NAME) Q "-1^List name already exists."
"RTN","RGCWPTP3",48,0)
 I 'DUP,'$$GETIEN(NAME) Q "-1^List name not found."
"RTN","RGCWPTP3",49,0)
 Q ""
"RTN","RGCWPTP3",50,0)
CRLST(DATA,NAME) ;EP Create a new team list
"RTN","RGCWPTP3",51,0)
 N DATE,FNUM,FDA,IEN
"RTN","RGCWPTP3",52,0)
 K DATA
"RTN","RGCWPTP3",53,0)
 S DATE="TODAY",DATE=$$DT^RGUT(DATE)
"RTN","RGCWPTP3",54,0)
 S FNUM=100.21
"RTN","RGCWPTP3",55,0)
 S FDA=$NA(FDA(FNUM,"+1,"))
"RTN","RGCWPTP3",56,0)
 S @FDA@(.01)=NAME
"RTN","RGCWPTP3",57,0)
 S @FDA@(.1)=$$UPPER(NAME)
"RTN","RGCWPTP3",58,0)
 S @FDA@(1)="TM"
"RTN","RGCWPTP3",59,0)
 S @FDA@(1.6)=DUZ
"RTN","RGCWPTP3",60,0)
 S @FDA@(1.65)=DATE
"RTN","RGCWPTP3",61,0)
 S @FDA@(1.7)="Y"
"RTN","RGCWPTP3",62,0)
 S DATA(1)=$$UPDATE^BGOUTL(.FDA,"",.IEN)
"RTN","RGCWPTP3",63,0)
 S:'DATA(1) DATA(1)=IEN(1)
"RTN","RGCWPTP3",64,0)
 I $D(IEN(1)) D
"RTN","RGCWPTP3",65,0)
 .S FDA=$NA(FDA(100.212,"+1,"_IEN(1)_","))
"RTN","RGCWPTP3",66,0)
 .S @FDA@(.01)=DUZ
"RTN","RGCWPTP3",67,0)
 .D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",68,0)
 Q
"RTN","RGCWPTP3",69,0)
 ; Set List
"RTN","RGCWPTP3",70,0)
SETLST(DATA,NAME,VAL) ;EP
"RTN","RGCWPTP3",71,0)
 N TEAM,FDA,FNUM,ERR,IEN,CNTU,CNTM,NUM
"RTN","RGCWPTP3",72,0)
 K DATA
"RTN","RGCWPTP3",73,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",74,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",75,0)
 S CNTU=0,CNTM=0
"RTN","RGCWPTP3",76,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",77,0)
 D DELLST(.DATA,NAME)
"RTN","RGCWPTP3",78,0)
 S NUM="" F  S NUM=$O(VAL(NUM)) Q:NUM=""  D
"RTN","RGCWPTP3",79,0)
 .I $P(VAL(NUM),U,3)="U"  D
"RTN","RGCWPTP3",80,0)
 ..K FDA,IEN,ERR
"RTN","RGCWPTP3",81,0)
 ..S FDA=$NA(FDA(100.212,"+1,"_TEAM_","))
"RTN","RGCWPTP3",82,0)
 ..S @FDA@(.01)=$P(VAL(NUM),U,1)
"RTN","RGCWPTP3",83,0)
 ..D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",84,0)
 .I $P(VAL(NUM),U,3)="M"  D
"RTN","RGCWPTP3",85,0)
 ..K FDA,IEN,ERR
"RTN","RGCWPTP3",86,0)
 ..S FDA=$NA(FDA(100.2101,"+1,"_TEAM_","))
"RTN","RGCWPTP3",87,0)
 ..S @FDA@(.01)=$P(VAL(NUM),U,1)_";DPT("
"RTN","RGCWPTP3",88,0)
 ..D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",89,0)
 Q
"RTN","RGCWPTP3",90,0)
GETIEN(NAME) ;Get the IEN of the list
"RTN","RGCWPTP3",91,0)
 N IEN
"RTN","RGCWPTP3",92,0)
 S IEN="" S IEN=$O(^OR(100.21,"B",NAME,IEN))
"RTN","RGCWPTP3",93,0)
 Q IEN
"RTN","RGCWPTP3",94,0)
DELLST(DATA,NAME) ;EP
"RTN","RGCWPTP3",95,0)
 N TEAM,FDA,FNUM,PRV,DA,DIK,MEM
"RTN","RGCWPTP3",96,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",97,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",98,0)
 S DATA=0
"RTN","RGCWPTP3",99,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",100,0)
 S PRV=0 F  S PRV=$O(^OR(100.21,TEAM,1,PRV)) Q:PRV=""  D
"RTN","RGCWPTP3",101,0)
 .S DA(1)=TEAM,DA=PRV
"RTN","RGCWPTP3",102,0)
 .S DIK="^OR(100.21,DA(1),1,"
"RTN","RGCWPTP3",103,0)
 .S:DA DATA=$$DELETE^BGOUTL(DIK,.DA)
"RTN","RGCWPTP3",104,0)
 S MEM=0 F  S MEM=$O(^OR(100.21,TEAM,10,MEM)) Q:MEM=""  D
"RTN","RGCWPTP3",105,0)
 .S DA(1)=TEAM,DA=MEM
"RTN","RGCWPTP3",106,0)
 .S DIK="^OR(100.21,DA(1),10,"
"RTN","RGCWPTP3",107,0)
 .S:DA DATA=$$DELETE^BGOUTL(DIK,.DA)
"RTN","RGCWPTP3",108,0)
 I DATA="" S DATA=0
"RTN","RGCWPTP3",109,0)
 Q DATA
"RTN","RGCWPTP3",110,0)
DELETE(DATA,NAME) ;Delete entire team
"RTN","RGCWPTP3",111,0)
 N FNUM,IEN
"RTN","RGCWPTP3",112,0)
 K DATA
"RTN","RGCWPTP3",113,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",114,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",115,0)
 S FNUM=100.21,IEN=TEAM
"RTN","RGCWPTP3",116,0)
 S DATA=$$DELETE^BGOUTL(FNUM,IEN)
"RTN","RGCWPTP3",117,0)
 Q
"RTN","RGCWPTP3",118,0)
GETTEAM(DATA) ;Get the teams with this user
"RTN","RGCWPTP3",119,0)
 N CNT,IEN,X
"RTN","RGCWPTP3",120,0)
 S (CNT,IEN)=0
"RTN","RGCWPTP3",121,0)
 F  S IEN=$O(^OR(100.21,"C",DUZ,IEN)) Q:'IEN  D
"RTN","RGCWPTP3",122,0)
 .S X=$G(^OR(100.21,IEN,0))
"RTN","RGCWPTP3",123,0)
 .S:$P(X,U,2)="TM" CNT=CNT+1,DATA(CNT)=IEN_U_X
"RTN","RGCWPTP3",124,0)
 Q
"RTN","RGCWPTP3",125,0)
UPPER(X) ; Convert lower case X to UPPER CASE
"RTN","RGCWPTP3",126,0)
 Q $TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","RGCWPTPC")
0^6^B8280859
"RTN","RGCWPTPC",1,0)
RGCWPTPC ;RI/CBMI/DKM - RPC calls for provider information ;18-Aug-2014 17:20;DKM
"RTN","RGCWPTPC",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTPC",3,0)
USESD() Q $G(DUZ("AG"))'="I"
"RTN","RGCWPTPC",4,0)
 ; Get the primary provider
"RTN","RGCWPTPC",5,0)
OUTPTPR(DFN) ;EP
"RTN","RGCWPTPC",6,0)
 Q:$$USESD $$OUTPTPR^SDUTL3(DFN)
"RTN","RGCWPTPC",7,0)
 N PCP
"RTN","RGCWPTPC",8,0)
 S PCP=$$GET1^DIQ(9000001,DFN,.14,"I")
"RTN","RGCWPTPC",9,0)
 Q $S(PCP:PCP_U_$P(^VA(200,PCP,0),U),1:"")
"RTN","RGCWPTPC",10,0)
 ; Get team
"RTN","RGCWPTPC",11,0)
OUTPTTM(DFN) ;EP
"RTN","RGCWPTPC",12,0)
 Q:$$USESD $$OUTPTTM^SDUTL3(DFN)
"RTN","RGCWPTPC",13,0)
 N TM
"RTN","RGCWPTPC",14,0)
 S TM=$O(^BSDPCT("AB",+$$OUTPTPR(DFN),0))
"RTN","RGCWPTPC",15,0)
 Q $S(TM:TM_U_$$GET1^DIQ(9009017.5,TM,.01),1:"")
"RTN","RGCWPTPC",16,0)
 ; Return Primary Care Detail information
"RTN","RGCWPTPC",17,0)
DETAIL(DATA,DFN) ;EP
"RTN","RGCWPTPC",18,0)
 I $$USESD D
"RTN","RGCWPTPC",19,0)
 .N I,X
"RTN","RGCWPTPC",20,0)
 .S X=$$OUTPTTM^SDUTL3(DFN,DT),I=0
"RTN","RGCWPTPC",21,0)
 .I X>0 D
"RTN","RGCWPTPC",22,0)
 ..D ADDDET($P(X,U,2),"Primary Care Team")
"RTN","RGCWPTPC",23,0)
 ..D ADDDET($P($G(^SCTM(404.51,+X,0)),U,2),"Phone")
"RTN","RGCWPTPC",24,0)
 .E  D ADDDET("No Primary Care Team Assigned.")
"RTN","RGCWPTPC",25,0)
 .D ADDPRV("Primary Care Provider",+$$OUTPTPR^SDUTL3(DFN,DT))
"RTN","RGCWPTPC",26,0)
 .D ADDPRV("Associate Provider",+$$OUTPTAP^SDUTL3(DFN,DT))
"RTN","RGCWPTPC",27,0)
 .D ADDPRV("Attending Physician",+$G(^DPT(DFN,.1041)),1)
"RTN","RGCWPTPC",28,0)
 E  D
"RTN","RGCWPTPC",29,0)
 .N I,X,BDPQ,BDPTYPE,BDPCOUNT,BDPRIEN,BDPTYPNM,BDPCPRV
"RTN","RGCWPTPC",30,0)
 .S I=0
"RTN","RGCWPTPC",31,0)
 .D ADDDET("**CURRENT DESIGNATED PROVIDERS - BY PROVIDER CATEGORY TYPE**")
"RTN","RGCWPTPC",32,0)
 .I '$D(^BDPRECN("AA",DFN)) D ADDDET("**--NO EXISTING DESIGNATED PROVIDERS--**") Q
"RTN","RGCWPTPC",33,0)
 .S BDPQ=0,BDPTYPE="",BDPCOUNT=0
"RTN","RGCWPTPC",34,0)
 .F  S BDPTYPE=$O(^BDPRECN("AA",DFN,BDPTYPE)) Q:BDPTYPE=""  D
"RTN","RGCWPTPC",35,0)
 ..S BDPCOUNT=BDPCOUNT+1,BDPRIEN=""
"RTN","RGCWPTPC",36,0)
 ..S BDPTYPNM=$P(^BDPTCAT(BDPTYPE,0),U)                                  ;Type Print
"RTN","RGCWPTPC",37,0)
 ..F  S BDPRIEN=$O(^BDPRECN("AA",DFN,BDPTYPE,BDPRIEN)) Q:BDPRIEN'=+BDPRIEN  D
"RTN","RGCWPTPC",38,0)
 ...S BDPCPRV=+$P($G(^BDPRECN(BDPRIEN,0)),U,3)                           ;Current Provider IEN
"RTN","RGCWPTPC",39,0)
 ...S BDPCPRVP=$S(BDPCPRV:$P($G(^VA(200,BDPCPRV,0)),U),1:"<None Currently Assigned>")
"RTN","RGCWPTPC",40,0)
 ...D ADDDET(BDPCOUNT_"    "_$$LJ^XLFSTR($E(BDPTYPNM,1,30),30)_": "_$$LJ^XLFSTR($E(BDPCPRVP,1,35),45))
"RTN","RGCWPTPC",41,0)
 Q
"RTN","RGCWPTPC",42,0)
ADDDET(TXT,LBL) ;
"RTN","RGCWPTPC",43,0)
 Q:'$L($G(TXT))
"RTN","RGCWPTPC",44,0)
 S:$D(LBL) TXT=$$RJ^XLFSTR(LBL,21)_":  "_TXT
"RTN","RGCWPTPC",45,0)
 S DATA(I)=TXT,I=I+1
"RTN","RGCWPTPC",46,0)
 Q
"RTN","RGCWPTPC",47,0)
ADDPRV(TYP,PRV,FLG) ;
"RTN","RGCWPTPC",48,0)
 D ADDDET(" ")
"RTN","RGCWPTPC",49,0)
 I $D(^VA(200,PRV,0)) D
"RTN","RGCWPTPC",50,0)
 .N X
"RTN","RGCWPTPC",51,0)
 .D ADDDET($P(^VA(200,PRV,0),U),TYP)
"RTN","RGCWPTPC",52,0)
 .S X=$G(^VA(200,PRV,.13))
"RTN","RGCWPTPC",53,0)
 .D ADDDET($P(X,U,7),"Analog Pager")
"RTN","RGCWPTPC",54,0)
 .D ADDDET($P(X,U,8),"Digital Pager")
"RTN","RGCWPTPC",55,0)
 .D ADDDET($P(X,U,2),"Office Phone")
"RTN","RGCWPTPC",56,0)
 E  D:'$G(FLG) ADDDET("No "_TYP_" Assigned.")
"RTN","RGCWPTPC",57,0)
 Q
"RTN","RGCWPTPC",58,0)
 ; Find all providers on the team associated with the primary provider
"RTN","RGCWPTPC",59,0)
TEAM(PRV) ;EP
"RTN","RGCWPTPC",60,0)
 N RGX,RGY,RGTM,RGCT
"RTN","RGCWPTPC",61,0)
 K ^TMP("ORIHS",$J)
"RTN","RGCWPTPC",62,0)
 ;RGX is the team of the primary provider
"RTN","RGCWPTPC",63,0)
 S RGCT=0,RGX=$O(^BSDPCT("AB",PRV,0)),RGY=0
"RTN","RGCWPTPC",64,0)
 Q:'RGX
"RTN","RGCWPTPC",65,0)
 F  S RGY=$O(^BSDPCT(RGX,1,RGY)) Q:RGY=""  D
"RTN","RGCWPTPC",66,0)
 .S RGTM=$P($G(^BSDPCT(RGX,1,RGY,0)),U)
"RTN","RGCWPTPC",67,0)
 .S:RGTM'="" ^TMP("ORIHS",$J,RGTM)=""
"RTN","RGCWPTPC",68,0)
 Q
"RTN","RGCWPTPL")
0^7^B18695330
"RTN","RGCWPTPL",1,0)
RGCWPTPL ;RI/CBMI/DKM - Patient List Management ;02-Feb-2015 10:15;DKM
"RTN","RGCWPTPL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTPL",3,0)
 ; Lookup by full or partial SSN
"RTN","RGCWPTPL",4,0)
LOOKUP(DATA,ID) ;
"RTN","RGCWPTPL",5,0)
 N IEN,XREF,CNT,QUALS
"RTN","RGCWPTPL",6,0)
 S DATA=$$TMPGBL^RGCWFRPC,(CNT,IEN)=0,ID=$$UP^XLFSTR($TR(ID,"-")),XREF=$S(ID?4N:"BS",ID?1A4N:"BS5",1:"SSN")
"RTN","RGCWPTPL",7,0)
 F  S IEN=$O(^DPT(XREF,ID,IEN)) Q:'IEN  D
"RTN","RGCWPTPL",8,0)
 .S:$$ISACTIVE^RGCWPTCX(IEN,.QUALS) CNT=CNT+1,@DATA@(CNT)=IEN_U_$P(^DPT(IEN,0),U)_U_$$SSN(IEN)_"   "_$$DOB^DPTLK1(IEN)
"RTN","RGCWPTPL",9,0)
 Q
"RTN","RGCWPTPL",10,0)
 ; Return list of patients with specified HRN
"RTN","RGCWPTPL",11,0)
HRNLKP(DATA,HRN) ;
"RTN","RGCWPTPL",12,0)
 N CNT,DFN,QUALS
"RTN","RGCWPTPL",13,0)
 S CNT=0,HRN=$$UP^XLFSTR($TR(HRN,"-"))
"RTN","RGCWPTPL",14,0)
 S:HRN?1.N HRN=+HRN
"RTN","RGCWPTPL",15,0)
 F DFN=0:0 S DFN=$O(^AUPNPAT("D",HRN,DFN)) Q:'DFN  D:$D(^(DFN,DUZ(2)))
"RTN","RGCWPTPL",16,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_HRN_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",17,0)
 Q
"RTN","RGCWPTPL",18,0)
 ; Patient lookup using IEN
"RTN","RGCWPTPL",19,0)
IENLKP(DATA,IEN) ;
"RTN","RGCWPTPL",20,0)
 N DFN
"RTN","RGCWPTPL",21,0)
 I $E(IEN)="`" D
"RTN","RGCWPTPL",22,0)
 .S DFN=+$E(IEN,2,$L(IEN))
"RTN","RGCWPTPL",23,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN) DATA(1)=DFN_U_$P(^DPT(DFN,0),U)_U_$$HRN^RGCWPTCX(DFN)_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",24,0)
 Q
"RTN","RGCWPTPL",25,0)
 ; Patient lookup using DOB
"RTN","RGCWPTPL",26,0)
DOBLKP(DATA,DOB) ;
"RTN","RGCWPTPL",27,0)
 N DFN,%DT,X,Y,CNT,QUALS
"RTN","RGCWPTPL",28,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWPTPL",29,0)
 I $E(DOB)="B" D
"RTN","RGCWPTPL",30,0)
 .S DOB=$E(DOB,2,$L(DOB)),CNT=0
"RTN","RGCWPTPL",31,0)
 .S %DT="P",X=DOB D ^%DT
"RTN","RGCWPTPL",32,0)
 .I Y>0 S DOB=Y D
"RTN","RGCWPTPL",33,0)
 ..S DFN=0 F  S DFN=$O(^DPT("ADOB",DOB,DFN)) Q:DFN<1  D
"RTN","RGCWPTPL",34,0)
 ...S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,@DATA@(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_$$HRN^RGCWPTCX(DFN)_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",35,0)
 Q
"RTN","RGCWPTPL",36,0)
 ; Return formatted SSN for patient
"RTN","RGCWPTPL",37,0)
SSN(DFN) N SSN
"RTN","RGCWPTPL",38,0)
 S SSN=$$SSN^DPTLK1(DFN)
"RTN","RGCWPTPL",39,0)
 Q $S(SSN?9N.1"P":$E(SSN,1,3)_"-"_$E(SSN,4,5)_"-"_$E(SSN,6,10),1:"")
"RTN","RGCWPTPL",40,0)
 ; Return a bolus of patient names
"RTN","RGCWPTPL",41,0)
LISTALL(DATA,FROM,DIR,MAX) ;
"RTN","RGCWPTPL",42,0)
 N CNT,IEN,MAX,GBL,QUALS,DEMO
"RTN","RGCWPTPL",43,0)
 S MAX=$G(MAX,44),CNT=0,DEMO=$$LKPQUAL^RGCWPTCX("@RGCWPTCX DEMO MODE",.QUALS)
"RTN","RGCWPTPL",44,0)
 I DEMO D
"RTN","RGCWPTPL",45,0)
 .S IEN=0,GBL=$NA(^TMP("RGCWPTPL",$J))
"RTN","RGCWPTPL",46,0)
 .K @GBL
"RTN","RGCWPTPL",47,0)
 .F  S IEN=$O(^DPT("ATEST",IEN)) Q:'IEN  S @GBL@($E($P(^DPT(IEN,0),U),1,30),IEN)=""
"RTN","RGCWPTPL",48,0)
 E  I '$$LKPQUAL^RGCWPTCX("MSC DG ALL SITES HIPAA",.QUALS),$D(^DPT("ADIV",DUZ(2))) S GBL=$NA(^(DUZ(2)))
"RTN","RGCWPTPL",49,0)
 E  S GBL=$NA(^DPT("B"))
"RTN","RGCWPTPL",50,0)
 F  S FROM=$O(@GBL@(FROM),DIR),IEN=0 Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTPL",51,0)
 .F  S IEN=$O(@GBL@(FROM,IEN)) Q:'IEN  D
"RTN","RGCWPTPL",52,0)
 ..I 'DEMO,'($D(@GBL@(FROM,IEN))#2),$$LKPQUAL^RGCWPTCX("@RGCWPTCX IGNORE ALIASES",.QUALS) Q
"RTN","RGCWPTPL",53,0)
 ..S:$$ISACTIVE^RGCWPTCX(IEN,.QUALS) CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTPL",54,0)
 K:DEMO ^TMP("RGCWPTPL",$J)
"RTN","RGCWPTPL",55,0)
 Q
"RTN","RGCWPTPL",56,0)
 ; Returns information about a list or lists
"RTN","RGCWPTPL",57,0)
 ;   LIST = IEN (19930.4) of list (all lists returned if not specified)
"RTN","RGCWPTPL",58,0)
 ;   Returns IEN^NAME^FLAGS^ENTITY^DFLT
"RTN","RGCWPTPL",59,0)
 ;      where DFLT is default item settings as
"RTN","RGCWPTPL",60,0)
 ;         IEN^NAME^START DATE^END DATE^DATE LABEL
"RTN","RGCWPTPL",61,0)
LISTINFO(DATA,LIST) ;
"RTN","RGCWPTPL",62,0)
 N X,X1,X2,INFO,SEQ,ONE,CNT
"RTN","RGCWPTPL",63,0)
 S LIST=+$G(LIST),DATA="",CNT=0
"RTN","RGCWPTPL",64,0)
 I LIST S X1=LIST-1,X2=LIST
"RTN","RGCWPTPL",65,0)
 E  S X1=0,X2=9999999999
"RTN","RGCWPTPL",66,0)
 F  S X1=$O(^RGCWF(999.2,X1)) Q:'X1!(X1>X2)  S X=^(X1,0) I '$P(X,U,5),$$LISTSCRN(X1) D
"RTN","RGCWPTPL",67,0)
 .S INFO=X1_U_$P(X,U,1,3),SEQ=+$P(X,U,4)
"RTN","RGCWPTPL",68,0)
 .S $P(INFO,U,5)=$TR($$GET^XPAR("ALL",$$PARAMITM,"`"_X1),"~",U)
"RTN","RGCWPTPL",69,0)
 .I LIST S DATA=INFO
"RTN","RGCWPTPL",70,0)
 .E  S CNT=CNT+1,DATA(SEQ*1000+CNT)=INFO
"RTN","RGCWPTPL",71,0)
 Q
"RTN","RGCWPTPL",72,0)
 ; Screen logic for lists
"RTN","RGCWPTPL",73,0)
LISTSCRN(LIST) ;
"RTN","RGCWPTPL",74,0)
 I 1
"RTN","RGCWPTPL",75,0)
 D EXEC(13)
"RTN","RGCWPTPL",76,0)
 Q $T
"RTN","RGCWPTPL",77,0)
 ; Call logic to generate patient list
"RTN","RGCWPTPL",78,0)
LISTPTS(DATA,LIST,IEN,FLT) ;
"RTN","RGCWPTPL",79,0)
 N START,END
"RTN","RGCWPTPL",80,0)
 D PARSEFLT(.FLT,.START,.END)
"RTN","RGCWPTPL",81,0)
 D EXEC(10)
"RTN","RGCWPTPL",82,0)
 Q
"RTN","RGCWPTPL",83,0)
 ; Call logic to generate list selections
"RTN","RGCWPTPL",84,0)
LISTSEL(DATA,LIST,FROM,DIR,MAX,FLT) ;
"RTN","RGCWPTPL",85,0)
 N START,END
"RTN","RGCWPTPL",86,0)
 D PARSEFLT(.FLT,.START,.END)
"RTN","RGCWPTPL",87,0)
 D EXEC(11)
"RTN","RGCWPTPL",88,0)
 Q
"RTN","RGCWPTPL",89,0)
 ; Parse list filter
"RTN","RGCWPTPL",90,0)
PARSEFLT(FLT,START,END) ;
"RTN","RGCWPTPL",91,0)
 S FLT=$P($G(FLT),U),START=$P(FLT,";"),END=$P(FLT,";",2)
"RTN","RGCWPTPL",92,0)
 D:$L(START) DT^DILF("T",START,.START,"","")
"RTN","RGCWPTPL",93,0)
 D:$L(END) DT^DILF("T",END,.END,"","")
"RTN","RGCWPTPL",94,0)
 Q
"RTN","RGCWPTPL",95,0)
 ; Call logic to manage user lists
"RTN","RGCWPTPL",96,0)
MANAGE(DATA,LIST,ACTION,NAME,VAL) ;
"RTN","RGCWPTPL",97,0)
 D EXEC(12)
"RTN","RGCWPTPL",98,0)
 Q
"RTN","RGCWPTPL",99,0)
 ; Execute logic at specified node
"RTN","RGCWPTPL",100,0)
EXEC(NODE) ;
"RTN","RGCWPTPL",101,0)
 N $ET
"RTN","RGCWPTPL",102,0)
 S $ET="",@$$TRAP^RGUTOS("EXECERR^RGCWPTPL")
"RTN","RGCWPTPL",103,0)
 D:'$G(LIST) GETDFLT(.LIST)
"RTN","RGCWPTPL",104,0)
 X $G(^RGCWF(999.2,+LIST,NODE))
"RTN","RGCWPTPL",105,0)
 Q
"RTN","RGCWPTPL",106,0)
EXECERR K DATA
"RTN","RGCWPTPL",107,0)
 S DATA(1)="-1^Error: "_$$EC^%ZOSV
"RTN","RGCWPTPL",108,0)
 I 0
"RTN","RGCWPTPL",109,0)
 Q
"RTN","RGCWPTPL",110,0)
 ; Return default patient list source
"RTN","RGCWPTPL",111,0)
GETDFLT(DATA) ;
"RTN","RGCWPTPL",112,0)
 S DATA=$$GET^XPAR("ALL",$$PARAMSRC)
"RTN","RGCWPTPL",113,0)
 D:DATA LISTINFO(.DATA,DATA)
"RTN","RGCWPTPL",114,0)
 Q
"RTN","RGCWPTPL",115,0)
 ; Save new default patient list settings
"RTN","RGCWPTPL",116,0)
 ;   LIST = Default list (if missing, default is deleted)
"RTN","RGCWPTPL",117,0)
 ;  .VAL  = Default settings for lists (optional)
"RTN","RGCWPTPL",118,0)
SAVEDFLT(DATA,LIST,VAL) ;
"RTN","RGCWPTPL",119,0)
 N LP
"RTN","RGCWPTPL",120,0)
 S LIST=$S($G(LIST)>0:"`"_+LIST,1:"@")
"RTN","RGCWPTPL",121,0)
 D EN^XPAR("USR",$$PARAMSRC,1,LIST,.DATA)
"RTN","RGCWPTPL",122,0)
 I 'DATA,$D(VAL) D
"RTN","RGCWPTPL",123,0)
 .;D NDEL^XPAR("USR",$$PARAMITM)
"RTN","RGCWPTPL",124,0)
 .F LP=0:0 S LP=$O(VAL(LP)) Q:'LP!DATA  D
"RTN","RGCWPTPL",125,0)
 ..S VAL=VAL(LP)
"RTN","RGCWPTPL",126,0)
 ..D:VAL>0 EN^XPAR("USR",$$PARAMITM,"`"_+VAL,$TR($P(VAL,U,5,99),U,"~"),.DATA)
"RTN","RGCWPTPL",127,0)
 Q
"RTN","RGCWPTPL",128,0)
 ; Return date ranges for clinic appointments
"RTN","RGCWPTPL",129,0)
CLINRNG(DATA) ;
"RTN","RGCWPTPL",130,0)
 D GETWP^XPAR(.DATA,"ALL","RGCWPTPL DATE RANGES")
"RTN","RGCWPTPL",131,0)
 Q
"RTN","RGCWPTPL",132,0)
 ; Returns parameter name for default source
"RTN","RGCWPTPL",133,0)
PARAMSRC() Q "RGCWPTPL DEFAULT SOURCE"
"RTN","RGCWPTPL",134,0)
 ; Returns parameter name for default item
"RTN","RGCWPTPL",135,0)
PARAMITM() Q "RGCWPTPL DEFAULT ITEM"
"RTN","RGCWPTPS")
0^8^B4899277
"RTN","RGCWPTPS",1,0)
RGCWPTPS ;RI/CBMI/DKM - Patient search ;30-Jul-2014 11:46;DKM
"RTN","RGCWPTPS",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 372
"RTN","RGCWPTPS",3,0)
SEARCH(DATA,MAX,LNAME,FNAME,MRN,SSN,IEN,SEX,DOB) ;EP
"RTN","RGCWPTPS",4,0)
 N CNT
"RTN","RGCWPTPS",5,0)
 S DATA=$$TMPGBL^RGCWFRPC,CNT=0
"RTN","RGCWPTPS",6,0)
 S MAX=$G(MAX,100),LNAME=$G(LNAME),FNAME=$G(FNAME)
"RTN","RGCWPTPS",7,0)
 S MRN=$G(MRN),SSN=$G(SSN),SEX=$G(SEX),DOB=+$G(DOB),IEN=$G(IEN)
"RTN","RGCWPTPS",8,0)
 I $L(IEN) D  Q
"RTN","RGCWPTPS",9,0)
 .N X
"RTN","RGCWPTPS",10,0)
 .D:IEN=+IEN IENLKP^RGCWPTPL(.X,"`"_IEN),ADD($G(X(1)))
"RTN","RGCWPTPS",11,0)
 I $L(MRN) D  Q
"RTN","RGCWPTPS",12,0)
 .N X
"RTN","RGCWPTPS",13,0)
 .D HRNLKP^RGCWPTPL(.X,MRN)
"RTN","RGCWPTPS",14,0)
 .M @DATA=X
"RTN","RGCWPTPS",15,0)
 I $L(SSN) D  Q
"RTN","RGCWPTPS",16,0)
 .D LOOKUP^RGCWPTPL(.DATA,SSN)
"RTN","RGCWPTPS",17,0)
 I $L(LNAME)<3 D  Q
"RTN","RGCWPTPS",18,0)
 .D ERROR("You must at least supply a SSN, MRN, or last name (minimum 3 characters).")
"RTN","RGCWPTPS",19,0)
 N IEN,GBL,QUALS,DEMO,FROM,LLEN,FLEN,NAME,X0
"RTN","RGCWPTPS",20,0)
 S LNAME=$$UP^XLFSTR(LNAME),FNAME=$$UP^XLFSTR(FNAME),SEX=$$UP^XLFSTR(SEX)
"RTN","RGCWPTPS",21,0)
 S FROM=LNAME,LLEN=$L(LNAME),FLEN=$L(FNAME)
"RTN","RGCWPTPS",22,0)
 S DEMO=$$LKPQUAL^RGCWPTCX("@RGCWPTCX DEMO MODE",.QUALS)
"RTN","RGCWPTPS",23,0)
 I DEMO D
"RTN","RGCWPTPS",24,0)
 .S IEN=0,GBL=$NA(^TMP("RGCWPTPL",$J))
"RTN","RGCWPTPS",25,0)
 .K @GBL
"RTN","RGCWPTPS",26,0)
 .F  S IEN=$O(^DPT("ATEST",IEN)) Q:'IEN  S @GBL@($E($P(^DPT(IEN,0),U),1,30),IEN)=""
"RTN","RGCWPTPS",27,0)
 E  I '$$LKPQUAL^RGCWPTCX("MSC DG ALL SITES HIPAA",.QUALS),$D(^DPT("ADIV",DUZ(2))) S GBL=$NA(^(DUZ(2)))
"RTN","RGCWPTPS",28,0)
 E  S GBL=$NA(^DPT("B"))
"RTN","RGCWPTPS",29,0)
 F  S FROM=$O(@GBL@(FROM)),IEN=0 Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTPS",30,0)
 .F  S IEN=$O(@GBL@(FROM,IEN)) Q:'IEN  D  Q:CNT'<MAX
"RTN","RGCWPTPS",31,0)
 ..I 'DEMO,'($D(@GBL@(FROM,IEN))#2),$$LKPQUAL^RGCWPTCX("@RGCWPTCX IGNORE ALIASES",.QUALS) Q
"RTN","RGCWPTPS",32,0)
 ..Q:'$$ISACTIVE^RGCWPTCX(IEN,.QUALS)
"RTN","RGCWPTPS",33,0)
 ..S X0=^DPT(IEN,0),NAME=$P(X0,U)
"RTN","RGCWPTPS",34,0)
 ..I $E(NAME,1,LLEN)'=LNAME S MAX=-1 Q
"RTN","RGCWPTPS",35,0)
 ..I FLEN,$E($$TRIM^XLFSTR($P(NAME,",",2)),1,FLEN)'=FNAME Q
"RTN","RGCWPTPS",36,0)
 ..I DOB,+$P(X0,U,3)'=DOB Q
"RTN","RGCWPTPS",37,0)
 ..I $L(SEX),$P(X0,U,2)'=SEX Q
"RTN","RGCWPTPS",38,0)
 ..D ADD(IEN_U_NAME)
"RTN","RGCWPTPS",39,0)
 K:DEMO ^TMP("RGCWPTPL",$J)
"RTN","RGCWPTPS",40,0)
 Q
"RTN","RGCWPTPS",41,0)
ADD(X) S:$L($G(X)) CNT=CNT+1,@DATA@(CNT)=X
"RTN","RGCWPTPS",42,0)
 Q
"RTN","RGCWPTPS",43,0)
ERROR(X) D ADD("-1^"_X)
"RTN","RGCWPTPS",44,0)
 Q
"SEC","^DIC",998.1,998.1,0,"AUDIT")
@
"SEC","^DIC",998.1,998.1,0,"DD")
@
"SEC","^DIC",998.1,998.1,0,"DEL")
@
"SEC","^DIC",998.1,998.1,0,"LAYGO")
@
"SEC","^DIC",998.1,998.1,0,"RD")
@
"SEC","^DIC",998.1,998.1,0,"WR")
@
"SEC","^DIC",999.2,999.2,0,"AUDIT")
@
"SEC","^DIC",999.2,999.2,0,"DD")
@
"SEC","^DIC",999.2,999.2,0,"DEL")
@
"SEC","^DIC",999.2,999.2,0,"LAYGO")
@
"SEC","^DIC",999.2,999.2,0,"RD")
@
"SEC","^DIC",999.2,999.2,0,"WR")
@
"SEC","^DIC",999.201,999.201,0,"AUDIT")
@
"SEC","^DIC",999.201,999.201,0,"DD")
@
"SEC","^DIC",999.201,999.201,0,"DEL")
@
"SEC","^DIC",999.201,999.201,0,"LAYGO")
@
"SEC","^DIC",999.201,999.201,0,"RD")
@
"SEC","^DIC",999.201,999.201,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")

"TEMP","INITIAL")

"TEMP","PARAM",1)
RGCWENCX VISIT TYPES^1^A~Ambulatory~Used for workload.
"TEMP","PARAM",2)
RGCWENCX VISIT TYPES^2^E~Historical~Used to document past events.  Not used for workload.
"TEMP","PARAM",3)
RGCWENCX VISIT TYPES^3^T~Telephonic~Used to document informal patient encounters such as telephone conversations.  Not used for workload.
"TEMP","PARAM",4)
RGCWENCX VISIT TYPES^4^C~Chart Review~Used to document chart reviews.  Not used for workload.
"TEMP","PARAM",5)
RGCWENCX VISIT TYPES^5^I~In-Hospital~Used to document ambulatory visits on hospitalized patients.
"TEMP","PARAM",6)
RGCWENCX VISIT TYPES^6^S~Day Surgery~Used to document Day Surgery visits.
"TEMP","PARAM",7)
RGCWENCX VISIT TYPES^7^O~Observation~Observation
"TEMP","PARAM",8)
RGCWENCX VISIT TYPES^8^R~Nursing Home~Used to document nursing home visits.
"TEMP","PARAM",9)
RGCWENCX VISIT TYPES^9^N~Not Found~Used for service categories not otherwise specified.
"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","TGT")
2
"VER")
8.0^22.0
"^DD",998.1,998.1,0)
FIELD^^99^7
"^DD",998.1,998.1,0,"DDA")
N
"^DD",998.1,998.1,0,"DT")
3150316
"^DD",998.1,998.1,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",998.1,998.1,0,"IX","B",998.1,.01)

"^DD",998.1,998.1,0,"NM","SERIALIZATION CONTROL")

"^DD",998.1,998.1,0,"PT",999.991,.01)

"^DD",998.1,998.1,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<1)!'(X'?1P.E) X
"^DD",998.1,998.1,.01,1,0)
^.1
"^DD",998.1,998.1,.01,1,1,0)
998.1^B
"^DD",998.1,998.1,.01,1,1,1)
S ^RGSER(998.1,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.1,.01,1,1,2)
K ^RGSER(998.1,"B",$E(X,1,30),DA)
"^DD",998.1,998.1,.01,3)
Replace Name of the serialization type (1-30 characters).
"^DD",998.1,998.1,.01,21,0)
^^3^3^3150310.204501
"^DD",998.1,998.1,.01,21,1,0)
This is the portion of the request URL that identifies the serialization format
"^DD",998.1,998.1,.01,21,2,0)
of the requested resource.  It is first part of the path portion of the URL.
"^DD",998.1,998.1,.01,21,3,0)
The name and associated content type together should be unique within the file.
"^DD",998.1,998.1,.01,"DT")
3150211
"^DD",998.1,998.1,1,0)
CONTENT TYPE^F^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.1,1,3)
Content type(s) generated by this serializer.
"^DD",998.1,998.1,1,21,0)
^^6^6^3150315.140532
"^DD",998.1,998.1,1,21,1,0)
These are the content types (separated by commas) that are used to match 
"^DD",998.1,998.1,1,21,2,0)
against the requested content type.  It is used to match the requestor's 
"^DD",998.1,998.1,1,21,3,0)
desired content type.  This allows having multiple entries with the same name, 
"^DD",998.1,998.1,1,21,4,0)
but different content types.  By default, the first value of this entry is 
"^DD",998.1,998.1,1,21,5,0)
returned as the Content-Type in the response header.  However, the serializer 
"^DD",998.1,998.1,1,21,6,0)
may opt to override this value with a more specific MIME type. 
"^DD",998.1,998.1,1,"DT")
3150315
"^DD",998.1,998.1,2,0)
SERIALIZER^F^^0;3^K:$L(X)>10!($L(X)<1)!'(X?1.A0.AN) X
"^DD",998.1,998.1,2,3)
Name of serialization routine.
"^DD",998.1,998.1,2,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.1,2,21,1,0)
The specified serializer routine must implement the Serializer interface.
"^DD",998.1,998.1,2,"DT")
3150211
"^DD",998.1,998.1,3,0)
VERSION^F^^0;4^K:$L(X)>20!($L(X)<1) X
"^DD",998.1,998.1,3,3)
Version of this serializer (1-20 characters).
"^DD",998.1,998.1,3,21,0)
^^1^1^3150312.172833
"^DD",998.1,998.1,3,21,1,0)
This represents the version of the format the serializer is generating.
"^DD",998.1,998.1,3,"DT")
3150312
"^DD",998.1,998.1,10,0)
RESOURCE^998.11^^10;0
"^DD",998.1,998.1,10,21,0)
^.001^4^4^3150310^^
"^DD",998.1,998.1,10,21,1,0)
This is the portion of the path of the request URL that follows the 
"^DD",998.1,998.1,10,21,2,0)
serialization specifier.  It may include the wildcard characters # (for 
"^DD",998.1,998.1,10,21,3,0)
matching any sequence of digits) and * (for matching any sequence of 
"^DD",998.1,998.1,10,21,4,0)
characters).
"^DD",998.1,998.1,20,0)
HEADER FIELDS^998.14^^20;0
"^DD",998.1,998.1,20,"DT")
3150228
"^DD",998.1,998.1,99,0)
DESCRIPTION^998.199^^99;0
"^DD",998.1,998.11,0)
RESOURCE SUB-FIELD^^50^9
"^DD",998.1,998.11,0,"DT")
3150310
"^DD",998.1,998.11,0,"IX","B",998.11,.01)

"^DD",998.1,998.11,0,"IX","C",998.11,.01)

"^DD",998.1,998.11,0,"NM","RESOURCE")

"^DD",998.1,998.11,0,"UP")
998.1
"^DD",998.1,998.11,.01,0)
RESOURCE^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.11,.01,1,0)
^.1^^-1
"^DD",998.1,998.11,.01,1,1,0)
998.11^B^MUMPS
"^DD",998.1,998.11,.01,1,1,1)
S ^RGSER(998.1,DA(1),10,"B",X,DA)=$$TOPTRN^RGSERDD(X)
"^DD",998.1,998.11,.01,1,1,2)
K ^RGSER(998.1,DA(1),10,"B",X,DA)
"^DD",998.1,998.11,.01,1,1,"DT")
3150308
"^DD",998.1,998.11,.01,1,2,0)
998.11^C^MUMPS
"^DD",998.1,998.11,.01,1,2,1)
S ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)=""
"^DD",998.1,998.11,.01,1,2,2)
K ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)
"^DD",998.1,998.11,.01,1,2,"DT")
3150211
"^DD",998.1,998.11,.01,3)
Enter path name for the resource.
"^DD",998.1,998.11,.01,"DT")
3150308
"^DD",998.1,998.11,1,0)
INTERNAL^S^0:NO;1:YES;^0;2^Q
"^DD",998.1,998.11,1,3)
Enter YES if this is an internal resource.
"^DD",998.1,998.11,1,21,0)
^^3^3^3150310.205212
"^DD",998.1,998.11,1,21,1,0)
If set to YES, this resource is internal to the server and may not be 
"^DD",998.1,998.11,1,21,2,0)
referenced directly.  Any attempt to request an internal resource will return 
"^DD",998.1,998.11,1,21,3,0)
an error.
"^DD",998.1,998.11,1,"DT")
3150221
"^DD",998.1,998.11,2,0)
SOURCE^NJ10,4XO^^0;3^K:'$$VFILE^DILFD(X) X
"^DD",998.1,998.11,2,2)
S Y(0)=Y S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,2.1)
S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,3)
Enter a file or subfile number.
"^DD",998.1,998.11,2,21,0)
^^2^2^3150310.205524
"^DD",998.1,998.11,2,21,1,0)
This is the number of the file or subfile from which the resource will be
"^DD",998.1,998.11,2,21,2,0)
extracted.  For resources that are derived, this field may be null.
"^DD",998.1,998.11,2,"DT")
3150211
"^DD",998.1,998.11,10,0)
CUSTOM SERIALIZER^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,10,3)
M code to invoke custom serializer.
"^DD",998.1,998.11,10,9)
@
"^DD",998.1,998.11,10,21,0)
^^4^4^3150310.205835
"^DD",998.1,998.11,10,21,1,0)
For resources that use a custom serializer, this field contains executable M 
"^DD",998.1,998.11,10,21,2,0)
code that performs the serialization.  When this field is non-null, the 
"^DD",998.1,998.11,10,21,3,0)
default serialization code is not executed unless the custom serializer kills 
"^DD",998.1,998.11,10,21,4,0)
the XSER variable before returning control.
"^DD",998.1,998.11,10,"DT")
3150211
"^DD",998.1,998.11,20,0)
CUSTOM READER^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,20,3)
M code to invoke custom retrieval logic.
"^DD",998.1,998.11,20,9)
@
"^DD",998.1,998.11,20,21,0)
^.001^16^16^3150312^
"^DD",998.1,998.11,20,21,1,0)
This field contains custom retrieval logic for resources that require it.  It
"^DD",998.1,998.11,20,21,2,0)
should return a single instance of a resource given its unique identifier using
"^DD",998.1,998.11,20,21,3,0)
the VALS array in the format:
"^DD",998.1,998.11,20,21,4,0)

"^DD",998.1,998.11,20,21,5,0)
       VALS(FILE,IENS,<property>,<int/ext>)=<value>
"^DD",998.1,998.11,20,21,6,0)

"^DD",998.1,998.11,20,21,7,0)
where
"^DD",998.1,998.11,20,21,8,0)

"^DD",998.1,998.11,20,21,9,0)
       <property> = The property's name.
"^DD",998.1,998.11,20,21,10,0)
       <int/ext>  = "I" or "E" for representing internal and external values,
"^DD",998.1,998.11,20,21,11,0)
                    respectively.
"^DD",998.1,998.11,20,21,12,0)
       <value>    = The property's value.
"^DD",998.1,998.11,20,21,13,0)

"^DD",998.1,998.11,20,21,14,0)
Note that even if custom retrieval logic is provided, the default retrieval
"^DD",998.1,998.11,20,21,15,0)
logic will also be executed if the value of the FILE variable (from the SOURCE
"^DD",998.1,998.11,20,21,16,0)
field) is non-zero.
"^DD",998.1,998.11,20,"DT")
3150312
"^DD",998.1,998.11,30,0)
PROPERTY^998.12I^^30;0
"^DD",998.1,998.11,30,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.11,30,21,1,0)
This is the list of properties for the given resource.
"^DD",998.1,998.11,40,0)
PARAMETER^998.13I^^40;0
"^DD",998.1,998.11,40,21,0)
^^5^5^3150310.211659
"^DD",998.1,998.11,40,21,1,0)
This is the list of searchable parameters supported for the resource.  These 
"^DD",998.1,998.11,40,21,2,0)
serve two purposes.  First, they define the logic for determining a match for 
"^DD",998.1,998.11,40,21,3,0)
the given search parameter.  Second, they may define a cohort selector for a 
"^DD",998.1,998.11,40,21,4,0)
given search parameter.  Cohort selectors optimize search strategy depending 
"^DD",998.1,998.11,40,21,5,0)
on which search parameters are selected.
"^DD",998.1,998.11,50,0)
TEMPLATE^998.15^^50;0
"^DD",998.1,998.11,50,21,0)
^^8^8^3150312.154427
"^DD",998.1,998.11,50,21,1,0)
Templates may be referenced by properties to generate output from the 
"^DD",998.1,998.11,50,21,2,0)
serializer. They may contain replaceable parameters enclosed between "|" 
"^DD",998.1,998.11,50,21,3,0)
characters.  If a replaceable parameter starts with an "@" or "#" character, 
"^DD",998.1,998.11,50,21,4,0)
it is assumed to be an M expression whose value is inserted into the 
"^DD",998.1,998.11,50,21,5,0)
generated output.  Otherwise, it is assumed to be a field identifier whose 
"^DD",998.1,998.11,50,21,6,0)
value is inserted.  Except for "#"-prefixed expressions, any reserved 
"^DD",998.1,998.11,50,21,7,0)
characters in the replacement value will be escaped according to the rules
"^DD",998.1,998.11,50,21,8,0)
specified by the serializer.
"^DD",998.1,998.11,99,0)
DESCRIPTION^F^^99;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.11,99,3)
Enter brief description of this resource.
"^DD",998.1,998.11,99,21,0)
^^1^1^3150310.21222
"^DD",998.1,998.11,99,21,1,0)
Provides a detailed description of the associated resource.
"^DD",998.1,998.11,99,"DT")
3150211
"^DD",998.1,998.12,0)
PROPERTY SUB-FIELD^^10^5
"^DD",998.1,998.12,0,"DT")
3150310
"^DD",998.1,998.12,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.12,0,"IX","ASEQ",998.12,3)

"^DD",998.1,998.12,0,"IX","B",998.12,.01)

"^DD",998.1,998.12,0,"NM","PROPERTY")

"^DD",998.1,998.12,0,"UP")
998.11
"^DD",998.1,998.12,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.12,.01,1,0)
^.1
"^DD",998.1,998.12,.01,1,1,0)
998.12^B
"^DD",998.1,998.12,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.12,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)
"^DD",998.1,998.12,.01,3)
Property name to be used in serialization.
"^DD",998.1,998.12,.01,21,0)
^^8^8^3150311.183527
"^DD",998.1,998.12,.01,21,1,0)
This is the name that identifies the property.  It is typically the name that 
"^DD",998.1,998.12,.01,21,2,0)
is emitted by the serializer, but this is not a requirement. An arbitrary tag 
"^DD",998.1,998.12,.01,21,3,0)
may also be appended to the property name using the "!" character as a 
"^DD",998.1,998.12,.01,21,4,0)
delimiter.  This may be used to provide additional information about the 
"^DD",998.1,998.12,.01,21,5,0)
entry.  For example, if a property requires multiple entries to implement the 
"^DD",998.1,998.12,.01,21,6,0)
logic required to emit it, the tag can provide information to the user as to 
"^DD",998.1,998.12,.01,21,7,0)
the role each entry plays.  For any given entry, the serializer may choose to 
"^DD",998.1,998.12,.01,21,8,0)
apply additional significance to the tag.
"^DD",998.1,998.12,.01,"DT")
3150311
"^DD",998.1,998.12,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.12,1,3)
Field name or # corresponding to this property
"^DD",998.1,998.12,1,21,0)
^^7^7^3150311.184042
"^DD",998.1,998.12,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved
"^DD",998.1,998.12,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.12,1,21,3,0)
retrieved for the specified fields are available to the serializer.  Where the
"^DD",998.1,998.12,1,21,4,0)
SOURCE is a FileMan file or subfile, the field is the field # (or name).  For 
"^DD",998.1,998.12,1,21,5,0)
resources using custom retrieval logic, the field is the identifier assigned 
"^DD",998.1,998.12,1,21,6,0)
by that logic.  For properties that do not require source data (such as a 
"^DD",998.1,998.12,1,21,7,0)
static property), this entry may be left blank.
"^DD",998.1,998.12,1,"DT")
3150311
"^DD",998.1,998.12,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;I:INLINE;T:TEMPLATE;S:STATIC;N:NOP;^0;3^Q
"^DD",998.1,998.12,2,3)
Encoding type for this property.
"^DD",998.1,998.12,2,21,0)
^^15^15^3150310.21405
"^DD",998.1,998.12,2,21,1,0)
Represents the type of property.  Possible values are:
"^DD",998.1,998.12,2,21,2,0)
   B = BOOLEAN         - Emits a property value that is true or false.
"^DD",998.1,998.12,2,21,3,0)
   C = CUSTOM          - The associated custom code emits the property value.
"^DD",998.1,998.12,2,21,4,0)
   D = DATE            - Emits a property value that is a date.
"^DD",998.1,998.12,2,21,5,0)
   F = FREE TEXT       - Emits the external value of the property.
"^DD",998.1,998.12,2,21,6,0)
   I = INLINE          - Inserts a serialized object inline.
"^DD",998.1,998.12,2,21,7,0)
   N = NOP             - Causes the property to be ignored.
"^DD",998.1,998.12,2,21,8,0)
   M = MULTIPLE        - The property is a subfile multiple.
"^DD",998.1,998.12,2,21,9,0)
   O = OBJECT          - Invokes serialization logic for the specified object.
"^DD",998.1,998.12,2,21,10,0)
   R = RAW             - Emits the internal value of the property.
"^DD",998.1,998.12,2,21,11,0)
   S = STATIC          - Emits a static value for the property.
"^DD",998.1,998.12,2,21,12,0)
   T = TEMPLATE        - Emits the specified template.
"^DD",998.1,998.12,2,21,13,0)
   W = WORD PROCESSING - Emits a word processing value.
"^DD",998.1,998.12,2,21,14,0)

"^DD",998.1,998.12,2,21,15,0)
For more information, see the description of the CONTROL field.
"^DD",998.1,998.12,2,"DT")
3150310
"^DD",998.1,998.12,3,0)
SEQUENCE^RNJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.12,3,1,0)
^.1
"^DD",998.1,998.12,3,1,1,0)
998.12^ASEQ
"^DD",998.1,998.12,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.12,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.12,3,1,1,"DT")
3150211
"^DD",998.1,998.12,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.12,3,21,0)
^^3^3^3150311.184411
"^DD",998.1,998.12,3,21,1,0)
This is a numerical sequence # that determines the order in which the 
"^DD",998.1,998.12,3,21,2,0)
serializer processes property entries, and, thus, the order in which 
"^DD",998.1,998.12,3,21,3,0)
properties are emitted by the serializer.
"^DD",998.1,998.12,3,"DT")
3150311
"^DD",998.1,998.12,10,0)
CONTROL^FX^^10;E1,250^D ITXCTRL^RGSERDD(.X,.DA)
"^DD",998.1,998.12,10,3)
Enter control data.
"^DD",998.1,998.12,10,21,0)
^^10^10^3150311.184552
"^DD",998.1,998.12,10,21,1,0)
The content of this field depends on the value of the TYPE field.  For those
"^DD",998.1,998.12,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",998.1,998.12,10,21,3,0)

"^DD",998.1,998.12,10,21,4,0)
  C (CUSTOM)          - Executable M code.
"^DD",998.1,998.12,10,21,5,0)
  I (INLINE)          - Path for inline resource.
"^DD",998.1,998.12,10,21,6,0)
  O (OBJECT)          - Path for the target object.
"^DD",998.1,998.12,10,21,7,0)
  M (MULTIPLE)        - Path for the multiple entry.
"^DD",998.1,998.12,10,21,8,0)
  S (STATIC)          - The static value of the property.
"^DD",998.1,998.12,10,21,9,0)
  W (WORD PROCESSING) - Line delimiter to use (escaped characters supported).
"^DD",998.1,998.12,10,21,10,0)

"^DD",998.1,998.12,10,"DT")
3150311
"^DD",998.1,998.13,0)
PARAMETER SUB-FIELD^^10^6
"^DD",998.1,998.13,0,"DT")
3150211
"^DD",998.1,998.13,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.13,0,"IX","ASEQ",998.13,3)

"^DD",998.1,998.13,0,"IX","B",998.13,.01)

"^DD",998.1,998.13,0,"NM","PARAMETER")

"^DD",998.1,998.13,0,"UP")
998.11
"^DD",998.1,998.13,.01,0)
PARAMETER^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.13,.01,1,0)
^.1
"^DD",998.1,998.13,.01,1,1,0)
998.13^B
"^DD",998.1,998.13,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.13,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)
"^DD",998.1,998.13,.01,3)
Enter name of search parameter.
"^DD",998.1,998.13,.01,21,0)
^^1^1^3150311.184801
"^DD",998.1,998.13,.01,21,1,0)
This is the identifier of the parameter as it would appear in a query.
"^DD",998.1,998.13,.01,"DT")
3150311
"^DD",998.1,998.13,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.13,1,3)
Field name or # corresponding to this parameter.
"^DD",998.1,998.13,1,21,0)
^^6^6^3150311.185216
"^DD",998.1,998.13,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved 
"^DD",998.1,998.13,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.13,1,21,3,0)
retrieved for the specified fields are available to the serializer when 
"^DD",998.1,998.13,1,21,4,0)
formulating a search query.  Where the SOURCE is a FileMan file or subfile, 
"^DD",998.1,998.13,1,21,5,0)
the field is the field # (or name).  For resources using custom retrieval 
"^DD",998.1,998.13,1,21,6,0)
logic, the field is the identifier assigned by that logic. 
"^DD",998.1,998.13,1,"DT")
3150311
"^DD",998.1,998.13,2,0)
TYPE^S^N:NUMBER;D:DATE;S:STRING;T:TOKEN;R:REFERENCE;Q:QUANTITY;^0;3^Q
"^DD",998.1,998.13,2,3)
Type of the search parameter.
"^DD",998.1,998.13,2,21,0)
^^12^12^3150311.190219
"^DD",998.1,998.13,2,21,1,0)
The parameter type determines the allowable comparison operators and the logic 
"^DD",998.1,998.13,2,21,2,0)
used to implement them.
"^DD",998.1,998.13,2,21,3,0)

"^DD",998.1,998.13,2,21,4,0)
The following parameter types are recognized:
"^DD",998.1,998.13,2,21,5,0)

"^DD",998.1,998.13,2,21,6,0)
       N        NUMBER     - The parameter is a numeric value.
"^DD",998.1,998.13,2,21,7,0)
       D        DATE       - The parameter is a date value.
"^DD",998.1,998.13,2,21,8,0)
       S        STRING     - The parameter is a text string.
"^DD",998.1,998.13,2,21,9,0)
       T        TOKEN      - The parameter is a special token.
"^DD",998.1,998.13,2,21,10,0)
       R        REFERENCE  - The parameter is a resource reference.
"^DD",998.1,998.13,2,21,11,0)
       Q        QUANTITY   - The parameter is a quantity.
"^DD",998.1,998.13,2,21,12,0)
 
"^DD",998.1,998.13,2,"DT")
3150311
"^DD",998.1,998.13,3,0)
SEQUENCE^NJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.13,3,1,0)
^.1
"^DD",998.1,998.13,3,1,1,0)
998.13^ASEQ
"^DD",998.1,998.13,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.13,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.13,3,1,1,"DT")
3150211
"^DD",998.1,998.13,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.13,3,21,0)
^^3^3^3150311.190416
"^DD",998.1,998.13,3,21,1,0)
The sequence # determines the order the serializer uses in processing 
"^DD",998.1,998.13,3,21,2,0)
parameters.  This can be important in determining optimal search strategy 
"^DD",998.1,998.13,3,21,3,0)
where multiple parameters are specified.
"^DD",998.1,998.13,3,"DT")
3150311
"^DD",998.1,998.13,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.13,10,3)
M code to perform filtering.
"^DD",998.1,998.13,10,"DT")
3150211
"^DD",998.1,998.13,20,0)
COHORT^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.13,20,3)
M code to set global selector into X.
"^DD",998.1,998.13,20,9)
@
"^DD",998.1,998.13,20,"DT")
3150211
"^DD",998.1,998.14,0)
HEADER FIELDS SUB-FIELD^^.01^1
"^DD",998.1,998.14,0,"DT")
3150228
"^DD",998.1,998.14,0,"NM","HEADER FIELDS")

"^DD",998.1,998.14,0,"UP")
998.1
"^DD",998.1,998.14,.01,0)
HEADER FIELDS^WLx^^0;1^Q
"^DD",998.1,998.14,.01,3)
Additional fields to be included in the HTTP response header.
"^DD",998.1,998.14,.01,"DT")
3150228
"^DD",998.1,998.15,0)
TEMPLATE SUB-FIELD^^1^2
"^DD",998.1,998.15,0,"DT")
3150309
"^DD",998.1,998.15,0,"IX","B",998.15,.01)

"^DD",998.1,998.15,0,"NM","TEMPLATE")

"^DD",998.1,998.15,0,"UP")
998.11
"^DD",998.1,998.15,.01,0)
TEMPLATE^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",998.1,998.15,.01,1,0)
^.1
"^DD",998.1,998.15,.01,1,1,0)
998.15^B
"^DD",998.1,998.15,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.15,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)
"^DD",998.1,998.15,.01,3)
Answer must be 1-30 characters in length.
"^DD",998.1,998.15,.01,"DT")
3150309
"^DD",998.1,998.15,1,0)
CONTENT^998.151^^1;0
"^DD",998.1,998.151,0)
CONTENT SUB-FIELD^^.01^1
"^DD",998.1,998.151,0,"DT")
3150309
"^DD",998.1,998.151,0,"NM","CONTENT")

"^DD",998.1,998.151,0,"UP")
998.15
"^DD",998.1,998.151,.01,0)
CONTENT^WLx^^0;1^Q
"^DD",998.1,998.151,.01,"DT")
3150309
"^DD",998.1,998.199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",998.1,998.199,0,"DT")
3150316
"^DD",998.1,998.199,0,"NM","DESCRIPTION")

"^DD",998.1,998.199,0,"UP")
998.1
"^DD",998.1,998.199,.01,0)
DESCRIPTION^WLx^^0;1^Q
"^DD",998.1,998.199,.01,3)
Enter a description of this endpoint using HTML formatting.
"^DD",998.1,998.199,.01,21,0)
^^2^2^3150316.133317
"^DD",998.1,998.199,.01,21,1,0)
The content of this field will be returned if a request is directed to this 
"^DD",998.1,998.199,.01,21,2,0)
endpoint's root URL. 
"^DD",998.1,998.199,.01,"DT")
3150316
"^DD",999.2,999.2,0)
FIELD^^13^9
"^DD",999.2,999.2,0,"IX","B",999.2,.01)

"^DD",999.2,999.2,0,"NM","CAREWEB PATIENT LIST")

"^DD",999.2,999.2,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",999.2,999.2,.01,1,0)
^.1
"^DD",999.2,999.2,.01,1,1,0)
999.2^B
"^DD",999.2,999.2,.01,1,1,1)
S ^RGCWF(999.2,"B",$E(X,1,30),DA)=""
"^DD",999.2,999.2,.01,1,1,2)
K ^RGCWF(999.2,"B",$E(X,1,30),DA)
"^DD",999.2,999.2,.01,3)
Answer must be 3-30 characters in length.
"^DD",999.2,999.2,.01,"DT")
3010913
"^DD",999.2,999.2,1,0)
FLAGS^F^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",999.2,999.2,1,3)
Enter special control flags.
"^DD",999.2,999.2,1,21,0)
^^9^9^3060911.112102
"^DD",999.2,999.2,1,21,1,0)
These flags control how the list appears on the client.  Values are:
"^DD",999.2,999.2,1,21,2,0)

"^DD",999.2,999.2,1,21,3,0)
D:     Date range required
"^DD",999.2,999.2,1,21,4,0)
E:     Sets encounter context
"^DD",999.2,999.2,1,21,5,0)
L:     Item retrieval uses long list
"^DD",999.2,999.2,1,21,6,0)
M:     Convert selection list to mixed case
"^DD",999.2,999.2,1,21,7,0)
N:     Do not cache list
"^DD",999.2,999.2,1,21,8,0)
S:     Sort selection list
"^DD",999.2,999.2,1,21,9,0)
U:     List can be managed by user
"^DD",999.2,999.2,1,"DT")
3010913
"^DD",999.2,999.2,2,0)
ENTITY^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",999.2,999.2,2,3)
Name of single entity in this list.
"^DD",999.2,999.2,2,"DT")
3010918
"^DD",999.2,999.2,3,0)
SEQUENCE^NJ11,0X^^0;4^K:+X'=X!(X>100000)!(X<0)!(X?.E1"."1N.N) X
"^DD",999.2,999.2,3,3)
Type a whole number between 0 and 100000
"^DD",999.2,999.2,3,"DT")
3010917
"^DD",999.2,999.2,4,0)
DISABLE^S^0:NO;1:YES;^0;5^Q
"^DD",999.2,999.2,4,3)
Enter YES to suppress display of this list.
"^DD",999.2,999.2,4,"DT")
3011002
"^DD",999.2,999.2,10,0)
PATIENT RETRIEVAL^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,10,3)
M code to retrieve list.
"^DD",999.2,999.2,10,9)
@
"^DD",999.2,999.2,10,"DT")
3010918
"^DD",999.2,999.2,11,0)
ITEM RETRIEVAL^K^^11;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,11,3)
M code to retrieve item list.
"^DD",999.2,999.2,11,9)
@
"^DD",999.2,999.2,11,"DT")
3010918
"^DD",999.2,999.2,12,0)
LIST MANAGEMENT^K^^12;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,12,3)
M code to invoke management functions.
"^DD",999.2,999.2,12,9)
@
"^DD",999.2,999.2,12,"DT")
3010918
"^DD",999.2,999.2,13,0)
SCREEN^K^^13;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,13,3)
M code to screen entries.
"^DD",999.2,999.2,13,9)
@
"^DD",999.2,999.2,13,"DT")
3011002
"^DD",999.201,999.201,0)
FIELD^^4^5
"^DD",999.201,999.201,0,"IX","B",999.201,.01)

"^DD",999.201,999.201,0,"NM","CAREWEB NOTIFICATION CONTROL")

"^DD",999.201,999.201,0,"PT",999.994,.01)

"^DD",999.201,999.201,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",999.201,999.201,.01,1,0)
^.1
"^DD",999.201,999.201,.01,1,1,0)
999.201^B
"^DD",999.201,999.201,.01,1,1,1)
S ^RGCWF(999.201,"B",$E(X,1,30),DA)=""
"^DD",999.201,999.201,.01,1,1,2)
K ^RGCWF(999.201,"B",$E(X,1,30),DA)
"^DD",999.201,999.201,.01,3)
Answer must be 2-30 characters in length.
"^DD",999.201,999.201,.01,"DT")
3030805
"^DD",999.201,999.201,1,0)
IDENT^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,1,3)
Code to check notification identity.  Set $T to true for positive match.
"^DD",999.201,999.201,1,9)
@
"^DD",999.201,999.201,1,21,0)
^^1^1^3030804.150811
"^DD",999.201,999.201,1,21,1,0)
Should check the notification identifier in AID and set $T to true if a match.
"^DD",999.201,999.201,1,"DT")
3030804
"^DD",999.201,999.201,2,0)
PARSE^RK^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,2,3)
Code to parse data elements from notification.
"^DD",999.201,999.201,2,9)
@
"^DD",999.201,999.201,2,21,0)
^^8^8^3030804.170957
"^DD",999.201,999.201,2,21,1,0)
Code to parse standard data elements from notification.  Elements should be
"^DD",999.201,999.201,2,21,2,0)
returned in ALR array as follows:
"^DD",999.201,999.201,2,21,3,0)

"^DD",999.201,999.201,2,21,4,0)
ALR("DFN")=Patient IEN (if patient-orientation)
"^DD",999.201,999.201,2,21,5,0)
ALR("INF")=Info only flag
"^DD",999.201,999.201,2,21,6,0)
ALR("TYP")=Notification type code
"^DD",999.201,999.201,2,21,7,0)
ALR("PRI")=Priority code
"^DD",999.201,999.201,2,21,8,0)
ALR("XTR")=Additional data
"^DD",999.201,999.201,2,"DT")
3030804
"^DD",999.201,999.201,3,0)
PROCESS^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,3,3)
Post processing logic for alert.
"^DD",999.201,999.201,3,9)
@
"^DD",999.201,999.201,3,"DT")
3030805
"^DD",999.201,999.201,4,0)
UPDATE^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,4,3)
Optional logic to update alerts for current user.
"^DD",999.201,999.201,4,9)
@
"^DD",999.201,999.201,4,21,0)
^^2^2^3080128.135828
"^DD",999.201,999.201,4,21,1,0)
This logic provides the opportunity to update alerts (add or delete) 
"^DD",999.201,999.201,4,21,2,0)
for the current user prior to retrieving them.
"^DD",999.201,999.201,4,"DT")
3080128
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DIC",998.1,998.1,0)
SERIALIZATION CONTROL^998.1
"^DIC",998.1,998.1,0,"GL")
^RGSER(998.1,
"^DIC",998.1,998.1,"%D",0)
^^1^1^3150211.113842
"^DIC",998.1,998.1,"%D",1,0)
Supports serialization of domain objects.
"^DIC",998.1,"B","SERIALIZATION CONTROL",998.1)

"^DIC",999.2,999.2,0)
CAREWEB PATIENT LIST^999.2
"^DIC",999.2,999.2,0,"GL")
^RGCWF(999.2,
"^DIC",999.2,"B","CAREWEB PATIENT LIST",999.2)

"^DIC",999.201,999.201,0)
CAREWEB NOTIFICATION CONTROL^999.201
"^DIC",999.201,999.201,0,"GL")
^RGCWF(999.201,
"^DIC",999.201,"B","CAREWEB NOTIFICATION CONTROL",999.201)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

**INSTALL NAME**
CAREWEB RPMS ENHANCEMENTS 1.0
"BLD",8497,0)
CAREWEB RPMS ENHANCEMENTS 1.0^^0^3150407^n
"BLD",8497,4,0)
^9.64PA^998.1^3
"BLD",8497,4,998.1,0)
998.1
"BLD",8497,4,998.1,222)
y^y^f^^n^^y^o^n
"BLD",8497,4,998.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8497,4,999.201,0)
999.201
"BLD",8497,4,999.201,222)
n^y^f^^y^^y^o^n
"BLD",8497,4,999.201,224)
I $$SCRN^RGCWKDTP(Y,4)
"BLD",8497,4,19941.21,0)
19941.21
"BLD",8497,4,19941.21,222)
n^y^f^^y^^y^o^n
"BLD",8497,4,19941.21,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8497,4,"B",998.1,998.1)

"BLD",8497,4,"B",999.201,999.201)

"BLD",8497,4,"B",19941.21,19941.21)

"BLD",8497,6.3)
164
"BLD",8497,"INI")
PRE^RGCWKDIN
"BLD",8497,"INIT")
POST^RGCWKDIN
"BLD",8497,"KRN",0)
^9.67PA^8994^20
"BLD",8497,"KRN",.4,0)
.4
"BLD",8497,"KRN",.401,0)
.401
"BLD",8497,"KRN",.402,0)
.402
"BLD",8497,"KRN",.403,0)
.403
"BLD",8497,"KRN",.5,0)
.5
"BLD",8497,"KRN",.84,0)
.84
"BLD",8497,"KRN",3.6,0)
3.6
"BLD",8497,"KRN",3.8,0)
3.8
"BLD",8497,"KRN",9.2,0)
9.2
"BLD",8497,"KRN",9.8,0)
9.8
"BLD",8497,"KRN",9.8,"NM",0)
^9.68A^^0
"BLD",8497,"KRN",19,0)
19
"BLD",8497,"KRN",19.1,0)
19.1
"BLD",8497,"KRN",101,0)
101
"BLD",8497,"KRN",409.61,0)
409.61
"BLD",8497,"KRN",771,0)
771
"BLD",8497,"KRN",779.2,0)
779.2
"BLD",8497,"KRN",870,0)
870
"BLD",8497,"KRN",8989.51,0)
8989.51
"BLD",8497,"KRN",8989.51,"NM",0)
^9.68A^^0
"BLD",8497,"KRN",8989.52,0)
8989.52
"BLD",8497,"KRN",8994,0)
8994
"BLD",8497,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",8497,"KRN",8994,"NM",1,0)
BEHOPTPL LISTINFO1^^0
"BLD",8497,"KRN",8994,"NM","B","BEHOPTPL LISTINFO1",1)

"BLD",8497,"KRN","B",.4,.4)

"BLD",8497,"KRN","B",.401,.401)

"BLD",8497,"KRN","B",.402,.402)

"BLD",8497,"KRN","B",.403,.403)

"BLD",8497,"KRN","B",.5,.5)

"BLD",8497,"KRN","B",.84,.84)

"BLD",8497,"KRN","B",3.6,3.6)

"BLD",8497,"KRN","B",3.8,3.8)

"BLD",8497,"KRN","B",9.2,9.2)

"BLD",8497,"KRN","B",9.8,9.8)

"BLD",8497,"KRN","B",19,19)

"BLD",8497,"KRN","B",19.1,19.1)

"BLD",8497,"KRN","B",101,101)

"BLD",8497,"KRN","B",409.61,409.61)

"BLD",8497,"KRN","B",771,771)

"BLD",8497,"KRN","B",779.2,779.2)

"BLD",8497,"KRN","B",870,870)

"BLD",8497,"KRN","B",8989.51,8989.51)

"BLD",8497,"KRN","B",8989.52,8989.52)

"BLD",8497,"KRN","B",8994,8994)

"BLD",8497,"PRE")
RGCWKDIN
"BLD",8497,"PRET")
PRETRANS^RGCWKDTP
"BLD",8497,"QUES",0)
^9.62^^
"BLD",8497,"REQB",0)
^9.611^^
"FIA",998.1)
SERIALIZATION CONTROL
"FIA",998.1,0)
^RGSER(998.1,
"FIA",998.1,0,0)
998.1I
"FIA",998.1,0,1)
y^y^f^^n^^y^o^n
"FIA",998.1,0,10)

"FIA",998.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",998.1,0,"RLRO")

"FIA",998.1,998.1)
0
"FIA",998.1,998.11)
0
"FIA",998.1,998.12)
0
"FIA",998.1,998.13)
0
"FIA",998.1,998.14)
0
"FIA",998.1,998.15)
0
"FIA",998.1,998.151)
0
"FIA",998.1,998.199)
0
"FIA",999.201)
CAREWEB NOTIFICATION CONTROL
"FIA",999.201,0)
^RGCWF(999.201,
"FIA",999.201,0,0)
999.201
"FIA",999.201,0,1)
n^y^f^^y^^y^o^n
"FIA",999.201,0,10)

"FIA",999.201,0,11)
I $$SCRN^RGCWKDTP(Y,4)
"FIA",999.201,0,"RLRO")

"FIA",999.201,999.201)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
n^y^f^^y^^y^o^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",19941.21,0,"RLRO")

"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",8994,2683,-1)
0^1
"KRN",8994,2683,0)
BEHOPTPL LISTINFO1^LISTINFO^BEHOPTPL^1
"MBREQ")
1
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PGL",19941.21,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","RGCWKDIN")
0^^B31607711
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;01-Apr-2015 14:05;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 164
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^RGUT("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^RGUT($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^RGUTOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^RGUTRPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^RGUTRPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^RGUTUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^RGUTRPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RG","DG","DDR","BEH" D REGNMSP^RGUTRPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^RGUTRPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^RGUTRPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^RGUTRPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"SEC","^DIC",998.1,998.1,0,"AUDIT")
@
"SEC","^DIC",998.1,998.1,0,"DD")
@
"SEC","^DIC",998.1,998.1,0,"DEL")
@
"SEC","^DIC",998.1,998.1,0,"LAYGO")
@
"SEC","^DIC",998.1,998.1,0,"RD")
@
"SEC","^DIC",998.1,998.1,0,"WR")
@
"SEC","^DIC",999.201,999.201,0,"AUDIT")
@
"SEC","^DIC",999.201,999.201,0,"DD")
@
"SEC","^DIC",999.201,999.201,0,"DEL")
@
"SEC","^DIC",999.201,999.201,0,"LAYGO")
@
"SEC","^DIC",999.201,999.201,0,"RD")
@
"SEC","^DIC",999.201,999.201,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")
D REGCTX^CIAURPC("CIAV VUECENTRIC","RGCWF CAREWEB FRAMEWORK")
"TEMP","INITIAL")

"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","TGT")
11
"VER")
8.0^22.0
"^DD",998.1,998.1,0)
FIELD^^99^7
"^DD",998.1,998.1,0,"DDA")
N
"^DD",998.1,998.1,0,"DT")
3150316
"^DD",998.1,998.1,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",998.1,998.1,0,"IX","B",998.1,.01)

"^DD",998.1,998.1,0,"NM","SERIALIZATION CONTROL")

"^DD",998.1,998.1,0,"PT",999.991,.01)

"^DD",998.1,998.1,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<1)!'(X'?1P.E) X
"^DD",998.1,998.1,.01,1,0)
^.1
"^DD",998.1,998.1,.01,1,1,0)
998.1^B
"^DD",998.1,998.1,.01,1,1,1)
S ^RGSER(998.1,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.1,.01,1,1,2)
K ^RGSER(998.1,"B",$E(X,1,30),DA)
"^DD",998.1,998.1,.01,3)
Replace Name of the serialization type (1-30 characters).
"^DD",998.1,998.1,.01,21,0)
^^3^3^3150310.204501
"^DD",998.1,998.1,.01,21,1,0)
This is the portion of the request URL that identifies the serialization format
"^DD",998.1,998.1,.01,21,2,0)
of the requested resource.  It is first part of the path portion of the URL.
"^DD",998.1,998.1,.01,21,3,0)
The name and associated content type together should be unique within the file.
"^DD",998.1,998.1,.01,"DT")
3150211
"^DD",998.1,998.1,1,0)
CONTENT TYPE^F^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.1,1,3)
Content type(s) generated by this serializer.
"^DD",998.1,998.1,1,21,0)
^^6^6^3150315.140532
"^DD",998.1,998.1,1,21,1,0)
These are the content types (separated by commas) that are used to match 
"^DD",998.1,998.1,1,21,2,0)
against the requested content type.  It is used to match the requestor's 
"^DD",998.1,998.1,1,21,3,0)
desired content type.  This allows having multiple entries with the same name, 
"^DD",998.1,998.1,1,21,4,0)
but different content types.  By default, the first value of this entry is 
"^DD",998.1,998.1,1,21,5,0)
returned as the Content-Type in the response header.  However, the serializer 
"^DD",998.1,998.1,1,21,6,0)
may opt to override this value with a more specific MIME type. 
"^DD",998.1,998.1,1,"DT")
3150315
"^DD",998.1,998.1,2,0)
SERIALIZER^F^^0;3^K:$L(X)>10!($L(X)<1)!'(X?1.A0.AN) X
"^DD",998.1,998.1,2,3)
Name of serialization routine.
"^DD",998.1,998.1,2,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.1,2,21,1,0)
The specified serializer routine must implement the Serializer interface.
"^DD",998.1,998.1,2,"DT")
3150211
"^DD",998.1,998.1,3,0)
VERSION^F^^0;4^K:$L(X)>20!($L(X)<1) X
"^DD",998.1,998.1,3,3)
Version of this serializer (1-20 characters).
"^DD",998.1,998.1,3,21,0)
^^1^1^3150312.172833
"^DD",998.1,998.1,3,21,1,0)
This represents the version of the format the serializer is generating.
"^DD",998.1,998.1,3,"DT")
3150312
"^DD",998.1,998.1,10,0)
RESOURCE^998.11^^10;0
"^DD",998.1,998.1,10,21,0)
^.001^4^4^3150310^^
"^DD",998.1,998.1,10,21,1,0)
This is the portion of the path of the request URL that follows the 
"^DD",998.1,998.1,10,21,2,0)
serialization specifier.  It may include the wildcard characters # (for 
"^DD",998.1,998.1,10,21,3,0)
matching any sequence of digits) and * (for matching any sequence of 
"^DD",998.1,998.1,10,21,4,0)
characters).
"^DD",998.1,998.1,20,0)
HEADER FIELDS^998.14^^20;0
"^DD",998.1,998.1,20,"DT")
3150228
"^DD",998.1,998.1,99,0)
DESCRIPTION^998.199^^99;0
"^DD",998.1,998.11,0)
RESOURCE SUB-FIELD^^50^9
"^DD",998.1,998.11,0,"DT")
3150310
"^DD",998.1,998.11,0,"IX","B",998.11,.01)

"^DD",998.1,998.11,0,"IX","C",998.11,.01)

"^DD",998.1,998.11,0,"NM","RESOURCE")

"^DD",998.1,998.11,0,"UP")
998.1
"^DD",998.1,998.11,.01,0)
RESOURCE^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.11,.01,1,0)
^.1^^-1
"^DD",998.1,998.11,.01,1,1,0)
998.11^B^MUMPS
"^DD",998.1,998.11,.01,1,1,1)
S ^RGSER(998.1,DA(1),10,"B",X,DA)=$$TOPTRN^RGSERDD(X)
"^DD",998.1,998.11,.01,1,1,2)
K ^RGSER(998.1,DA(1),10,"B",X,DA)
"^DD",998.1,998.11,.01,1,1,"DT")
3150308
"^DD",998.1,998.11,.01,1,2,0)
998.11^C^MUMPS
"^DD",998.1,998.11,.01,1,2,1)
S ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)=""
"^DD",998.1,998.11,.01,1,2,2)
K ^RGSER(998.1,DA(1),10,"C",$$UP^XLFSTR(X),DA)
"^DD",998.1,998.11,.01,1,2,"DT")
3150211
"^DD",998.1,998.11,.01,3)
Enter path name for the resource.
"^DD",998.1,998.11,.01,"DT")
3150308
"^DD",998.1,998.11,1,0)
INTERNAL^S^0:NO;1:YES;^0;2^Q
"^DD",998.1,998.11,1,3)
Enter YES if this is an internal resource.
"^DD",998.1,998.11,1,21,0)
^^3^3^3150310.205212
"^DD",998.1,998.11,1,21,1,0)
If set to YES, this resource is internal to the server and may not be 
"^DD",998.1,998.11,1,21,2,0)
referenced directly.  Any attempt to request an internal resource will return 
"^DD",998.1,998.11,1,21,3,0)
an error.
"^DD",998.1,998.11,1,"DT")
3150221
"^DD",998.1,998.11,2,0)
SOURCE^NJ10,4XO^^0;3^K:'$$VFILE^DILFD(X) X
"^DD",998.1,998.11,2,2)
S Y(0)=Y S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,2.1)
S Y=Y_" ("_$P($G(^DIC(Y,0),^DD(Y,0)),U)_")"
"^DD",998.1,998.11,2,3)
Enter a file or subfile number.
"^DD",998.1,998.11,2,21,0)
^^2^2^3150310.205524
"^DD",998.1,998.11,2,21,1,0)
This is the number of the file or subfile from which the resource will be
"^DD",998.1,998.11,2,21,2,0)
extracted.  For resources that are derived, this field may be null.
"^DD",998.1,998.11,2,"DT")
3150211
"^DD",998.1,998.11,10,0)
CUSTOM SERIALIZER^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,10,3)
M code to invoke custom serializer.
"^DD",998.1,998.11,10,9)
@
"^DD",998.1,998.11,10,21,0)
^^4^4^3150310.205835
"^DD",998.1,998.11,10,21,1,0)
For resources that use a custom serializer, this field contains executable M 
"^DD",998.1,998.11,10,21,2,0)
code that performs the serialization.  When this field is non-null, the 
"^DD",998.1,998.11,10,21,3,0)
default serialization code is not executed unless the custom serializer kills 
"^DD",998.1,998.11,10,21,4,0)
the XSER variable before returning control.
"^DD",998.1,998.11,10,"DT")
3150211
"^DD",998.1,998.11,20,0)
CUSTOM READER^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.11,20,3)
M code to invoke custom retrieval logic.
"^DD",998.1,998.11,20,9)
@
"^DD",998.1,998.11,20,21,0)
^.001^16^16^3150312^
"^DD",998.1,998.11,20,21,1,0)
This field contains custom retrieval logic for resources that require it.  It
"^DD",998.1,998.11,20,21,2,0)
should return a single instance of a resource given its unique identifier using
"^DD",998.1,998.11,20,21,3,0)
the VALS array in the format:
"^DD",998.1,998.11,20,21,4,0)

"^DD",998.1,998.11,20,21,5,0)
       VALS(FILE,IENS,<property>,<int/ext>)=<value>
"^DD",998.1,998.11,20,21,6,0)

"^DD",998.1,998.11,20,21,7,0)
where
"^DD",998.1,998.11,20,21,8,0)

"^DD",998.1,998.11,20,21,9,0)
       <property> = The property's name.
"^DD",998.1,998.11,20,21,10,0)
       <int/ext>  = "I" or "E" for representing internal and external values,
"^DD",998.1,998.11,20,21,11,0)
                    respectively.
"^DD",998.1,998.11,20,21,12,0)
       <value>    = The property's value.
"^DD",998.1,998.11,20,21,13,0)

"^DD",998.1,998.11,20,21,14,0)
Note that even if custom retrieval logic is provided, the default retrieval
"^DD",998.1,998.11,20,21,15,0)
logic will also be executed if the value of the FILE variable (from the SOURCE
"^DD",998.1,998.11,20,21,16,0)
field) is non-zero.
"^DD",998.1,998.11,20,"DT")
3150312
"^DD",998.1,998.11,30,0)
PROPERTY^998.12I^^30;0
"^DD",998.1,998.11,30,21,0)
^.001^1^1^3150310^
"^DD",998.1,998.11,30,21,1,0)
This is the list of properties for the given resource.
"^DD",998.1,998.11,40,0)
PARAMETER^998.13I^^40;0
"^DD",998.1,998.11,40,21,0)
^^5^5^3150310.211659
"^DD",998.1,998.11,40,21,1,0)
This is the list of searchable parameters supported for the resource.  These 
"^DD",998.1,998.11,40,21,2,0)
serve two purposes.  First, they define the logic for determining a match for 
"^DD",998.1,998.11,40,21,3,0)
the given search parameter.  Second, they may define a cohort selector for a 
"^DD",998.1,998.11,40,21,4,0)
given search parameter.  Cohort selectors optimize search strategy depending 
"^DD",998.1,998.11,40,21,5,0)
on which search parameters are selected.
"^DD",998.1,998.11,50,0)
TEMPLATE^998.15^^50;0
"^DD",998.1,998.11,50,21,0)
^^8^8^3150312.154427
"^DD",998.1,998.11,50,21,1,0)
Templates may be referenced by properties to generate output from the 
"^DD",998.1,998.11,50,21,2,0)
serializer. They may contain replaceable parameters enclosed between "|" 
"^DD",998.1,998.11,50,21,3,0)
characters.  If a replaceable parameter starts with an "@" or "#" character, 
"^DD",998.1,998.11,50,21,4,0)
it is assumed to be an M expression whose value is inserted into the 
"^DD",998.1,998.11,50,21,5,0)
generated output.  Otherwise, it is assumed to be a field identifier whose 
"^DD",998.1,998.11,50,21,6,0)
value is inserted.  Except for "#"-prefixed expressions, any reserved 
"^DD",998.1,998.11,50,21,7,0)
characters in the replacement value will be escaped according to the rules
"^DD",998.1,998.11,50,21,8,0)
specified by the serializer.
"^DD",998.1,998.11,99,0)
DESCRIPTION^F^^99;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.11,99,3)
Enter brief description of this resource.
"^DD",998.1,998.11,99,21,0)
^^1^1^3150310.21222
"^DD",998.1,998.11,99,21,1,0)
Provides a detailed description of the associated resource.
"^DD",998.1,998.11,99,"DT")
3150211
"^DD",998.1,998.12,0)
PROPERTY SUB-FIELD^^10^5
"^DD",998.1,998.12,0,"DT")
3150310
"^DD",998.1,998.12,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.12,0,"IX","ASEQ",998.12,3)

"^DD",998.1,998.12,0,"IX","B",998.12,.01)

"^DD",998.1,998.12,0,"NM","PROPERTY")

"^DD",998.1,998.12,0,"UP")
998.11
"^DD",998.1,998.12,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.12,.01,1,0)
^.1
"^DD",998.1,998.12,.01,1,1,0)
998.12^B
"^DD",998.1,998.12,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.12,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"B",$E(X,1,30),DA)
"^DD",998.1,998.12,.01,3)
Property name to be used in serialization.
"^DD",998.1,998.12,.01,21,0)
^^8^8^3150311.183527
"^DD",998.1,998.12,.01,21,1,0)
This is the name that identifies the property.  It is typically the name that 
"^DD",998.1,998.12,.01,21,2,0)
is emitted by the serializer, but this is not a requirement. An arbitrary tag 
"^DD",998.1,998.12,.01,21,3,0)
may also be appended to the property name using the "!" character as a 
"^DD",998.1,998.12,.01,21,4,0)
delimiter.  This may be used to provide additional information about the 
"^DD",998.1,998.12,.01,21,5,0)
entry.  For example, if a property requires multiple entries to implement the 
"^DD",998.1,998.12,.01,21,6,0)
logic required to emit it, the tag can provide information to the user as to 
"^DD",998.1,998.12,.01,21,7,0)
the role each entry plays.  For any given entry, the serializer may choose to 
"^DD",998.1,998.12,.01,21,8,0)
apply additional significance to the tag.
"^DD",998.1,998.12,.01,"DT")
3150311
"^DD",998.1,998.12,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.12,1,3)
Field name or # corresponding to this property
"^DD",998.1,998.12,1,21,0)
^^7^7^3150311.184042
"^DD",998.1,998.12,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved
"^DD",998.1,998.12,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.12,1,21,3,0)
retrieved for the specified fields are available to the serializer.  Where the
"^DD",998.1,998.12,1,21,4,0)
SOURCE is a FileMan file or subfile, the field is the field # (or name).  For 
"^DD",998.1,998.12,1,21,5,0)
resources using custom retrieval logic, the field is the identifier assigned 
"^DD",998.1,998.12,1,21,6,0)
by that logic.  For properties that do not require source data (such as a 
"^DD",998.1,998.12,1,21,7,0)
static property), this entry may be left blank.
"^DD",998.1,998.12,1,"DT")
3150311
"^DD",998.1,998.12,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;I:INLINE;T:TEMPLATE;S:STATIC;N:NOP;^0;3^Q
"^DD",998.1,998.12,2,3)
Encoding type for this property.
"^DD",998.1,998.12,2,21,0)
^^15^15^3150310.21405
"^DD",998.1,998.12,2,21,1,0)
Represents the type of property.  Possible values are:
"^DD",998.1,998.12,2,21,2,0)
   B = BOOLEAN         - Emits a property value that is true or false.
"^DD",998.1,998.12,2,21,3,0)
   C = CUSTOM          - The associated custom code emits the property value.
"^DD",998.1,998.12,2,21,4,0)
   D = DATE            - Emits a property value that is a date.
"^DD",998.1,998.12,2,21,5,0)
   F = FREE TEXT       - Emits the external value of the property.
"^DD",998.1,998.12,2,21,6,0)
   I = INLINE          - Inserts a serialized object inline.
"^DD",998.1,998.12,2,21,7,0)
   N = NOP             - Causes the property to be ignored.
"^DD",998.1,998.12,2,21,8,0)
   M = MULTIPLE        - The property is a subfile multiple.
"^DD",998.1,998.12,2,21,9,0)
   O = OBJECT          - Invokes serialization logic for the specified object.
"^DD",998.1,998.12,2,21,10,0)
   R = RAW             - Emits the internal value of the property.
"^DD",998.1,998.12,2,21,11,0)
   S = STATIC          - Emits a static value for the property.
"^DD",998.1,998.12,2,21,12,0)
   T = TEMPLATE        - Emits the specified template.
"^DD",998.1,998.12,2,21,13,0)
   W = WORD PROCESSING - Emits a word processing value.
"^DD",998.1,998.12,2,21,14,0)

"^DD",998.1,998.12,2,21,15,0)
For more information, see the description of the CONTROL field.
"^DD",998.1,998.12,2,"DT")
3150310
"^DD",998.1,998.12,3,0)
SEQUENCE^RNJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.12,3,1,0)
^.1
"^DD",998.1,998.12,3,1,1,0)
998.12^ASEQ
"^DD",998.1,998.12,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.12,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),30,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.12,3,1,1,"DT")
3150211
"^DD",998.1,998.12,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.12,3,21,0)
^^3^3^3150311.184411
"^DD",998.1,998.12,3,21,1,0)
This is a numerical sequence # that determines the order in which the 
"^DD",998.1,998.12,3,21,2,0)
serializer processes property entries, and, thus, the order in which 
"^DD",998.1,998.12,3,21,3,0)
properties are emitted by the serializer.
"^DD",998.1,998.12,3,"DT")
3150311
"^DD",998.1,998.12,10,0)
CONTROL^FX^^10;E1,250^D ITXCTRL^RGSERDD(.X,.DA)
"^DD",998.1,998.12,10,3)
Enter control data.
"^DD",998.1,998.12,10,21,0)
^^10^10^3150311.184552
"^DD",998.1,998.12,10,21,1,0)
The content of this field depends on the value of the TYPE field.  For those
"^DD",998.1,998.12,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",998.1,998.12,10,21,3,0)

"^DD",998.1,998.12,10,21,4,0)
  C (CUSTOM)          - Executable M code.
"^DD",998.1,998.12,10,21,5,0)
  I (INLINE)          - Path for inline resource.
"^DD",998.1,998.12,10,21,6,0)
  O (OBJECT)          - Path for the target object.
"^DD",998.1,998.12,10,21,7,0)
  M (MULTIPLE)        - Path for the multiple entry.
"^DD",998.1,998.12,10,21,8,0)
  S (STATIC)          - The static value of the property.
"^DD",998.1,998.12,10,21,9,0)
  W (WORD PROCESSING) - Line delimiter to use (escaped characters supported).
"^DD",998.1,998.12,10,21,10,0)

"^DD",998.1,998.12,10,"DT")
3150311
"^DD",998.1,998.13,0)
PARAMETER SUB-FIELD^^10^6
"^DD",998.1,998.13,0,"DT")
3150211
"^DD",998.1,998.13,0,"ID",3)
W "   ",$P(^(0),U,4)
"^DD",998.1,998.13,0,"IX","ASEQ",998.13,3)

"^DD",998.1,998.13,0,"IX","B",998.13,.01)

"^DD",998.1,998.13,0,"NM","PARAMETER")

"^DD",998.1,998.13,0,"UP")
998.11
"^DD",998.1,998.13,.01,0)
PARAMETER^MF^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",998.1,998.13,.01,1,0)
^.1
"^DD",998.1,998.13,.01,1,1,0)
998.13^B
"^DD",998.1,998.13,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.13,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"B",$E(X,1,30),DA)
"^DD",998.1,998.13,.01,3)
Enter name of search parameter.
"^DD",998.1,998.13,.01,21,0)
^^1^1^3150311.184801
"^DD",998.1,998.13,.01,21,1,0)
This is the identifier of the parameter as it would appear in a query.
"^DD",998.1,998.13,.01,"DT")
3150311
"^DD",998.1,998.13,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",998.1,998.13,1,3)
Field name or # corresponding to this parameter.
"^DD",998.1,998.13,1,21,0)
^^6^6^3150311.185216
"^DD",998.1,998.13,1,21,1,0)
This is the source identifier that identifies the data field to be retrieved 
"^DD",998.1,998.13,1,21,2,0)
from the source.  Multiple fields may be separated with commas.  Values 
"^DD",998.1,998.13,1,21,3,0)
retrieved for the specified fields are available to the serializer when 
"^DD",998.1,998.13,1,21,4,0)
formulating a search query.  Where the SOURCE is a FileMan file or subfile, 
"^DD",998.1,998.13,1,21,5,0)
the field is the field # (or name).  For resources using custom retrieval 
"^DD",998.1,998.13,1,21,6,0)
logic, the field is the identifier assigned by that logic. 
"^DD",998.1,998.13,1,"DT")
3150311
"^DD",998.1,998.13,2,0)
TYPE^S^N:NUMBER;D:DATE;S:STRING;T:TOKEN;R:REFERENCE;Q:QUANTITY;^0;3^Q
"^DD",998.1,998.13,2,3)
Type of the search parameter.
"^DD",998.1,998.13,2,21,0)
^^12^12^3150311.190219
"^DD",998.1,998.13,2,21,1,0)
The parameter type determines the allowable comparison operators and the logic 
"^DD",998.1,998.13,2,21,2,0)
used to implement them.
"^DD",998.1,998.13,2,21,3,0)

"^DD",998.1,998.13,2,21,4,0)
The following parameter types are recognized:
"^DD",998.1,998.13,2,21,5,0)

"^DD",998.1,998.13,2,21,6,0)
       N        NUMBER     - The parameter is a numeric value.
"^DD",998.1,998.13,2,21,7,0)
       D        DATE       - The parameter is a date value.
"^DD",998.1,998.13,2,21,8,0)
       S        STRING     - The parameter is a text string.
"^DD",998.1,998.13,2,21,9,0)
       T        TOKEN      - The parameter is a special token.
"^DD",998.1,998.13,2,21,10,0)
       R        REFERENCE  - The parameter is a resource reference.
"^DD",998.1,998.13,2,21,11,0)
       Q        QUANTITY   - The parameter is a quantity.
"^DD",998.1,998.13,2,21,12,0)
 
"^DD",998.1,998.13,2,"DT")
3150311
"^DD",998.1,998.13,3,0)
SEQUENCE^NJ10,4^^0;4^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."5N.N) X
"^DD",998.1,998.13,3,1,0)
^.1
"^DD",998.1,998.13,3,1,1,0)
998.13^ASEQ
"^DD",998.1,998.13,3,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)=""
"^DD",998.1,998.13,3,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),40,"ASEQ",$E(X,1,30),DA)
"^DD",998.1,998.13,3,1,1,"DT")
3150211
"^DD",998.1,998.13,3,3)
Enter sequence number for process ordering.
"^DD",998.1,998.13,3,21,0)
^^3^3^3150311.190416
"^DD",998.1,998.13,3,21,1,0)
The sequence # determines the order the serializer uses in processing 
"^DD",998.1,998.13,3,21,2,0)
parameters.  This can be important in determining optimal search strategy 
"^DD",998.1,998.13,3,21,3,0)
where multiple parameters are specified.
"^DD",998.1,998.13,3,"DT")
3150311
"^DD",998.1,998.13,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",998.1,998.13,10,3)
M code to perform filtering.
"^DD",998.1,998.13,10,"DT")
3150211
"^DD",998.1,998.13,20,0)
COHORT^K^^20;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",998.1,998.13,20,3)
M code to set global selector into X.
"^DD",998.1,998.13,20,9)
@
"^DD",998.1,998.13,20,"DT")
3150211
"^DD",998.1,998.14,0)
HEADER FIELDS SUB-FIELD^^.01^1
"^DD",998.1,998.14,0,"DT")
3150228
"^DD",998.1,998.14,0,"NM","HEADER FIELDS")

"^DD",998.1,998.14,0,"UP")
998.1
"^DD",998.1,998.14,.01,0)
HEADER FIELDS^WLx^^0;1^Q
"^DD",998.1,998.14,.01,3)
Additional fields to be included in the HTTP response header.
"^DD",998.1,998.14,.01,"DT")
3150228
"^DD",998.1,998.15,0)
TEMPLATE SUB-FIELD^^1^2
"^DD",998.1,998.15,0,"DT")
3150309
"^DD",998.1,998.15,0,"IX","B",998.15,.01)

"^DD",998.1,998.15,0,"NM","TEMPLATE")

"^DD",998.1,998.15,0,"UP")
998.11
"^DD",998.1,998.15,.01,0)
TEMPLATE^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",998.1,998.15,.01,1,0)
^.1
"^DD",998.1,998.15,.01,1,1,0)
998.15^B
"^DD",998.1,998.15,.01,1,1,1)
S ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)=""
"^DD",998.1,998.15,.01,1,1,2)
K ^RGSER(998.1,DA(2),10,DA(1),50,"B",$E(X,1,30),DA)
"^DD",998.1,998.15,.01,3)
Answer must be 1-30 characters in length.
"^DD",998.1,998.15,.01,"DT")
3150309
"^DD",998.1,998.15,1,0)
CONTENT^998.151^^1;0
"^DD",998.1,998.151,0)
CONTENT SUB-FIELD^^.01^1
"^DD",998.1,998.151,0,"DT")
3150309
"^DD",998.1,998.151,0,"NM","CONTENT")

"^DD",998.1,998.151,0,"UP")
998.15
"^DD",998.1,998.151,.01,0)
CONTENT^WLx^^0;1^Q
"^DD",998.1,998.151,.01,"DT")
3150309
"^DD",998.1,998.199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",998.1,998.199,0,"DT")
3150316
"^DD",998.1,998.199,0,"NM","DESCRIPTION")

"^DD",998.1,998.199,0,"UP")
998.1
"^DD",998.1,998.199,.01,0)
DESCRIPTION^WLx^^0;1^Q
"^DD",998.1,998.199,.01,3)
Enter a description of this endpoint using HTML formatting.
"^DD",998.1,998.199,.01,21,0)
^^2^2^3150316.133317
"^DD",998.1,998.199,.01,21,1,0)
The content of this field will be returned if a request is directed to this 
"^DD",998.1,998.199,.01,21,2,0)
endpoint's root URL. 
"^DD",998.1,998.199,.01,"DT")
3150316
"^DD",999.201,999.201,0)
FIELD^^4^5
"^DD",999.201,999.201,0,"IX","B",999.201,.01)

"^DD",999.201,999.201,0,"NM","CAREWEB NOTIFICATION CONTROL")

"^DD",999.201,999.201,0,"PT",999.994,.01)

"^DD",999.201,999.201,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",999.201,999.201,.01,1,0)
^.1
"^DD",999.201,999.201,.01,1,1,0)
999.201^B
"^DD",999.201,999.201,.01,1,1,1)
S ^RGCWF(999.201,"B",$E(X,1,30),DA)=""
"^DD",999.201,999.201,.01,1,1,2)
K ^RGCWF(999.201,"B",$E(X,1,30),DA)
"^DD",999.201,999.201,.01,3)
Answer must be 2-30 characters in length.
"^DD",999.201,999.201,.01,"DT")
3030805
"^DD",999.201,999.201,1,0)
IDENT^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,1,3)
Code to check notification identity.  Set $T to true for positive match.
"^DD",999.201,999.201,1,9)
@
"^DD",999.201,999.201,1,21,0)
^^1^1^3030804.150811
"^DD",999.201,999.201,1,21,1,0)
Should check the notification identifier in AID and set $T to true if a match.
"^DD",999.201,999.201,1,"DT")
3030804
"^DD",999.201,999.201,2,0)
PARSE^RK^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,2,3)
Code to parse data elements from notification.
"^DD",999.201,999.201,2,9)
@
"^DD",999.201,999.201,2,21,0)
^^8^8^3030804.170957
"^DD",999.201,999.201,2,21,1,0)
Code to parse standard data elements from notification.  Elements should be
"^DD",999.201,999.201,2,21,2,0)
returned in ALR array as follows:
"^DD",999.201,999.201,2,21,3,0)

"^DD",999.201,999.201,2,21,4,0)
ALR("DFN")=Patient IEN (if patient-orientation)
"^DD",999.201,999.201,2,21,5,0)
ALR("INF")=Info only flag
"^DD",999.201,999.201,2,21,6,0)
ALR("TYP")=Notification type code
"^DD",999.201,999.201,2,21,7,0)
ALR("PRI")=Priority code
"^DD",999.201,999.201,2,21,8,0)
ALR("XTR")=Additional data
"^DD",999.201,999.201,2,"DT")
3030804
"^DD",999.201,999.201,3,0)
PROCESS^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,3,3)
Post processing logic for alert.
"^DD",999.201,999.201,3,9)
@
"^DD",999.201,999.201,3,"DT")
3030805
"^DD",999.201,999.201,4,0)
UPDATE^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,4,3)
Optional logic to update alerts for current user.
"^DD",999.201,999.201,4,9)
@
"^DD",999.201,999.201,4,21,0)
^^2^2^3080128.135828
"^DD",999.201,999.201,4,21,1,0)
This logic provides the opportunity to update alerts (add or delete) 
"^DD",999.201,999.201,4,21,2,0)
for the current user prior to retrieving them.
"^DD",999.201,999.201,4,"DT")
3080128
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DIC",998.1,998.1,0)
SERIALIZATION CONTROL^998.1
"^DIC",998.1,998.1,0,"GL")
^RGSER(998.1,
"^DIC",998.1,998.1,"%D",0)
^^1^1^3150211.113842
"^DIC",998.1,998.1,"%D",1,0)
Supports serialization of domain objects.
"^DIC",998.1,"B","SERIALIZATION CONTROL",998.1)

"^DIC",999.201,999.201,0)
CAREWEB NOTIFICATION CONTROL^999.201
"^DIC",999.201,999.201,0,"GL")
^RGCWF(999.201,
"^DIC",999.201,"B","CAREWEB NOTIFICATION CONTROL",999.201)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

**END**
**END**
